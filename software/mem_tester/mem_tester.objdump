
mem_tester.elf:     file format elf32-littlenios2
mem_tester.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0000c89c memsz 0x0000c89c flags r-x
    LOAD off    0x0000d8bc vaddr 0x0400c8bc paddr 0x0400e314 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x0000fd6c vaddr 0x0400fd6c paddr 0x0400fd6c align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c33c  040001b8  040001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c8  0400c4f4  0400c4f4  0000d4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0400c8bc  0400e314  0000d8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0400fd6c  0400fd6c  0000fd6c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000f314  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d80  00000000  00000000  0000f338  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000243a9  00000000  00000000  000100b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000092c5  00000000  00000000  00034461  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a5f8  00000000  00000000  0003d726  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000184c  00000000  00000000  00047d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002d93  00000000  00000000  0004956c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001102d  00000000  00000000  0004c2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0005d32c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005d340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00060d3a  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00060d3d  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00060d49  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00060d4a  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00060d4b  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00060d4f  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00060d53  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00060d57  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00060d62  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00060d6d  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00060d78  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002a  00000000  00000000  00060d83  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005c4fa  00000000  00000000  00060dad  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b8 l    d  .text	00000000 .text
0400c4f4 l    d  .rodata	00000000 .rodata
0400c8bc l    d  .rwdata	00000000 .rwdata
0400fd6c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mem_tester_bsp//obj/HAL/src/crt0.o
040001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
040006c0 l     F .text	00000034 __sprint_r
0400c5da l     O .rodata	00000010 blanks.3546
0400c5ea l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04002708 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04004178 l     F .text	00000008 __fp_lock
04004180 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0400c8bc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0400c620 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0400c768 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
04008984 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
040096b4 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04009e48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04009f64 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04009f90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400a090 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400a184 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400a270 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400a44c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400e304 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400a6c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400a800 l     F .text	00000038 alt_dev_reg
0400d278 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400aad8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0400acdc l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400b470 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400b8fc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400ba54 l     F .text	00000050 alt_get_errno
0400baa4 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
04000580 g     F .text	0000001c putchar
04006b5c g     F .text	00000074 _mprec_log10
04006c4c g     F .text	00000084 __any_on
04007bd0 g     F .text	00000064 _isatty_r
0400c650 g     O .rodata	00000028 __mprec_tinytens
0400a394 g     F .text	00000078 alt_main
04009e04 g     F .text	00000044 __ashldi3
0400059c g     F .text	00000084 _puts_r
0400fdc8 g     O .bss	00000100 alt_irq
04007c34 g     F .text	0000006c _lseek_r
0400e314 g       *ABS*	00000000 __flash_rwdata_start
04009224 g     F .text	0000005c __eqdf2
04010058 g       *ABS*	00000000 __alt_heap_start
0400053c g     F .text	0000003c printf
0400761c g     F .text	0000005c __sseek
0400421c g     F .text	0000010c __sinit
04007724 g     F .text	0000013c __swbuf_r
04004eb4 g     F .text	0000009c _setlocale_r
04004194 g     F .text	00000078 __sfmoreglue
0400a42c g     F .text	00000020 __malloc_unlock
04005af4 g     F .text	0000018c memmove
0400420c g     F .text	00000010 _cleanup
04005c80 g     F .text	000000a8 _Balloc
040092dc g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04007b68 g     F .text	00000068 _fstat_r
0400fd84 g     O .bss	00000004 errno
0400fd8c g     O .bss	00000004 alt_argv
040162d8 g       *ABS*	00000000 _gp
0400d0f8 g     O .rwdata	00000180 alt_fd_list
04000578 g     F .text	00000008 _putchar_r
0400bea8 g     F .text	00000090 alt_find_dev
040059b4 g     F .text	00000140 memcpy
04004188 g     F .text	0000000c _cleanup_r
04009400 g     F .text	000000d4 __floatsidf
0400b9dc g     F .text	00000078 alt_io_redirect
040093a4 g     F .text	0000005c __ltdf2
0400c4f4 g       *ABS*	00000000 __DTOR_END__
04000620 g     F .text	00000014 puts
04006ab8 g     F .text	000000a4 __ratio
0400aedc g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04000510 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
040097d4 g     F .text	00000008 __udivsi3
0400a0e0 g     F .text	000000a4 isatty
0400c6a0 g     O .rodata	000000c8 __mprec_tens
04004f50 g     F .text	0000000c __locale_charset
0400fd80 g     O .bss	00000004 __malloc_top_pad
0400e2e0 g     O .rwdata	00000004 __mb_cur_max
04004f5c g     F .text	0000000c _localeconv_r
040060b0 g     F .text	0000003c __i2b
04004870 g     F .text	000004e4 __sfvwrite_r
040074dc g     F .text	00000064 _sbrk_r
04007ca0 g     F .text	0000006c _read_r
0400ccbc g     O .rwdata	0000000c __lc_ctype
0400e2fc g     O .rwdata	00000004 alt_max_fd
04009bec g     F .text	00000104 __unpack_d
04007a18 g     F .text	0000013c _fclose_r
04004148 g     F .text	00000030 fflush
0400fd7c g     O .bss	00000004 __malloc_max_sbrked_mem
04008cd8 g     F .text	00000054 __adddf3
0400682c g     F .text	00000148 __b2d
0400835c g     F .text	00000628 __umoddi3
0400a2c0 g     F .text	000000d4 lseek
0400e2d8 g     O .rwdata	00000004 _global_impure_ptr
04006e7c g     F .text	000005fc _realloc_r
04010058 g       *ABS*	00000000 __bss_end
0400b80c g     F .text	000000f0 alt_iic_isr_register
0400bd84 g     F .text	00000104 alt_tick
04007d0c g     F .text	00000650 __udivdi3
0400c678 g     O .rodata	00000028 __mprec_bigtens
04005e94 g     F .text	00000104 __s2b
04009598 g     F .text	0000011c __floatunsidf
040065cc g     F .text	00000058 __mcmp
04004434 g     F .text	00000018 __fp_lock_all
0400b7c0 g     F .text	0000004c alt_ic_irq_enabled
0400bcec g     F .text	00000098 alt_alarm_stop
0400fd94 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000cc alt_irq_handler
0400d0d0 g     O .rwdata	00000028 alt_dev_null
0400b454 g     F .text	0000001c alt_dcache_flush_all
04005f98 g     F .text	00000068 __hi0bits
040094d4 g     F .text	000000c4 __fixdfsi
0400e314 g       *ABS*	00000000 __ram_rwdata_end
0400e2f4 g     O .rwdata	00000008 alt_dev_list
0400a710 g     F .text	000000f0 write
04006cd0 g     F .text	000000bc _putc_r
0400c8bc g       *ABS*	00000000 __ram_rodata_end
04009fe0 g     F .text	000000b0 fstat
04009dc0 g     F .text	00000044 __lshrdi3
04006344 g     F .text	0000012c __pow5mult
0400fd74 g     O .bss	00000004 __nlocale_changed
040097dc g     F .text	00000008 __umodsi3
04010058 g       *ABS*	00000000 end
0400aa18 g     F .text	000000c0 altera_avalon_jtag_uart_init
0400c4f4 g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
0400991c g     F .text	000000ac __clzsi2
0400b0f4 g     F .text	00000220 altera_avalon_jtag_uart_write
04004424 g     F .text	00000004 __sfp_lock_acquire
040058bc g     F .text	000000f8 memchr
040006f4 g     F .text	00001e7c ___vfprintf_internal_r
040045a0 g     F .text	000002d0 _free_r
0400c318 g     F .text	000001a0 __call_exitprocs
0400fd70 g     O .bss	00000004 __mlocale_changed
0400e2e4 g     O .rwdata	00000004 __malloc_sbrk_base
040001b8 g     F .text	0000003c _start
0400fd98 g     O .bss	00000004 _alt_tick_rate
04006470 g     F .text	0000015c __lshift
0400fd9c g     O .bss	00000004 _alt_nticks
0400a49c g     F .text	000000f4 read
0400a86c g     F .text	00000048 alt_sys_init
0400c1e8 g     F .text	00000130 __register_exitproc
040060ec g     F .text	00000258 __multiply
0400ad80 g     F .text	00000068 altera_avalon_jtag_uart_close
040097e4 g     F .text	00000028 __mulsi3
0400c8bc g       *ABS*	00000000 __ram_rwdata_start
0400c4f4 g       *ABS*	00000000 __ram_rodata_start
0400fda0 g     O .bss	00000028 __malloc_current_mallinfo
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
04006974 g     F .text	00000144 __d2b
0400a8b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400c04c g     F .text	000000d4 alt_get_fd
04009cf0 g     F .text	000000d0 __fpcmp_parts_d
040079b4 g     F .text	00000064 _close_r
0400c16c g     F .text	0000007c memcmp
0400a974 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04010058 g       *ABS*	00000000 __alt_stack_base
0400a9c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002594 g     F .text	00000174 __swsetup_r
04009070 g     F .text	000001b4 __divdf3
04004328 g     F .text	000000fc __sfp
04006bd0 g     F .text	0000007c __copybits
0400ccc8 g     O .rwdata	00000408 __malloc_av_
04004430 g     F .text	00000004 __sinit_lock_release
04008d8c g     F .text	000002e4 __muldf3
04007540 g     F .text	00000054 __sread
0400bf38 g     F .text	00000114 alt_find_file
0400b4c0 g     F .text	000000a0 alt_dev_llist_insert
0400a40c g     F .text	00000020 __malloc_lock
0400a610 g     F .text	000000b0 sbrk
04003f60 g     F .text	000001e8 _fflush_r
040078e8 g     F .text	000000cc _calloc_r
0400fd6c g       *ABS*	00000000 __bss_start
04000434 g     F .text	000000dc memset
040001f4 g     F .text	00000240 main
0400fd90 g     O .bss	00000004 alt_envp
0400fd78 g     O .bss	00000004 __malloc_max_total_mem
0400a914 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04007860 g     F .text	0000001c __swbuf
04007678 g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
04007b54 g     F .text	00000014 fclose
0400fec8 g     O .bss	00000190 _atexit0
04002944 g     F .text	0000161c _dtoa_r
04005138 g     F .text	00000784 _malloc_r
0400e300 g     O .rwdata	00000004 alt_errno
04004d54 g     F .text	000000a8 _fwalk
04006d8c g     F .text	000000f0 putc
04009728 g     F .text	00000050 __divsi3
0400c774 g     O .rodata	00000014 __thenan_df
04004464 g     F .text	0000013c _malloc_trim_r
0400c4f4 g       *ABS*	00000000 __CTOR_END__
04007680 g     F .text	000000a4 strcmp
0400c4f4 g       *ABS*	00000000 __flash_rodata_start
0400c4f4 g       *ABS*	00000000 __DTOR_LIST__
04009280 g     F .text	0000005c __nedf2
0400a838 g     F .text	00000034 alt_irq_init
0400a590 g     F .text	00000080 alt_release_fd
0400c788 g     O .rodata	00000100 __clz_tab
0400fd6c g     O .bss	00000004 _PathLocale
0400c120 g     F .text	00000014 atexit
0400787c g     F .text	0000006c _write_r
04004f68 g     F .text	0000001c setlocale
0400e2dc g     O .rwdata	00000004 _impure_ptr
0400fd88 g     O .bss	00000004 alt_argc
0400b5bc g     F .text	0000005c _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
040067cc g     F .text	00000060 __ulp
04007478 g     F .text	00000038 __isinfd
0400444c g     F .text	00000018 __fp_unlock_all
0400e2ec g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04004f84 g     F .text	0000000c localeconv
0400b634 g     F .text	00000050 alt_ic_isr_register
0400e314 g       *ABS*	00000000 _edata
04010058 g       *ABS*	00000000 _end
040001b8 g       *ABS*	00000000 __ram_exceptions_end
0400ade8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0400b720 g     F .text	000000a0 alt_ic_irq_disable
04007594 g     F .text	00000088 __swrite
0400e2e8 g     O .rwdata	00000004 __malloc_trim_threshold
0400be88 g     F .text	00000020 altera_nios2_qsys_irq_init
0400c134 g     F .text	00000038 exit
04004dfc g     F .text	000000b8 _fwalk_reent
04006624 g     F .text	000001a8 __mdiff
04009778 g     F .text	0000005c __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04004428 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400c4b8 g     F .text	0000003c _exit
040074b0 g     F .text	0000002c __isnand
0400b314 g     F .text	00000140 alt_alarm_start
0400980c g     F .text	00000110 __muldi3
04004f90 g     F .text	000001a8 __smakebuf_r
04000634 g     F .text	0000008c strlen
0400bb94 g     F .text	00000158 open
04009340 g     F .text	00000064 __gedf2
0400b618 g     F .text	0000001c alt_icache_flush_all
0400e308 g     O .rwdata	00000004 alt_priority_mask
0400b684 g     F .text	0000009c alt_ic_irq_enable
04002570 g     F .text	00000024 __vfprintf_internal
04008d2c g     F .text	00000060 __subdf3
04006000 g     F .text	000000b0 __lo0bits
0400e30c g     O .rwdata	00000008 alt_alarm_list
0400b560 g     F .text	0000005c _do_ctors
04009e98 g     F .text	000000cc close
0400a1f0 g     F .text	00000080 alt_load
040099c8 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
0400442c g     F .text	00000004 __sinit_lock_acquire
04005d50 g     F .text	00000144 __multadd
04005d28 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08406e14 	ori	at,at,440
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001726 	beq	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00c10074 	movhi	r3,1025
 4000130:	18ff7204 	addi	r3,r3,-568
 4000134:	e0bffd17 	ldw	r2,-12(fp)
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	1885883a 	add	r2,r3,r2
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	01010074 	movhi	r4,1025
 4000148:	213f7204 	addi	r4,r4,-568
 400014c:	e0bffd17 	ldw	r2,-12(fp)
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	2085883a 	add	r2,r4,r2
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400017c:	e0bffb17 	ldw	r2,-20(fp)
 4000180:	103fe31e 	bne	r2,zero,4000110 <__alt_data_end+0xfe000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffc17 	ldw	r2,-16(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <__alt_data_end+0xfe00011c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a4:	e037883a 	mov	sp,fp
 40001a8:	dfc00117 	ldw	ra,4(sp)
 40001ac:	df000017 	ldw	fp,0(sp)
 40001b0:	dec00204 	addi	sp,sp,8
 40001b4:	f800283a 	ret

Disassembly of section .text:

040001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001b8:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001c0:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 40001c4:	d698b614 	ori	gp,gp,25304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001c8:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001cc:	10bf5b14 	ori	r2,r2,64876

    movhi r3, %hi(__bss_end)
 40001d0:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 40001d4:	18c01614 	ori	r3,r3,88

    beq r2, r3, 1f
 40001d8:	10c00326 	beq	r2,r3,40001e8 <_start+0x30>

0:
    stw zero, (r2)
 40001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e4:	10fffd36 	bltu	r2,r3,40001dc <__alt_data_end+0xfe0001dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001e8:	400a1f00 	call	400a1f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001ec:	400a3940 	call	400a394 <alt_main>

040001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001f0:	003fff06 	br	40001f0 <__alt_data_end+0xfe0001f0>

040001f4 <main>:
#define pccm_ctl (volatile char*) 0x00004030
#define pccm_rsp (volatile char*) 0x00004020


int main()
{
 40001f4:	deffca04 	addi	sp,sp,-216
 40001f8:	dfc03515 	stw	ra,212(sp)
 40001fc:	df003415 	stw	fp,208(sp)
 4000200:	df003404 	addi	fp,sp,208
	int i;
	alt_u16 data[DATA_SIZE] = {0x5260, 0x54A0, 0x1220, 0xA268, 0x126F, 0x126F, 0x126A, 0x14A9, 0x7440, 0x4000};
 4000204:	e0ffce04 	addi	r3,fp,-200
 4000208:	00803204 	movi	r2,200
 400020c:	1809883a 	mov	r4,r3
 4000210:	000b883a 	mov	r5,zero
 4000214:	100d883a 	mov	r6,r2
 4000218:	40004340 	call	4000434 <memset>
 400021c:	00949804 	movi	r2,21088
 4000220:	e0bfce0d 	sth	r2,-200(fp)
 4000224:	00952804 	movi	r2,21664
 4000228:	e0bfce8d 	sth	r2,-198(fp)
 400022c:	00848804 	movi	r2,4640
 4000230:	e0bfcf0d 	sth	r2,-196(fp)
 4000234:	00a89a04 	movi	r2,-23960
 4000238:	e0bfcf8d 	sth	r2,-194(fp)
 400023c:	00849bc4 	movi	r2,4719
 4000240:	e0bfd00d 	sth	r2,-192(fp)
 4000244:	00849bc4 	movi	r2,4719
 4000248:	e0bfd08d 	sth	r2,-190(fp)
 400024c:	00849a84 	movi	r2,4714
 4000250:	e0bfd10d 	sth	r2,-188(fp)
 4000254:	00852a44 	movi	r2,5289
 4000258:	e0bfd18d 	sth	r2,-186(fp)
 400025c:	009d1004 	movi	r2,29760
 4000260:	e0bfd20d 	sth	r2,-184(fp)
 4000264:	00900004 	movi	r2,16384
 4000268:	e0bfd28d 	sth	r2,-182(fp)
	*pccm_ctl = 1;
 400026c:	00900c04 	movi	r2,16432
 4000270:	00c00044 	movi	r3,1
 4000274:	10c00005 	stb	r3,0(r2)
	volatile alt_u16* pcm_mem_base = 0x00002000;
 4000278:	00880004 	movi	r2,8192
 400027c:	e0bfcd15 	stw	r2,-204(fp)

	printf("Initializing Processor\n");
 4000280:	01010074 	movhi	r4,1025
 4000284:	21313d04 	addi	r4,r4,-15116
 4000288:	40006200 	call	4000620 <puts>

	*pccm_ctl = 5;
 400028c:	00900c04 	movi	r2,16432
 4000290:	00c00144 	movi	r3,5
 4000294:	10c00005 	stb	r3,0(r2)
	for(i = 0; i < 1000; i++);
 4000298:	e03fcc15 	stw	zero,-208(fp)
 400029c:	00000306 	br	40002ac <main+0xb8>
 40002a0:	e0bfcc17 	ldw	r2,-208(fp)
 40002a4:	10800044 	addi	r2,r2,1
 40002a8:	e0bfcc15 	stw	r2,-208(fp)
 40002ac:	e0bfcc17 	ldw	r2,-208(fp)
 40002b0:	1080fa10 	cmplti	r2,r2,1000
 40002b4:	103ffa1e 	bne	r2,zero,40002a0 <__alt_data_end+0xfe0002a0>
	*pccm_ctl = 0;
 40002b8:	00900c04 	movi	r2,16432
 40002bc:	10000005 	stb	zero,0(r2)

	while(*pccm_rsp != 5);
 40002c0:	0001883a 	nop
 40002c4:	00900804 	movi	r2,16416
 40002c8:	10800003 	ldbu	r2,0(r2)
 40002cc:	10803fcc 	andi	r2,r2,255
 40002d0:	1080201c 	xori	r2,r2,128
 40002d4:	10bfe004 	addi	r2,r2,-128
 40002d8:	10800158 	cmpnei	r2,r2,5
 40002dc:	103ff91e 	bne	r2,zero,40002c4 <__alt_data_end+0xfe0002c4>
	*pccm_ctl = 1;
 40002e0:	00900c04 	movi	r2,16432
 40002e4:	00c00044 	movi	r3,1
 40002e8:	10c00005 	stb	r3,0(r2)
	while(*pccm_rsp != 1);
 40002ec:	0001883a 	nop
 40002f0:	00900804 	movi	r2,16416
 40002f4:	10800003 	ldbu	r2,0(r2)
 40002f8:	10803fcc 	andi	r2,r2,255
 40002fc:	1080201c 	xori	r2,r2,128
 4000300:	10bfe004 	addi	r2,r2,-128
 4000304:	10800058 	cmpnei	r2,r2,1
 4000308:	103ff91e 	bne	r2,zero,40002f0 <__alt_data_end+0xfe0002f0>
	printf("Processor Initialized\n");
 400030c:	01010074 	movhi	r4,1025
 4000310:	21314304 	addi	r4,r4,-15092
 4000314:	40006200 	call	4000620 <puts>


	printf("Copying Data to PCM Memory\n");
 4000318:	01010074 	movhi	r4,1025
 400031c:	21314904 	addi	r4,r4,-15068
 4000320:	40006200 	call	4000620 <puts>
	for(i = 0; i < DATA_SIZE; i++)
 4000324:	e03fcc15 	stw	zero,-208(fp)
 4000328:	00000e06 	br	4000364 <main+0x170>
	{
		pcm_mem_base[i] = data[i];
 400032c:	e0bfcc17 	ldw	r2,-208(fp)
 4000330:	1085883a 	add	r2,r2,r2
 4000334:	e0ffcd17 	ldw	r3,-204(fp)
 4000338:	1887883a 	add	r3,r3,r2
 400033c:	e0bfcc17 	ldw	r2,-208(fp)
 4000340:	1085883a 	add	r2,r2,r2
 4000344:	e13fcc04 	addi	r4,fp,-208
 4000348:	2085883a 	add	r2,r4,r2
 400034c:	10800204 	addi	r2,r2,8
 4000350:	1080000b 	ldhu	r2,0(r2)
 4000354:	1880000d 	sth	r2,0(r3)
	while(*pccm_rsp != 1);
	printf("Processor Initialized\n");


	printf("Copying Data to PCM Memory\n");
	for(i = 0; i < DATA_SIZE; i++)
 4000358:	e0bfcc17 	ldw	r2,-208(fp)
 400035c:	10800044 	addi	r2,r2,1
 4000360:	e0bfcc15 	stw	r2,-208(fp)
 4000364:	e0bfcc17 	ldw	r2,-208(fp)
 4000368:	10801910 	cmplti	r2,r2,100
 400036c:	103fef1e 	bne	r2,zero,400032c <__alt_data_end+0xfe00032c>
	{
		pcm_mem_base[i] = data[i];
	}
	printf("Data has been copied to PCM Memory\n");
 4000370:	01010074 	movhi	r4,1025
 4000374:	21315004 	addi	r4,r4,-15040
 4000378:	40006200 	call	4000620 <puts>

	*pccm_ctl = 2;
 400037c:	00900c04 	movi	r2,16432
 4000380:	00c00084 	movi	r3,2
 4000384:	10c00005 	stb	r3,0(r2)
	while(*pccm_rsp != 3);
 4000388:	0001883a 	nop
 400038c:	00900804 	movi	r2,16416
 4000390:	10800003 	ldbu	r2,0(r2)
 4000394:	10803fcc 	andi	r2,r2,255
 4000398:	1080201c 	xori	r2,r2,128
 400039c:	10bfe004 	addi	r2,r2,-128
 40003a0:	108000d8 	cmpnei	r2,r2,3
 40003a4:	103ff91e 	bne	r2,zero,400038c <__alt_data_end+0xfe00038c>
	printf("PCM finished computation\n");
 40003a8:	01010074 	movhi	r4,1025
 40003ac:	21315904 	addi	r4,r4,-15004
 40003b0:	40006200 	call	4000620 <puts>

	printf("[");
 40003b4:	010016c4 	movi	r4,91
 40003b8:	40005800 	call	4000580 <putchar>
	for(i = D_STRT; i < D_END; i++)
 40003bc:	00800a04 	movi	r2,40
 40003c0:	e0bfcc15 	stw	r2,-208(fp)
 40003c4:	00000d06 	br	40003fc <main+0x208>
	{
		printf("%i, \n", pcm_mem_base[i]);
 40003c8:	e0bfcc17 	ldw	r2,-208(fp)
 40003cc:	1085883a 	add	r2,r2,r2
 40003d0:	e0ffcd17 	ldw	r3,-204(fp)
 40003d4:	1885883a 	add	r2,r3,r2
 40003d8:	1080000b 	ldhu	r2,0(r2)
 40003dc:	10bfffcc 	andi	r2,r2,65535
 40003e0:	01010074 	movhi	r4,1025
 40003e4:	21316004 	addi	r4,r4,-14976
 40003e8:	100b883a 	mov	r5,r2
 40003ec:	400053c0 	call	400053c <printf>
	*pccm_ctl = 2;
	while(*pccm_rsp != 3);
	printf("PCM finished computation\n");

	printf("[");
	for(i = D_STRT; i < D_END; i++)
 40003f0:	e0bfcc17 	ldw	r2,-208(fp)
 40003f4:	10800044 	addi	r2,r2,1
 40003f8:	e0bfcc15 	stw	r2,-208(fp)
 40003fc:	e0bfcc17 	ldw	r2,-208(fp)
 4000400:	10801210 	cmplti	r2,r2,72
 4000404:	103ff01e 	bne	r2,zero,40003c8 <__alt_data_end+0xfe0003c8>
	{
		printf("%i, \n", pcm_mem_base[i]);
	}
	printf("]");
 4000408:	01001744 	movi	r4,93
 400040c:	40005800 	call	4000580 <putchar>

	printf("PROGRAM END\n");
 4000410:	01010074 	movhi	r4,1025
 4000414:	21316204 	addi	r4,r4,-14968
 4000418:	40006200 	call	4000620 <puts>





  return 0;
 400041c:	0005883a 	mov	r2,zero
}
 4000420:	e037883a 	mov	sp,fp
 4000424:	dfc00117 	ldw	ra,4(sp)
 4000428:	df000017 	ldw	fp,0(sp)
 400042c:	dec00204 	addi	sp,sp,8
 4000430:	f800283a 	ret

04000434 <memset>:
 4000434:	00c000c4 	movi	r3,3
 4000438:	2005883a 	mov	r2,r4
 400043c:	29403fcc 	andi	r5,r5,255
 4000440:	19802d2e 	bgeu	r3,r6,40004f8 <memset+0xc4>
 4000444:	20c6703a 	and	r3,r4,r3
 4000448:	18002e1e 	bne	r3,zero,4000504 <memset+0xd0>
 400044c:	2806923a 	slli	r3,r5,8
 4000450:	010003c4 	movi	r4,15
 4000454:	3011883a 	mov	r8,r6
 4000458:	1946b03a 	or	r3,r3,r5
 400045c:	180e943a 	slli	r7,r3,16
 4000460:	38ceb03a 	or	r7,r7,r3
 4000464:	1007883a 	mov	r3,r2
 4000468:	21800f2e 	bgeu	r4,r6,40004a8 <memset+0x74>
 400046c:	19c00015 	stw	r7,0(r3)
 4000470:	19c00115 	stw	r7,4(r3)
 4000474:	19c00215 	stw	r7,8(r3)
 4000478:	19c00315 	stw	r7,12(r3)
 400047c:	423ffc04 	addi	r8,r8,-16
 4000480:	18c00404 	addi	r3,r3,16
 4000484:	223ff936 	bltu	r4,r8,400046c <__alt_data_end+0xfe00046c>
 4000488:	30fffc04 	addi	r3,r6,-16
 400048c:	1806d13a 	srli	r3,r3,4
 4000490:	318003cc 	andi	r6,r6,15
 4000494:	010000c4 	movi	r4,3
 4000498:	18c00044 	addi	r3,r3,1
 400049c:	1806913a 	slli	r3,r3,4
 40004a0:	10c7883a 	add	r3,r2,r3
 40004a4:	21800e2e 	bgeu	r4,r6,40004e0 <memset+0xac>
 40004a8:	1813883a 	mov	r9,r3
 40004ac:	3011883a 	mov	r8,r6
 40004b0:	010000c4 	movi	r4,3
 40004b4:	49c00015 	stw	r7,0(r9)
 40004b8:	423fff04 	addi	r8,r8,-4
 40004bc:	4a400104 	addi	r9,r9,4
 40004c0:	223ffc36 	bltu	r4,r8,40004b4 <__alt_data_end+0xfe0004b4>
 40004c4:	313fff04 	addi	r4,r6,-4
 40004c8:	2008d0ba 	srli	r4,r4,2
 40004cc:	318000cc 	andi	r6,r6,3
 40004d0:	21000044 	addi	r4,r4,1
 40004d4:	2109883a 	add	r4,r4,r4
 40004d8:	2109883a 	add	r4,r4,r4
 40004dc:	1907883a 	add	r3,r3,r4
 40004e0:	30000a26 	beq	r6,zero,400050c <memset+0xd8>
 40004e4:	198d883a 	add	r6,r3,r6
 40004e8:	19400005 	stb	r5,0(r3)
 40004ec:	18c00044 	addi	r3,r3,1
 40004f0:	19bffd1e 	bne	r3,r6,40004e8 <__alt_data_end+0xfe0004e8>
 40004f4:	f800283a 	ret
 40004f8:	2007883a 	mov	r3,r4
 40004fc:	303ff91e 	bne	r6,zero,40004e4 <__alt_data_end+0xfe0004e4>
 4000500:	00000206 	br	400050c <memset+0xd8>
 4000504:	2007883a 	mov	r3,r4
 4000508:	003ff606 	br	40004e4 <__alt_data_end+0xfe0004e4>
 400050c:	f800283a 	ret

04000510 <_printf_r>:
 4000510:	defffd04 	addi	sp,sp,-12
 4000514:	dfc00015 	stw	ra,0(sp)
 4000518:	d9800115 	stw	r6,4(sp)
 400051c:	d9c00215 	stw	r7,8(sp)
 4000520:	280d883a 	mov	r6,r5
 4000524:	21400217 	ldw	r5,8(r4)
 4000528:	d9c00104 	addi	r7,sp,4
 400052c:	40006f40 	call	40006f4 <___vfprintf_internal_r>
 4000530:	dfc00017 	ldw	ra,0(sp)
 4000534:	dec00304 	addi	sp,sp,12
 4000538:	f800283a 	ret

0400053c <printf>:
 400053c:	defffc04 	addi	sp,sp,-16
 4000540:	dfc00015 	stw	ra,0(sp)
 4000544:	d9400115 	stw	r5,4(sp)
 4000548:	d9800215 	stw	r6,8(sp)
 400054c:	d9c00315 	stw	r7,12(sp)
 4000550:	00810074 	movhi	r2,1025
 4000554:	10b8b704 	addi	r2,r2,-7460
 4000558:	10800017 	ldw	r2,0(r2)
 400055c:	200b883a 	mov	r5,r4
 4000560:	d9800104 	addi	r6,sp,4
 4000564:	11000217 	ldw	r4,8(r2)
 4000568:	40025700 	call	4002570 <__vfprintf_internal>
 400056c:	dfc00017 	ldw	ra,0(sp)
 4000570:	dec00404 	addi	sp,sp,16
 4000574:	f800283a 	ret

04000578 <_putchar_r>:
 4000578:	21800217 	ldw	r6,8(r4)
 400057c:	4006cd01 	jmpi	4006cd0 <_putc_r>

04000580 <putchar>:
 4000580:	00810074 	movhi	r2,1025
 4000584:	10b8b704 	addi	r2,r2,-7460
 4000588:	10800017 	ldw	r2,0(r2)
 400058c:	200b883a 	mov	r5,r4
 4000590:	11800217 	ldw	r6,8(r2)
 4000594:	1009883a 	mov	r4,r2
 4000598:	4006cd01 	jmpi	4006cd0 <_putc_r>

0400059c <_puts_r>:
 400059c:	defff604 	addi	sp,sp,-40
 40005a0:	dc400815 	stw	r17,32(sp)
 40005a4:	2023883a 	mov	r17,r4
 40005a8:	2809883a 	mov	r4,r5
 40005ac:	dc000715 	stw	r16,28(sp)
 40005b0:	dfc00915 	stw	ra,36(sp)
 40005b4:	2821883a 	mov	r16,r5
 40005b8:	40006340 	call	4000634 <strlen>
 40005bc:	10c00044 	addi	r3,r2,1
 40005c0:	d8800115 	stw	r2,4(sp)
 40005c4:	89400217 	ldw	r5,8(r17)
 40005c8:	00810074 	movhi	r2,1025
 40005cc:	10b16504 	addi	r2,r2,-14956
 40005d0:	d8800215 	stw	r2,8(sp)
 40005d4:	00800044 	movi	r2,1
 40005d8:	d8800315 	stw	r2,12(sp)
 40005dc:	8809883a 	mov	r4,r17
 40005e0:	00800084 	movi	r2,2
 40005e4:	d9800404 	addi	r6,sp,16
 40005e8:	dc000015 	stw	r16,0(sp)
 40005ec:	d8c00615 	stw	r3,24(sp)
 40005f0:	dec00415 	stw	sp,16(sp)
 40005f4:	d8800515 	stw	r2,20(sp)
 40005f8:	40048700 	call	4004870 <__sfvwrite_r>
 40005fc:	1000061e 	bne	r2,zero,4000618 <_puts_r+0x7c>
 4000600:	00800284 	movi	r2,10
 4000604:	dfc00917 	ldw	ra,36(sp)
 4000608:	dc400817 	ldw	r17,32(sp)
 400060c:	dc000717 	ldw	r16,28(sp)
 4000610:	dec00a04 	addi	sp,sp,40
 4000614:	f800283a 	ret
 4000618:	00bfffc4 	movi	r2,-1
 400061c:	003ff906 	br	4000604 <__alt_data_end+0xfe000604>

04000620 <puts>:
 4000620:	00810074 	movhi	r2,1025
 4000624:	10b8b704 	addi	r2,r2,-7460
 4000628:	200b883a 	mov	r5,r4
 400062c:	11000017 	ldw	r4,0(r2)
 4000630:	400059c1 	jmpi	400059c <_puts_r>

04000634 <strlen>:
 4000634:	208000cc 	andi	r2,r4,3
 4000638:	10001f1e 	bne	r2,zero,40006b8 <strlen+0x84>
 400063c:	20800017 	ldw	r2,0(r4)
 4000640:	01ffbff4 	movhi	r7,65279
 4000644:	39ffbfc4 	addi	r7,r7,-257
 4000648:	01a02074 	movhi	r6,32897
 400064c:	31a02004 	addi	r6,r6,-32640
 4000650:	11c7883a 	add	r3,r2,r7
 4000654:	0084303a 	nor	r2,zero,r2
 4000658:	1886703a 	and	r3,r3,r2
 400065c:	1986703a 	and	r3,r3,r6
 4000660:	2005883a 	mov	r2,r4
 4000664:	1800101e 	bne	r3,zero,40006a8 <strlen+0x74>
 4000668:	10800104 	addi	r2,r2,4
 400066c:	10c00017 	ldw	r3,0(r2)
 4000670:	19cb883a 	add	r5,r3,r7
 4000674:	00c6303a 	nor	r3,zero,r3
 4000678:	28c6703a 	and	r3,r5,r3
 400067c:	1986703a 	and	r3,r3,r6
 4000680:	1800091e 	bne	r3,zero,40006a8 <strlen+0x74>
 4000684:	10800104 	addi	r2,r2,4
 4000688:	10c00017 	ldw	r3,0(r2)
 400068c:	19cb883a 	add	r5,r3,r7
 4000690:	00c6303a 	nor	r3,zero,r3
 4000694:	28c6703a 	and	r3,r5,r3
 4000698:	1986703a 	and	r3,r3,r6
 400069c:	183ff226 	beq	r3,zero,4000668 <__alt_data_end+0xfe000668>
 40006a0:	00000106 	br	40006a8 <strlen+0x74>
 40006a4:	10800044 	addi	r2,r2,1
 40006a8:	10c00007 	ldb	r3,0(r2)
 40006ac:	183ffd1e 	bne	r3,zero,40006a4 <__alt_data_end+0xfe0006a4>
 40006b0:	1105c83a 	sub	r2,r2,r4
 40006b4:	f800283a 	ret
 40006b8:	2005883a 	mov	r2,r4
 40006bc:	003ffa06 	br	40006a8 <__alt_data_end+0xfe0006a8>

040006c0 <__sprint_r>:
 40006c0:	30800217 	ldw	r2,8(r6)
 40006c4:	defffe04 	addi	sp,sp,-8
 40006c8:	dc000015 	stw	r16,0(sp)
 40006cc:	dfc00115 	stw	ra,4(sp)
 40006d0:	3021883a 	mov	r16,r6
 40006d4:	10000226 	beq	r2,zero,40006e0 <__sprint_r+0x20>
 40006d8:	40048700 	call	4004870 <__sfvwrite_r>
 40006dc:	80000215 	stw	zero,8(r16)
 40006e0:	80000115 	stw	zero,4(r16)
 40006e4:	dfc00117 	ldw	ra,4(sp)
 40006e8:	dc000017 	ldw	r16,0(sp)
 40006ec:	dec00204 	addi	sp,sp,8
 40006f0:	f800283a 	ret

040006f4 <___vfprintf_internal_r>:
 40006f4:	defeb904 	addi	sp,sp,-1308
 40006f8:	dc013d15 	stw	r16,1268(sp)
 40006fc:	d9013015 	stw	r4,1216(sp)
 4000700:	dfc14615 	stw	ra,1304(sp)
 4000704:	df014515 	stw	fp,1300(sp)
 4000708:	ddc14415 	stw	r23,1296(sp)
 400070c:	dd814315 	stw	r22,1292(sp)
 4000710:	dd414215 	stw	r21,1288(sp)
 4000714:	dd014115 	stw	r20,1284(sp)
 4000718:	dcc14015 	stw	r19,1280(sp)
 400071c:	dc813f15 	stw	r18,1276(sp)
 4000720:	dc413e15 	stw	r17,1272(sp)
 4000724:	d9412915 	stw	r5,1188(sp)
 4000728:	3021883a 	mov	r16,r6
 400072c:	d9c12d15 	stw	r7,1204(sp)
 4000730:	4004f5c0 	call	4004f5c <_localeconv_r>
 4000734:	10800017 	ldw	r2,0(r2)
 4000738:	d9013017 	ldw	r4,1216(sp)
 400073c:	d8013315 	stw	zero,1228(sp)
 4000740:	d8813715 	stw	r2,1244(sp)
 4000744:	d8013415 	stw	zero,1232(sp)
 4000748:	20000226 	beq	r4,zero,4000754 <___vfprintf_internal_r+0x60>
 400074c:	20800e17 	ldw	r2,56(r4)
 4000750:	10014b26 	beq	r2,zero,4000c80 <___vfprintf_internal_r+0x58c>
 4000754:	d8c12917 	ldw	r3,1188(sp)
 4000758:	1880030b 	ldhu	r2,12(r3)
 400075c:	10c0020c 	andi	r3,r2,8
 4000760:	18ffffcc 	andi	r3,r3,65535
 4000764:	18e0001c 	xori	r3,r3,32768
 4000768:	18e00004 	addi	r3,r3,-32768
 400076c:	1800ed26 	beq	r3,zero,4000b24 <___vfprintf_internal_r+0x430>
 4000770:	d9012917 	ldw	r4,1188(sp)
 4000774:	20c00417 	ldw	r3,16(r4)
 4000778:	1800ea26 	beq	r3,zero,4000b24 <___vfprintf_internal_r+0x430>
 400077c:	1100068c 	andi	r4,r2,26
 4000780:	00c00284 	movi	r3,10
 4000784:	20c0f026 	beq	r4,r3,4000b48 <___vfprintf_internal_r+0x454>
 4000788:	d9010dc4 	addi	r4,sp,1079
 400078c:	d8810e04 	addi	r2,sp,1080
 4000790:	dc413017 	ldw	r17,1216(sp)
 4000794:	d8c00404 	addi	r3,sp,16
 4000798:	d9012615 	stw	r4,1176(sp)
 400079c:	1109c83a 	sub	r4,r2,r4
 40007a0:	d8812715 	stw	r2,1180(sp)
 40007a4:	d8c11b15 	stw	r3,1132(sp)
 40007a8:	d8011d15 	stw	zero,1140(sp)
 40007ac:	d8011c15 	stw	zero,1136(sp)
 40007b0:	802b883a 	mov	r21,r16
 40007b4:	d8013215 	stw	zero,1224(sp)
 40007b8:	d8013615 	stw	zero,1240(sp)
 40007bc:	d8013515 	stw	zero,1236(sp)
 40007c0:	d8012c15 	stw	zero,1200(sp)
 40007c4:	1813883a 	mov	r9,r3
 40007c8:	d9013915 	stw	r4,1252(sp)
 40007cc:	a8800007 	ldb	r2,0(r21)
 40007d0:	1002f326 	beq	r2,zero,40013a0 <___vfprintf_internal_r+0xcac>
 40007d4:	00c00944 	movi	r3,37
 40007d8:	a825883a 	mov	r18,r21
 40007dc:	10c0021e 	bne	r2,r3,40007e8 <___vfprintf_internal_r+0xf4>
 40007e0:	00001406 	br	4000834 <___vfprintf_internal_r+0x140>
 40007e4:	10c00326 	beq	r2,r3,40007f4 <___vfprintf_internal_r+0x100>
 40007e8:	94800044 	addi	r18,r18,1
 40007ec:	90800007 	ldb	r2,0(r18)
 40007f0:	103ffc1e 	bne	r2,zero,40007e4 <__alt_data_end+0xfe0007e4>
 40007f4:	9561c83a 	sub	r16,r18,r21
 40007f8:	80000e26 	beq	r16,zero,4000834 <___vfprintf_internal_r+0x140>
 40007fc:	da011d17 	ldw	r8,1140(sp)
 4000800:	d8c11c17 	ldw	r3,1136(sp)
 4000804:	4d400015 	stw	r21,0(r9)
 4000808:	4c000115 	stw	r16,4(r9)
 400080c:	4411883a 	add	r8,r8,r16
 4000810:	18c00044 	addi	r3,r3,1
 4000814:	da011d15 	stw	r8,1140(sp)
 4000818:	d8c11c15 	stw	r3,1136(sp)
 400081c:	008001c4 	movi	r2,7
 4000820:	10c11016 	blt	r2,r3,4000c64 <___vfprintf_internal_r+0x570>
 4000824:	4a400204 	addi	r9,r9,8
 4000828:	d8812c17 	ldw	r2,1200(sp)
 400082c:	1405883a 	add	r2,r2,r16
 4000830:	d8812c15 	stw	r2,1200(sp)
 4000834:	90800007 	ldb	r2,0(r18)
 4000838:	1000ee26 	beq	r2,zero,4000bf4 <___vfprintf_internal_r+0x500>
 400083c:	95400044 	addi	r21,r18,1
 4000840:	94800047 	ldb	r18,1(r18)
 4000844:	073fffc4 	movi	fp,-1
 4000848:	e007883a 	mov	r3,fp
 400084c:	d8012585 	stb	zero,1174(sp)
 4000850:	d8012e15 	stw	zero,1208(sp)
 4000854:	0021883a 	mov	r16,zero
 4000858:	05001604 	movi	r20,88
 400085c:	04c00244 	movi	r19,9
 4000860:	4839883a 	mov	fp,r9
 4000864:	ad400044 	addi	r21,r21,1
 4000868:	90bff804 	addi	r2,r18,-32
 400086c:	a080462e 	bgeu	r20,r2,4000988 <___vfprintf_internal_r+0x294>
 4000870:	e013883a 	mov	r9,fp
 4000874:	9000df26 	beq	r18,zero,4000bf4 <___vfprintf_internal_r+0x500>
 4000878:	00c00044 	movi	r3,1
 400087c:	d8c12815 	stw	r3,1184(sp)
 4000880:	dc810405 	stb	r18,1040(sp)
 4000884:	d8012585 	stb	zero,1174(sp)
 4000888:	d8c12b15 	stw	r3,1196(sp)
 400088c:	dcc10404 	addi	r19,sp,1040
 4000890:	d8013115 	stw	zero,1220(sp)
 4000894:	80c0008c 	andi	r3,r16,2
 4000898:	d8c12a15 	stw	r3,1192(sp)
 400089c:	18000326 	beq	r3,zero,40008ac <___vfprintf_internal_r+0x1b8>
 40008a0:	d8c12817 	ldw	r3,1184(sp)
 40008a4:	18c00084 	addi	r3,r3,2
 40008a8:	d8c12815 	stw	r3,1184(sp)
 40008ac:	80c0210c 	andi	r3,r16,132
 40008b0:	d8c12f15 	stw	r3,1212(sp)
 40008b4:	1802251e 	bne	r3,zero,400114c <___vfprintf_internal_r+0xa58>
 40008b8:	d9012e17 	ldw	r4,1208(sp)
 40008bc:	d8c12817 	ldw	r3,1184(sp)
 40008c0:	20edc83a 	sub	r22,r4,r3
 40008c4:	0582210e 	bge	zero,r22,400114c <___vfprintf_internal_r+0xa58>
 40008c8:	02800404 	movi	r10,16
 40008cc:	da011d17 	ldw	r8,1140(sp)
 40008d0:	d8c11c17 	ldw	r3,1136(sp)
 40008d4:	05c10074 	movhi	r23,1025
 40008d8:	bdf17684 	addi	r23,r23,-14886
 40008dc:	5580200e 	bge	r10,r22,4000960 <___vfprintf_internal_r+0x26c>
 40008e0:	dc813815 	stw	r18,1248(sp)
 40008e4:	5039883a 	mov	fp,r10
 40008e8:	b825883a 	mov	r18,r23
 40008ec:	050001c4 	movi	r20,7
 40008f0:	b02f883a 	mov	r23,r22
 40008f4:	802d883a 	mov	r22,r16
 40008f8:	dc012917 	ldw	r16,1188(sp)
 40008fc:	00000306 	br	400090c <___vfprintf_internal_r+0x218>
 4000900:	bdfffc04 	addi	r23,r23,-16
 4000904:	4a400204 	addi	r9,r9,8
 4000908:	e5c0110e 	bge	fp,r23,4000950 <___vfprintf_internal_r+0x25c>
 400090c:	4c800015 	stw	r18,0(r9)
 4000910:	4f000115 	stw	fp,4(r9)
 4000914:	42000404 	addi	r8,r8,16
 4000918:	18c00044 	addi	r3,r3,1
 400091c:	da011d15 	stw	r8,1140(sp)
 4000920:	d8c11c15 	stw	r3,1136(sp)
 4000924:	a0fff60e 	bge	r20,r3,4000900 <__alt_data_end+0xfe000900>
 4000928:	8809883a 	mov	r4,r17
 400092c:	800b883a 	mov	r5,r16
 4000930:	d9811b04 	addi	r6,sp,1132
 4000934:	40006c00 	call	40006c0 <__sprint_r>
 4000938:	1000b41e 	bne	r2,zero,4000c0c <___vfprintf_internal_r+0x518>
 400093c:	bdfffc04 	addi	r23,r23,-16
 4000940:	da011d17 	ldw	r8,1140(sp)
 4000944:	d8c11c17 	ldw	r3,1136(sp)
 4000948:	da400404 	addi	r9,sp,16
 400094c:	e5ffef16 	blt	fp,r23,400090c <__alt_data_end+0xfe00090c>
 4000950:	b021883a 	mov	r16,r22
 4000954:	b82d883a 	mov	r22,r23
 4000958:	902f883a 	mov	r23,r18
 400095c:	dc813817 	ldw	r18,1248(sp)
 4000960:	4dc00015 	stw	r23,0(r9)
 4000964:	4d800115 	stw	r22,4(r9)
 4000968:	4591883a 	add	r8,r8,r22
 400096c:	18c00044 	addi	r3,r3,1
 4000970:	da011d15 	stw	r8,1140(sp)
 4000974:	d8c11c15 	stw	r3,1136(sp)
 4000978:	008001c4 	movi	r2,7
 400097c:	10c3fe16 	blt	r2,r3,4001978 <___vfprintf_internal_r+0x1284>
 4000980:	4a400204 	addi	r9,r9,8
 4000984:	0001f306 	br	4001154 <___vfprintf_internal_r+0xa60>
 4000988:	1085883a 	add	r2,r2,r2
 400098c:	1085883a 	add	r2,r2,r2
 4000990:	01010034 	movhi	r4,1024
 4000994:	21026904 	addi	r4,r4,2468
 4000998:	1105883a 	add	r2,r2,r4
 400099c:	10800017 	ldw	r2,0(r2)
 40009a0:	1000683a 	jmp	r2
 40009a4:	04001080 	call	400108 <__alt_mem_onchip_memory2_1+0x3fe108>
 40009a8:	04000870 	cmpltui	r16,zero,33
 40009ac:	04000870 	cmpltui	r16,zero,33
 40009b0:	04001098 	cmpnei	r16,zero,66
 40009b4:	04000870 	cmpltui	r16,zero,33
 40009b8:	04000870 	cmpltui	r16,zero,33
 40009bc:	04000870 	cmpltui	r16,zero,33
 40009c0:	04000870 	cmpltui	r16,zero,33
 40009c4:	04000870 	cmpltui	r16,zero,33
 40009c8:	04000870 	cmpltui	r16,zero,33
 40009cc:	04000f50 	cmplti	r16,zero,61
 40009d0:	040010e4 	muli	r16,zero,67
 40009d4:	04000870 	cmpltui	r16,zero,33
 40009d8:	04000b18 	cmpnei	r16,zero,44
 40009dc:	04000eb8 	rdprs	r16,zero,58
 40009e0:	04000870 	cmpltui	r16,zero,33
 40009e4:	040010a4 	muli	r16,zero,66
 40009e8:	040010b0 	cmpltui	r16,zero,66
 40009ec:	040010b0 	cmpltui	r16,zero,66
 40009f0:	040010b0 	cmpltui	r16,zero,66
 40009f4:	040010b0 	cmpltui	r16,zero,66
 40009f8:	040010b0 	cmpltui	r16,zero,66
 40009fc:	040010b0 	cmpltui	r16,zero,66
 4000a00:	040010b0 	cmpltui	r16,zero,66
 4000a04:	040010b0 	cmpltui	r16,zero,66
 4000a08:	040010b0 	cmpltui	r16,zero,66
 4000a0c:	04000870 	cmpltui	r16,zero,33
 4000a10:	04000870 	cmpltui	r16,zero,33
 4000a14:	04000870 	cmpltui	r16,zero,33
 4000a18:	04000870 	cmpltui	r16,zero,33
 4000a1c:	04000870 	cmpltui	r16,zero,33
 4000a20:	04000870 	cmpltui	r16,zero,33
 4000a24:	04000870 	cmpltui	r16,zero,33
 4000a28:	04000870 	cmpltui	r16,zero,33
 4000a2c:	04000870 	cmpltui	r16,zero,33
 4000a30:	04000870 	cmpltui	r16,zero,33
 4000a34:	04000c88 	cmpgei	r16,zero,50
 4000a38:	04000d48 	cmpgei	r16,zero,53
 4000a3c:	04000870 	cmpltui	r16,zero,33
 4000a40:	04000d48 	cmpgei	r16,zero,53
 4000a44:	04000870 	cmpltui	r16,zero,33
 4000a48:	04000870 	cmpltui	r16,zero,33
 4000a4c:	04000870 	cmpltui	r16,zero,33
 4000a50:	04000870 	cmpltui	r16,zero,33
 4000a54:	04000ddc 	xori	r16,zero,55
 4000a58:	04000870 	cmpltui	r16,zero,33
 4000a5c:	04000870 	cmpltui	r16,zero,33
 4000a60:	04000de8 	cmpgeui	r16,zero,55
 4000a64:	04000870 	cmpltui	r16,zero,33
 4000a68:	04000870 	cmpltui	r16,zero,33
 4000a6c:	04000870 	cmpltui	r16,zero,33
 4000a70:	04000870 	cmpltui	r16,zero,33
 4000a74:	04000870 	cmpltui	r16,zero,33
 4000a78:	04000e20 	cmpeqi	r16,zero,56
 4000a7c:	04000870 	cmpltui	r16,zero,33
 4000a80:	04000870 	cmpltui	r16,zero,33
 4000a84:	04000e5c 	xori	r16,zero,57
 4000a88:	04000870 	cmpltui	r16,zero,33
 4000a8c:	04000870 	cmpltui	r16,zero,33
 4000a90:	04000870 	cmpltui	r16,zero,33
 4000a94:	04000870 	cmpltui	r16,zero,33
 4000a98:	04000870 	cmpltui	r16,zero,33
 4000a9c:	04000870 	cmpltui	r16,zero,33
 4000aa0:	04000870 	cmpltui	r16,zero,33
 4000aa4:	04000870 	cmpltui	r16,zero,33
 4000aa8:	04000870 	cmpltui	r16,zero,33
 4000aac:	04000870 	cmpltui	r16,zero,33
 4000ab0:	040010f4 	movhi	r16,67
 4000ab4:	04001128 	cmpgeui	r16,zero,68
 4000ab8:	04000d48 	cmpgei	r16,zero,53
 4000abc:	04000d48 	cmpgei	r16,zero,53
 4000ac0:	04000d48 	cmpgei	r16,zero,53
 4000ac4:	04001074 	movhi	r16,65
 4000ac8:	04001128 	cmpgeui	r16,zero,68
 4000acc:	04000870 	cmpltui	r16,zero,33
 4000ad0:	04000870 	cmpltui	r16,zero,33
 4000ad4:	04000f00 	call	4000f0 <__alt_mem_onchip_memory2_1+0x3fe0f0>
 4000ad8:	04000870 	cmpltui	r16,zero,33
 4000adc:	04000f18 	cmpnei	r16,zero,60
 4000ae0:	04001134 	movhi	r16,68
 4000ae4:	04000f78 	rdprs	r16,zero,61
 4000ae8:	04000fc8 	cmpgei	r16,zero,63
 4000aec:	04000870 	cmpltui	r16,zero,33
 4000af0:	04000fd4 	movui	r16,63
 4000af4:	04000870 	cmpltui	r16,zero,33
 4000af8:	04001140 	call	400114 <__alt_mem_onchip_memory2_1+0x3fe114>
 4000afc:	04000870 	cmpltui	r16,zero,33
 4000b00:	04000870 	cmpltui	r16,zero,33
 4000b04:	04001038 	rdprs	r16,zero,64
 4000b08:	d9012e17 	ldw	r4,1208(sp)
 4000b0c:	d8812d15 	stw	r2,1204(sp)
 4000b10:	0109c83a 	sub	r4,zero,r4
 4000b14:	d9012e15 	stw	r4,1208(sp)
 4000b18:	84000114 	ori	r16,r16,4
 4000b1c:	ac800007 	ldb	r18,0(r21)
 4000b20:	003f5006 	br	4000864 <__alt_data_end+0xfe000864>
 4000b24:	d9013017 	ldw	r4,1216(sp)
 4000b28:	d9412917 	ldw	r5,1188(sp)
 4000b2c:	40025940 	call	4002594 <__swsetup_r>
 4000b30:	10003d1e 	bne	r2,zero,4000c28 <___vfprintf_internal_r+0x534>
 4000b34:	d8c12917 	ldw	r3,1188(sp)
 4000b38:	1880030b 	ldhu	r2,12(r3)
 4000b3c:	00c00284 	movi	r3,10
 4000b40:	1100068c 	andi	r4,r2,26
 4000b44:	20ff101e 	bne	r4,r3,4000788 <__alt_data_end+0xfe000788>
 4000b48:	d9012917 	ldw	r4,1188(sp)
 4000b4c:	20c0038b 	ldhu	r3,14(r4)
 4000b50:	193fffcc 	andi	r4,r3,65535
 4000b54:	2120001c 	xori	r4,r4,32768
 4000b58:	21200004 	addi	r4,r4,-32768
 4000b5c:	203f0a16 	blt	r4,zero,4000788 <__alt_data_end+0xfe000788>
 4000b60:	d9012917 	ldw	r4,1188(sp)
 4000b64:	d9c12d17 	ldw	r7,1204(sp)
 4000b68:	10bfff4c 	andi	r2,r2,65533
 4000b6c:	22800717 	ldw	r10,28(r4)
 4000b70:	22400917 	ldw	r9,36(r4)
 4000b74:	d9013017 	ldw	r4,1216(sp)
 4000b78:	02010004 	movi	r8,1024
 4000b7c:	d881070d 	sth	r2,1052(sp)
 4000b80:	d9410404 	addi	r5,sp,1040
 4000b84:	d8800404 	addi	r2,sp,16
 4000b88:	800d883a 	mov	r6,r16
 4000b8c:	d8c1078d 	sth	r3,1054(sp)
 4000b90:	da810b15 	stw	r10,1068(sp)
 4000b94:	da410d15 	stw	r9,1076(sp)
 4000b98:	d8810415 	stw	r2,1040(sp)
 4000b9c:	d8810815 	stw	r2,1056(sp)
 4000ba0:	da010615 	stw	r8,1048(sp)
 4000ba4:	da010915 	stw	r8,1060(sp)
 4000ba8:	d8010a15 	stw	zero,1064(sp)
 4000bac:	40006f40 	call	40006f4 <___vfprintf_internal_r>
 4000bb0:	d8812c15 	stw	r2,1200(sp)
 4000bb4:	10000416 	blt	r2,zero,4000bc8 <___vfprintf_internal_r+0x4d4>
 4000bb8:	d9013017 	ldw	r4,1216(sp)
 4000bbc:	d9410404 	addi	r5,sp,1040
 4000bc0:	4003f600 	call	4003f60 <_fflush_r>
 4000bc4:	1006501e 	bne	r2,zero,4002508 <___vfprintf_internal_r+0x1e14>
 4000bc8:	d881070b 	ldhu	r2,1052(sp)
 4000bcc:	1080100c 	andi	r2,r2,64
 4000bd0:	10bfffcc 	andi	r2,r2,65535
 4000bd4:	10a0001c 	xori	r2,r2,32768
 4000bd8:	10a00004 	addi	r2,r2,-32768
 4000bdc:	10001426 	beq	r2,zero,4000c30 <___vfprintf_internal_r+0x53c>
 4000be0:	d8c12917 	ldw	r3,1188(sp)
 4000be4:	1880030b 	ldhu	r2,12(r3)
 4000be8:	10801014 	ori	r2,r2,64
 4000bec:	1880030d 	sth	r2,12(r3)
 4000bf0:	00000f06 	br	4000c30 <___vfprintf_internal_r+0x53c>
 4000bf4:	d8811d17 	ldw	r2,1140(sp)
 4000bf8:	10000426 	beq	r2,zero,4000c0c <___vfprintf_internal_r+0x518>
 4000bfc:	d9013017 	ldw	r4,1216(sp)
 4000c00:	d9412917 	ldw	r5,1188(sp)
 4000c04:	d9811b04 	addi	r6,sp,1132
 4000c08:	40006c00 	call	40006c0 <__sprint_r>
 4000c0c:	d8c12917 	ldw	r3,1188(sp)
 4000c10:	1880030b 	ldhu	r2,12(r3)
 4000c14:	1080100c 	andi	r2,r2,64
 4000c18:	10bfffcc 	andi	r2,r2,65535
 4000c1c:	10a0001c 	xori	r2,r2,32768
 4000c20:	10a00004 	addi	r2,r2,-32768
 4000c24:	10000226 	beq	r2,zero,4000c30 <___vfprintf_internal_r+0x53c>
 4000c28:	00bfffc4 	movi	r2,-1
 4000c2c:	d8812c15 	stw	r2,1200(sp)
 4000c30:	d8812c17 	ldw	r2,1200(sp)
 4000c34:	dfc14617 	ldw	ra,1304(sp)
 4000c38:	df014517 	ldw	fp,1300(sp)
 4000c3c:	ddc14417 	ldw	r23,1296(sp)
 4000c40:	dd814317 	ldw	r22,1292(sp)
 4000c44:	dd414217 	ldw	r21,1288(sp)
 4000c48:	dd014117 	ldw	r20,1284(sp)
 4000c4c:	dcc14017 	ldw	r19,1280(sp)
 4000c50:	dc813f17 	ldw	r18,1276(sp)
 4000c54:	dc413e17 	ldw	r17,1272(sp)
 4000c58:	dc013d17 	ldw	r16,1268(sp)
 4000c5c:	dec14704 	addi	sp,sp,1308
 4000c60:	f800283a 	ret
 4000c64:	d9412917 	ldw	r5,1188(sp)
 4000c68:	8809883a 	mov	r4,r17
 4000c6c:	d9811b04 	addi	r6,sp,1132
 4000c70:	40006c00 	call	40006c0 <__sprint_r>
 4000c74:	103fe51e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4000c78:	da400404 	addi	r9,sp,16
 4000c7c:	003eea06 	br	4000828 <__alt_data_end+0xfe000828>
 4000c80:	400421c0 	call	400421c <__sinit>
 4000c84:	003eb306 	br	4000754 <__alt_data_end+0xfe000754>
 4000c88:	e013883a 	mov	r9,fp
 4000c8c:	84000414 	ori	r16,r16,16
 4000c90:	1839883a 	mov	fp,r3
 4000c94:	8080080c 	andi	r2,r16,32
 4000c98:	10034426 	beq	r2,zero,40019ac <___vfprintf_internal_r+0x12b8>
 4000c9c:	d8c12d17 	ldw	r3,1204(sp)
 4000ca0:	18800117 	ldw	r2,4(r3)
 4000ca4:	1dc00017 	ldw	r23,0(r3)
 4000ca8:	18c00204 	addi	r3,r3,8
 4000cac:	d8c12d15 	stw	r3,1204(sp)
 4000cb0:	102d883a 	mov	r22,r2
 4000cb4:	1003020e 	bge	r2,zero,40018c0 <___vfprintf_internal_r+0x11cc>
 4000cb8:	05efc83a 	sub	r23,zero,r23
 4000cbc:	b804c03a 	cmpne	r2,r23,zero
 4000cc0:	05adc83a 	sub	r22,zero,r22
 4000cc4:	b0adc83a 	sub	r22,r22,r2
 4000cc8:	00800b44 	movi	r2,45
 4000ccc:	d8812585 	stb	r2,1174(sp)
 4000cd0:	00c00044 	movi	r3,1
 4000cd4:	bd84b03a 	or	r2,r23,r22
 4000cd8:	e0000216 	blt	fp,zero,4000ce4 <___vfprintf_internal_r+0x5f0>
 4000cdc:	013fdfc4 	movi	r4,-129
 4000ce0:	8120703a 	and	r16,r16,r4
 4000ce4:	1001cc1e 	bne	r2,zero,4001418 <___vfprintf_internal_r+0xd24>
 4000ce8:	e001cb1e 	bne	fp,zero,4001418 <___vfprintf_internal_r+0xd24>
 4000cec:	18c03fcc 	andi	r3,r3,255
 4000cf0:	1802ca1e 	bne	r3,zero,400181c <___vfprintf_internal_r+0x1128>
 4000cf4:	8080004c 	andi	r2,r16,1
 4000cf8:	1002c826 	beq	r2,zero,400181c <___vfprintf_internal_r+0x1128>
 4000cfc:	d8c13917 	ldw	r3,1252(sp)
 4000d00:	00800c04 	movi	r2,48
 4000d04:	d8810dc5 	stb	r2,1079(sp)
 4000d08:	d8c12b15 	stw	r3,1196(sp)
 4000d0c:	dcc10dc4 	addi	r19,sp,1079
 4000d10:	d8812b17 	ldw	r2,1196(sp)
 4000d14:	d8812815 	stw	r2,1184(sp)
 4000d18:	1700010e 	bge	r2,fp,4000d20 <___vfprintf_internal_r+0x62c>
 4000d1c:	df012815 	stw	fp,1184(sp)
 4000d20:	d8812583 	ldbu	r2,1174(sp)
 4000d24:	df013115 	stw	fp,1220(sp)
 4000d28:	10803fcc 	andi	r2,r2,255
 4000d2c:	1080201c 	xori	r2,r2,128
 4000d30:	10bfe004 	addi	r2,r2,-128
 4000d34:	103ed726 	beq	r2,zero,4000894 <__alt_data_end+0xfe000894>
 4000d38:	d8c12817 	ldw	r3,1184(sp)
 4000d3c:	18c00044 	addi	r3,r3,1
 4000d40:	d8c12815 	stw	r3,1184(sp)
 4000d44:	003ed306 	br	4000894 <__alt_data_end+0xfe000894>
 4000d48:	8080020c 	andi	r2,r16,8
 4000d4c:	e013883a 	mov	r9,fp
 4000d50:	1839883a 	mov	fp,r3
 4000d54:	1003a626 	beq	r2,zero,4001bf0 <___vfprintf_internal_r+0x14fc>
 4000d58:	d9012d17 	ldw	r4,1204(sp)
 4000d5c:	25800017 	ldw	r22,0(r4)
 4000d60:	25000117 	ldw	r20,4(r4)
 4000d64:	21000204 	addi	r4,r4,8
 4000d68:	d9012d15 	stw	r4,1204(sp)
 4000d6c:	dd813315 	stw	r22,1228(sp)
 4000d70:	dd013415 	stw	r20,1232(sp)
 4000d74:	b009883a 	mov	r4,r22
 4000d78:	a00b883a 	mov	r5,r20
 4000d7c:	da413c15 	stw	r9,1264(sp)
 4000d80:	40074780 	call	4007478 <__isinfd>
 4000d84:	da413c17 	ldw	r9,1264(sp)
 4000d88:	b009883a 	mov	r4,r22
 4000d8c:	a00b883a 	mov	r5,r20
 4000d90:	10041d26 	beq	r2,zero,4001e08 <___vfprintf_internal_r+0x1714>
 4000d94:	000d883a 	mov	r6,zero
 4000d98:	000f883a 	mov	r7,zero
 4000d9c:	40093a40 	call	40093a4 <__ltdf2>
 4000da0:	da413c17 	ldw	r9,1264(sp)
 4000da4:	1004da16 	blt	r2,zero,4002110 <___vfprintf_internal_r+0x1a1c>
 4000da8:	d8812583 	ldbu	r2,1174(sp)
 4000dac:	00c011c4 	movi	r3,71
 4000db0:	1c83d116 	blt	r3,r18,4001cf8 <___vfprintf_internal_r+0x1604>
 4000db4:	04c10074 	movhi	r19,1025
 4000db8:	9cf16604 	addi	r19,r19,-14952
 4000dbc:	00c000c4 	movi	r3,3
 4000dc0:	d8c12815 	stw	r3,1184(sp)
 4000dc4:	00ffdfc4 	movi	r3,-129
 4000dc8:	80e0703a 	and	r16,r16,r3
 4000dcc:	d8c12817 	ldw	r3,1184(sp)
 4000dd0:	d8013115 	stw	zero,1220(sp)
 4000dd4:	d8c12b15 	stw	r3,1196(sp)
 4000dd8:	003fd306 	br	4000d28 <__alt_data_end+0xfe000d28>
 4000ddc:	84000214 	ori	r16,r16,8
 4000de0:	ac800007 	ldb	r18,0(r21)
 4000de4:	003e9f06 	br	4000864 <__alt_data_end+0xfe000864>
 4000de8:	e013883a 	mov	r9,fp
 4000dec:	84000414 	ori	r16,r16,16
 4000df0:	1839883a 	mov	fp,r3
 4000df4:	8080080c 	andi	r2,r16,32
 4000df8:	10031d26 	beq	r2,zero,4001a70 <___vfprintf_internal_r+0x137c>
 4000dfc:	d8812d17 	ldw	r2,1204(sp)
 4000e00:	0007883a 	mov	r3,zero
 4000e04:	15c00017 	ldw	r23,0(r2)
 4000e08:	15800117 	ldw	r22,4(r2)
 4000e0c:	10800204 	addi	r2,r2,8
 4000e10:	d8812d15 	stw	r2,1204(sp)
 4000e14:	d8012585 	stb	zero,1174(sp)
 4000e18:	bd84b03a 	or	r2,r23,r22
 4000e1c:	003fae06 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4000e20:	e013883a 	mov	r9,fp
 4000e24:	84000414 	ori	r16,r16,16
 4000e28:	1839883a 	mov	fp,r3
 4000e2c:	8080080c 	andi	r2,r16,32
 4000e30:	1002e726 	beq	r2,zero,40019d0 <___vfprintf_internal_r+0x12dc>
 4000e34:	d8c12d17 	ldw	r3,1204(sp)
 4000e38:	d9012d17 	ldw	r4,1204(sp)
 4000e3c:	1dc00017 	ldw	r23,0(r3)
 4000e40:	1d800117 	ldw	r22,4(r3)
 4000e44:	21000204 	addi	r4,r4,8
 4000e48:	00c00044 	movi	r3,1
 4000e4c:	d9012d15 	stw	r4,1204(sp)
 4000e50:	bd84b03a 	or	r2,r23,r22
 4000e54:	d8012585 	stb	zero,1174(sp)
 4000e58:	003f9f06 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4000e5c:	e013883a 	mov	r9,fp
 4000e60:	1839883a 	mov	fp,r3
 4000e64:	00c10074 	movhi	r3,1025
 4000e68:	18f16a04 	addi	r3,r3,-14936
 4000e6c:	d8c13615 	stw	r3,1240(sp)
 4000e70:	8080080c 	andi	r2,r16,32
 4000e74:	10007726 	beq	r2,zero,4001054 <___vfprintf_internal_r+0x960>
 4000e78:	d9012d17 	ldw	r4,1204(sp)
 4000e7c:	25c00017 	ldw	r23,0(r4)
 4000e80:	25800117 	ldw	r22,4(r4)
 4000e84:	21000204 	addi	r4,r4,8
 4000e88:	d9012d15 	stw	r4,1204(sp)
 4000e8c:	8080004c 	andi	r2,r16,1
 4000e90:	1002c226 	beq	r2,zero,400199c <___vfprintf_internal_r+0x12a8>
 4000e94:	bd84b03a 	or	r2,r23,r22
 4000e98:	10035d26 	beq	r2,zero,4001c10 <___vfprintf_internal_r+0x151c>
 4000e9c:	00c00c04 	movi	r3,48
 4000ea0:	d8c12505 	stb	r3,1172(sp)
 4000ea4:	dc812545 	stb	r18,1173(sp)
 4000ea8:	84000094 	ori	r16,r16,2
 4000eac:	00c00084 	movi	r3,2
 4000eb0:	d8012585 	stb	zero,1174(sp)
 4000eb4:	003f8806 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4000eb8:	ac800007 	ldb	r18,0(r21)
 4000ebc:	00c00a84 	movi	r3,42
 4000ec0:	adc00044 	addi	r23,r21,1
 4000ec4:	90c57526 	beq	r18,r3,400249c <___vfprintf_internal_r+0x1da8>
 4000ec8:	95bff404 	addi	r22,r18,-48
 4000ecc:	0009883a 	mov	r4,zero
 4000ed0:	9d84ff36 	bltu	r19,r22,40022d0 <___vfprintf_internal_r+0x1bdc>
 4000ed4:	01400284 	movi	r5,10
 4000ed8:	40097e40 	call	40097e4 <__mulsi3>
 4000edc:	bc800007 	ldb	r18,0(r23)
 4000ee0:	b089883a 	add	r4,r22,r2
 4000ee4:	bdc00044 	addi	r23,r23,1
 4000ee8:	95bff404 	addi	r22,r18,-48
 4000eec:	9dbff92e 	bgeu	r19,r22,4000ed4 <__alt_data_end+0xfe000ed4>
 4000ef0:	2007883a 	mov	r3,r4
 4000ef4:	20044316 	blt	r4,zero,4002004 <___vfprintf_internal_r+0x1910>
 4000ef8:	b82b883a 	mov	r21,r23
 4000efc:	003e5a06 	br	4000868 <__alt_data_end+0xfe000868>
 4000f00:	ac800007 	ldb	r18,0(r21)
 4000f04:	01001b04 	movi	r4,108
 4000f08:	a805883a 	mov	r2,r21
 4000f0c:	91045526 	beq	r18,r4,4002064 <___vfprintf_internal_r+0x1970>
 4000f10:	84000414 	ori	r16,r16,16
 4000f14:	003e5306 	br	4000864 <__alt_data_end+0xfe000864>
 4000f18:	8080080c 	andi	r2,r16,32
 4000f1c:	e013883a 	mov	r9,fp
 4000f20:	10034026 	beq	r2,zero,4001c24 <___vfprintf_internal_r+0x1530>
 4000f24:	d9012d17 	ldw	r4,1204(sp)
 4000f28:	20800017 	ldw	r2,0(r4)
 4000f2c:	d9012c17 	ldw	r4,1200(sp)
 4000f30:	2007d7fa 	srai	r3,r4,31
 4000f34:	d9012d17 	ldw	r4,1204(sp)
 4000f38:	10c00115 	stw	r3,4(r2)
 4000f3c:	21000104 	addi	r4,r4,4
 4000f40:	d9012d15 	stw	r4,1204(sp)
 4000f44:	d9012c17 	ldw	r4,1200(sp)
 4000f48:	11000015 	stw	r4,0(r2)
 4000f4c:	003e1f06 	br	40007cc <__alt_data_end+0xfe0007cc>
 4000f50:	d9012d17 	ldw	r4,1204(sp)
 4000f54:	21000017 	ldw	r4,0(r4)
 4000f58:	d9012e15 	stw	r4,1208(sp)
 4000f5c:	d9012d17 	ldw	r4,1204(sp)
 4000f60:	20800104 	addi	r2,r4,4
 4000f64:	d9012e17 	ldw	r4,1208(sp)
 4000f68:	203ee716 	blt	r4,zero,4000b08 <__alt_data_end+0xfe000b08>
 4000f6c:	d8812d15 	stw	r2,1204(sp)
 4000f70:	ac800007 	ldb	r18,0(r21)
 4000f74:	003e3b06 	br	4000864 <__alt_data_end+0xfe000864>
 4000f78:	e013883a 	mov	r9,fp
 4000f7c:	1839883a 	mov	fp,r3
 4000f80:	d8c12d17 	ldw	r3,1204(sp)
 4000f84:	00800c04 	movi	r2,48
 4000f88:	01010074 	movhi	r4,1025
 4000f8c:	21316f04 	addi	r4,r4,-14916
 4000f90:	1dc00017 	ldw	r23,0(r3)
 4000f94:	18c00104 	addi	r3,r3,4
 4000f98:	d8812505 	stb	r2,1172(sp)
 4000f9c:	00801e04 	movi	r2,120
 4000fa0:	d8812545 	stb	r2,1173(sp)
 4000fa4:	d8c12d15 	stw	r3,1204(sp)
 4000fa8:	002d883a 	mov	r22,zero
 4000fac:	84000094 	ori	r16,r16,2
 4000fb0:	d9013615 	stw	r4,1240(sp)
 4000fb4:	00c00084 	movi	r3,2
 4000fb8:	04801e04 	movi	r18,120
 4000fbc:	b805883a 	mov	r2,r23
 4000fc0:	d8012585 	stb	zero,1174(sp)
 4000fc4:	003f4406 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4000fc8:	84000814 	ori	r16,r16,32
 4000fcc:	ac800007 	ldb	r18,0(r21)
 4000fd0:	003e2406 	br	4000864 <__alt_data_end+0xfe000864>
 4000fd4:	d8812d17 	ldw	r2,1204(sp)
 4000fd8:	d8012585 	stb	zero,1174(sp)
 4000fdc:	e013883a 	mov	r9,fp
 4000fe0:	14c00017 	ldw	r19,0(r2)
 4000fe4:	1839883a 	mov	fp,r3
 4000fe8:	15c00104 	addi	r23,r2,4
 4000fec:	98045526 	beq	r19,zero,4002144 <___vfprintf_internal_r+0x1a50>
 4000ff0:	9809883a 	mov	r4,r19
 4000ff4:	18043116 	blt	r3,zero,40020bc <___vfprintf_internal_r+0x19c8>
 4000ff8:	000b883a 	mov	r5,zero
 4000ffc:	180d883a 	mov	r6,r3
 4001000:	da413c15 	stw	r9,1264(sp)
 4001004:	40058bc0 	call	40058bc <memchr>
 4001008:	da413c17 	ldw	r9,1264(sp)
 400100c:	10047a26 	beq	r2,zero,40021f8 <___vfprintf_internal_r+0x1b04>
 4001010:	14c5c83a 	sub	r2,r2,r19
 4001014:	d8812b15 	stw	r2,1196(sp)
 4001018:	e083d40e 	bge	fp,r2,4001f6c <___vfprintf_internal_r+0x1878>
 400101c:	df012815 	stw	fp,1184(sp)
 4001020:	e004e416 	blt	fp,zero,40023b4 <___vfprintf_internal_r+0x1cc0>
 4001024:	d8812583 	ldbu	r2,1174(sp)
 4001028:	df012b15 	stw	fp,1196(sp)
 400102c:	ddc12d15 	stw	r23,1204(sp)
 4001030:	d8013115 	stw	zero,1220(sp)
 4001034:	003f3c06 	br	4000d28 <__alt_data_end+0xfe000d28>
 4001038:	00810074 	movhi	r2,1025
 400103c:	10b16f04 	addi	r2,r2,-14916
 4001040:	d8813615 	stw	r2,1240(sp)
 4001044:	8080080c 	andi	r2,r16,32
 4001048:	e013883a 	mov	r9,fp
 400104c:	1839883a 	mov	fp,r3
 4001050:	103f891e 	bne	r2,zero,4000e78 <__alt_data_end+0xfe000e78>
 4001054:	8080040c 	andi	r2,r16,16
 4001058:	1002c326 	beq	r2,zero,4001b68 <___vfprintf_internal_r+0x1474>
 400105c:	d8812d17 	ldw	r2,1204(sp)
 4001060:	002d883a 	mov	r22,zero
 4001064:	15c00017 	ldw	r23,0(r2)
 4001068:	10800104 	addi	r2,r2,4
 400106c:	d8812d15 	stw	r2,1204(sp)
 4001070:	003f8606 	br	4000e8c <__alt_data_end+0xfe000e8c>
 4001074:	84001014 	ori	r16,r16,64
 4001078:	ac800007 	ldb	r18,0(r21)
 400107c:	003df906 	br	4000864 <__alt_data_end+0xfe000864>
 4001080:	d8812587 	ldb	r2,1174(sp)
 4001084:	1002e51e 	bne	r2,zero,4001c1c <___vfprintf_internal_r+0x1528>
 4001088:	00800804 	movi	r2,32
 400108c:	d8812585 	stb	r2,1174(sp)
 4001090:	ac800007 	ldb	r18,0(r21)
 4001094:	003df306 	br	4000864 <__alt_data_end+0xfe000864>
 4001098:	84000054 	ori	r16,r16,1
 400109c:	ac800007 	ldb	r18,0(r21)
 40010a0:	003df006 	br	4000864 <__alt_data_end+0xfe000864>
 40010a4:	84002014 	ori	r16,r16,128
 40010a8:	ac800007 	ldb	r18,0(r21)
 40010ac:	003ded06 	br	4000864 <__alt_data_end+0xfe000864>
 40010b0:	0009883a 	mov	r4,zero
 40010b4:	95bff404 	addi	r22,r18,-48
 40010b8:	182f883a 	mov	r23,r3
 40010bc:	01400284 	movi	r5,10
 40010c0:	40097e40 	call	40097e4 <__mulsi3>
 40010c4:	ac800007 	ldb	r18,0(r21)
 40010c8:	1589883a 	add	r4,r2,r22
 40010cc:	ad400044 	addi	r21,r21,1
 40010d0:	95bff404 	addi	r22,r18,-48
 40010d4:	9dbff92e 	bgeu	r19,r22,40010bc <__alt_data_end+0xfe0010bc>
 40010d8:	b807883a 	mov	r3,r23
 40010dc:	d9012e15 	stw	r4,1208(sp)
 40010e0:	003de106 	br	4000868 <__alt_data_end+0xfe000868>
 40010e4:	00800ac4 	movi	r2,43
 40010e8:	d8812585 	stb	r2,1174(sp)
 40010ec:	ac800007 	ldb	r18,0(r21)
 40010f0:	003ddc06 	br	4000864 <__alt_data_end+0xfe000864>
 40010f4:	d8c12d17 	ldw	r3,1204(sp)
 40010f8:	d9012d17 	ldw	r4,1204(sp)
 40010fc:	e013883a 	mov	r9,fp
 4001100:	18800017 	ldw	r2,0(r3)
 4001104:	21000104 	addi	r4,r4,4
 4001108:	00c00044 	movi	r3,1
 400110c:	d8c12815 	stw	r3,1184(sp)
 4001110:	d8012585 	stb	zero,1174(sp)
 4001114:	d8810405 	stb	r2,1040(sp)
 4001118:	d9012d15 	stw	r4,1204(sp)
 400111c:	d8c12b15 	stw	r3,1196(sp)
 4001120:	dcc10404 	addi	r19,sp,1040
 4001124:	003dda06 	br	4000890 <__alt_data_end+0xfe000890>
 4001128:	e013883a 	mov	r9,fp
 400112c:	1839883a 	mov	fp,r3
 4001130:	003ed806 	br	4000c94 <__alt_data_end+0xfe000c94>
 4001134:	e013883a 	mov	r9,fp
 4001138:	1839883a 	mov	fp,r3
 400113c:	003f2d06 	br	4000df4 <__alt_data_end+0xfe000df4>
 4001140:	e013883a 	mov	r9,fp
 4001144:	1839883a 	mov	fp,r3
 4001148:	003f3806 	br	4000e2c <__alt_data_end+0xfe000e2c>
 400114c:	da011d17 	ldw	r8,1140(sp)
 4001150:	d8c11c17 	ldw	r3,1136(sp)
 4001154:	d8812587 	ldb	r2,1174(sp)
 4001158:	10000b26 	beq	r2,zero,4001188 <___vfprintf_internal_r+0xa94>
 400115c:	d8812584 	addi	r2,sp,1174
 4001160:	48800015 	stw	r2,0(r9)
 4001164:	00800044 	movi	r2,1
 4001168:	48800115 	stw	r2,4(r9)
 400116c:	4091883a 	add	r8,r8,r2
 4001170:	1887883a 	add	r3,r3,r2
 4001174:	da011d15 	stw	r8,1140(sp)
 4001178:	d8c11c15 	stw	r3,1136(sp)
 400117c:	008001c4 	movi	r2,7
 4001180:	10c18e16 	blt	r2,r3,40017bc <___vfprintf_internal_r+0x10c8>
 4001184:	4a400204 	addi	r9,r9,8
 4001188:	d9012a17 	ldw	r4,1192(sp)
 400118c:	20000b26 	beq	r4,zero,40011bc <___vfprintf_internal_r+0xac8>
 4001190:	d8812504 	addi	r2,sp,1172
 4001194:	48800015 	stw	r2,0(r9)
 4001198:	00800084 	movi	r2,2
 400119c:	48800115 	stw	r2,4(r9)
 40011a0:	4091883a 	add	r8,r8,r2
 40011a4:	18c00044 	addi	r3,r3,1
 40011a8:	da011d15 	stw	r8,1140(sp)
 40011ac:	d8c11c15 	stw	r3,1136(sp)
 40011b0:	008001c4 	movi	r2,7
 40011b4:	10c17816 	blt	r2,r3,4001798 <___vfprintf_internal_r+0x10a4>
 40011b8:	4a400204 	addi	r9,r9,8
 40011bc:	d9012f17 	ldw	r4,1212(sp)
 40011c0:	00802004 	movi	r2,128
 40011c4:	2080fc26 	beq	r4,r2,40015b8 <___vfprintf_internal_r+0xec4>
 40011c8:	d8813117 	ldw	r2,1220(sp)
 40011cc:	d9012b17 	ldw	r4,1196(sp)
 40011d0:	112fc83a 	sub	r23,r2,r4
 40011d4:	05c02a0e 	bge	zero,r23,4001280 <___vfprintf_internal_r+0xb8c>
 40011d8:	07000404 	movi	fp,16
 40011dc:	05010074 	movhi	r20,1025
 40011e0:	a5317a84 	addi	r20,r20,-14870
 40011e4:	e5c01d0e 	bge	fp,r23,400125c <___vfprintf_internal_r+0xb68>
 40011e8:	dc812a15 	stw	r18,1192(sp)
 40011ec:	058001c4 	movi	r22,7
 40011f0:	a025883a 	mov	r18,r20
 40011f4:	8029883a 	mov	r20,r16
 40011f8:	dc012917 	ldw	r16,1188(sp)
 40011fc:	00000306 	br	400120c <___vfprintf_internal_r+0xb18>
 4001200:	bdfffc04 	addi	r23,r23,-16
 4001204:	4a400204 	addi	r9,r9,8
 4001208:	e5c0110e 	bge	fp,r23,4001250 <___vfprintf_internal_r+0xb5c>
 400120c:	4c800015 	stw	r18,0(r9)
 4001210:	4f000115 	stw	fp,4(r9)
 4001214:	42000404 	addi	r8,r8,16
 4001218:	18c00044 	addi	r3,r3,1
 400121c:	da011d15 	stw	r8,1140(sp)
 4001220:	d8c11c15 	stw	r3,1136(sp)
 4001224:	b0fff60e 	bge	r22,r3,4001200 <__alt_data_end+0xfe001200>
 4001228:	8809883a 	mov	r4,r17
 400122c:	800b883a 	mov	r5,r16
 4001230:	d9811b04 	addi	r6,sp,1132
 4001234:	40006c00 	call	40006c0 <__sprint_r>
 4001238:	103e741e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 400123c:	bdfffc04 	addi	r23,r23,-16
 4001240:	da011d17 	ldw	r8,1140(sp)
 4001244:	d8c11c17 	ldw	r3,1136(sp)
 4001248:	da400404 	addi	r9,sp,16
 400124c:	e5ffef16 	blt	fp,r23,400120c <__alt_data_end+0xfe00120c>
 4001250:	a021883a 	mov	r16,r20
 4001254:	9029883a 	mov	r20,r18
 4001258:	dc812a17 	ldw	r18,1192(sp)
 400125c:	4d000015 	stw	r20,0(r9)
 4001260:	4dc00115 	stw	r23,4(r9)
 4001264:	45d1883a 	add	r8,r8,r23
 4001268:	18c00044 	addi	r3,r3,1
 400126c:	da011d15 	stw	r8,1140(sp)
 4001270:	d8c11c15 	stw	r3,1136(sp)
 4001274:	008001c4 	movi	r2,7
 4001278:	10c13e16 	blt	r2,r3,4001774 <___vfprintf_internal_r+0x1080>
 400127c:	4a400204 	addi	r9,r9,8
 4001280:	8080400c 	andi	r2,r16,256
 4001284:	1000831e 	bne	r2,zero,4001494 <___vfprintf_internal_r+0xda0>
 4001288:	d8812b17 	ldw	r2,1196(sp)
 400128c:	4cc00015 	stw	r19,0(r9)
 4001290:	48800115 	stw	r2,4(r9)
 4001294:	4091883a 	add	r8,r8,r2
 4001298:	18c00044 	addi	r3,r3,1
 400129c:	da011d15 	stw	r8,1140(sp)
 40012a0:	d8c11c15 	stw	r3,1136(sp)
 40012a4:	008001c4 	movi	r2,7
 40012a8:	10c05316 	blt	r2,r3,40013f8 <___vfprintf_internal_r+0xd04>
 40012ac:	4a400204 	addi	r9,r9,8
 40012b0:	8400010c 	andi	r16,r16,4
 40012b4:	80002e26 	beq	r16,zero,4001370 <___vfprintf_internal_r+0xc7c>
 40012b8:	d8812e17 	ldw	r2,1208(sp)
 40012bc:	d8c12817 	ldw	r3,1184(sp)
 40012c0:	10e1c83a 	sub	r16,r2,r3
 40012c4:	04002a0e 	bge	zero,r16,4001370 <___vfprintf_internal_r+0xc7c>
 40012c8:	04800404 	movi	r18,16
 40012cc:	d8c11c17 	ldw	r3,1136(sp)
 40012d0:	05c10074 	movhi	r23,1025
 40012d4:	bdf17684 	addi	r23,r23,-14886
 40012d8:	9400170e 	bge	r18,r16,4001338 <___vfprintf_internal_r+0xc44>
 40012dc:	04c001c4 	movi	r19,7
 40012e0:	dd012917 	ldw	r20,1188(sp)
 40012e4:	00000306 	br	40012f4 <___vfprintf_internal_r+0xc00>
 40012e8:	843ffc04 	addi	r16,r16,-16
 40012ec:	4a400204 	addi	r9,r9,8
 40012f0:	9400110e 	bge	r18,r16,4001338 <___vfprintf_internal_r+0xc44>
 40012f4:	4dc00015 	stw	r23,0(r9)
 40012f8:	4c800115 	stw	r18,4(r9)
 40012fc:	42000404 	addi	r8,r8,16
 4001300:	18c00044 	addi	r3,r3,1
 4001304:	da011d15 	stw	r8,1140(sp)
 4001308:	d8c11c15 	stw	r3,1136(sp)
 400130c:	98fff60e 	bge	r19,r3,40012e8 <__alt_data_end+0xfe0012e8>
 4001310:	8809883a 	mov	r4,r17
 4001314:	a00b883a 	mov	r5,r20
 4001318:	d9811b04 	addi	r6,sp,1132
 400131c:	40006c00 	call	40006c0 <__sprint_r>
 4001320:	103e3a1e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001324:	843ffc04 	addi	r16,r16,-16
 4001328:	da011d17 	ldw	r8,1140(sp)
 400132c:	d8c11c17 	ldw	r3,1136(sp)
 4001330:	da400404 	addi	r9,sp,16
 4001334:	943fef16 	blt	r18,r16,40012f4 <__alt_data_end+0xfe0012f4>
 4001338:	4dc00015 	stw	r23,0(r9)
 400133c:	4c000115 	stw	r16,4(r9)
 4001340:	8211883a 	add	r8,r16,r8
 4001344:	18c00044 	addi	r3,r3,1
 4001348:	da011d15 	stw	r8,1140(sp)
 400134c:	d8c11c15 	stw	r3,1136(sp)
 4001350:	008001c4 	movi	r2,7
 4001354:	10c0060e 	bge	r2,r3,4001370 <___vfprintf_internal_r+0xc7c>
 4001358:	d9412917 	ldw	r5,1188(sp)
 400135c:	8809883a 	mov	r4,r17
 4001360:	d9811b04 	addi	r6,sp,1132
 4001364:	40006c00 	call	40006c0 <__sprint_r>
 4001368:	103e281e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 400136c:	da011d17 	ldw	r8,1140(sp)
 4001370:	dd012817 	ldw	r20,1184(sp)
 4001374:	d9012e17 	ldw	r4,1208(sp)
 4001378:	a100010e 	bge	r20,r4,4001380 <___vfprintf_internal_r+0xc8c>
 400137c:	2029883a 	mov	r20,r4
 4001380:	d8812c17 	ldw	r2,1200(sp)
 4001384:	1505883a 	add	r2,r2,r20
 4001388:	d8812c15 	stw	r2,1200(sp)
 400138c:	4000b91e 	bne	r8,zero,4001674 <___vfprintf_internal_r+0xf80>
 4001390:	d8011c15 	stw	zero,1136(sp)
 4001394:	a8800007 	ldb	r2,0(r21)
 4001398:	da400404 	addi	r9,sp,16
 400139c:	103d0d1e 	bne	r2,zero,40007d4 <__alt_data_end+0xfe0007d4>
 40013a0:	a825883a 	mov	r18,r21
 40013a4:	003d2306 	br	4000834 <__alt_data_end+0xfe000834>
 40013a8:	d9412917 	ldw	r5,1188(sp)
 40013ac:	8809883a 	mov	r4,r17
 40013b0:	d9811b04 	addi	r6,sp,1132
 40013b4:	40006c00 	call	40006c0 <__sprint_r>
 40013b8:	103e141e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 40013bc:	da011d17 	ldw	r8,1140(sp)
 40013c0:	da400404 	addi	r9,sp,16
 40013c4:	8080004c 	andi	r2,r16,1
 40013c8:	103fb926 	beq	r2,zero,40012b0 <__alt_data_end+0xfe0012b0>
 40013cc:	d8c11c17 	ldw	r3,1136(sp)
 40013d0:	d9013717 	ldw	r4,1244(sp)
 40013d4:	00800044 	movi	r2,1
 40013d8:	48800115 	stw	r2,4(r9)
 40013dc:	49000015 	stw	r4,0(r9)
 40013e0:	4091883a 	add	r8,r8,r2
 40013e4:	1887883a 	add	r3,r3,r2
 40013e8:	da011d15 	stw	r8,1140(sp)
 40013ec:	d8c11c15 	stw	r3,1136(sp)
 40013f0:	008001c4 	movi	r2,7
 40013f4:	10ffad0e 	bge	r2,r3,40012ac <__alt_data_end+0xfe0012ac>
 40013f8:	d9412917 	ldw	r5,1188(sp)
 40013fc:	8809883a 	mov	r4,r17
 4001400:	d9811b04 	addi	r6,sp,1132
 4001404:	40006c00 	call	40006c0 <__sprint_r>
 4001408:	103e001e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 400140c:	da400404 	addi	r9,sp,16
 4001410:	da011d17 	ldw	r8,1140(sp)
 4001414:	003fa606 	br	40012b0 <__alt_data_end+0xfe0012b0>
 4001418:	18803fcc 	andi	r2,r3,255
 400141c:	00c00044 	movi	r3,1
 4001420:	10c10126 	beq	r2,r3,4001828 <___vfprintf_internal_r+0x1134>
 4001424:	00c00084 	movi	r3,2
 4001428:	10c0ed26 	beq	r2,r3,40017e0 <___vfprintf_internal_r+0x10ec>
 400142c:	d8c10dc4 	addi	r3,sp,1079
 4001430:	b808d0fa 	srli	r4,r23,3
 4001434:	b00a977a 	slli	r5,r22,29
 4001438:	b02cd0fa 	srli	r22,r22,3
 400143c:	bdc001cc 	andi	r23,r23,7
 4001440:	b8800c04 	addi	r2,r23,48
 4001444:	292eb03a 	or	r23,r5,r4
 4001448:	18800005 	stb	r2,0(r3)
 400144c:	bd88b03a 	or	r4,r23,r22
 4001450:	1827883a 	mov	r19,r3
 4001454:	18ffffc4 	addi	r3,r3,-1
 4001458:	203ff51e 	bne	r4,zero,4001430 <__alt_data_end+0xfe001430>
 400145c:	8100004c 	andi	r4,r16,1
 4001460:	980b883a 	mov	r5,r19
 4001464:	20000726 	beq	r4,zero,4001484 <___vfprintf_internal_r+0xd90>
 4001468:	10803fcc 	andi	r2,r2,255
 400146c:	1080201c 	xori	r2,r2,128
 4001470:	10bfe004 	addi	r2,r2,-128
 4001474:	01000c04 	movi	r4,48
 4001478:	11000226 	beq	r2,r4,4001484 <___vfprintf_internal_r+0xd90>
 400147c:	1827883a 	mov	r19,r3
 4001480:	293fffc5 	stb	r4,-1(r5)
 4001484:	d8812717 	ldw	r2,1180(sp)
 4001488:	14c5c83a 	sub	r2,r2,r19
 400148c:	d8812b15 	stw	r2,1196(sp)
 4001490:	003e1f06 	br	4000d10 <__alt_data_end+0xfe000d10>
 4001494:	00801944 	movi	r2,101
 4001498:	14807c0e 	bge	r2,r18,400168c <___vfprintf_internal_r+0xf98>
 400149c:	d9013317 	ldw	r4,1228(sp)
 40014a0:	d9413417 	ldw	r5,1232(sp)
 40014a4:	000d883a 	mov	r6,zero
 40014a8:	000f883a 	mov	r7,zero
 40014ac:	d8c13b15 	stw	r3,1260(sp)
 40014b0:	da013a15 	stw	r8,1256(sp)
 40014b4:	da413c15 	stw	r9,1264(sp)
 40014b8:	40092800 	call	4009280 <__nedf2>
 40014bc:	d8c13b17 	ldw	r3,1260(sp)
 40014c0:	da013a17 	ldw	r8,1256(sp)
 40014c4:	da413c17 	ldw	r9,1264(sp)
 40014c8:	1001001e 	bne	r2,zero,40018cc <___vfprintf_internal_r+0x11d8>
 40014cc:	00810074 	movhi	r2,1025
 40014d0:	10b17604 	addi	r2,r2,-14888
 40014d4:	48800015 	stw	r2,0(r9)
 40014d8:	00800044 	movi	r2,1
 40014dc:	48800115 	stw	r2,4(r9)
 40014e0:	4091883a 	add	r8,r8,r2
 40014e4:	1887883a 	add	r3,r3,r2
 40014e8:	da011d15 	stw	r8,1140(sp)
 40014ec:	d8c11c15 	stw	r3,1136(sp)
 40014f0:	008001c4 	movi	r2,7
 40014f4:	10c20316 	blt	r2,r3,4001d04 <___vfprintf_internal_r+0x1610>
 40014f8:	4a400204 	addi	r9,r9,8
 40014fc:	d8812417 	ldw	r2,1168(sp)
 4001500:	d8c13217 	ldw	r3,1224(sp)
 4001504:	10c00216 	blt	r2,r3,4001510 <___vfprintf_internal_r+0xe1c>
 4001508:	8080004c 	andi	r2,r16,1
 400150c:	103f6826 	beq	r2,zero,40012b0 <__alt_data_end+0xfe0012b0>
 4001510:	d8c11c17 	ldw	r3,1136(sp)
 4001514:	d9013717 	ldw	r4,1244(sp)
 4001518:	00800044 	movi	r2,1
 400151c:	48800115 	stw	r2,4(r9)
 4001520:	49000015 	stw	r4,0(r9)
 4001524:	4091883a 	add	r8,r8,r2
 4001528:	1887883a 	add	r3,r3,r2
 400152c:	da011d15 	stw	r8,1140(sp)
 4001530:	d8c11c15 	stw	r3,1136(sp)
 4001534:	008001c4 	movi	r2,7
 4001538:	10c2ce16 	blt	r2,r3,4002074 <___vfprintf_internal_r+0x1980>
 400153c:	4a400204 	addi	r9,r9,8
 4001540:	d8813217 	ldw	r2,1224(sp)
 4001544:	14bfffc4 	addi	r18,r2,-1
 4001548:	04bf590e 	bge	zero,r18,40012b0 <__alt_data_end+0xfe0012b0>
 400154c:	04c00404 	movi	r19,16
 4001550:	d8c11c17 	ldw	r3,1136(sp)
 4001554:	05010074 	movhi	r20,1025
 4001558:	a5317a84 	addi	r20,r20,-14870
 400155c:	9c818a0e 	bge	r19,r18,4001b88 <___vfprintf_internal_r+0x1494>
 4001560:	058001c4 	movi	r22,7
 4001564:	ddc12917 	ldw	r23,1188(sp)
 4001568:	00000306 	br	4001578 <___vfprintf_internal_r+0xe84>
 400156c:	4a400204 	addi	r9,r9,8
 4001570:	94bffc04 	addi	r18,r18,-16
 4001574:	9c81840e 	bge	r19,r18,4001b88 <___vfprintf_internal_r+0x1494>
 4001578:	4d000015 	stw	r20,0(r9)
 400157c:	4cc00115 	stw	r19,4(r9)
 4001580:	42000404 	addi	r8,r8,16
 4001584:	18c00044 	addi	r3,r3,1
 4001588:	da011d15 	stw	r8,1140(sp)
 400158c:	d8c11c15 	stw	r3,1136(sp)
 4001590:	b0fff60e 	bge	r22,r3,400156c <__alt_data_end+0xfe00156c>
 4001594:	8809883a 	mov	r4,r17
 4001598:	b80b883a 	mov	r5,r23
 400159c:	d9811b04 	addi	r6,sp,1132
 40015a0:	40006c00 	call	40006c0 <__sprint_r>
 40015a4:	103d991e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 40015a8:	da011d17 	ldw	r8,1140(sp)
 40015ac:	d8c11c17 	ldw	r3,1136(sp)
 40015b0:	da400404 	addi	r9,sp,16
 40015b4:	003fee06 	br	4001570 <__alt_data_end+0xfe001570>
 40015b8:	d8812e17 	ldw	r2,1208(sp)
 40015bc:	d9012817 	ldw	r4,1184(sp)
 40015c0:	112fc83a 	sub	r23,r2,r4
 40015c4:	05ff000e 	bge	zero,r23,40011c8 <__alt_data_end+0xfe0011c8>
 40015c8:	07000404 	movi	fp,16
 40015cc:	05010074 	movhi	r20,1025
 40015d0:	a5317a84 	addi	r20,r20,-14870
 40015d4:	e5c01d0e 	bge	fp,r23,400164c <___vfprintf_internal_r+0xf58>
 40015d8:	dc812a15 	stw	r18,1192(sp)
 40015dc:	058001c4 	movi	r22,7
 40015e0:	a025883a 	mov	r18,r20
 40015e4:	8029883a 	mov	r20,r16
 40015e8:	dc012917 	ldw	r16,1188(sp)
 40015ec:	00000306 	br	40015fc <___vfprintf_internal_r+0xf08>
 40015f0:	bdfffc04 	addi	r23,r23,-16
 40015f4:	4a400204 	addi	r9,r9,8
 40015f8:	e5c0110e 	bge	fp,r23,4001640 <___vfprintf_internal_r+0xf4c>
 40015fc:	4c800015 	stw	r18,0(r9)
 4001600:	4f000115 	stw	fp,4(r9)
 4001604:	42000404 	addi	r8,r8,16
 4001608:	18c00044 	addi	r3,r3,1
 400160c:	da011d15 	stw	r8,1140(sp)
 4001610:	d8c11c15 	stw	r3,1136(sp)
 4001614:	b0fff60e 	bge	r22,r3,40015f0 <__alt_data_end+0xfe0015f0>
 4001618:	8809883a 	mov	r4,r17
 400161c:	800b883a 	mov	r5,r16
 4001620:	d9811b04 	addi	r6,sp,1132
 4001624:	40006c00 	call	40006c0 <__sprint_r>
 4001628:	103d781e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 400162c:	bdfffc04 	addi	r23,r23,-16
 4001630:	da011d17 	ldw	r8,1140(sp)
 4001634:	d8c11c17 	ldw	r3,1136(sp)
 4001638:	da400404 	addi	r9,sp,16
 400163c:	e5ffef16 	blt	fp,r23,40015fc <__alt_data_end+0xfe0015fc>
 4001640:	a021883a 	mov	r16,r20
 4001644:	9029883a 	mov	r20,r18
 4001648:	dc812a17 	ldw	r18,1192(sp)
 400164c:	4d000015 	stw	r20,0(r9)
 4001650:	4dc00115 	stw	r23,4(r9)
 4001654:	45d1883a 	add	r8,r8,r23
 4001658:	18c00044 	addi	r3,r3,1
 400165c:	da011d15 	stw	r8,1140(sp)
 4001660:	d8c11c15 	stw	r3,1136(sp)
 4001664:	008001c4 	movi	r2,7
 4001668:	10c13616 	blt	r2,r3,4001b44 <___vfprintf_internal_r+0x1450>
 400166c:	4a400204 	addi	r9,r9,8
 4001670:	003ed506 	br	40011c8 <__alt_data_end+0xfe0011c8>
 4001674:	d9412917 	ldw	r5,1188(sp)
 4001678:	8809883a 	mov	r4,r17
 400167c:	d9811b04 	addi	r6,sp,1132
 4001680:	40006c00 	call	40006c0 <__sprint_r>
 4001684:	103f4226 	beq	r2,zero,4001390 <__alt_data_end+0xfe001390>
 4001688:	003d6006 	br	4000c0c <__alt_data_end+0xfe000c0c>
 400168c:	d9013217 	ldw	r4,1224(sp)
 4001690:	00800044 	movi	r2,1
 4001694:	4cc00015 	stw	r19,0(r9)
 4001698:	1101000e 	bge	r2,r4,4001a9c <___vfprintf_internal_r+0x13a8>
 400169c:	00800044 	movi	r2,1
 40016a0:	48800115 	stw	r2,4(r9)
 40016a4:	4091883a 	add	r8,r8,r2
 40016a8:	1887883a 	add	r3,r3,r2
 40016ac:	da011d15 	stw	r8,1140(sp)
 40016b0:	d8c11c15 	stw	r3,1136(sp)
 40016b4:	008001c4 	movi	r2,7
 40016b8:	10c10c16 	blt	r2,r3,4001aec <___vfprintf_internal_r+0x13f8>
 40016bc:	4a400204 	addi	r9,r9,8
 40016c0:	d8813717 	ldw	r2,1244(sp)
 40016c4:	48800015 	stw	r2,0(r9)
 40016c8:	00800044 	movi	r2,1
 40016cc:	48800115 	stw	r2,4(r9)
 40016d0:	4091883a 	add	r8,r8,r2
 40016d4:	1887883a 	add	r3,r3,r2
 40016d8:	da011d15 	stw	r8,1140(sp)
 40016dc:	d8c11c15 	stw	r3,1136(sp)
 40016e0:	008001c4 	movi	r2,7
 40016e4:	10c10a16 	blt	r2,r3,4001b10 <___vfprintf_internal_r+0x141c>
 40016e8:	4c800204 	addi	r18,r9,8
 40016ec:	d9013317 	ldw	r4,1228(sp)
 40016f0:	d9413417 	ldw	r5,1232(sp)
 40016f4:	000d883a 	mov	r6,zero
 40016f8:	000f883a 	mov	r7,zero
 40016fc:	d8c13b15 	stw	r3,1260(sp)
 4001700:	da013a15 	stw	r8,1256(sp)
 4001704:	40092240 	call	4009224 <__eqdf2>
 4001708:	d8c13b17 	ldw	r3,1260(sp)
 400170c:	da013a17 	ldw	r8,1256(sp)
 4001710:	1000ba26 	beq	r2,zero,40019fc <___vfprintf_internal_r+0x1308>
 4001714:	d9013217 	ldw	r4,1224(sp)
 4001718:	9cc00044 	addi	r19,r19,1
 400171c:	94c00015 	stw	r19,0(r18)
 4001720:	20bfffc4 	addi	r2,r4,-1
 4001724:	90800115 	stw	r2,4(r18)
 4001728:	4091883a 	add	r8,r8,r2
 400172c:	18c00044 	addi	r3,r3,1
 4001730:	da011d15 	stw	r8,1140(sp)
 4001734:	d8c11c15 	stw	r3,1136(sp)
 4001738:	008001c4 	movi	r2,7
 400173c:	10c0e216 	blt	r2,r3,4001ac8 <___vfprintf_internal_r+0x13d4>
 4001740:	94800204 	addi	r18,r18,8
 4001744:	d9013517 	ldw	r4,1236(sp)
 4001748:	d8811fc4 	addi	r2,sp,1151
 400174c:	90800015 	stw	r2,0(r18)
 4001750:	91000115 	stw	r4,4(r18)
 4001754:	4111883a 	add	r8,r8,r4
 4001758:	18c00044 	addi	r3,r3,1
 400175c:	da011d15 	stw	r8,1140(sp)
 4001760:	d8c11c15 	stw	r3,1136(sp)
 4001764:	008001c4 	movi	r2,7
 4001768:	10ff2316 	blt	r2,r3,40013f8 <__alt_data_end+0xfe0013f8>
 400176c:	92400204 	addi	r9,r18,8
 4001770:	003ecf06 	br	40012b0 <__alt_data_end+0xfe0012b0>
 4001774:	d9412917 	ldw	r5,1188(sp)
 4001778:	8809883a 	mov	r4,r17
 400177c:	d9811b04 	addi	r6,sp,1132
 4001780:	40006c00 	call	40006c0 <__sprint_r>
 4001784:	103d211e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001788:	da011d17 	ldw	r8,1140(sp)
 400178c:	d8c11c17 	ldw	r3,1136(sp)
 4001790:	da400404 	addi	r9,sp,16
 4001794:	003eba06 	br	4001280 <__alt_data_end+0xfe001280>
 4001798:	d9412917 	ldw	r5,1188(sp)
 400179c:	8809883a 	mov	r4,r17
 40017a0:	d9811b04 	addi	r6,sp,1132
 40017a4:	40006c00 	call	40006c0 <__sprint_r>
 40017a8:	103d181e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 40017ac:	da011d17 	ldw	r8,1140(sp)
 40017b0:	d8c11c17 	ldw	r3,1136(sp)
 40017b4:	da400404 	addi	r9,sp,16
 40017b8:	003e8006 	br	40011bc <__alt_data_end+0xfe0011bc>
 40017bc:	d9412917 	ldw	r5,1188(sp)
 40017c0:	8809883a 	mov	r4,r17
 40017c4:	d9811b04 	addi	r6,sp,1132
 40017c8:	40006c00 	call	40006c0 <__sprint_r>
 40017cc:	103d0f1e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 40017d0:	da011d17 	ldw	r8,1140(sp)
 40017d4:	d8c11c17 	ldw	r3,1136(sp)
 40017d8:	da400404 	addi	r9,sp,16
 40017dc:	003e6a06 	br	4001188 <__alt_data_end+0xfe001188>
 40017e0:	d9413617 	ldw	r5,1240(sp)
 40017e4:	d8810dc4 	addi	r2,sp,1079
 40017e8:	b8c003cc 	andi	r3,r23,15
 40017ec:	b008973a 	slli	r4,r22,28
 40017f0:	28c7883a 	add	r3,r5,r3
 40017f4:	b82ed13a 	srli	r23,r23,4
 40017f8:	18c00003 	ldbu	r3,0(r3)
 40017fc:	b02cd13a 	srli	r22,r22,4
 4001800:	25eeb03a 	or	r23,r4,r23
 4001804:	10c00005 	stb	r3,0(r2)
 4001808:	bd86b03a 	or	r3,r23,r22
 400180c:	1027883a 	mov	r19,r2
 4001810:	10bfffc4 	addi	r2,r2,-1
 4001814:	183ff41e 	bne	r3,zero,40017e8 <__alt_data_end+0xfe0017e8>
 4001818:	003f1a06 	br	4001484 <__alt_data_end+0xfe001484>
 400181c:	d8012b15 	stw	zero,1196(sp)
 4001820:	dcc10e04 	addi	r19,sp,1080
 4001824:	003d3a06 	br	4000d10 <__alt_data_end+0xfe000d10>
 4001828:	b0025426 	beq	r22,zero,400217c <___vfprintf_internal_r+0x1a88>
 400182c:	b807883a 	mov	r3,r23
 4001830:	d8810dc4 	addi	r2,sp,1079
 4001834:	882f883a 	mov	r23,r17
 4001838:	04c00244 	movi	r19,9
 400183c:	8023883a 	mov	r17,r16
 4001840:	da412815 	stw	r9,1184(sp)
 4001844:	1821883a 	mov	r16,r3
 4001848:	8009883a 	mov	r4,r16
 400184c:	b00b883a 	mov	r5,r22
 4001850:	01800284 	movi	r6,10
 4001854:	000f883a 	mov	r7,zero
 4001858:	1029883a 	mov	r20,r2
 400185c:	400835c0 	call	400835c <__umoddi3>
 4001860:	10800c04 	addi	r2,r2,48
 4001864:	8009883a 	mov	r4,r16
 4001868:	b00b883a 	mov	r5,r22
 400186c:	a0800005 	stb	r2,0(r20)
 4001870:	01800284 	movi	r6,10
 4001874:	000f883a 	mov	r7,zero
 4001878:	4007d0c0 	call	4007d0c <__udivdi3>
 400187c:	1021883a 	mov	r16,r2
 4001880:	182d883a 	mov	r22,r3
 4001884:	a0bfffc4 	addi	r2,r20,-1
 4001888:	183fef1e 	bne	r3,zero,4001848 <__alt_data_end+0xfe001848>
 400188c:	9c3fee36 	bltu	r19,r16,4001848 <__alt_data_end+0xfe001848>
 4001890:	da412817 	ldw	r9,1184(sp)
 4001894:	8005883a 	mov	r2,r16
 4001898:	8821883a 	mov	r16,r17
 400189c:	b823883a 	mov	r17,r23
 40018a0:	102f883a 	mov	r23,r2
 40018a4:	d8812717 	ldw	r2,1180(sp)
 40018a8:	a4ffffc4 	addi	r19,r20,-1
 40018ac:	bdc00c04 	addi	r23,r23,48
 40018b0:	14c5c83a 	sub	r2,r2,r19
 40018b4:	a5ffffc5 	stb	r23,-1(r20)
 40018b8:	d8812b15 	stw	r2,1196(sp)
 40018bc:	003d1406 	br	4000d10 <__alt_data_end+0xfe000d10>
 40018c0:	00c00044 	movi	r3,1
 40018c4:	bd84b03a 	or	r2,r23,r22
 40018c8:	003d0306 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 40018cc:	dc812417 	ldw	r18,1168(sp)
 40018d0:	0481140e 	bge	zero,r18,4001d24 <___vfprintf_internal_r+0x1630>
 40018d4:	d9013217 	ldw	r4,1224(sp)
 40018d8:	4cc00015 	stw	r19,0(r9)
 40018dc:	9100ec16 	blt	r18,r4,4001c90 <___vfprintf_internal_r+0x159c>
 40018e0:	49000115 	stw	r4,4(r9)
 40018e4:	4111883a 	add	r8,r8,r4
 40018e8:	18c00044 	addi	r3,r3,1
 40018ec:	da011d15 	stw	r8,1140(sp)
 40018f0:	d8c11c15 	stw	r3,1136(sp)
 40018f4:	008001c4 	movi	r2,7
 40018f8:	10c23616 	blt	r2,r3,40021d4 <___vfprintf_internal_r+0x1ae0>
 40018fc:	4a400204 	addi	r9,r9,8
 4001900:	d8813217 	ldw	r2,1224(sp)
 4001904:	90a5c83a 	sub	r18,r18,r2
 4001908:	04beae0e 	bge	zero,r18,40013c4 <__alt_data_end+0xfe0013c4>
 400190c:	04c00404 	movi	r19,16
 4001910:	d8c11c17 	ldw	r3,1136(sp)
 4001914:	05010074 	movhi	r20,1025
 4001918:	a5317a84 	addi	r20,r20,-14870
 400191c:	9c81dd0e 	bge	r19,r18,4002094 <___vfprintf_internal_r+0x19a0>
 4001920:	058001c4 	movi	r22,7
 4001924:	ddc12917 	ldw	r23,1188(sp)
 4001928:	00000306 	br	4001938 <___vfprintf_internal_r+0x1244>
 400192c:	4a400204 	addi	r9,r9,8
 4001930:	94bffc04 	addi	r18,r18,-16
 4001934:	9c81d70e 	bge	r19,r18,4002094 <___vfprintf_internal_r+0x19a0>
 4001938:	4d000015 	stw	r20,0(r9)
 400193c:	4cc00115 	stw	r19,4(r9)
 4001940:	42000404 	addi	r8,r8,16
 4001944:	18c00044 	addi	r3,r3,1
 4001948:	da011d15 	stw	r8,1140(sp)
 400194c:	d8c11c15 	stw	r3,1136(sp)
 4001950:	b0fff60e 	bge	r22,r3,400192c <__alt_data_end+0xfe00192c>
 4001954:	8809883a 	mov	r4,r17
 4001958:	b80b883a 	mov	r5,r23
 400195c:	d9811b04 	addi	r6,sp,1132
 4001960:	40006c00 	call	40006c0 <__sprint_r>
 4001964:	103ca91e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001968:	da011d17 	ldw	r8,1140(sp)
 400196c:	d8c11c17 	ldw	r3,1136(sp)
 4001970:	da400404 	addi	r9,sp,16
 4001974:	003fee06 	br	4001930 <__alt_data_end+0xfe001930>
 4001978:	d9412917 	ldw	r5,1188(sp)
 400197c:	8809883a 	mov	r4,r17
 4001980:	d9811b04 	addi	r6,sp,1132
 4001984:	40006c00 	call	40006c0 <__sprint_r>
 4001988:	103ca01e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 400198c:	da011d17 	ldw	r8,1140(sp)
 4001990:	d8c11c17 	ldw	r3,1136(sp)
 4001994:	da400404 	addi	r9,sp,16
 4001998:	003dee06 	br	4001154 <__alt_data_end+0xfe001154>
 400199c:	00c00084 	movi	r3,2
 40019a0:	bd84b03a 	or	r2,r23,r22
 40019a4:	d8012585 	stb	zero,1174(sp)
 40019a8:	003ccb06 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 40019ac:	8080040c 	andi	r2,r16,16
 40019b0:	1000ae26 	beq	r2,zero,4001c6c <___vfprintf_internal_r+0x1578>
 40019b4:	d9012d17 	ldw	r4,1204(sp)
 40019b8:	25c00017 	ldw	r23,0(r4)
 40019bc:	21000104 	addi	r4,r4,4
 40019c0:	d9012d15 	stw	r4,1204(sp)
 40019c4:	b82dd7fa 	srai	r22,r23,31
 40019c8:	b005883a 	mov	r2,r22
 40019cc:	003cb906 	br	4000cb4 <__alt_data_end+0xfe000cb4>
 40019d0:	8080040c 	andi	r2,r16,16
 40019d4:	10007026 	beq	r2,zero,4001b98 <___vfprintf_internal_r+0x14a4>
 40019d8:	d8812d17 	ldw	r2,1204(sp)
 40019dc:	002d883a 	mov	r22,zero
 40019e0:	00c00044 	movi	r3,1
 40019e4:	15c00017 	ldw	r23,0(r2)
 40019e8:	10800104 	addi	r2,r2,4
 40019ec:	d8812d15 	stw	r2,1204(sp)
 40019f0:	d8012585 	stb	zero,1174(sp)
 40019f4:	b805883a 	mov	r2,r23
 40019f8:	003cb706 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 40019fc:	d8813217 	ldw	r2,1224(sp)
 4001a00:	14ffffc4 	addi	r19,r2,-1
 4001a04:	04ff4f0e 	bge	zero,r19,4001744 <__alt_data_end+0xfe001744>
 4001a08:	05800404 	movi	r22,16
 4001a0c:	05010074 	movhi	r20,1025
 4001a10:	a5317a84 	addi	r20,r20,-14870
 4001a14:	b4c0470e 	bge	r22,r19,4001b34 <___vfprintf_internal_r+0x1440>
 4001a18:	05c001c4 	movi	r23,7
 4001a1c:	df012917 	ldw	fp,1188(sp)
 4001a20:	00000306 	br	4001a30 <___vfprintf_internal_r+0x133c>
 4001a24:	94800204 	addi	r18,r18,8
 4001a28:	9cfffc04 	addi	r19,r19,-16
 4001a2c:	b4c0410e 	bge	r22,r19,4001b34 <___vfprintf_internal_r+0x1440>
 4001a30:	95000015 	stw	r20,0(r18)
 4001a34:	95800115 	stw	r22,4(r18)
 4001a38:	42000404 	addi	r8,r8,16
 4001a3c:	18c00044 	addi	r3,r3,1
 4001a40:	da011d15 	stw	r8,1140(sp)
 4001a44:	d8c11c15 	stw	r3,1136(sp)
 4001a48:	b8fff60e 	bge	r23,r3,4001a24 <__alt_data_end+0xfe001a24>
 4001a4c:	8809883a 	mov	r4,r17
 4001a50:	e00b883a 	mov	r5,fp
 4001a54:	d9811b04 	addi	r6,sp,1132
 4001a58:	40006c00 	call	40006c0 <__sprint_r>
 4001a5c:	103c6b1e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001a60:	da011d17 	ldw	r8,1140(sp)
 4001a64:	d8c11c17 	ldw	r3,1136(sp)
 4001a68:	dc800404 	addi	r18,sp,16
 4001a6c:	003fee06 	br	4001a28 <__alt_data_end+0xfe001a28>
 4001a70:	8080040c 	andi	r2,r16,16
 4001a74:	10005326 	beq	r2,zero,4001bc4 <___vfprintf_internal_r+0x14d0>
 4001a78:	d8c12d17 	ldw	r3,1204(sp)
 4001a7c:	002d883a 	mov	r22,zero
 4001a80:	1dc00017 	ldw	r23,0(r3)
 4001a84:	18c00104 	addi	r3,r3,4
 4001a88:	d8c12d15 	stw	r3,1204(sp)
 4001a8c:	b805883a 	mov	r2,r23
 4001a90:	0007883a 	mov	r3,zero
 4001a94:	d8012585 	stb	zero,1174(sp)
 4001a98:	003c8f06 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4001a9c:	8088703a 	and	r4,r16,r2
 4001aa0:	203efe1e 	bne	r4,zero,400169c <__alt_data_end+0xfe00169c>
 4001aa4:	48800115 	stw	r2,4(r9)
 4001aa8:	42000044 	addi	r8,r8,1
 4001aac:	18c00044 	addi	r3,r3,1
 4001ab0:	da011d15 	stw	r8,1140(sp)
 4001ab4:	d8c11c15 	stw	r3,1136(sp)
 4001ab8:	008001c4 	movi	r2,7
 4001abc:	10c00216 	blt	r2,r3,4001ac8 <___vfprintf_internal_r+0x13d4>
 4001ac0:	4c800204 	addi	r18,r9,8
 4001ac4:	003f1f06 	br	4001744 <__alt_data_end+0xfe001744>
 4001ac8:	d9412917 	ldw	r5,1188(sp)
 4001acc:	8809883a 	mov	r4,r17
 4001ad0:	d9811b04 	addi	r6,sp,1132
 4001ad4:	40006c00 	call	40006c0 <__sprint_r>
 4001ad8:	103c4c1e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001adc:	dc800404 	addi	r18,sp,16
 4001ae0:	da011d17 	ldw	r8,1140(sp)
 4001ae4:	d8c11c17 	ldw	r3,1136(sp)
 4001ae8:	003f1606 	br	4001744 <__alt_data_end+0xfe001744>
 4001aec:	d9412917 	ldw	r5,1188(sp)
 4001af0:	8809883a 	mov	r4,r17
 4001af4:	d9811b04 	addi	r6,sp,1132
 4001af8:	40006c00 	call	40006c0 <__sprint_r>
 4001afc:	103c431e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001b00:	da011d17 	ldw	r8,1140(sp)
 4001b04:	d8c11c17 	ldw	r3,1136(sp)
 4001b08:	da400404 	addi	r9,sp,16
 4001b0c:	003eec06 	br	40016c0 <__alt_data_end+0xfe0016c0>
 4001b10:	d9412917 	ldw	r5,1188(sp)
 4001b14:	8809883a 	mov	r4,r17
 4001b18:	d9811b04 	addi	r6,sp,1132
 4001b1c:	40006c00 	call	40006c0 <__sprint_r>
 4001b20:	103c3a1e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001b24:	da011d17 	ldw	r8,1140(sp)
 4001b28:	d8c11c17 	ldw	r3,1136(sp)
 4001b2c:	dc800404 	addi	r18,sp,16
 4001b30:	003eee06 	br	40016ec <__alt_data_end+0xfe0016ec>
 4001b34:	95000015 	stw	r20,0(r18)
 4001b38:	94c00115 	stw	r19,4(r18)
 4001b3c:	44d1883a 	add	r8,r8,r19
 4001b40:	003efa06 	br	400172c <__alt_data_end+0xfe00172c>
 4001b44:	d9412917 	ldw	r5,1188(sp)
 4001b48:	8809883a 	mov	r4,r17
 4001b4c:	d9811b04 	addi	r6,sp,1132
 4001b50:	40006c00 	call	40006c0 <__sprint_r>
 4001b54:	103c2d1e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001b58:	da011d17 	ldw	r8,1140(sp)
 4001b5c:	d8c11c17 	ldw	r3,1136(sp)
 4001b60:	da400404 	addi	r9,sp,16
 4001b64:	003d9806 	br	40011c8 <__alt_data_end+0xfe0011c8>
 4001b68:	8080100c 	andi	r2,r16,64
 4001b6c:	10011626 	beq	r2,zero,4001fc8 <___vfprintf_internal_r+0x18d4>
 4001b70:	d8c12d17 	ldw	r3,1204(sp)
 4001b74:	002d883a 	mov	r22,zero
 4001b78:	1dc0000b 	ldhu	r23,0(r3)
 4001b7c:	18c00104 	addi	r3,r3,4
 4001b80:	d8c12d15 	stw	r3,1204(sp)
 4001b84:	003cc106 	br	4000e8c <__alt_data_end+0xfe000e8c>
 4001b88:	4d000015 	stw	r20,0(r9)
 4001b8c:	4c800115 	stw	r18,4(r9)
 4001b90:	4491883a 	add	r8,r8,r18
 4001b94:	003dc006 	br	4001298 <__alt_data_end+0xfe001298>
 4001b98:	8080100c 	andi	r2,r16,64
 4001b9c:	10010126 	beq	r2,zero,4001fa4 <___vfprintf_internal_r+0x18b0>
 4001ba0:	d8c12d17 	ldw	r3,1204(sp)
 4001ba4:	002d883a 	mov	r22,zero
 4001ba8:	1dc0000b 	ldhu	r23,0(r3)
 4001bac:	18c00104 	addi	r3,r3,4
 4001bb0:	d8c12d15 	stw	r3,1204(sp)
 4001bb4:	b805883a 	mov	r2,r23
 4001bb8:	00c00044 	movi	r3,1
 4001bbc:	d8012585 	stb	zero,1174(sp)
 4001bc0:	003c4506 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4001bc4:	8080100c 	andi	r2,r16,64
 4001bc8:	10010526 	beq	r2,zero,4001fe0 <___vfprintf_internal_r+0x18ec>
 4001bcc:	d9012d17 	ldw	r4,1204(sp)
 4001bd0:	002d883a 	mov	r22,zero
 4001bd4:	0007883a 	mov	r3,zero
 4001bd8:	25c0000b 	ldhu	r23,0(r4)
 4001bdc:	21000104 	addi	r4,r4,4
 4001be0:	d9012d15 	stw	r4,1204(sp)
 4001be4:	b805883a 	mov	r2,r23
 4001be8:	d8012585 	stb	zero,1174(sp)
 4001bec:	003c3a06 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4001bf0:	d8812d17 	ldw	r2,1204(sp)
 4001bf4:	15800017 	ldw	r22,0(r2)
 4001bf8:	15000117 	ldw	r20,4(r2)
 4001bfc:	10800204 	addi	r2,r2,8
 4001c00:	d8812d15 	stw	r2,1204(sp)
 4001c04:	dd813315 	stw	r22,1228(sp)
 4001c08:	dd013415 	stw	r20,1232(sp)
 4001c0c:	003c5906 	br	4000d74 <__alt_data_end+0xfe000d74>
 4001c10:	00c00084 	movi	r3,2
 4001c14:	d8012585 	stb	zero,1174(sp)
 4001c18:	003c2f06 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4001c1c:	ac800007 	ldb	r18,0(r21)
 4001c20:	003b1006 	br	4000864 <__alt_data_end+0xfe000864>
 4001c24:	8080040c 	andi	r2,r16,16
 4001c28:	1000091e 	bne	r2,zero,4001c50 <___vfprintf_internal_r+0x155c>
 4001c2c:	8400100c 	andi	r16,r16,64
 4001c30:	80000726 	beq	r16,zero,4001c50 <___vfprintf_internal_r+0x155c>
 4001c34:	d8c12d17 	ldw	r3,1204(sp)
 4001c38:	d9012c17 	ldw	r4,1200(sp)
 4001c3c:	18800017 	ldw	r2,0(r3)
 4001c40:	18c00104 	addi	r3,r3,4
 4001c44:	d8c12d15 	stw	r3,1204(sp)
 4001c48:	1100000d 	sth	r4,0(r2)
 4001c4c:	003adf06 	br	40007cc <__alt_data_end+0xfe0007cc>
 4001c50:	d8c12d17 	ldw	r3,1204(sp)
 4001c54:	d9012c17 	ldw	r4,1200(sp)
 4001c58:	18800017 	ldw	r2,0(r3)
 4001c5c:	18c00104 	addi	r3,r3,4
 4001c60:	d8c12d15 	stw	r3,1204(sp)
 4001c64:	11000015 	stw	r4,0(r2)
 4001c68:	003ad806 	br	40007cc <__alt_data_end+0xfe0007cc>
 4001c6c:	8080100c 	andi	r2,r16,64
 4001c70:	1000c526 	beq	r2,zero,4001f88 <___vfprintf_internal_r+0x1894>
 4001c74:	d8812d17 	ldw	r2,1204(sp)
 4001c78:	15c0000f 	ldh	r23,0(r2)
 4001c7c:	10800104 	addi	r2,r2,4
 4001c80:	d8812d15 	stw	r2,1204(sp)
 4001c84:	b82dd7fa 	srai	r22,r23,31
 4001c88:	b005883a 	mov	r2,r22
 4001c8c:	003c0906 	br	4000cb4 <__alt_data_end+0xfe000cb4>
 4001c90:	4c800115 	stw	r18,4(r9)
 4001c94:	9211883a 	add	r8,r18,r8
 4001c98:	18c00044 	addi	r3,r3,1
 4001c9c:	da011d15 	stw	r8,1140(sp)
 4001ca0:	d8c11c15 	stw	r3,1136(sp)
 4001ca4:	008001c4 	movi	r2,7
 4001ca8:	10c14016 	blt	r2,r3,40021ac <___vfprintf_internal_r+0x1ab8>
 4001cac:	4a400204 	addi	r9,r9,8
 4001cb0:	d8813717 	ldw	r2,1244(sp)
 4001cb4:	9ca7883a 	add	r19,r19,r18
 4001cb8:	48800015 	stw	r2,0(r9)
 4001cbc:	00800044 	movi	r2,1
 4001cc0:	48800115 	stw	r2,4(r9)
 4001cc4:	4091883a 	add	r8,r8,r2
 4001cc8:	1887883a 	add	r3,r3,r2
 4001ccc:	da011d15 	stw	r8,1140(sp)
 4001cd0:	d8c11c15 	stw	r3,1136(sp)
 4001cd4:	008001c4 	movi	r2,7
 4001cd8:	10c12c16 	blt	r2,r3,400218c <___vfprintf_internal_r+0x1a98>
 4001cdc:	4a400204 	addi	r9,r9,8
 4001ce0:	d9013217 	ldw	r4,1224(sp)
 4001ce4:	da011d17 	ldw	r8,1140(sp)
 4001ce8:	d8c11c17 	ldw	r3,1136(sp)
 4001cec:	24a5c83a 	sub	r18,r4,r18
 4001cf0:	4cc00015 	stw	r19,0(r9)
 4001cf4:	003fa506 	br	4001b8c <__alt_data_end+0xfe001b8c>
 4001cf8:	04c10074 	movhi	r19,1025
 4001cfc:	9cf16704 	addi	r19,r19,-14948
 4001d00:	003c2e06 	br	4000dbc <__alt_data_end+0xfe000dbc>
 4001d04:	d9412917 	ldw	r5,1188(sp)
 4001d08:	8809883a 	mov	r4,r17
 4001d0c:	d9811b04 	addi	r6,sp,1132
 4001d10:	40006c00 	call	40006c0 <__sprint_r>
 4001d14:	103bbd1e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001d18:	da011d17 	ldw	r8,1140(sp)
 4001d1c:	da400404 	addi	r9,sp,16
 4001d20:	003df606 	br	40014fc <__alt_data_end+0xfe0014fc>
 4001d24:	00810074 	movhi	r2,1025
 4001d28:	10b17604 	addi	r2,r2,-14888
 4001d2c:	48800015 	stw	r2,0(r9)
 4001d30:	00800044 	movi	r2,1
 4001d34:	48800115 	stw	r2,4(r9)
 4001d38:	4091883a 	add	r8,r8,r2
 4001d3c:	1887883a 	add	r3,r3,r2
 4001d40:	da011d15 	stw	r8,1140(sp)
 4001d44:	d8c11c15 	stw	r3,1136(sp)
 4001d48:	008001c4 	movi	r2,7
 4001d4c:	10c0bc16 	blt	r2,r3,4002040 <___vfprintf_internal_r+0x194c>
 4001d50:	4a400204 	addi	r9,r9,8
 4001d54:	9000041e 	bne	r18,zero,4001d68 <___vfprintf_internal_r+0x1674>
 4001d58:	d8c13217 	ldw	r3,1224(sp)
 4001d5c:	1800021e 	bne	r3,zero,4001d68 <___vfprintf_internal_r+0x1674>
 4001d60:	8080004c 	andi	r2,r16,1
 4001d64:	103d5226 	beq	r2,zero,40012b0 <__alt_data_end+0xfe0012b0>
 4001d68:	d8c11c17 	ldw	r3,1136(sp)
 4001d6c:	d9013717 	ldw	r4,1244(sp)
 4001d70:	00800044 	movi	r2,1
 4001d74:	48800115 	stw	r2,4(r9)
 4001d78:	49000015 	stw	r4,0(r9)
 4001d7c:	4091883a 	add	r8,r8,r2
 4001d80:	1887883a 	add	r3,r3,r2
 4001d84:	da011d15 	stw	r8,1140(sp)
 4001d88:	d8c11c15 	stw	r3,1136(sp)
 4001d8c:	008001c4 	movi	r2,7
 4001d90:	10c14516 	blt	r2,r3,40022a8 <___vfprintf_internal_r+0x1bb4>
 4001d94:	4a400204 	addi	r9,r9,8
 4001d98:	04a5c83a 	sub	r18,zero,r18
 4001d9c:	0480d70e 	bge	zero,r18,40020fc <___vfprintf_internal_r+0x1a08>
 4001da0:	05800404 	movi	r22,16
 4001da4:	05010074 	movhi	r20,1025
 4001da8:	a5317a84 	addi	r20,r20,-14870
 4001dac:	b480db0e 	bge	r22,r18,400211c <___vfprintf_internal_r+0x1a28>
 4001db0:	05c001c4 	movi	r23,7
 4001db4:	df012917 	ldw	fp,1188(sp)
 4001db8:	00000306 	br	4001dc8 <___vfprintf_internal_r+0x16d4>
 4001dbc:	4a400204 	addi	r9,r9,8
 4001dc0:	94bffc04 	addi	r18,r18,-16
 4001dc4:	b480d50e 	bge	r22,r18,400211c <___vfprintf_internal_r+0x1a28>
 4001dc8:	4d000015 	stw	r20,0(r9)
 4001dcc:	4d800115 	stw	r22,4(r9)
 4001dd0:	42000404 	addi	r8,r8,16
 4001dd4:	18c00044 	addi	r3,r3,1
 4001dd8:	da011d15 	stw	r8,1140(sp)
 4001ddc:	d8c11c15 	stw	r3,1136(sp)
 4001de0:	b8fff60e 	bge	r23,r3,4001dbc <__alt_data_end+0xfe001dbc>
 4001de4:	8809883a 	mov	r4,r17
 4001de8:	e00b883a 	mov	r5,fp
 4001dec:	d9811b04 	addi	r6,sp,1132
 4001df0:	40006c00 	call	40006c0 <__sprint_r>
 4001df4:	103b851e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4001df8:	da011d17 	ldw	r8,1140(sp)
 4001dfc:	d8c11c17 	ldw	r3,1136(sp)
 4001e00:	da400404 	addi	r9,sp,16
 4001e04:	003fee06 	br	4001dc0 <__alt_data_end+0xfe001dc0>
 4001e08:	da413c15 	stw	r9,1264(sp)
 4001e0c:	40074b00 	call	40074b0 <__isnand>
 4001e10:	da413c17 	ldw	r9,1264(sp)
 4001e14:	10007e1e 	bne	r2,zero,4002010 <___vfprintf_internal_r+0x191c>
 4001e18:	00bfffc4 	movi	r2,-1
 4001e1c:	e0816a26 	beq	fp,r2,40023c8 <___vfprintf_internal_r+0x1cd4>
 4001e20:	008019c4 	movi	r2,103
 4001e24:	90816526 	beq	r18,r2,40023bc <___vfprintf_internal_r+0x1cc8>
 4001e28:	008011c4 	movi	r2,71
 4001e2c:	90816326 	beq	r18,r2,40023bc <___vfprintf_internal_r+0x1cc8>
 4001e30:	80c04014 	ori	r3,r16,256
 4001e34:	d8c12a15 	stw	r3,1192(sp)
 4001e38:	a0016516 	blt	r20,zero,40023d0 <___vfprintf_internal_r+0x1cdc>
 4001e3c:	d8012f05 	stb	zero,1212(sp)
 4001e40:	00801984 	movi	r2,102
 4001e44:	9080f226 	beq	r18,r2,4002210 <___vfprintf_internal_r+0x1b1c>
 4001e48:	00801184 	movi	r2,70
 4001e4c:	9080f026 	beq	r18,r2,4002210 <___vfprintf_internal_r+0x1b1c>
 4001e50:	00801944 	movi	r2,101
 4001e54:	90818d26 	beq	r18,r2,400248c <___vfprintf_internal_r+0x1d98>
 4001e58:	00801144 	movi	r2,69
 4001e5c:	90818b26 	beq	r18,r2,400248c <___vfprintf_internal_r+0x1d98>
 4001e60:	e02f883a 	mov	r23,fp
 4001e64:	d8812404 	addi	r2,sp,1168
 4001e68:	d8800115 	stw	r2,4(sp)
 4001e6c:	d8812304 	addi	r2,sp,1164
 4001e70:	d8800215 	stw	r2,8(sp)
 4001e74:	d8812204 	addi	r2,sp,1160
 4001e78:	ddc00015 	stw	r23,0(sp)
 4001e7c:	d8800315 	stw	r2,12(sp)
 4001e80:	8809883a 	mov	r4,r17
 4001e84:	b00b883a 	mov	r5,r22
 4001e88:	a00d883a 	mov	r6,r20
 4001e8c:	01c00084 	movi	r7,2
 4001e90:	da413c15 	stw	r9,1264(sp)
 4001e94:	40029440 	call	4002944 <_dtoa_r>
 4001e98:	1027883a 	mov	r19,r2
 4001e9c:	008019c4 	movi	r2,103
 4001ea0:	da413c17 	ldw	r9,1264(sp)
 4001ea4:	9081951e 	bne	r18,r2,40024fc <___vfprintf_internal_r+0x1e08>
 4001ea8:	8080004c 	andi	r2,r16,1
 4001eac:	10017926 	beq	r2,zero,4002494 <___vfprintf_internal_r+0x1da0>
 4001eb0:	00801184 	movi	r2,70
 4001eb4:	9dc7883a 	add	r3,r19,r23
 4001eb8:	9080e626 	beq	r18,r2,4002254 <___vfprintf_internal_r+0x1b60>
 4001ebc:	b009883a 	mov	r4,r22
 4001ec0:	a00b883a 	mov	r5,r20
 4001ec4:	000d883a 	mov	r6,zero
 4001ec8:	000f883a 	mov	r7,zero
 4001ecc:	d8c13b15 	stw	r3,1260(sp)
 4001ed0:	da413c15 	stw	r9,1264(sp)
 4001ed4:	40092240 	call	4009224 <__eqdf2>
 4001ed8:	d8c13b17 	ldw	r3,1260(sp)
 4001edc:	da413c17 	ldw	r9,1264(sp)
 4001ee0:	10000726 	beq	r2,zero,4001f00 <___vfprintf_internal_r+0x180c>
 4001ee4:	d8812217 	ldw	r2,1160(sp)
 4001ee8:	10c18a2e 	bgeu	r2,r3,4002514 <___vfprintf_internal_r+0x1e20>
 4001eec:	01000c04 	movi	r4,48
 4001ef0:	11000005 	stb	r4,0(r2)
 4001ef4:	10800044 	addi	r2,r2,1
 4001ef8:	d8812215 	stw	r2,1160(sp)
 4001efc:	10fffc1e 	bne	r2,r3,4001ef0 <__alt_data_end+0xfe001ef0>
 4001f00:	1cc7c83a 	sub	r3,r3,r19
 4001f04:	d8c13215 	stw	r3,1224(sp)
 4001f08:	008019c4 	movi	r2,103
 4001f0c:	9080fa26 	beq	r18,r2,40022f8 <___vfprintf_internal_r+0x1c04>
 4001f10:	008011c4 	movi	r2,71
 4001f14:	9080f826 	beq	r18,r2,40022f8 <___vfprintf_internal_r+0x1c04>
 4001f18:	00801984 	movi	r2,102
 4001f1c:	90818e1e 	bne	r18,r2,4002558 <___vfprintf_internal_r+0x1e64>
 4001f20:	d8812417 	ldw	r2,1168(sp)
 4001f24:	d8812b15 	stw	r2,1196(sp)
 4001f28:	00817c0e 	bge	zero,r2,400251c <___vfprintf_internal_r+0x1e28>
 4001f2c:	e000021e 	bne	fp,zero,4001f38 <___vfprintf_internal_r+0x1844>
 4001f30:	8400004c 	andi	r16,r16,1
 4001f34:	80000426 	beq	r16,zero,4001f48 <___vfprintf_internal_r+0x1854>
 4001f38:	d8812b17 	ldw	r2,1196(sp)
 4001f3c:	e2000044 	addi	r8,fp,1
 4001f40:	1205883a 	add	r2,r2,r8
 4001f44:	d8812b15 	stw	r2,1196(sp)
 4001f48:	d8812815 	stw	r2,1184(sp)
 4001f4c:	10010b16 	blt	r2,zero,400237c <___vfprintf_internal_r+0x1c88>
 4001f50:	ddc12f07 	ldb	r23,1212(sp)
 4001f54:	b800e426 	beq	r23,zero,40022e8 <___vfprintf_internal_r+0x1bf4>
 4001f58:	00800b44 	movi	r2,45
 4001f5c:	d8812585 	stb	r2,1174(sp)
 4001f60:	dc012a17 	ldw	r16,1192(sp)
 4001f64:	d8013115 	stw	zero,1220(sp)
 4001f68:	003b7306 	br	4000d38 <__alt_data_end+0xfe000d38>
 4001f6c:	d8812b17 	ldw	r2,1196(sp)
 4001f70:	d8812815 	stw	r2,1184(sp)
 4001f74:	10005716 	blt	r2,zero,40020d4 <___vfprintf_internal_r+0x19e0>
 4001f78:	d8812583 	ldbu	r2,1174(sp)
 4001f7c:	ddc12d15 	stw	r23,1204(sp)
 4001f80:	d8013115 	stw	zero,1220(sp)
 4001f84:	003b6806 	br	4000d28 <__alt_data_end+0xfe000d28>
 4001f88:	d8c12d17 	ldw	r3,1204(sp)
 4001f8c:	1dc00017 	ldw	r23,0(r3)
 4001f90:	18c00104 	addi	r3,r3,4
 4001f94:	d8c12d15 	stw	r3,1204(sp)
 4001f98:	b82dd7fa 	srai	r22,r23,31
 4001f9c:	b005883a 	mov	r2,r22
 4001fa0:	003b4406 	br	4000cb4 <__alt_data_end+0xfe000cb4>
 4001fa4:	d9012d17 	ldw	r4,1204(sp)
 4001fa8:	002d883a 	mov	r22,zero
 4001fac:	00c00044 	movi	r3,1
 4001fb0:	25c00017 	ldw	r23,0(r4)
 4001fb4:	21000104 	addi	r4,r4,4
 4001fb8:	d9012d15 	stw	r4,1204(sp)
 4001fbc:	b805883a 	mov	r2,r23
 4001fc0:	d8012585 	stb	zero,1174(sp)
 4001fc4:	003b4406 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4001fc8:	d9012d17 	ldw	r4,1204(sp)
 4001fcc:	002d883a 	mov	r22,zero
 4001fd0:	25c00017 	ldw	r23,0(r4)
 4001fd4:	21000104 	addi	r4,r4,4
 4001fd8:	d9012d15 	stw	r4,1204(sp)
 4001fdc:	003bab06 	br	4000e8c <__alt_data_end+0xfe000e8c>
 4001fe0:	d8812d17 	ldw	r2,1204(sp)
 4001fe4:	002d883a 	mov	r22,zero
 4001fe8:	0007883a 	mov	r3,zero
 4001fec:	15c00017 	ldw	r23,0(r2)
 4001ff0:	10800104 	addi	r2,r2,4
 4001ff4:	d8812d15 	stw	r2,1204(sp)
 4001ff8:	d8012585 	stb	zero,1174(sp)
 4001ffc:	b805883a 	mov	r2,r23
 4002000:	003b3506 	br	4000cd8 <__alt_data_end+0xfe000cd8>
 4002004:	00ffffc4 	movi	r3,-1
 4002008:	b82b883a 	mov	r21,r23
 400200c:	003a1606 	br	4000868 <__alt_data_end+0xfe000868>
 4002010:	008011c4 	movi	r2,71
 4002014:	1480b116 	blt	r2,r18,40022dc <___vfprintf_internal_r+0x1be8>
 4002018:	04c10074 	movhi	r19,1025
 400201c:	9cf16804 	addi	r19,r19,-14944
 4002020:	00c000c4 	movi	r3,3
 4002024:	00bfdfc4 	movi	r2,-129
 4002028:	80a0703a 	and	r16,r16,r2
 400202c:	d8c12815 	stw	r3,1184(sp)
 4002030:	d8812583 	ldbu	r2,1174(sp)
 4002034:	d8c12b15 	stw	r3,1196(sp)
 4002038:	d8013115 	stw	zero,1220(sp)
 400203c:	003b3a06 	br	4000d28 <__alt_data_end+0xfe000d28>
 4002040:	d9412917 	ldw	r5,1188(sp)
 4002044:	8809883a 	mov	r4,r17
 4002048:	d9811b04 	addi	r6,sp,1132
 400204c:	40006c00 	call	40006c0 <__sprint_r>
 4002050:	103aee1e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4002054:	dc812417 	ldw	r18,1168(sp)
 4002058:	da011d17 	ldw	r8,1140(sp)
 400205c:	da400404 	addi	r9,sp,16
 4002060:	003f3c06 	br	4001d54 <__alt_data_end+0xfe001d54>
 4002064:	ad400044 	addi	r21,r21,1
 4002068:	84000814 	ori	r16,r16,32
 400206c:	14800047 	ldb	r18,1(r2)
 4002070:	0039fc06 	br	4000864 <__alt_data_end+0xfe000864>
 4002074:	d9412917 	ldw	r5,1188(sp)
 4002078:	8809883a 	mov	r4,r17
 400207c:	d9811b04 	addi	r6,sp,1132
 4002080:	40006c00 	call	40006c0 <__sprint_r>
 4002084:	103ae11e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 4002088:	da011d17 	ldw	r8,1140(sp)
 400208c:	da400404 	addi	r9,sp,16
 4002090:	003d2b06 	br	4001540 <__alt_data_end+0xfe001540>
 4002094:	4d000015 	stw	r20,0(r9)
 4002098:	4c800115 	stw	r18,4(r9)
 400209c:	4491883a 	add	r8,r8,r18
 40020a0:	18c00044 	addi	r3,r3,1
 40020a4:	da011d15 	stw	r8,1140(sp)
 40020a8:	d8c11c15 	stw	r3,1136(sp)
 40020ac:	008001c4 	movi	r2,7
 40020b0:	10fcbd16 	blt	r2,r3,40013a8 <__alt_data_end+0xfe0013a8>
 40020b4:	4a400204 	addi	r9,r9,8
 40020b8:	003cc206 	br	40013c4 <__alt_data_end+0xfe0013c4>
 40020bc:	da413c15 	stw	r9,1264(sp)
 40020c0:	40006340 	call	4000634 <strlen>
 40020c4:	d8812b15 	stw	r2,1196(sp)
 40020c8:	d8812815 	stw	r2,1184(sp)
 40020cc:	da413c17 	ldw	r9,1264(sp)
 40020d0:	103fa90e 	bge	r2,zero,4001f78 <__alt_data_end+0xfe001f78>
 40020d4:	d8012815 	stw	zero,1184(sp)
 40020d8:	003fa706 	br	4001f78 <__alt_data_end+0xfe001f78>
 40020dc:	d9412917 	ldw	r5,1188(sp)
 40020e0:	8809883a 	mov	r4,r17
 40020e4:	d9811b04 	addi	r6,sp,1132
 40020e8:	40006c00 	call	40006c0 <__sprint_r>
 40020ec:	103ac71e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 40020f0:	da011d17 	ldw	r8,1140(sp)
 40020f4:	d8c11c17 	ldw	r3,1136(sp)
 40020f8:	da400404 	addi	r9,sp,16
 40020fc:	d8813217 	ldw	r2,1224(sp)
 4002100:	4cc00015 	stw	r19,0(r9)
 4002104:	48800115 	stw	r2,4(r9)
 4002108:	4091883a 	add	r8,r8,r2
 400210c:	003c6206 	br	4001298 <__alt_data_end+0xfe001298>
 4002110:	00800b44 	movi	r2,45
 4002114:	d8812585 	stb	r2,1174(sp)
 4002118:	003b2406 	br	4000dac <__alt_data_end+0xfe000dac>
 400211c:	4d000015 	stw	r20,0(r9)
 4002120:	4c800115 	stw	r18,4(r9)
 4002124:	4491883a 	add	r8,r8,r18
 4002128:	18c00044 	addi	r3,r3,1
 400212c:	da011d15 	stw	r8,1140(sp)
 4002130:	d8c11c15 	stw	r3,1136(sp)
 4002134:	008001c4 	movi	r2,7
 4002138:	10ffe816 	blt	r2,r3,40020dc <__alt_data_end+0xfe0020dc>
 400213c:	4a400204 	addi	r9,r9,8
 4002140:	003fee06 	br	40020fc <__alt_data_end+0xfe0020fc>
 4002144:	d8c12b15 	stw	r3,1196(sp)
 4002148:	00800184 	movi	r2,6
 400214c:	10c0062e 	bgeu	r2,r3,4002168 <___vfprintf_internal_r+0x1a74>
 4002150:	d8812b15 	stw	r2,1196(sp)
 4002154:	d8812815 	stw	r2,1184(sp)
 4002158:	ddc12d15 	stw	r23,1204(sp)
 400215c:	04c10074 	movhi	r19,1025
 4002160:	9cf17404 	addi	r19,r19,-14896
 4002164:	0039ca06 	br	4000890 <__alt_data_end+0xfe000890>
 4002168:	d8812b17 	ldw	r2,1196(sp)
 400216c:	d8812815 	stw	r2,1184(sp)
 4002170:	103ff90e 	bge	r2,zero,4002158 <__alt_data_end+0xfe002158>
 4002174:	d8012815 	stw	zero,1184(sp)
 4002178:	003ff706 	br	4002158 <__alt_data_end+0xfe002158>
 400217c:	00800244 	movi	r2,9
 4002180:	15fdaa36 	bltu	r2,r23,400182c <__alt_data_end+0xfe00182c>
 4002184:	dd010e04 	addi	r20,sp,1080
 4002188:	003dc606 	br	40018a4 <__alt_data_end+0xfe0018a4>
 400218c:	d9412917 	ldw	r5,1188(sp)
 4002190:	8809883a 	mov	r4,r17
 4002194:	d9811b04 	addi	r6,sp,1132
 4002198:	40006c00 	call	40006c0 <__sprint_r>
 400219c:	103a9b1e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 40021a0:	dc812417 	ldw	r18,1168(sp)
 40021a4:	da400404 	addi	r9,sp,16
 40021a8:	003ecd06 	br	4001ce0 <__alt_data_end+0xfe001ce0>
 40021ac:	d9412917 	ldw	r5,1188(sp)
 40021b0:	8809883a 	mov	r4,r17
 40021b4:	d9811b04 	addi	r6,sp,1132
 40021b8:	40006c00 	call	40006c0 <__sprint_r>
 40021bc:	103a931e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 40021c0:	dc812417 	ldw	r18,1168(sp)
 40021c4:	da011d17 	ldw	r8,1140(sp)
 40021c8:	d8c11c17 	ldw	r3,1136(sp)
 40021cc:	da400404 	addi	r9,sp,16
 40021d0:	003eb706 	br	4001cb0 <__alt_data_end+0xfe001cb0>
 40021d4:	d9412917 	ldw	r5,1188(sp)
 40021d8:	8809883a 	mov	r4,r17
 40021dc:	d9811b04 	addi	r6,sp,1132
 40021e0:	40006c00 	call	40006c0 <__sprint_r>
 40021e4:	103a891e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 40021e8:	dc812417 	ldw	r18,1168(sp)
 40021ec:	da011d17 	ldw	r8,1140(sp)
 40021f0:	da400404 	addi	r9,sp,16
 40021f4:	003dc206 	br	4001900 <__alt_data_end+0xfe001900>
 40021f8:	df012815 	stw	fp,1184(sp)
 40021fc:	d8812583 	ldbu	r2,1174(sp)
 4002200:	df012b15 	stw	fp,1196(sp)
 4002204:	ddc12d15 	stw	r23,1204(sp)
 4002208:	d8013115 	stw	zero,1220(sp)
 400220c:	003ac606 	br	4000d28 <__alt_data_end+0xfe000d28>
 4002210:	d8812404 	addi	r2,sp,1168
 4002214:	d8800115 	stw	r2,4(sp)
 4002218:	d8812304 	addi	r2,sp,1164
 400221c:	d8800215 	stw	r2,8(sp)
 4002220:	d8812204 	addi	r2,sp,1160
 4002224:	df000015 	stw	fp,0(sp)
 4002228:	d8800315 	stw	r2,12(sp)
 400222c:	8809883a 	mov	r4,r17
 4002230:	b00b883a 	mov	r5,r22
 4002234:	a00d883a 	mov	r6,r20
 4002238:	01c000c4 	movi	r7,3
 400223c:	da413c15 	stw	r9,1264(sp)
 4002240:	40029440 	call	4002944 <_dtoa_r>
 4002244:	da413c17 	ldw	r9,1264(sp)
 4002248:	1027883a 	mov	r19,r2
 400224c:	1707883a 	add	r3,r2,fp
 4002250:	e02f883a 	mov	r23,fp
 4002254:	99000007 	ldb	r4,0(r19)
 4002258:	00800c04 	movi	r2,48
 400225c:	20800326 	beq	r4,r2,400226c <___vfprintf_internal_r+0x1b78>
 4002260:	da812417 	ldw	r10,1168(sp)
 4002264:	1a87883a 	add	r3,r3,r10
 4002268:	003f1406 	br	4001ebc <__alt_data_end+0xfe001ebc>
 400226c:	b009883a 	mov	r4,r22
 4002270:	a00b883a 	mov	r5,r20
 4002274:	000d883a 	mov	r6,zero
 4002278:	000f883a 	mov	r7,zero
 400227c:	d8c13b15 	stw	r3,1260(sp)
 4002280:	da413c15 	stw	r9,1264(sp)
 4002284:	40092800 	call	4009280 <__nedf2>
 4002288:	d8c13b17 	ldw	r3,1260(sp)
 400228c:	da413c17 	ldw	r9,1264(sp)
 4002290:	103ff326 	beq	r2,zero,4002260 <__alt_data_end+0xfe002260>
 4002294:	00800044 	movi	r2,1
 4002298:	15d5c83a 	sub	r10,r2,r23
 400229c:	da812415 	stw	r10,1168(sp)
 40022a0:	1a87883a 	add	r3,r3,r10
 40022a4:	003f0506 	br	4001ebc <__alt_data_end+0xfe001ebc>
 40022a8:	d9412917 	ldw	r5,1188(sp)
 40022ac:	8809883a 	mov	r4,r17
 40022b0:	d9811b04 	addi	r6,sp,1132
 40022b4:	40006c00 	call	40006c0 <__sprint_r>
 40022b8:	103a541e 	bne	r2,zero,4000c0c <__alt_data_end+0xfe000c0c>
 40022bc:	dc812417 	ldw	r18,1168(sp)
 40022c0:	da011d17 	ldw	r8,1140(sp)
 40022c4:	d8c11c17 	ldw	r3,1136(sp)
 40022c8:	da400404 	addi	r9,sp,16
 40022cc:	003eb206 	br	4001d98 <__alt_data_end+0xfe001d98>
 40022d0:	b82b883a 	mov	r21,r23
 40022d4:	0007883a 	mov	r3,zero
 40022d8:	00396306 	br	4000868 <__alt_data_end+0xfe000868>
 40022dc:	04c10074 	movhi	r19,1025
 40022e0:	9cf16904 	addi	r19,r19,-14940
 40022e4:	003f4e06 	br	4002020 <__alt_data_end+0xfe002020>
 40022e8:	d8812583 	ldbu	r2,1174(sp)
 40022ec:	dc012a17 	ldw	r16,1192(sp)
 40022f0:	d8013115 	stw	zero,1220(sp)
 40022f4:	003a8c06 	br	4000d28 <__alt_data_end+0xfe000d28>
 40022f8:	d8812417 	ldw	r2,1168(sp)
 40022fc:	d8812b15 	stw	r2,1196(sp)
 4002300:	1029883a 	mov	r20,r2
 4002304:	00bfff44 	movi	r2,-3
 4002308:	a0800116 	blt	r20,r2,4002310 <___vfprintf_internal_r+0x1c1c>
 400230c:	e5001d0e 	bge	fp,r20,4002384 <___vfprintf_internal_r+0x1c90>
 4002310:	94bfff84 	addi	r18,r18,-2
 4002314:	a53fffc4 	addi	r20,r20,-1
 4002318:	dd012415 	stw	r20,1168(sp)
 400231c:	dc811fc5 	stb	r18,1151(sp)
 4002320:	a0007216 	blt	r20,zero,40024ec <___vfprintf_internal_r+0x1df8>
 4002324:	00800ac4 	movi	r2,43
 4002328:	d8812005 	stb	r2,1152(sp)
 400232c:	00800244 	movi	r2,9
 4002330:	15003516 	blt	r2,r20,4002408 <___vfprintf_internal_r+0x1d14>
 4002334:	00800c04 	movi	r2,48
 4002338:	a5000c04 	addi	r20,r20,48
 400233c:	d8812045 	stb	r2,1153(sp)
 4002340:	dd012085 	stb	r20,1154(sp)
 4002344:	d8c120c4 	addi	r3,sp,1155
 4002348:	d8811fc4 	addi	r2,sp,1151
 400234c:	1885c83a 	sub	r2,r3,r2
 4002350:	d8c13217 	ldw	r3,1224(sp)
 4002354:	d8813515 	stw	r2,1236(sp)
 4002358:	1885883a 	add	r2,r3,r2
 400235c:	d8812b15 	stw	r2,1196(sp)
 4002360:	00800044 	movi	r2,1
 4002364:	10c0580e 	bge	r2,r3,40024c8 <___vfprintf_internal_r+0x1dd4>
 4002368:	d8812b17 	ldw	r2,1196(sp)
 400236c:	10800044 	addi	r2,r2,1
 4002370:	d8812b15 	stw	r2,1196(sp)
 4002374:	d8812815 	stw	r2,1184(sp)
 4002378:	103ef50e 	bge	r2,zero,4001f50 <__alt_data_end+0xfe001f50>
 400237c:	d8012815 	stw	zero,1184(sp)
 4002380:	003ef306 	br	4001f50 <__alt_data_end+0xfe001f50>
 4002384:	d8812b17 	ldw	r2,1196(sp)
 4002388:	d8c13217 	ldw	r3,1224(sp)
 400238c:	10c01416 	blt	r2,r3,40023e0 <___vfprintf_internal_r+0x1cec>
 4002390:	8400004c 	andi	r16,r16,1
 4002394:	80000326 	beq	r16,zero,40023a4 <___vfprintf_internal_r+0x1cb0>
 4002398:	d8812b17 	ldw	r2,1196(sp)
 400239c:	10800044 	addi	r2,r2,1
 40023a0:	d8812b15 	stw	r2,1196(sp)
 40023a4:	d8812815 	stw	r2,1184(sp)
 40023a8:	10001416 	blt	r2,zero,40023fc <___vfprintf_internal_r+0x1d08>
 40023ac:	048019c4 	movi	r18,103
 40023b0:	003ee706 	br	4001f50 <__alt_data_end+0xfe001f50>
 40023b4:	d8012815 	stw	zero,1184(sp)
 40023b8:	003b1a06 	br	4001024 <__alt_data_end+0xfe001024>
 40023bc:	e03e9c1e 	bne	fp,zero,4001e30 <__alt_data_end+0xfe001e30>
 40023c0:	07000044 	movi	fp,1
 40023c4:	003e9a06 	br	4001e30 <__alt_data_end+0xfe001e30>
 40023c8:	07000184 	movi	fp,6
 40023cc:	003e9806 	br	4001e30 <__alt_data_end+0xfe001e30>
 40023d0:	00c00b44 	movi	r3,45
 40023d4:	a520003c 	xorhi	r20,r20,32768
 40023d8:	d8c12f05 	stb	r3,1212(sp)
 40023dc:	003e9806 	br	4001e40 <__alt_data_end+0xfe001e40>
 40023e0:	05003f0e 	bge	zero,r20,40024e0 <___vfprintf_internal_r+0x1dec>
 40023e4:	05000044 	movi	r20,1
 40023e8:	d8c13217 	ldw	r3,1224(sp)
 40023ec:	a0e9883a 	add	r20,r20,r3
 40023f0:	dd012b15 	stw	r20,1196(sp)
 40023f4:	dd012815 	stw	r20,1184(sp)
 40023f8:	a03fec0e 	bge	r20,zero,40023ac <__alt_data_end+0xfe0023ac>
 40023fc:	d8012815 	stw	zero,1184(sp)
 4002400:	048019c4 	movi	r18,103
 4002404:	003ed206 	br	4001f50 <__alt_data_end+0xfe001f50>
 4002408:	d8c11f84 	addi	r3,sp,1150
 400240c:	102f883a 	mov	r23,r2
 4002410:	4839883a 	mov	fp,r9
 4002414:	a009883a 	mov	r4,r20
 4002418:	01400284 	movi	r5,10
 400241c:	182d883a 	mov	r22,r3
 4002420:	40097780 	call	4009778 <__modsi3>
 4002424:	10800c04 	addi	r2,r2,48
 4002428:	a009883a 	mov	r4,r20
 400242c:	b0800005 	stb	r2,0(r22)
 4002430:	01400284 	movi	r5,10
 4002434:	40097280 	call	4009728 <__divsi3>
 4002438:	1029883a 	mov	r20,r2
 400243c:	b0ffffc4 	addi	r3,r22,-1
 4002440:	b8bff416 	blt	r23,r2,4002414 <__alt_data_end+0xfe002414>
 4002444:	11400c04 	addi	r5,r2,48
 4002448:	b17fffc5 	stb	r5,-1(r22)
 400244c:	d8811fc4 	addi	r2,sp,1151
 4002450:	e013883a 	mov	r9,fp
 4002454:	18803e2e 	bgeu	r3,r2,4002550 <___vfprintf_internal_r+0x1e5c>
 4002458:	b007883a 	mov	r3,r22
 400245c:	d9012044 	addi	r4,sp,1153
 4002460:	00000206 	br	400246c <___vfprintf_internal_r+0x1d78>
 4002464:	19400003 	ldbu	r5,0(r3)
 4002468:	18c00044 	addi	r3,r3,1
 400246c:	21400005 	stb	r5,0(r4)
 4002470:	21000044 	addi	r4,r4,1
 4002474:	10fffb1e 	bne	r2,r3,4002464 <__alt_data_end+0xfe002464>
 4002478:	d8c12004 	addi	r3,sp,1152
 400247c:	1d87c83a 	sub	r3,r3,r22
 4002480:	d9012044 	addi	r4,sp,1153
 4002484:	20c7883a 	add	r3,r4,r3
 4002488:	003fb006 	br	400234c <__alt_data_end+0xfe00234c>
 400248c:	e5c00044 	addi	r23,fp,1
 4002490:	003e7406 	br	4001e64 <__alt_data_end+0xfe001e64>
 4002494:	d8c12217 	ldw	r3,1160(sp)
 4002498:	003e9906 	br	4001f00 <__alt_data_end+0xfe001f00>
 400249c:	d9012d17 	ldw	r4,1204(sp)
 40024a0:	ac800043 	ldbu	r18,1(r21)
 40024a4:	b82b883a 	mov	r21,r23
 40024a8:	20c00017 	ldw	r3,0(r4)
 40024ac:	20800104 	addi	r2,r4,4
 40024b0:	d8812d15 	stw	r2,1204(sp)
 40024b4:	18002116 	blt	r3,zero,400253c <___vfprintf_internal_r+0x1e48>
 40024b8:	94803fcc 	andi	r18,r18,255
 40024bc:	9480201c 	xori	r18,r18,128
 40024c0:	94bfe004 	addi	r18,r18,-128
 40024c4:	0038e706 	br	4000864 <__alt_data_end+0xfe000864>
 40024c8:	80a0703a 	and	r16,r16,r2
 40024cc:	803fa61e 	bne	r16,zero,4002368 <__alt_data_end+0xfe002368>
 40024d0:	d8812b17 	ldw	r2,1196(sp)
 40024d4:	d8812815 	stw	r2,1184(sp)
 40024d8:	103e9d0e 	bge	r2,zero,4001f50 <__alt_data_end+0xfe001f50>
 40024dc:	003fa706 	br	400237c <__alt_data_end+0xfe00237c>
 40024e0:	00800084 	movi	r2,2
 40024e4:	1529c83a 	sub	r20,r2,r20
 40024e8:	003fbf06 	br	40023e8 <__alt_data_end+0xfe0023e8>
 40024ec:	00800b44 	movi	r2,45
 40024f0:	0529c83a 	sub	r20,zero,r20
 40024f4:	d8812005 	stb	r2,1152(sp)
 40024f8:	003f8c06 	br	400232c <__alt_data_end+0xfe00232c>
 40024fc:	008011c4 	movi	r2,71
 4002500:	90be6926 	beq	r18,r2,4001ea8 <__alt_data_end+0xfe001ea8>
 4002504:	003e6a06 	br	4001eb0 <__alt_data_end+0xfe001eb0>
 4002508:	00bfffc4 	movi	r2,-1
 400250c:	d8812c15 	stw	r2,1200(sp)
 4002510:	0039ad06 	br	4000bc8 <__alt_data_end+0xfe000bc8>
 4002514:	1007883a 	mov	r3,r2
 4002518:	003e7906 	br	4001f00 <__alt_data_end+0xfe001f00>
 400251c:	e000021e 	bne	fp,zero,4002528 <___vfprintf_internal_r+0x1e34>
 4002520:	8400004c 	andi	r16,r16,1
 4002524:	80000e26 	beq	r16,zero,4002560 <___vfprintf_internal_r+0x1e6c>
 4002528:	e7000084 	addi	fp,fp,2
 400252c:	df012b15 	stw	fp,1196(sp)
 4002530:	df012815 	stw	fp,1184(sp)
 4002534:	e03e860e 	bge	fp,zero,4001f50 <__alt_data_end+0xfe001f50>
 4002538:	003f9006 	br	400237c <__alt_data_end+0xfe00237c>
 400253c:	94803fcc 	andi	r18,r18,255
 4002540:	9480201c 	xori	r18,r18,128
 4002544:	00ffffc4 	movi	r3,-1
 4002548:	94bfe004 	addi	r18,r18,-128
 400254c:	0038c506 	br	4000864 <__alt_data_end+0xfe000864>
 4002550:	d8c12044 	addi	r3,sp,1153
 4002554:	003f7d06 	br	400234c <__alt_data_end+0xfe00234c>
 4002558:	dd012417 	ldw	r20,1168(sp)
 400255c:	003f6d06 	br	4002314 <__alt_data_end+0xfe002314>
 4002560:	00c00044 	movi	r3,1
 4002564:	d8c12815 	stw	r3,1184(sp)
 4002568:	d8c12b15 	stw	r3,1196(sp)
 400256c:	003e7806 	br	4001f50 <__alt_data_end+0xfe001f50>

04002570 <__vfprintf_internal>:
 4002570:	00810074 	movhi	r2,1025
 4002574:	10b8b704 	addi	r2,r2,-7460
 4002578:	2007883a 	mov	r3,r4
 400257c:	11000017 	ldw	r4,0(r2)
 4002580:	2805883a 	mov	r2,r5
 4002584:	300f883a 	mov	r7,r6
 4002588:	180b883a 	mov	r5,r3
 400258c:	100d883a 	mov	r6,r2
 4002590:	40006f41 	jmpi	40006f4 <___vfprintf_internal_r>

04002594 <__swsetup_r>:
 4002594:	00810074 	movhi	r2,1025
 4002598:	10b8b704 	addi	r2,r2,-7460
 400259c:	10800017 	ldw	r2,0(r2)
 40025a0:	defffd04 	addi	sp,sp,-12
 40025a4:	dc400115 	stw	r17,4(sp)
 40025a8:	dc000015 	stw	r16,0(sp)
 40025ac:	dfc00215 	stw	ra,8(sp)
 40025b0:	2023883a 	mov	r17,r4
 40025b4:	2821883a 	mov	r16,r5
 40025b8:	10000226 	beq	r2,zero,40025c4 <__swsetup_r+0x30>
 40025bc:	10c00e17 	ldw	r3,56(r2)
 40025c0:	18003d26 	beq	r3,zero,40026b8 <__swsetup_r+0x124>
 40025c4:	8080030b 	ldhu	r2,12(r16)
 40025c8:	10c0020c 	andi	r3,r2,8
 40025cc:	18ffffcc 	andi	r3,r3,65535
 40025d0:	18e0001c 	xori	r3,r3,32768
 40025d4:	18e00004 	addi	r3,r3,-32768
 40025d8:	18001226 	beq	r3,zero,4002624 <__swsetup_r+0x90>
 40025dc:	80c00417 	ldw	r3,16(r16)
 40025e0:	18001f26 	beq	r3,zero,4002660 <__swsetup_r+0xcc>
 40025e4:	1100004c 	andi	r4,r2,1
 40025e8:	2000261e 	bne	r4,zero,4002684 <__swsetup_r+0xf0>
 40025ec:	1080008c 	andi	r2,r2,2
 40025f0:	10bfffcc 	andi	r2,r2,65535
 40025f4:	10a0001c 	xori	r2,r2,32768
 40025f8:	10a00004 	addi	r2,r2,-32768
 40025fc:	1000311e 	bne	r2,zero,40026c4 <__swsetup_r+0x130>
 4002600:	80800517 	ldw	r2,20(r16)
 4002604:	80800215 	stw	r2,8(r16)
 4002608:	18002326 	beq	r3,zero,4002698 <__swsetup_r+0x104>
 400260c:	0005883a 	mov	r2,zero
 4002610:	dfc00217 	ldw	ra,8(sp)
 4002614:	dc400117 	ldw	r17,4(sp)
 4002618:	dc000017 	ldw	r16,0(sp)
 400261c:	dec00304 	addi	sp,sp,12
 4002620:	f800283a 	ret
 4002624:	10c0040c 	andi	r3,r2,16
 4002628:	18ffffcc 	andi	r3,r3,65535
 400262c:	18e0001c 	xori	r3,r3,32768
 4002630:	18e00004 	addi	r3,r3,-32768
 4002634:	18001e26 	beq	r3,zero,40026b0 <__swsetup_r+0x11c>
 4002638:	10c0010c 	andi	r3,r2,4
 400263c:	18ffffcc 	andi	r3,r3,65535
 4002640:	18e0001c 	xori	r3,r3,32768
 4002644:	18e00004 	addi	r3,r3,-32768
 4002648:	1800211e 	bne	r3,zero,40026d0 <__swsetup_r+0x13c>
 400264c:	80c00417 	ldw	r3,16(r16)
 4002650:	11400214 	ori	r5,r2,8
 4002654:	8140030d 	sth	r5,12(r16)
 4002658:	2805883a 	mov	r2,r5
 400265c:	183fe11e 	bne	r3,zero,40025e4 <__alt_data_end+0xfe0025e4>
 4002660:	1140a00c 	andi	r5,r2,640
 4002664:	01008004 	movi	r4,512
 4002668:	293fde26 	beq	r5,r4,40025e4 <__alt_data_end+0xfe0025e4>
 400266c:	8809883a 	mov	r4,r17
 4002670:	800b883a 	mov	r5,r16
 4002674:	4004f900 	call	4004f90 <__smakebuf_r>
 4002678:	8080030b 	ldhu	r2,12(r16)
 400267c:	80c00417 	ldw	r3,16(r16)
 4002680:	003fd806 	br	40025e4 <__alt_data_end+0xfe0025e4>
 4002684:	80800517 	ldw	r2,20(r16)
 4002688:	80000215 	stw	zero,8(r16)
 400268c:	0085c83a 	sub	r2,zero,r2
 4002690:	80800615 	stw	r2,24(r16)
 4002694:	183fdd1e 	bne	r3,zero,400260c <__alt_data_end+0xfe00260c>
 4002698:	8080030b 	ldhu	r2,12(r16)
 400269c:	1080200c 	andi	r2,r2,128
 40026a0:	10bfffcc 	andi	r2,r2,65535
 40026a4:	10a0001c 	xori	r2,r2,32768
 40026a8:	10a00004 	addi	r2,r2,-32768
 40026ac:	103fd826 	beq	r2,zero,4002610 <__alt_data_end+0xfe002610>
 40026b0:	00bfffc4 	movi	r2,-1
 40026b4:	003fd606 	br	4002610 <__alt_data_end+0xfe002610>
 40026b8:	1009883a 	mov	r4,r2
 40026bc:	400421c0 	call	400421c <__sinit>
 40026c0:	003fc006 	br	40025c4 <__alt_data_end+0xfe0025c4>
 40026c4:	0005883a 	mov	r2,zero
 40026c8:	80800215 	stw	r2,8(r16)
 40026cc:	003fce06 	br	4002608 <__alt_data_end+0xfe002608>
 40026d0:	81400c17 	ldw	r5,48(r16)
 40026d4:	28000626 	beq	r5,zero,40026f0 <__swsetup_r+0x15c>
 40026d8:	80c01004 	addi	r3,r16,64
 40026dc:	28c00326 	beq	r5,r3,40026ec <__swsetup_r+0x158>
 40026e0:	8809883a 	mov	r4,r17
 40026e4:	40045a00 	call	40045a0 <_free_r>
 40026e8:	8080030b 	ldhu	r2,12(r16)
 40026ec:	80000c15 	stw	zero,48(r16)
 40026f0:	80c00417 	ldw	r3,16(r16)
 40026f4:	013ff6c4 	movi	r4,-37
 40026f8:	2084703a 	and	r2,r4,r2
 40026fc:	80000115 	stw	zero,4(r16)
 4002700:	80c00015 	stw	r3,0(r16)
 4002704:	003fd206 	br	4002650 <__alt_data_end+0xfe002650>

04002708 <quorem>:
 4002708:	defff204 	addi	sp,sp,-56
 400270c:	dd000815 	stw	r20,32(sp)
 4002710:	20800417 	ldw	r2,16(r4)
 4002714:	2d000417 	ldw	r20,16(r5)
 4002718:	dcc00715 	stw	r19,28(sp)
 400271c:	dfc00d15 	stw	ra,52(sp)
 4002720:	df000c15 	stw	fp,48(sp)
 4002724:	ddc00b15 	stw	r23,44(sp)
 4002728:	dd800a15 	stw	r22,40(sp)
 400272c:	dd400915 	stw	r21,36(sp)
 4002730:	dc800615 	stw	r18,24(sp)
 4002734:	dc400515 	stw	r17,20(sp)
 4002738:	dc000415 	stw	r16,16(sp)
 400273c:	d9400015 	stw	r5,0(sp)
 4002740:	2027883a 	mov	r19,r4
 4002744:	15007d16 	blt	r2,r20,400293c <quorem+0x234>
 4002748:	a0800104 	addi	r2,r20,4
 400274c:	1085883a 	add	r2,r2,r2
 4002750:	1085883a 	add	r2,r2,r2
 4002754:	28ad883a 	add	r22,r5,r2
 4002758:	2085883a 	add	r2,r4,r2
 400275c:	10800017 	ldw	r2,0(r2)
 4002760:	b1400017 	ldw	r5,0(r22)
 4002764:	a53fffc4 	addi	r20,r20,-1
 4002768:	1009883a 	mov	r4,r2
 400276c:	29400044 	addi	r5,r5,1
 4002770:	d8800115 	stw	r2,4(sp)
 4002774:	40097d40 	call	40097d4 <__udivsi3>
 4002778:	1025883a 	mov	r18,r2
 400277c:	d8800017 	ldw	r2,0(sp)
 4002780:	9f000504 	addi	fp,r19,20
 4002784:	14000504 	addi	r16,r2,20
 4002788:	90003626 	beq	r18,zero,4002864 <quorem+0x15c>
 400278c:	802b883a 	mov	r21,r16
 4002790:	e023883a 	mov	r17,fp
 4002794:	0007883a 	mov	r3,zero
 4002798:	002f883a 	mov	r23,zero
 400279c:	a9800017 	ldw	r6,0(r21)
 40027a0:	900b883a 	mov	r5,r18
 40027a4:	d8c00315 	stw	r3,12(sp)
 40027a8:	313fffcc 	andi	r4,r6,65535
 40027ac:	d9800215 	stw	r6,8(sp)
 40027b0:	40097e40 	call	40097e4 <__mulsi3>
 40027b4:	d9800217 	ldw	r6,8(sp)
 40027b8:	d8c00317 	ldw	r3,12(sp)
 40027bc:	900b883a 	mov	r5,r18
 40027c0:	3008d43a 	srli	r4,r6,16
 40027c4:	1887883a 	add	r3,r3,r2
 40027c8:	d8c00315 	stw	r3,12(sp)
 40027cc:	40097e40 	call	40097e4 <__mulsi3>
 40027d0:	89400017 	ldw	r5,0(r17)
 40027d4:	d8c00317 	ldw	r3,12(sp)
 40027d8:	ad400104 	addi	r21,r21,4
 40027dc:	293fffcc 	andi	r4,r5,65535
 40027e0:	1810d43a 	srli	r8,r3,16
 40027e4:	25c9883a 	add	r4,r4,r23
 40027e8:	18ffffcc 	andi	r3,r3,65535
 40027ec:	20c9c83a 	sub	r4,r4,r3
 40027f0:	280cd43a 	srli	r6,r5,16
 40027f4:	4085883a 	add	r2,r8,r2
 40027f8:	2007d43a 	srai	r3,r4,16
 40027fc:	117fffcc 	andi	r5,r2,65535
 4002800:	314bc83a 	sub	r5,r6,r5
 4002804:	28cb883a 	add	r5,r5,r3
 4002808:	8940008d 	sth	r5,2(r17)
 400280c:	8900000d 	sth	r4,0(r17)
 4002810:	1006d43a 	srli	r3,r2,16
 4002814:	282fd43a 	srai	r23,r5,16
 4002818:	8c400104 	addi	r17,r17,4
 400281c:	b57fdf2e 	bgeu	r22,r21,400279c <__alt_data_end+0xfe00279c>
 4002820:	d8c00117 	ldw	r3,4(sp)
 4002824:	18000f1e 	bne	r3,zero,4002864 <quorem+0x15c>
 4002828:	a0800144 	addi	r2,r20,5
 400282c:	1085883a 	add	r2,r2,r2
 4002830:	1085883a 	add	r2,r2,r2
 4002834:	9887883a 	add	r3,r19,r2
 4002838:	18bfff04 	addi	r2,r3,-4
 400283c:	e080082e 	bgeu	fp,r2,4002860 <quorem+0x158>
 4002840:	18ffff17 	ldw	r3,-4(r3)
 4002844:	18000326 	beq	r3,zero,4002854 <quorem+0x14c>
 4002848:	00000506 	br	4002860 <quorem+0x158>
 400284c:	10c00017 	ldw	r3,0(r2)
 4002850:	1800031e 	bne	r3,zero,4002860 <quorem+0x158>
 4002854:	10bfff04 	addi	r2,r2,-4
 4002858:	a53fffc4 	addi	r20,r20,-1
 400285c:	e0bffb36 	bltu	fp,r2,400284c <__alt_data_end+0xfe00284c>
 4002860:	9d000415 	stw	r20,16(r19)
 4002864:	d9400017 	ldw	r5,0(sp)
 4002868:	9809883a 	mov	r4,r19
 400286c:	40065cc0 	call	40065cc <__mcmp>
 4002870:	10002516 	blt	r2,zero,4002908 <quorem+0x200>
 4002874:	94800044 	addi	r18,r18,1
 4002878:	e007883a 	mov	r3,fp
 400287c:	000d883a 	mov	r6,zero
 4002880:	18800017 	ldw	r2,0(r3)
 4002884:	82000017 	ldw	r8,0(r16)
 4002888:	84000104 	addi	r16,r16,4
 400288c:	11ffffcc 	andi	r7,r2,65535
 4002890:	413fffcc 	andi	r4,r8,65535
 4002894:	398d883a 	add	r6,r7,r6
 4002898:	310fc83a 	sub	r7,r6,r4
 400289c:	4010d43a 	srli	r8,r8,16
 40028a0:	100cd43a 	srli	r6,r2,16
 40028a4:	3809d43a 	srai	r4,r7,16
 40028a8:	19c0000d 	sth	r7,0(r3)
 40028ac:	320dc83a 	sub	r6,r6,r8
 40028b0:	310d883a 	add	r6,r6,r4
 40028b4:	1980008d 	sth	r6,2(r3)
 40028b8:	300dd43a 	srai	r6,r6,16
 40028bc:	18c00104 	addi	r3,r3,4
 40028c0:	b43fef2e 	bgeu	r22,r16,4002880 <__alt_data_end+0xfe002880>
 40028c4:	a0800144 	addi	r2,r20,5
 40028c8:	1085883a 	add	r2,r2,r2
 40028cc:	1085883a 	add	r2,r2,r2
 40028d0:	9885883a 	add	r2,r19,r2
 40028d4:	10c00017 	ldw	r3,0(r2)
 40028d8:	18000b1e 	bne	r3,zero,4002908 <quorem+0x200>
 40028dc:	10ffff04 	addi	r3,r2,-4
 40028e0:	e0c0082e 	bgeu	fp,r3,4002904 <quorem+0x1fc>
 40028e4:	10bfff17 	ldw	r2,-4(r2)
 40028e8:	10000326 	beq	r2,zero,40028f8 <quorem+0x1f0>
 40028ec:	00000506 	br	4002904 <quorem+0x1fc>
 40028f0:	18800017 	ldw	r2,0(r3)
 40028f4:	1000031e 	bne	r2,zero,4002904 <quorem+0x1fc>
 40028f8:	18ffff04 	addi	r3,r3,-4
 40028fc:	a53fffc4 	addi	r20,r20,-1
 4002900:	e0fffb36 	bltu	fp,r3,40028f0 <__alt_data_end+0xfe0028f0>
 4002904:	9d000415 	stw	r20,16(r19)
 4002908:	9005883a 	mov	r2,r18
 400290c:	dfc00d17 	ldw	ra,52(sp)
 4002910:	df000c17 	ldw	fp,48(sp)
 4002914:	ddc00b17 	ldw	r23,44(sp)
 4002918:	dd800a17 	ldw	r22,40(sp)
 400291c:	dd400917 	ldw	r21,36(sp)
 4002920:	dd000817 	ldw	r20,32(sp)
 4002924:	dcc00717 	ldw	r19,28(sp)
 4002928:	dc800617 	ldw	r18,24(sp)
 400292c:	dc400517 	ldw	r17,20(sp)
 4002930:	dc000417 	ldw	r16,16(sp)
 4002934:	dec00e04 	addi	sp,sp,56
 4002938:	f800283a 	ret
 400293c:	0005883a 	mov	r2,zero
 4002940:	003ff206 	br	400290c <__alt_data_end+0xfe00290c>

04002944 <_dtoa_r>:
 4002944:	20801017 	ldw	r2,64(r4)
 4002948:	deffdf04 	addi	sp,sp,-132
 400294c:	dcc01a15 	stw	r19,104(sp)
 4002950:	dc801915 	stw	r18,100(sp)
 4002954:	dc401815 	stw	r17,96(sp)
 4002958:	dc001715 	stw	r16,92(sp)
 400295c:	dfc02015 	stw	ra,128(sp)
 4002960:	df001f15 	stw	fp,124(sp)
 4002964:	ddc01e15 	stw	r23,120(sp)
 4002968:	dd801d15 	stw	r22,116(sp)
 400296c:	dd401c15 	stw	r21,112(sp)
 4002970:	dd001b15 	stw	r20,108(sp)
 4002974:	d9400315 	stw	r5,12(sp)
 4002978:	d9c00415 	stw	r7,16(sp)
 400297c:	2021883a 	mov	r16,r4
 4002980:	3025883a 	mov	r18,r6
 4002984:	dcc02317 	ldw	r19,140(sp)
 4002988:	3023883a 	mov	r17,r6
 400298c:	10000826 	beq	r2,zero,40029b0 <_dtoa_r+0x6c>
 4002990:	20c01117 	ldw	r3,68(r4)
 4002994:	01800044 	movi	r6,1
 4002998:	100b883a 	mov	r5,r2
 400299c:	30cc983a 	sll	r6,r6,r3
 40029a0:	10c00115 	stw	r3,4(r2)
 40029a4:	11800215 	stw	r6,8(r2)
 40029a8:	4005d280 	call	4005d28 <_Bfree>
 40029ac:	80001015 	stw	zero,64(r16)
 40029b0:	90002f16 	blt	r18,zero,4002a70 <_dtoa_r+0x12c>
 40029b4:	98000015 	stw	zero,0(r19)
 40029b8:	90dffc2c 	andhi	r3,r18,32752
 40029bc:	009ffc34 	movhi	r2,32752
 40029c0:	18801c26 	beq	r3,r2,4002a34 <_dtoa_r+0xf0>
 40029c4:	d9000317 	ldw	r4,12(sp)
 40029c8:	880b883a 	mov	r5,r17
 40029cc:	000d883a 	mov	r6,zero
 40029d0:	000f883a 	mov	r7,zero
 40029d4:	40092800 	call	4009280 <__nedf2>
 40029d8:	10002c1e 	bne	r2,zero,4002a8c <_dtoa_r+0x148>
 40029dc:	d9002217 	ldw	r4,136(sp)
 40029e0:	d9c02417 	ldw	r7,144(sp)
 40029e4:	00800044 	movi	r2,1
 40029e8:	20800015 	stw	r2,0(r4)
 40029ec:	38019426 	beq	r7,zero,4003040 <_dtoa_r+0x6fc>
 40029f0:	00810074 	movhi	r2,1025
 40029f4:	10b17644 	addi	r2,r2,-14887
 40029f8:	38800015 	stw	r2,0(r7)
 40029fc:	15ffffc4 	addi	r23,r2,-1
 4002a00:	b805883a 	mov	r2,r23
 4002a04:	dfc02017 	ldw	ra,128(sp)
 4002a08:	df001f17 	ldw	fp,124(sp)
 4002a0c:	ddc01e17 	ldw	r23,120(sp)
 4002a10:	dd801d17 	ldw	r22,116(sp)
 4002a14:	dd401c17 	ldw	r21,112(sp)
 4002a18:	dd001b17 	ldw	r20,108(sp)
 4002a1c:	dcc01a17 	ldw	r19,104(sp)
 4002a20:	dc801917 	ldw	r18,100(sp)
 4002a24:	dc401817 	ldw	r17,96(sp)
 4002a28:	dc001717 	ldw	r16,92(sp)
 4002a2c:	dec02104 	addi	sp,sp,132
 4002a30:	f800283a 	ret
 4002a34:	d8c02217 	ldw	r3,136(sp)
 4002a38:	d9000317 	ldw	r4,12(sp)
 4002a3c:	0089c3c4 	movi	r2,9999
 4002a40:	18800015 	stw	r2,0(r3)
 4002a44:	20016c26 	beq	r4,zero,4002ff8 <_dtoa_r+0x6b4>
 4002a48:	05c10074 	movhi	r23,1025
 4002a4c:	bdf18204 	addi	r23,r23,-14840
 4002a50:	d9c02417 	ldw	r7,144(sp)
 4002a54:	383fea26 	beq	r7,zero,4002a00 <__alt_data_end+0xfe002a00>
 4002a58:	b88000c7 	ldb	r2,3(r23)
 4002a5c:	10016d1e 	bne	r2,zero,4003014 <_dtoa_r+0x6d0>
 4002a60:	b88000c4 	addi	r2,r23,3
 4002a64:	d8c02417 	ldw	r3,144(sp)
 4002a68:	18800015 	stw	r2,0(r3)
 4002a6c:	003fe406 	br	4002a00 <__alt_data_end+0xfe002a00>
 4002a70:	04600034 	movhi	r17,32768
 4002a74:	8c7fffc4 	addi	r17,r17,-1
 4002a78:	9462703a 	and	r17,r18,r17
 4002a7c:	00800044 	movi	r2,1
 4002a80:	98800015 	stw	r2,0(r19)
 4002a84:	8825883a 	mov	r18,r17
 4002a88:	003fcb06 	br	40029b8 <__alt_data_end+0xfe0029b8>
 4002a8c:	d9400317 	ldw	r5,12(sp)
 4002a90:	9028d53a 	srli	r20,r18,20
 4002a94:	d8800204 	addi	r2,sp,8
 4002a98:	d8800015 	stw	r2,0(sp)
 4002a9c:	8009883a 	mov	r4,r16
 4002aa0:	880d883a 	mov	r6,r17
 4002aa4:	d9c00104 	addi	r7,sp,4
 4002aa8:	40069740 	call	4006974 <__d2b>
 4002aac:	a501ffcc 	andi	r20,r20,2047
 4002ab0:	1039883a 	mov	fp,r2
 4002ab4:	a001591e 	bne	r20,zero,400301c <_dtoa_r+0x6d8>
 4002ab8:	dd400217 	ldw	r21,8(sp)
 4002abc:	dd000117 	ldw	r20,4(sp)
 4002ac0:	00befbc4 	movi	r2,-1041
 4002ac4:	ad29883a 	add	r20,r21,r20
 4002ac8:	a082d216 	blt	r20,r2,4003614 <_dtoa_r+0xcd0>
 4002acc:	d8c00317 	ldw	r3,12(sp)
 4002ad0:	013f0384 	movi	r4,-1010
 4002ad4:	2509c83a 	sub	r4,r4,r20
 4002ad8:	a0810484 	addi	r2,r20,1042
 4002adc:	9124983a 	sll	r18,r18,r4
 4002ae0:	1884d83a 	srl	r2,r3,r2
 4002ae4:	9088b03a 	or	r4,r18,r2
 4002ae8:	40095980 	call	4009598 <__floatunsidf>
 4002aec:	1009883a 	mov	r4,r2
 4002af0:	017f8434 	movhi	r5,65040
 4002af4:	00800044 	movi	r2,1
 4002af8:	194b883a 	add	r5,r3,r5
 4002afc:	a53fffc4 	addi	r20,r20,-1
 4002b00:	d8800f15 	stw	r2,60(sp)
 4002b04:	000d883a 	mov	r6,zero
 4002b08:	01cffe34 	movhi	r7,16376
 4002b0c:	4008d2c0 	call	4008d2c <__subdf3>
 4002b10:	1009883a 	mov	r4,r2
 4002b14:	180b883a 	mov	r5,r3
 4002b18:	0198dbf4 	movhi	r6,25455
 4002b1c:	3190d844 	addi	r6,r6,17249
 4002b20:	01cff4f4 	movhi	r7,16339
 4002b24:	39e1e9c4 	addi	r7,r7,-30809
 4002b28:	4008d8c0 	call	4008d8c <__muldf3>
 4002b2c:	180b883a 	mov	r5,r3
 4002b30:	01a2d874 	movhi	r6,35681
 4002b34:	31b22cc4 	addi	r6,r6,-14157
 4002b38:	01cff1f4 	movhi	r7,16327
 4002b3c:	39e28a04 	addi	r7,r7,-30168
 4002b40:	1009883a 	mov	r4,r2
 4002b44:	4008cd80 	call	4008cd8 <__adddf3>
 4002b48:	a009883a 	mov	r4,r20
 4002b4c:	1027883a 	mov	r19,r2
 4002b50:	1825883a 	mov	r18,r3
 4002b54:	40094000 	call	4009400 <__floatsidf>
 4002b58:	1009883a 	mov	r4,r2
 4002b5c:	180b883a 	mov	r5,r3
 4002b60:	019427f4 	movhi	r6,20639
 4002b64:	319e7ec4 	addi	r6,r6,31227
 4002b68:	01cff4f4 	movhi	r7,16339
 4002b6c:	39d104c4 	addi	r7,r7,17427
 4002b70:	4008d8c0 	call	4008d8c <__muldf3>
 4002b74:	9809883a 	mov	r4,r19
 4002b78:	900b883a 	mov	r5,r18
 4002b7c:	100d883a 	mov	r6,r2
 4002b80:	180f883a 	mov	r7,r3
 4002b84:	4008cd80 	call	4008cd8 <__adddf3>
 4002b88:	1009883a 	mov	r4,r2
 4002b8c:	180b883a 	mov	r5,r3
 4002b90:	1027883a 	mov	r19,r2
 4002b94:	1825883a 	mov	r18,r3
 4002b98:	40094d40 	call	40094d4 <__fixdfsi>
 4002b9c:	9809883a 	mov	r4,r19
 4002ba0:	900b883a 	mov	r5,r18
 4002ba4:	000d883a 	mov	r6,zero
 4002ba8:	000f883a 	mov	r7,zero
 4002bac:	d8800615 	stw	r2,24(sp)
 4002bb0:	40093a40 	call	40093a4 <__ltdf2>
 4002bb4:	10027e16 	blt	r2,zero,40035b0 <_dtoa_r+0xc6c>
 4002bb8:	d8c00617 	ldw	r3,24(sp)
 4002bbc:	00800584 	movi	r2,22
 4002bc0:	10c26c36 	bltu	r2,r3,4003574 <_dtoa_r+0xc30>
 4002bc4:	180490fa 	slli	r2,r3,3
 4002bc8:	00c10074 	movhi	r3,1025
 4002bcc:	18f1a804 	addi	r3,r3,-14688
 4002bd0:	d9800317 	ldw	r6,12(sp)
 4002bd4:	1885883a 	add	r2,r3,r2
 4002bd8:	11000017 	ldw	r4,0(r2)
 4002bdc:	11400117 	ldw	r5,4(r2)
 4002be0:	880f883a 	mov	r7,r17
 4002be4:	40092dc0 	call	40092dc <__gtdf2>
 4002be8:	00828f0e 	bge	zero,r2,4003628 <_dtoa_r+0xce4>
 4002bec:	d8800617 	ldw	r2,24(sp)
 4002bf0:	d8000d15 	stw	zero,52(sp)
 4002bf4:	10bfffc4 	addi	r2,r2,-1
 4002bf8:	d8800615 	stw	r2,24(sp)
 4002bfc:	ad29c83a 	sub	r20,r21,r20
 4002c00:	a53fffc4 	addi	r20,r20,-1
 4002c04:	a0026616 	blt	r20,zero,40035a0 <_dtoa_r+0xc5c>
 4002c08:	dd000715 	stw	r20,28(sp)
 4002c0c:	d8000815 	stw	zero,32(sp)
 4002c10:	d8800617 	ldw	r2,24(sp)
 4002c14:	10025a16 	blt	r2,zero,4003580 <_dtoa_r+0xc3c>
 4002c18:	d8c00717 	ldw	r3,28(sp)
 4002c1c:	d8800b15 	stw	r2,44(sp)
 4002c20:	d8000a15 	stw	zero,40(sp)
 4002c24:	1887883a 	add	r3,r3,r2
 4002c28:	d8c00715 	stw	r3,28(sp)
 4002c2c:	d9c00417 	ldw	r7,16(sp)
 4002c30:	00800244 	movi	r2,9
 4002c34:	11c10536 	bltu	r2,r7,400304c <_dtoa_r+0x708>
 4002c38:	00800144 	movi	r2,5
 4002c3c:	11c4c60e 	bge	r2,r7,4003f58 <_dtoa_r+0x1614>
 4002c40:	39ffff04 	addi	r7,r7,-4
 4002c44:	d9c00415 	stw	r7,16(sp)
 4002c48:	0027883a 	mov	r19,zero
 4002c4c:	d9c00417 	ldw	r7,16(sp)
 4002c50:	008000c4 	movi	r2,3
 4002c54:	3883a226 	beq	r7,r2,4003ae0 <_dtoa_r+0x119c>
 4002c58:	11c2bc16 	blt	r2,r7,400374c <_dtoa_r+0xe08>
 4002c5c:	00800084 	movi	r2,2
 4002c60:	3880fb1e 	bne	r7,r2,4003050 <_dtoa_r+0x70c>
 4002c64:	d8000c15 	stw	zero,48(sp)
 4002c68:	d9002117 	ldw	r4,132(sp)
 4002c6c:	0103ae0e 	bge	zero,r4,4003b28 <_dtoa_r+0x11e4>
 4002c70:	2025883a 	mov	r18,r4
 4002c74:	d9000e15 	stw	r4,56(sp)
 4002c78:	d9000915 	stw	r4,36(sp)
 4002c7c:	80001115 	stw	zero,68(r16)
 4002c80:	008005c4 	movi	r2,23
 4002c84:	1484b22e 	bgeu	r2,r18,4003f50 <_dtoa_r+0x160c>
 4002c88:	00c00044 	movi	r3,1
 4002c8c:	00800104 	movi	r2,4
 4002c90:	1085883a 	add	r2,r2,r2
 4002c94:	11000504 	addi	r4,r2,20
 4002c98:	180b883a 	mov	r5,r3
 4002c9c:	18c00044 	addi	r3,r3,1
 4002ca0:	913ffb2e 	bgeu	r18,r4,4002c90 <__alt_data_end+0xfe002c90>
 4002ca4:	81401115 	stw	r5,68(r16)
 4002ca8:	8009883a 	mov	r4,r16
 4002cac:	4005c800 	call	4005c80 <_Balloc>
 4002cb0:	102f883a 	mov	r23,r2
 4002cb4:	80801015 	stw	r2,64(r16)
 4002cb8:	00800384 	movi	r2,14
 4002cbc:	1480f036 	bltu	r2,r18,4003080 <_dtoa_r+0x73c>
 4002cc0:	9800ef26 	beq	r19,zero,4003080 <_dtoa_r+0x73c>
 4002cc4:	d8800617 	ldw	r2,24(sp)
 4002cc8:	00839c0e 	bge	zero,r2,4003b3c <_dtoa_r+0x11f8>
 4002ccc:	d8c00617 	ldw	r3,24(sp)
 4002cd0:	108003cc 	andi	r2,r2,15
 4002cd4:	100490fa 	slli	r2,r2,3
 4002cd8:	182bd13a 	srai	r21,r3,4
 4002cdc:	00c10074 	movhi	r3,1025
 4002ce0:	18f1a804 	addi	r3,r3,-14688
 4002ce4:	1885883a 	add	r2,r3,r2
 4002ce8:	a8c0040c 	andi	r3,r21,16
 4002cec:	12800017 	ldw	r10,0(r2)
 4002cf0:	15800117 	ldw	r22,4(r2)
 4002cf4:	18038726 	beq	r3,zero,4003b14 <_dtoa_r+0x11d0>
 4002cf8:	00810074 	movhi	r2,1025
 4002cfc:	10b19e04 	addi	r2,r2,-14728
 4002d00:	11800817 	ldw	r6,32(r2)
 4002d04:	11c00917 	ldw	r7,36(r2)
 4002d08:	d9000317 	ldw	r4,12(sp)
 4002d0c:	880b883a 	mov	r5,r17
 4002d10:	da801515 	stw	r10,84(sp)
 4002d14:	40090700 	call	4009070 <__divdf3>
 4002d18:	da801517 	ldw	r10,84(sp)
 4002d1c:	d8801015 	stw	r2,64(sp)
 4002d20:	1829883a 	mov	r20,r3
 4002d24:	ad4003cc 	andi	r21,r21,15
 4002d28:	048000c4 	movi	r18,3
 4002d2c:	a8001126 	beq	r21,zero,4002d74 <_dtoa_r+0x430>
 4002d30:	04c10074 	movhi	r19,1025
 4002d34:	9cf19e04 	addi	r19,r19,-14728
 4002d38:	5005883a 	mov	r2,r10
 4002d3c:	b007883a 	mov	r3,r22
 4002d40:	a980004c 	andi	r6,r21,1
 4002d44:	1009883a 	mov	r4,r2
 4002d48:	a82bd07a 	srai	r21,r21,1
 4002d4c:	180b883a 	mov	r5,r3
 4002d50:	30000426 	beq	r6,zero,4002d64 <_dtoa_r+0x420>
 4002d54:	99800017 	ldw	r6,0(r19)
 4002d58:	99c00117 	ldw	r7,4(r19)
 4002d5c:	94800044 	addi	r18,r18,1
 4002d60:	4008d8c0 	call	4008d8c <__muldf3>
 4002d64:	9cc00204 	addi	r19,r19,8
 4002d68:	a83ff51e 	bne	r21,zero,4002d40 <__alt_data_end+0xfe002d40>
 4002d6c:	1015883a 	mov	r10,r2
 4002d70:	182d883a 	mov	r22,r3
 4002d74:	d9001017 	ldw	r4,64(sp)
 4002d78:	a00b883a 	mov	r5,r20
 4002d7c:	500d883a 	mov	r6,r10
 4002d80:	b00f883a 	mov	r7,r22
 4002d84:	40090700 	call	4009070 <__divdf3>
 4002d88:	1027883a 	mov	r19,r2
 4002d8c:	1829883a 	mov	r20,r3
 4002d90:	d8c00d17 	ldw	r3,52(sp)
 4002d94:	18000626 	beq	r3,zero,4002db0 <_dtoa_r+0x46c>
 4002d98:	9809883a 	mov	r4,r19
 4002d9c:	a00b883a 	mov	r5,r20
 4002da0:	000d883a 	mov	r6,zero
 4002da4:	01cffc34 	movhi	r7,16368
 4002da8:	40093a40 	call	40093a4 <__ltdf2>
 4002dac:	10040e16 	blt	r2,zero,4003de8 <_dtoa_r+0x14a4>
 4002db0:	9009883a 	mov	r4,r18
 4002db4:	40094000 	call	4009400 <__floatsidf>
 4002db8:	1009883a 	mov	r4,r2
 4002dbc:	180b883a 	mov	r5,r3
 4002dc0:	980d883a 	mov	r6,r19
 4002dc4:	a00f883a 	mov	r7,r20
 4002dc8:	4008d8c0 	call	4008d8c <__muldf3>
 4002dcc:	1009883a 	mov	r4,r2
 4002dd0:	180b883a 	mov	r5,r3
 4002dd4:	000d883a 	mov	r6,zero
 4002dd8:	01d00734 	movhi	r7,16412
 4002ddc:	4008cd80 	call	4008cd8 <__adddf3>
 4002de0:	057f3034 	movhi	r21,64704
 4002de4:	1d6b883a 	add	r21,r3,r21
 4002de8:	d8c00917 	ldw	r3,36(sp)
 4002dec:	1025883a 	mov	r18,r2
 4002df0:	18031f26 	beq	r3,zero,4003a70 <_dtoa_r+0x112c>
 4002df4:	d8800617 	ldw	r2,24(sp)
 4002df8:	dac00917 	ldw	r11,36(sp)
 4002dfc:	d8801315 	stw	r2,76(sp)
 4002e00:	d8c00c17 	ldw	r3,48(sp)
 4002e04:	18039026 	beq	r3,zero,4003c48 <_dtoa_r+0x1304>
 4002e08:	58bfffc4 	addi	r2,r11,-1
 4002e0c:	100490fa 	slli	r2,r2,3
 4002e10:	00c10074 	movhi	r3,1025
 4002e14:	18f1a804 	addi	r3,r3,-14688
 4002e18:	0009883a 	mov	r4,zero
 4002e1c:	1885883a 	add	r2,r3,r2
 4002e20:	11800017 	ldw	r6,0(r2)
 4002e24:	11c00117 	ldw	r7,4(r2)
 4002e28:	014ff834 	movhi	r5,16352
 4002e2c:	dac01615 	stw	r11,88(sp)
 4002e30:	40090700 	call	4009070 <__divdf3>
 4002e34:	900d883a 	mov	r6,r18
 4002e38:	a80f883a 	mov	r7,r21
 4002e3c:	1009883a 	mov	r4,r2
 4002e40:	180b883a 	mov	r5,r3
 4002e44:	4008d2c0 	call	4008d2c <__subdf3>
 4002e48:	a00b883a 	mov	r5,r20
 4002e4c:	9809883a 	mov	r4,r19
 4002e50:	182b883a 	mov	r21,r3
 4002e54:	d8801015 	stw	r2,64(sp)
 4002e58:	40094d40 	call	40094d4 <__fixdfsi>
 4002e5c:	1009883a 	mov	r4,r2
 4002e60:	d8801515 	stw	r2,84(sp)
 4002e64:	40094000 	call	4009400 <__floatsidf>
 4002e68:	9809883a 	mov	r4,r19
 4002e6c:	a00b883a 	mov	r5,r20
 4002e70:	100d883a 	mov	r6,r2
 4002e74:	180f883a 	mov	r7,r3
 4002e78:	4008d2c0 	call	4008d2c <__subdf3>
 4002e7c:	da401517 	ldw	r9,84(sp)
 4002e80:	d9001017 	ldw	r4,64(sp)
 4002e84:	a80b883a 	mov	r5,r21
 4002e88:	4d000c04 	addi	r20,r9,48
 4002e8c:	bd000005 	stb	r20,0(r23)
 4002e90:	100d883a 	mov	r6,r2
 4002e94:	180f883a 	mov	r7,r3
 4002e98:	bd800044 	addi	r22,r23,1
 4002e9c:	1025883a 	mov	r18,r2
 4002ea0:	1827883a 	mov	r19,r3
 4002ea4:	40092dc0 	call	40092dc <__gtdf2>
 4002ea8:	00842216 	blt	zero,r2,4003f34 <_dtoa_r+0x15f0>
 4002eac:	0009883a 	mov	r4,zero
 4002eb0:	014ffc34 	movhi	r5,16368
 4002eb4:	900d883a 	mov	r6,r18
 4002eb8:	980f883a 	mov	r7,r19
 4002ebc:	4008d2c0 	call	4008d2c <__subdf3>
 4002ec0:	d9001017 	ldw	r4,64(sp)
 4002ec4:	a80b883a 	mov	r5,r21
 4002ec8:	100d883a 	mov	r6,r2
 4002ecc:	180f883a 	mov	r7,r3
 4002ed0:	40092dc0 	call	40092dc <__gtdf2>
 4002ed4:	dac01617 	ldw	r11,88(sp)
 4002ed8:	00841316 	blt	zero,r2,4003f28 <_dtoa_r+0x15e4>
 4002edc:	00800044 	movi	r2,1
 4002ee0:	12c0670e 	bge	r2,r11,4003080 <_dtoa_r+0x73c>
 4002ee4:	bad7883a 	add	r11,r23,r11
 4002ee8:	df001115 	stw	fp,68(sp)
 4002eec:	dc401215 	stw	r17,72(sp)
 4002ef0:	5839883a 	mov	fp,r11
 4002ef4:	dc401017 	ldw	r17,64(sp)
 4002ef8:	00000806 	br	4002f1c <_dtoa_r+0x5d8>
 4002efc:	4008d2c0 	call	4008d2c <__subdf3>
 4002f00:	1009883a 	mov	r4,r2
 4002f04:	180b883a 	mov	r5,r3
 4002f08:	880d883a 	mov	r6,r17
 4002f0c:	a80f883a 	mov	r7,r21
 4002f10:	40093a40 	call	40093a4 <__ltdf2>
 4002f14:	1003ee16 	blt	r2,zero,4003ed0 <_dtoa_r+0x158c>
 4002f18:	b703f126 	beq	r22,fp,4003ee0 <_dtoa_r+0x159c>
 4002f1c:	8809883a 	mov	r4,r17
 4002f20:	a80b883a 	mov	r5,r21
 4002f24:	000d883a 	mov	r6,zero
 4002f28:	01d00934 	movhi	r7,16420
 4002f2c:	4008d8c0 	call	4008d8c <__muldf3>
 4002f30:	000d883a 	mov	r6,zero
 4002f34:	01d00934 	movhi	r7,16420
 4002f38:	9009883a 	mov	r4,r18
 4002f3c:	980b883a 	mov	r5,r19
 4002f40:	1023883a 	mov	r17,r2
 4002f44:	182b883a 	mov	r21,r3
 4002f48:	4008d8c0 	call	4008d8c <__muldf3>
 4002f4c:	180b883a 	mov	r5,r3
 4002f50:	1009883a 	mov	r4,r2
 4002f54:	1825883a 	mov	r18,r3
 4002f58:	1027883a 	mov	r19,r2
 4002f5c:	40094d40 	call	40094d4 <__fixdfsi>
 4002f60:	1009883a 	mov	r4,r2
 4002f64:	1029883a 	mov	r20,r2
 4002f68:	40094000 	call	4009400 <__floatsidf>
 4002f6c:	9809883a 	mov	r4,r19
 4002f70:	900b883a 	mov	r5,r18
 4002f74:	100d883a 	mov	r6,r2
 4002f78:	180f883a 	mov	r7,r3
 4002f7c:	4008d2c0 	call	4008d2c <__subdf3>
 4002f80:	a5000c04 	addi	r20,r20,48
 4002f84:	b5000005 	stb	r20,0(r22)
 4002f88:	1009883a 	mov	r4,r2
 4002f8c:	180b883a 	mov	r5,r3
 4002f90:	880d883a 	mov	r6,r17
 4002f94:	a80f883a 	mov	r7,r21
 4002f98:	1025883a 	mov	r18,r2
 4002f9c:	1827883a 	mov	r19,r3
 4002fa0:	40093a40 	call	40093a4 <__ltdf2>
 4002fa4:	b5800044 	addi	r22,r22,1
 4002fa8:	0009883a 	mov	r4,zero
 4002fac:	014ffc34 	movhi	r5,16368
 4002fb0:	900d883a 	mov	r6,r18
 4002fb4:	980f883a 	mov	r7,r19
 4002fb8:	103fd00e 	bge	r2,zero,4002efc <__alt_data_end+0xfe002efc>
 4002fbc:	d9001317 	ldw	r4,76(sp)
 4002fc0:	df001117 	ldw	fp,68(sp)
 4002fc4:	d9000615 	stw	r4,24(sp)
 4002fc8:	8009883a 	mov	r4,r16
 4002fcc:	e00b883a 	mov	r5,fp
 4002fd0:	4005d280 	call	4005d28 <_Bfree>
 4002fd4:	d9c00617 	ldw	r7,24(sp)
 4002fd8:	d8c02217 	ldw	r3,136(sp)
 4002fdc:	d9002417 	ldw	r4,144(sp)
 4002fe0:	b0000005 	stb	zero,0(r22)
 4002fe4:	38800044 	addi	r2,r7,1
 4002fe8:	18800015 	stw	r2,0(r3)
 4002fec:	203e8426 	beq	r4,zero,4002a00 <__alt_data_end+0xfe002a00>
 4002ff0:	25800015 	stw	r22,0(r4)
 4002ff4:	003e8206 	br	4002a00 <__alt_data_end+0xfe002a00>
 4002ff8:	00800434 	movhi	r2,16
 4002ffc:	10bfffc4 	addi	r2,r2,-1
 4003000:	90a4703a 	and	r18,r18,r2
 4003004:	903e901e 	bne	r18,zero,4002a48 <__alt_data_end+0xfe002a48>
 4003008:	05c10074 	movhi	r23,1025
 400300c:	bdf17f04 	addi	r23,r23,-14852
 4003010:	003e8f06 	br	4002a50 <__alt_data_end+0xfe002a50>
 4003014:	b8800204 	addi	r2,r23,8
 4003018:	003e9206 	br	4002a64 <__alt_data_end+0xfe002a64>
 400301c:	01400434 	movhi	r5,16
 4003020:	297fffc4 	addi	r5,r5,-1
 4003024:	894a703a 	and	r5,r17,r5
 4003028:	d9000317 	ldw	r4,12(sp)
 400302c:	294ffc34 	orhi	r5,r5,16368
 4003030:	a53f0044 	addi	r20,r20,-1023
 4003034:	dd400217 	ldw	r21,8(sp)
 4003038:	d8000f15 	stw	zero,60(sp)
 400303c:	003eb106 	br	4002b04 <__alt_data_end+0xfe002b04>
 4003040:	05c10074 	movhi	r23,1025
 4003044:	bdf17604 	addi	r23,r23,-14888
 4003048:	003e6d06 	br	4002a00 <__alt_data_end+0xfe002a00>
 400304c:	d8000415 	stw	zero,16(sp)
 4003050:	80001115 	stw	zero,68(r16)
 4003054:	8009883a 	mov	r4,r16
 4003058:	000b883a 	mov	r5,zero
 400305c:	4005c800 	call	4005c80 <_Balloc>
 4003060:	01ffffc4 	movi	r7,-1
 4003064:	102f883a 	mov	r23,r2
 4003068:	80801015 	stw	r2,64(r16)
 400306c:	00800044 	movi	r2,1
 4003070:	d9c00915 	stw	r7,36(sp)
 4003074:	d8002115 	stw	zero,132(sp)
 4003078:	d9c00e15 	stw	r7,56(sp)
 400307c:	d8800c15 	stw	r2,48(sp)
 4003080:	d8800117 	ldw	r2,4(sp)
 4003084:	10008b16 	blt	r2,zero,40032b4 <_dtoa_r+0x970>
 4003088:	d9000617 	ldw	r4,24(sp)
 400308c:	00c00384 	movi	r3,14
 4003090:	19008816 	blt	r3,r4,40032b4 <_dtoa_r+0x970>
 4003094:	200490fa 	slli	r2,r4,3
 4003098:	d9c02117 	ldw	r7,132(sp)
 400309c:	00c10074 	movhi	r3,1025
 40030a0:	18f1a804 	addi	r3,r3,-14688
 40030a4:	1885883a 	add	r2,r3,r2
 40030a8:	14800017 	ldw	r18,0(r2)
 40030ac:	14c00117 	ldw	r19,4(r2)
 40030b0:	3801c916 	blt	r7,zero,40037d8 <_dtoa_r+0xe94>
 40030b4:	d9000317 	ldw	r4,12(sp)
 40030b8:	900d883a 	mov	r6,r18
 40030bc:	980f883a 	mov	r7,r19
 40030c0:	880b883a 	mov	r5,r17
 40030c4:	40090700 	call	4009070 <__divdf3>
 40030c8:	180b883a 	mov	r5,r3
 40030cc:	1009883a 	mov	r4,r2
 40030d0:	40094d40 	call	40094d4 <__fixdfsi>
 40030d4:	1009883a 	mov	r4,r2
 40030d8:	102b883a 	mov	r21,r2
 40030dc:	40094000 	call	4009400 <__floatsidf>
 40030e0:	1009883a 	mov	r4,r2
 40030e4:	180b883a 	mov	r5,r3
 40030e8:	900d883a 	mov	r6,r18
 40030ec:	980f883a 	mov	r7,r19
 40030f0:	4008d8c0 	call	4008d8c <__muldf3>
 40030f4:	d9000317 	ldw	r4,12(sp)
 40030f8:	880b883a 	mov	r5,r17
 40030fc:	100d883a 	mov	r6,r2
 4003100:	180f883a 	mov	r7,r3
 4003104:	4008d2c0 	call	4008d2c <__subdf3>
 4003108:	d9c00917 	ldw	r7,36(sp)
 400310c:	1009883a 	mov	r4,r2
 4003110:	a8800c04 	addi	r2,r21,48
 4003114:	b8800005 	stb	r2,0(r23)
 4003118:	01800044 	movi	r6,1
 400311c:	180b883a 	mov	r5,r3
 4003120:	2005883a 	mov	r2,r4
 4003124:	bd800044 	addi	r22,r23,1
 4003128:	39803726 	beq	r7,r6,4003208 <_dtoa_r+0x8c4>
 400312c:	000d883a 	mov	r6,zero
 4003130:	01d00934 	movhi	r7,16420
 4003134:	4008d8c0 	call	4008d8c <__muldf3>
 4003138:	1009883a 	mov	r4,r2
 400313c:	180b883a 	mov	r5,r3
 4003140:	000d883a 	mov	r6,zero
 4003144:	000f883a 	mov	r7,zero
 4003148:	1029883a 	mov	r20,r2
 400314c:	1823883a 	mov	r17,r3
 4003150:	40092240 	call	4009224 <__eqdf2>
 4003154:	103f9c26 	beq	r2,zero,4002fc8 <__alt_data_end+0xfe002fc8>
 4003158:	dd400917 	ldw	r21,36(sp)
 400315c:	dc000415 	stw	r16,16(sp)
 4003160:	00000906 	br	4003188 <_dtoa_r+0x844>
 4003164:	4008d8c0 	call	4008d8c <__muldf3>
 4003168:	1009883a 	mov	r4,r2
 400316c:	180b883a 	mov	r5,r3
 4003170:	000d883a 	mov	r6,zero
 4003174:	000f883a 	mov	r7,zero
 4003178:	1029883a 	mov	r20,r2
 400317c:	1823883a 	mov	r17,r3
 4003180:	40092240 	call	4009224 <__eqdf2>
 4003184:	10022926 	beq	r2,zero,4003a2c <_dtoa_r+0x10e8>
 4003188:	900d883a 	mov	r6,r18
 400318c:	980f883a 	mov	r7,r19
 4003190:	a009883a 	mov	r4,r20
 4003194:	880b883a 	mov	r5,r17
 4003198:	40090700 	call	4009070 <__divdf3>
 400319c:	180b883a 	mov	r5,r3
 40031a0:	1009883a 	mov	r4,r2
 40031a4:	40094d40 	call	40094d4 <__fixdfsi>
 40031a8:	1009883a 	mov	r4,r2
 40031ac:	1021883a 	mov	r16,r2
 40031b0:	40094000 	call	4009400 <__floatsidf>
 40031b4:	1009883a 	mov	r4,r2
 40031b8:	180b883a 	mov	r5,r3
 40031bc:	900d883a 	mov	r6,r18
 40031c0:	980f883a 	mov	r7,r19
 40031c4:	4008d8c0 	call	4008d8c <__muldf3>
 40031c8:	a009883a 	mov	r4,r20
 40031cc:	880b883a 	mov	r5,r17
 40031d0:	100d883a 	mov	r6,r2
 40031d4:	180f883a 	mov	r7,r3
 40031d8:	4008d2c0 	call	4008d2c <__subdf3>
 40031dc:	82400c04 	addi	r9,r16,48
 40031e0:	b2400005 	stb	r9,0(r22)
 40031e4:	b5800044 	addi	r22,r22,1
 40031e8:	b5d3c83a 	sub	r9,r22,r23
 40031ec:	000d883a 	mov	r6,zero
 40031f0:	01d00934 	movhi	r7,16420
 40031f4:	1009883a 	mov	r4,r2
 40031f8:	180b883a 	mov	r5,r3
 40031fc:	aa7fd91e 	bne	r21,r9,4003164 <__alt_data_end+0xfe003164>
 4003200:	802b883a 	mov	r21,r16
 4003204:	dc000417 	ldw	r16,16(sp)
 4003208:	1009883a 	mov	r4,r2
 400320c:	180b883a 	mov	r5,r3
 4003210:	100d883a 	mov	r6,r2
 4003214:	180f883a 	mov	r7,r3
 4003218:	4008cd80 	call	4008cd8 <__adddf3>
 400321c:	9009883a 	mov	r4,r18
 4003220:	980b883a 	mov	r5,r19
 4003224:	100d883a 	mov	r6,r2
 4003228:	180f883a 	mov	r7,r3
 400322c:	1023883a 	mov	r17,r2
 4003230:	1829883a 	mov	r20,r3
 4003234:	40093a40 	call	40093a4 <__ltdf2>
 4003238:	10000816 	blt	r2,zero,400325c <_dtoa_r+0x918>
 400323c:	9009883a 	mov	r4,r18
 4003240:	980b883a 	mov	r5,r19
 4003244:	880d883a 	mov	r6,r17
 4003248:	a00f883a 	mov	r7,r20
 400324c:	40092800 	call	4009280 <__nedf2>
 4003250:	103f5d1e 	bne	r2,zero,4002fc8 <__alt_data_end+0xfe002fc8>
 4003254:	ad40004c 	andi	r21,r21,1
 4003258:	a83f5b26 	beq	r21,zero,4002fc8 <__alt_data_end+0xfe002fc8>
 400325c:	b53fffc3 	ldbu	r20,-1(r22)
 4003260:	b0ffff84 	addi	r3,r22,-2
 4003264:	01400e44 	movi	r5,57
 4003268:	00000306 	br	4003278 <_dtoa_r+0x934>
 400326c:	1d000003 	ldbu	r20,0(r3)
 4003270:	102d883a 	mov	r22,r2
 4003274:	18ffffc4 	addi	r3,r3,-1
 4003278:	a1003fcc 	andi	r4,r20,255
 400327c:	2100201c 	xori	r4,r4,128
 4003280:	213fe004 	addi	r4,r4,-128
 4003284:	b0bfffc4 	addi	r2,r22,-1
 4003288:	2142ca1e 	bne	r4,r5,4003db4 <_dtoa_r+0x1470>
 400328c:	b8bff71e 	bne	r23,r2,400326c <__alt_data_end+0xfe00326c>
 4003290:	d8800617 	ldw	r2,24(sp)
 4003294:	05000c44 	movi	r20,49
 4003298:	10800044 	addi	r2,r2,1
 400329c:	d8800615 	stw	r2,24(sp)
 40032a0:	00800c04 	movi	r2,48
 40032a4:	b8800005 	stb	r2,0(r23)
 40032a8:	b805883a 	mov	r2,r23
 40032ac:	15000005 	stb	r20,0(r2)
 40032b0:	003f4506 	br	4002fc8 <__alt_data_end+0xfe002fc8>
 40032b4:	d9c00c17 	ldw	r7,48(sp)
 40032b8:	3800c926 	beq	r7,zero,40035e0 <_dtoa_r+0xc9c>
 40032bc:	d9c00417 	ldw	r7,16(sp)
 40032c0:	00c00044 	movi	r3,1
 40032c4:	19c16c0e 	bge	r3,r7,4003878 <_dtoa_r+0xf34>
 40032c8:	d9000917 	ldw	r4,36(sp)
 40032cc:	d9c00a17 	ldw	r7,40(sp)
 40032d0:	24ffffc4 	addi	r19,r4,-1
 40032d4:	3cc20716 	blt	r7,r19,4003af4 <_dtoa_r+0x11b0>
 40032d8:	3ce7c83a 	sub	r19,r7,r19
 40032dc:	d9c00917 	ldw	r7,36(sp)
 40032e0:	3802ae16 	blt	r7,zero,4003d9c <_dtoa_r+0x1458>
 40032e4:	dc800817 	ldw	r18,32(sp)
 40032e8:	d8800917 	ldw	r2,36(sp)
 40032ec:	d8c00817 	ldw	r3,32(sp)
 40032f0:	d9c00717 	ldw	r7,28(sp)
 40032f4:	8009883a 	mov	r4,r16
 40032f8:	1887883a 	add	r3,r3,r2
 40032fc:	388f883a 	add	r7,r7,r2
 4003300:	01400044 	movi	r5,1
 4003304:	d8c00815 	stw	r3,32(sp)
 4003308:	d9c00715 	stw	r7,28(sp)
 400330c:	40060b00 	call	40060b0 <__i2b>
 4003310:	102b883a 	mov	r21,r2
 4003314:	90000a26 	beq	r18,zero,4003340 <_dtoa_r+0x9fc>
 4003318:	d8800717 	ldw	r2,28(sp)
 400331c:	0080080e 	bge	zero,r2,4003340 <_dtoa_r+0x9fc>
 4003320:	90812b16 	blt	r18,r2,40037d0 <_dtoa_r+0xe8c>
 4003324:	d8c00817 	ldw	r3,32(sp)
 4003328:	d9000717 	ldw	r4,28(sp)
 400332c:	90a5c83a 	sub	r18,r18,r2
 4003330:	1887c83a 	sub	r3,r3,r2
 4003334:	2089c83a 	sub	r4,r4,r2
 4003338:	d8c00815 	stw	r3,32(sp)
 400333c:	d9000715 	stw	r4,28(sp)
 4003340:	d9c00a17 	ldw	r7,40(sp)
 4003344:	01c0140e 	bge	zero,r7,4003398 <_dtoa_r+0xa54>
 4003348:	d8800c17 	ldw	r2,48(sp)
 400334c:	1001de26 	beq	r2,zero,4003ac8 <_dtoa_r+0x1184>
 4003350:	04c00e0e 	bge	zero,r19,400338c <_dtoa_r+0xa48>
 4003354:	a80b883a 	mov	r5,r21
 4003358:	8009883a 	mov	r4,r16
 400335c:	980d883a 	mov	r6,r19
 4003360:	40063440 	call	4006344 <__pow5mult>
 4003364:	e00d883a 	mov	r6,fp
 4003368:	8009883a 	mov	r4,r16
 400336c:	100b883a 	mov	r5,r2
 4003370:	102b883a 	mov	r21,r2
 4003374:	40060ec0 	call	40060ec <__multiply>
 4003378:	1029883a 	mov	r20,r2
 400337c:	e00b883a 	mov	r5,fp
 4003380:	8009883a 	mov	r4,r16
 4003384:	4005d280 	call	4005d28 <_Bfree>
 4003388:	a039883a 	mov	fp,r20
 400338c:	d8c00a17 	ldw	r3,40(sp)
 4003390:	1ccdc83a 	sub	r6,r3,r19
 4003394:	3001291e 	bne	r6,zero,400383c <_dtoa_r+0xef8>
 4003398:	8009883a 	mov	r4,r16
 400339c:	01400044 	movi	r5,1
 40033a0:	40060b00 	call	40060b0 <__i2b>
 40033a4:	d9000b17 	ldw	r4,44(sp)
 40033a8:	1029883a 	mov	r20,r2
 40033ac:	0100050e 	bge	zero,r4,40033c4 <_dtoa_r+0xa80>
 40033b0:	d9800b17 	ldw	r6,44(sp)
 40033b4:	8009883a 	mov	r4,r16
 40033b8:	100b883a 	mov	r5,r2
 40033bc:	40063440 	call	4006344 <__pow5mult>
 40033c0:	1029883a 	mov	r20,r2
 40033c4:	d9c00417 	ldw	r7,16(sp)
 40033c8:	00800044 	movi	r2,1
 40033cc:	11c0f00e 	bge	r2,r7,4003790 <_dtoa_r+0xe4c>
 40033d0:	0023883a 	mov	r17,zero
 40033d4:	d8800b17 	ldw	r2,44(sp)
 40033d8:	1001741e 	bne	r2,zero,40039ac <_dtoa_r+0x1068>
 40033dc:	00800044 	movi	r2,1
 40033e0:	d8c00717 	ldw	r3,28(sp)
 40033e4:	10c5883a 	add	r2,r2,r3
 40033e8:	108007cc 	andi	r2,r2,31
 40033ec:	10008026 	beq	r2,zero,40035f0 <_dtoa_r+0xcac>
 40033f0:	01000804 	movi	r4,32
 40033f4:	2089c83a 	sub	r4,r4,r2
 40033f8:	00c00104 	movi	r3,4
 40033fc:	1902d00e 	bge	r3,r4,4003f40 <_dtoa_r+0x15fc>
 4003400:	d9000817 	ldw	r4,32(sp)
 4003404:	d9c00717 	ldw	r7,28(sp)
 4003408:	00c00704 	movi	r3,28
 400340c:	1885c83a 	sub	r2,r3,r2
 4003410:	2089883a 	add	r4,r4,r2
 4003414:	388f883a 	add	r7,r7,r2
 4003418:	d9000815 	stw	r4,32(sp)
 400341c:	90a5883a 	add	r18,r18,r2
 4003420:	d9c00715 	stw	r7,28(sp)
 4003424:	d9c00817 	ldw	r7,32(sp)
 4003428:	01c0050e 	bge	zero,r7,4003440 <_dtoa_r+0xafc>
 400342c:	e00b883a 	mov	r5,fp
 4003430:	8009883a 	mov	r4,r16
 4003434:	380d883a 	mov	r6,r7
 4003438:	40064700 	call	4006470 <__lshift>
 400343c:	1039883a 	mov	fp,r2
 4003440:	d8800717 	ldw	r2,28(sp)
 4003444:	0080050e 	bge	zero,r2,400345c <_dtoa_r+0xb18>
 4003448:	a00b883a 	mov	r5,r20
 400344c:	8009883a 	mov	r4,r16
 4003450:	100d883a 	mov	r6,r2
 4003454:	40064700 	call	4006470 <__lshift>
 4003458:	1029883a 	mov	r20,r2
 400345c:	d8c00d17 	ldw	r3,52(sp)
 4003460:	1801401e 	bne	r3,zero,4003964 <_dtoa_r+0x1020>
 4003464:	d8800917 	ldw	r2,36(sp)
 4003468:	00815a0e 	bge	zero,r2,40039d4 <_dtoa_r+0x1090>
 400346c:	d8c00c17 	ldw	r3,48(sp)
 4003470:	18006f1e 	bne	r3,zero,4003630 <_dtoa_r+0xcec>
 4003474:	b823883a 	mov	r17,r23
 4003478:	dc800917 	ldw	r18,36(sp)
 400347c:	00000206 	br	4003488 <_dtoa_r+0xb44>
 4003480:	4005d500 	call	4005d50 <__multadd>
 4003484:	1039883a 	mov	fp,r2
 4003488:	e009883a 	mov	r4,fp
 400348c:	a00b883a 	mov	r5,r20
 4003490:	40027080 	call	4002708 <quorem>
 4003494:	10800c04 	addi	r2,r2,48
 4003498:	88800005 	stb	r2,0(r17)
 400349c:	8c400044 	addi	r17,r17,1
 40034a0:	8dc7c83a 	sub	r3,r17,r23
 40034a4:	8009883a 	mov	r4,r16
 40034a8:	e00b883a 	mov	r5,fp
 40034ac:	01800284 	movi	r6,10
 40034b0:	000f883a 	mov	r7,zero
 40034b4:	1cbff216 	blt	r3,r18,4003480 <__alt_data_end+0xfe003480>
 40034b8:	dd800917 	ldw	r22,36(sp)
 40034bc:	1007883a 	mov	r3,r2
 40034c0:	05823a0e 	bge	zero,r22,4003dac <_dtoa_r+0x1468>
 40034c4:	bdad883a 	add	r22,r23,r22
 40034c8:	0023883a 	mov	r17,zero
 40034cc:	e00b883a 	mov	r5,fp
 40034d0:	01800044 	movi	r6,1
 40034d4:	8009883a 	mov	r4,r16
 40034d8:	d8c01515 	stw	r3,84(sp)
 40034dc:	40064700 	call	4006470 <__lshift>
 40034e0:	1009883a 	mov	r4,r2
 40034e4:	a00b883a 	mov	r5,r20
 40034e8:	1039883a 	mov	fp,r2
 40034ec:	40065cc0 	call	40065cc <__mcmp>
 40034f0:	d8c01517 	ldw	r3,84(sp)
 40034f4:	0080d60e 	bge	zero,r2,4003850 <_dtoa_r+0xf0c>
 40034f8:	b13fffc3 	ldbu	r4,-1(r22)
 40034fc:	b0ffff84 	addi	r3,r22,-2
 4003500:	01800e44 	movi	r6,57
 4003504:	00000306 	br	4003514 <_dtoa_r+0xbd0>
 4003508:	19000003 	ldbu	r4,0(r3)
 400350c:	102d883a 	mov	r22,r2
 4003510:	18ffffc4 	addi	r3,r3,-1
 4003514:	21403fcc 	andi	r5,r4,255
 4003518:	2940201c 	xori	r5,r5,128
 400351c:	297fe004 	addi	r5,r5,-128
 4003520:	b0bfffc4 	addi	r2,r22,-1
 4003524:	2981a71e 	bne	r5,r6,4003bc4 <_dtoa_r+0x1280>
 4003528:	b8bff71e 	bne	r23,r2,4003508 <__alt_data_end+0xfe003508>
 400352c:	d8800617 	ldw	r2,24(sp)
 4003530:	10800044 	addi	r2,r2,1
 4003534:	d8800615 	stw	r2,24(sp)
 4003538:	00800c44 	movi	r2,49
 400353c:	b8800005 	stb	r2,0(r23)
 4003540:	8009883a 	mov	r4,r16
 4003544:	a00b883a 	mov	r5,r20
 4003548:	4005d280 	call	4005d28 <_Bfree>
 400354c:	a83e9e26 	beq	r21,zero,4002fc8 <__alt_data_end+0xfe002fc8>
 4003550:	88000426 	beq	r17,zero,4003564 <_dtoa_r+0xc20>
 4003554:	8d400326 	beq	r17,r21,4003564 <_dtoa_r+0xc20>
 4003558:	8009883a 	mov	r4,r16
 400355c:	880b883a 	mov	r5,r17
 4003560:	4005d280 	call	4005d28 <_Bfree>
 4003564:	8009883a 	mov	r4,r16
 4003568:	a80b883a 	mov	r5,r21
 400356c:	4005d280 	call	4005d28 <_Bfree>
 4003570:	003e9506 	br	4002fc8 <__alt_data_end+0xfe002fc8>
 4003574:	00c00044 	movi	r3,1
 4003578:	d8c00d15 	stw	r3,52(sp)
 400357c:	003d9f06 	br	4002bfc <__alt_data_end+0xfe002bfc>
 4003580:	d9000817 	ldw	r4,32(sp)
 4003584:	d8800617 	ldw	r2,24(sp)
 4003588:	d8000b15 	stw	zero,44(sp)
 400358c:	2089c83a 	sub	r4,r4,r2
 4003590:	0087c83a 	sub	r3,zero,r2
 4003594:	d9000815 	stw	r4,32(sp)
 4003598:	d8c00a15 	stw	r3,40(sp)
 400359c:	003da306 	br	4002c2c <__alt_data_end+0xfe002c2c>
 40035a0:	0529c83a 	sub	r20,zero,r20
 40035a4:	dd000815 	stw	r20,32(sp)
 40035a8:	d8000715 	stw	zero,28(sp)
 40035ac:	003d9806 	br	4002c10 <__alt_data_end+0xfe002c10>
 40035b0:	d9000617 	ldw	r4,24(sp)
 40035b4:	40094000 	call	4009400 <__floatsidf>
 40035b8:	1009883a 	mov	r4,r2
 40035bc:	180b883a 	mov	r5,r3
 40035c0:	980d883a 	mov	r6,r19
 40035c4:	900f883a 	mov	r7,r18
 40035c8:	40092240 	call	4009224 <__eqdf2>
 40035cc:	103d7a26 	beq	r2,zero,4002bb8 <__alt_data_end+0xfe002bb8>
 40035d0:	d8800617 	ldw	r2,24(sp)
 40035d4:	10bfffc4 	addi	r2,r2,-1
 40035d8:	d8800615 	stw	r2,24(sp)
 40035dc:	003d7606 	br	4002bb8 <__alt_data_end+0xfe002bb8>
 40035e0:	dcc00a17 	ldw	r19,40(sp)
 40035e4:	dc800817 	ldw	r18,32(sp)
 40035e8:	002b883a 	mov	r21,zero
 40035ec:	003f4906 	br	4003314 <__alt_data_end+0xfe003314>
 40035f0:	00800704 	movi	r2,28
 40035f4:	d8c00817 	ldw	r3,32(sp)
 40035f8:	d9000717 	ldw	r4,28(sp)
 40035fc:	90a5883a 	add	r18,r18,r2
 4003600:	1887883a 	add	r3,r3,r2
 4003604:	2089883a 	add	r4,r4,r2
 4003608:	d8c00815 	stw	r3,32(sp)
 400360c:	d9000715 	stw	r4,28(sp)
 4003610:	003f8406 	br	4003424 <__alt_data_end+0xfe003424>
 4003614:	d9c00317 	ldw	r7,12(sp)
 4003618:	013efb84 	movi	r4,-1042
 400361c:	2509c83a 	sub	r4,r4,r20
 4003620:	3908983a 	sll	r4,r7,r4
 4003624:	003d3006 	br	4002ae8 <__alt_data_end+0xfe002ae8>
 4003628:	d8000d15 	stw	zero,52(sp)
 400362c:	003d7306 	br	4002bfc <__alt_data_end+0xfe002bfc>
 4003630:	0480050e 	bge	zero,r18,4003648 <_dtoa_r+0xd04>
 4003634:	a80b883a 	mov	r5,r21
 4003638:	8009883a 	mov	r4,r16
 400363c:	900d883a 	mov	r6,r18
 4003640:	40064700 	call	4006470 <__lshift>
 4003644:	102b883a 	mov	r21,r2
 4003648:	8801611e 	bne	r17,zero,4003bd0 <_dtoa_r+0x128c>
 400364c:	a827883a 	mov	r19,r21
 4003650:	d8c00317 	ldw	r3,12(sp)
 4003654:	d9000917 	ldw	r4,36(sp)
 4003658:	b8bfffc4 	addi	r2,r23,-1
 400365c:	18c0004c 	andi	r3,r3,1
 4003660:	1105883a 	add	r2,r2,r4
 4003664:	b825883a 	mov	r18,r23
 4003668:	d8800515 	stw	r2,20(sp)
 400366c:	a823883a 	mov	r17,r21
 4003670:	d8c00315 	stw	r3,12(sp)
 4003674:	ddc00715 	stw	r23,28(sp)
 4003678:	e009883a 	mov	r4,fp
 400367c:	a00b883a 	mov	r5,r20
 4003680:	40027080 	call	4002708 <quorem>
 4003684:	e009883a 	mov	r4,fp
 4003688:	880b883a 	mov	r5,r17
 400368c:	102d883a 	mov	r22,r2
 4003690:	40065cc0 	call	40065cc <__mcmp>
 4003694:	980d883a 	mov	r6,r19
 4003698:	8009883a 	mov	r4,r16
 400369c:	a00b883a 	mov	r5,r20
 40036a0:	102b883a 	mov	r21,r2
 40036a4:	40066240 	call	4006624 <__mdiff>
 40036a8:	100d883a 	mov	r6,r2
 40036ac:	10800317 	ldw	r2,12(r2)
 40036b0:	b5c00c04 	addi	r23,r22,48
 40036b4:	10008c26 	beq	r2,zero,40038e8 <_dtoa_r+0xfa4>
 40036b8:	8009883a 	mov	r4,r16
 40036bc:	300b883a 	mov	r5,r6
 40036c0:	4005d280 	call	4005d28 <_Bfree>
 40036c4:	00800044 	movi	r2,1
 40036c8:	a8007116 	blt	r21,zero,4003890 <_dtoa_r+0xf4c>
 40036cc:	a800041e 	bne	r21,zero,40036e0 <_dtoa_r+0xd9c>
 40036d0:	d9c00417 	ldw	r7,16(sp)
 40036d4:	3800021e 	bne	r7,zero,40036e0 <_dtoa_r+0xd9c>
 40036d8:	d8c00317 	ldw	r3,12(sp)
 40036dc:	18006c26 	beq	r3,zero,4003890 <_dtoa_r+0xf4c>
 40036e0:	00814c16 	blt	zero,r2,4003c14 <_dtoa_r+0x12d0>
 40036e4:	d8c00517 	ldw	r3,20(sp)
 40036e8:	95400044 	addi	r21,r18,1
 40036ec:	95c00005 	stb	r23,0(r18)
 40036f0:	a82d883a 	mov	r22,r21
 40036f4:	90c14d26 	beq	r18,r3,4003c2c <_dtoa_r+0x12e8>
 40036f8:	e00b883a 	mov	r5,fp
 40036fc:	8009883a 	mov	r4,r16
 4003700:	01800284 	movi	r6,10
 4003704:	000f883a 	mov	r7,zero
 4003708:	4005d500 	call	4005d50 <__multadd>
 400370c:	1039883a 	mov	fp,r2
 4003710:	8cc08b26 	beq	r17,r19,4003940 <_dtoa_r+0xffc>
 4003714:	880b883a 	mov	r5,r17
 4003718:	01800284 	movi	r6,10
 400371c:	000f883a 	mov	r7,zero
 4003720:	8009883a 	mov	r4,r16
 4003724:	4005d500 	call	4005d50 <__multadd>
 4003728:	980b883a 	mov	r5,r19
 400372c:	8009883a 	mov	r4,r16
 4003730:	01800284 	movi	r6,10
 4003734:	000f883a 	mov	r7,zero
 4003738:	1023883a 	mov	r17,r2
 400373c:	4005d500 	call	4005d50 <__multadd>
 4003740:	1027883a 	mov	r19,r2
 4003744:	a825883a 	mov	r18,r21
 4003748:	003fcb06 	br	4003678 <__alt_data_end+0xfe003678>
 400374c:	d9c00417 	ldw	r7,16(sp)
 4003750:	00800104 	movi	r2,4
 4003754:	3880e426 	beq	r7,r2,4003ae8 <_dtoa_r+0x11a4>
 4003758:	00800144 	movi	r2,5
 400375c:	38be3c1e 	bne	r7,r2,4003050 <__alt_data_end+0xfe003050>
 4003760:	00c00044 	movi	r3,1
 4003764:	d8c00c15 	stw	r3,48(sp)
 4003768:	d9c02117 	ldw	r7,132(sp)
 400376c:	d8800617 	ldw	r2,24(sp)
 4003770:	388f883a 	add	r7,r7,r2
 4003774:	3c800044 	addi	r18,r7,1
 4003778:	d9c00e15 	stw	r7,56(sp)
 400377c:	dc800915 	stw	r18,36(sp)
 4003780:	04bd3e16 	blt	zero,r18,4002c7c <__alt_data_end+0xfe002c7c>
 4003784:	80001115 	stw	zero,68(r16)
 4003788:	000b883a 	mov	r5,zero
 400378c:	003d4606 	br	4002ca8 <__alt_data_end+0xfe002ca8>
 4003790:	d8c00317 	ldw	r3,12(sp)
 4003794:	183f0e1e 	bne	r3,zero,40033d0 <__alt_data_end+0xfe0033d0>
 4003798:	00c00434 	movhi	r3,16
 400379c:	18ffffc4 	addi	r3,r3,-1
 40037a0:	88c6703a 	and	r3,r17,r3
 40037a4:	183f0a1e 	bne	r3,zero,40033d0 <__alt_data_end+0xfe0033d0>
 40037a8:	8c5ffc2c 	andhi	r17,r17,32752
 40037ac:	883f0826 	beq	r17,zero,40033d0 <__alt_data_end+0xfe0033d0>
 40037b0:	d9000817 	ldw	r4,32(sp)
 40037b4:	d9c00717 	ldw	r7,28(sp)
 40037b8:	1023883a 	mov	r17,r2
 40037bc:	2089883a 	add	r4,r4,r2
 40037c0:	388f883a 	add	r7,r7,r2
 40037c4:	d9000815 	stw	r4,32(sp)
 40037c8:	d9c00715 	stw	r7,28(sp)
 40037cc:	003f0106 	br	40033d4 <__alt_data_end+0xfe0033d4>
 40037d0:	9005883a 	mov	r2,r18
 40037d4:	003ed306 	br	4003324 <__alt_data_end+0xfe003324>
 40037d8:	d8800917 	ldw	r2,36(sp)
 40037dc:	00be3516 	blt	zero,r2,40030b4 <__alt_data_end+0xfe0030b4>
 40037e0:	1000b61e 	bne	r2,zero,4003abc <_dtoa_r+0x1178>
 40037e4:	9009883a 	mov	r4,r18
 40037e8:	980b883a 	mov	r5,r19
 40037ec:	000d883a 	mov	r6,zero
 40037f0:	01d00534 	movhi	r7,16404
 40037f4:	4008d8c0 	call	4008d8c <__muldf3>
 40037f8:	d9800317 	ldw	r6,12(sp)
 40037fc:	1009883a 	mov	r4,r2
 4003800:	180b883a 	mov	r5,r3
 4003804:	880f883a 	mov	r7,r17
 4003808:	40093400 	call	4009340 <__gedf2>
 400380c:	0029883a 	mov	r20,zero
 4003810:	002b883a 	mov	r21,zero
 4003814:	10007e16 	blt	r2,zero,4003a10 <_dtoa_r+0x10cc>
 4003818:	d8802117 	ldw	r2,132(sp)
 400381c:	b82d883a 	mov	r22,r23
 4003820:	0084303a 	nor	r2,zero,r2
 4003824:	d8800615 	stw	r2,24(sp)
 4003828:	8009883a 	mov	r4,r16
 400382c:	a00b883a 	mov	r5,r20
 4003830:	4005d280 	call	4005d28 <_Bfree>
 4003834:	a83f4b1e 	bne	r21,zero,4003564 <__alt_data_end+0xfe003564>
 4003838:	003de306 	br	4002fc8 <__alt_data_end+0xfe002fc8>
 400383c:	e00b883a 	mov	r5,fp
 4003840:	8009883a 	mov	r4,r16
 4003844:	40063440 	call	4006344 <__pow5mult>
 4003848:	1039883a 	mov	fp,r2
 400384c:	003ed206 	br	4003398 <__alt_data_end+0xfe003398>
 4003850:	1000021e 	bne	r2,zero,400385c <_dtoa_r+0xf18>
 4003854:	18c0004c 	andi	r3,r3,1
 4003858:	183f271e 	bne	r3,zero,40034f8 <__alt_data_end+0xfe0034f8>
 400385c:	01000c04 	movi	r4,48
 4003860:	00000106 	br	4003868 <_dtoa_r+0xf24>
 4003864:	102d883a 	mov	r22,r2
 4003868:	b0bfffc4 	addi	r2,r22,-1
 400386c:	10c00007 	ldb	r3,0(r2)
 4003870:	193ffc26 	beq	r3,r4,4003864 <__alt_data_end+0xfe003864>
 4003874:	003f3206 	br	4003540 <__alt_data_end+0xfe003540>
 4003878:	d8c00f17 	ldw	r3,60(sp)
 400387c:	18015026 	beq	r3,zero,4003dc0 <_dtoa_r+0x147c>
 4003880:	10810cc4 	addi	r2,r2,1075
 4003884:	dcc00a17 	ldw	r19,40(sp)
 4003888:	dc800817 	ldw	r18,32(sp)
 400388c:	003e9706 	br	40032ec <__alt_data_end+0xfe0032ec>
 4003890:	b807883a 	mov	r3,r23
 4003894:	182b883a 	mov	r21,r3
 4003898:	ddc00717 	ldw	r23,28(sp)
 400389c:	00800e0e 	bge	zero,r2,40038d8 <_dtoa_r+0xf94>
 40038a0:	e00b883a 	mov	r5,fp
 40038a4:	01800044 	movi	r6,1
 40038a8:	8009883a 	mov	r4,r16
 40038ac:	d8c01515 	stw	r3,84(sp)
 40038b0:	40064700 	call	4006470 <__lshift>
 40038b4:	1009883a 	mov	r4,r2
 40038b8:	a00b883a 	mov	r5,r20
 40038bc:	1039883a 	mov	fp,r2
 40038c0:	40065cc0 	call	40065cc <__mcmp>
 40038c4:	d8c01517 	ldw	r3,84(sp)
 40038c8:	0081880e 	bge	zero,r2,4003eec <_dtoa_r+0x15a8>
 40038cc:	00800e44 	movi	r2,57
 40038d0:	b0c00c44 	addi	r3,r22,49
 40038d4:	a8816326 	beq	r21,r2,4003e64 <_dtoa_r+0x1520>
 40038d8:	90c00005 	stb	r3,0(r18)
 40038dc:	95800044 	addi	r22,r18,1
 40038e0:	982b883a 	mov	r21,r19
 40038e4:	003f1606 	br	4003540 <__alt_data_end+0xfe003540>
 40038e8:	300b883a 	mov	r5,r6
 40038ec:	e009883a 	mov	r4,fp
 40038f0:	d9801515 	stw	r6,84(sp)
 40038f4:	40065cc0 	call	40065cc <__mcmp>
 40038f8:	d9801517 	ldw	r6,84(sp)
 40038fc:	8009883a 	mov	r4,r16
 4003900:	d8801515 	stw	r2,84(sp)
 4003904:	300b883a 	mov	r5,r6
 4003908:	4005d280 	call	4005d28 <_Bfree>
 400390c:	d8801517 	ldw	r2,84(sp)
 4003910:	103f6d1e 	bne	r2,zero,40036c8 <__alt_data_end+0xfe0036c8>
 4003914:	d9c00417 	ldw	r7,16(sp)
 4003918:	383f6b1e 	bne	r7,zero,40036c8 <__alt_data_end+0xfe0036c8>
 400391c:	d8c00317 	ldw	r3,12(sp)
 4003920:	183f691e 	bne	r3,zero,40036c8 <__alt_data_end+0xfe0036c8>
 4003924:	b807883a 	mov	r3,r23
 4003928:	00800e44 	movi	r2,57
 400392c:	ddc00717 	ldw	r23,28(sp)
 4003930:	18814c26 	beq	r3,r2,4003e64 <_dtoa_r+0x1520>
 4003934:	057fe80e 	bge	zero,r21,40038d8 <__alt_data_end+0xfe0038d8>
 4003938:	b0c00c44 	addi	r3,r22,49
 400393c:	003fe606 	br	40038d8 <__alt_data_end+0xfe0038d8>
 4003940:	880b883a 	mov	r5,r17
 4003944:	8009883a 	mov	r4,r16
 4003948:	01800284 	movi	r6,10
 400394c:	000f883a 	mov	r7,zero
 4003950:	4005d500 	call	4005d50 <__multadd>
 4003954:	1023883a 	mov	r17,r2
 4003958:	1027883a 	mov	r19,r2
 400395c:	a825883a 	mov	r18,r21
 4003960:	003f4506 	br	4003678 <__alt_data_end+0xfe003678>
 4003964:	e009883a 	mov	r4,fp
 4003968:	a00b883a 	mov	r5,r20
 400396c:	40065cc0 	call	40065cc <__mcmp>
 4003970:	103ebc0e 	bge	r2,zero,4003464 <__alt_data_end+0xfe003464>
 4003974:	e00b883a 	mov	r5,fp
 4003978:	8009883a 	mov	r4,r16
 400397c:	01800284 	movi	r6,10
 4003980:	000f883a 	mov	r7,zero
 4003984:	4005d500 	call	4005d50 <__multadd>
 4003988:	1039883a 	mov	fp,r2
 400398c:	d8800617 	ldw	r2,24(sp)
 4003990:	d8c00c17 	ldw	r3,48(sp)
 4003994:	10bfffc4 	addi	r2,r2,-1
 4003998:	d8800615 	stw	r2,24(sp)
 400399c:	1801571e 	bne	r3,zero,4003efc <_dtoa_r+0x15b8>
 40039a0:	d9c00e17 	ldw	r7,56(sp)
 40039a4:	d9c00915 	stw	r7,36(sp)
 40039a8:	003eae06 	br	4003464 <__alt_data_end+0xfe003464>
 40039ac:	a0800417 	ldw	r2,16(r20)
 40039b0:	10800104 	addi	r2,r2,4
 40039b4:	1085883a 	add	r2,r2,r2
 40039b8:	1085883a 	add	r2,r2,r2
 40039bc:	a085883a 	add	r2,r20,r2
 40039c0:	11000017 	ldw	r4,0(r2)
 40039c4:	4005f980 	call	4005f98 <__hi0bits>
 40039c8:	00c00804 	movi	r3,32
 40039cc:	1885c83a 	sub	r2,r3,r2
 40039d0:	003e8306 	br	40033e0 <__alt_data_end+0xfe0033e0>
 40039d4:	d9c00417 	ldw	r7,16(sp)
 40039d8:	00800084 	movi	r2,2
 40039dc:	11fea30e 	bge	r2,r7,400346c <__alt_data_end+0xfe00346c>
 40039e0:	d8800917 	ldw	r2,36(sp)
 40039e4:	103f8c1e 	bne	r2,zero,4003818 <__alt_data_end+0xfe003818>
 40039e8:	a00b883a 	mov	r5,r20
 40039ec:	8009883a 	mov	r4,r16
 40039f0:	01800144 	movi	r6,5
 40039f4:	000f883a 	mov	r7,zero
 40039f8:	4005d500 	call	4005d50 <__multadd>
 40039fc:	e009883a 	mov	r4,fp
 4003a00:	100b883a 	mov	r5,r2
 4003a04:	1029883a 	mov	r20,r2
 4003a08:	40065cc0 	call	40065cc <__mcmp>
 4003a0c:	00bf820e 	bge	zero,r2,4003818 <__alt_data_end+0xfe003818>
 4003a10:	00800c44 	movi	r2,49
 4003a14:	b8800005 	stb	r2,0(r23)
 4003a18:	d8800617 	ldw	r2,24(sp)
 4003a1c:	bd800044 	addi	r22,r23,1
 4003a20:	10800044 	addi	r2,r2,1
 4003a24:	d8800615 	stw	r2,24(sp)
 4003a28:	003f7f06 	br	4003828 <__alt_data_end+0xfe003828>
 4003a2c:	dc000417 	ldw	r16,16(sp)
 4003a30:	003d6506 	br	4002fc8 <__alt_data_end+0xfe002fc8>
 4003a34:	9009883a 	mov	r4,r18
 4003a38:	40094000 	call	4009400 <__floatsidf>
 4003a3c:	1009883a 	mov	r4,r2
 4003a40:	180b883a 	mov	r5,r3
 4003a44:	980d883a 	mov	r6,r19
 4003a48:	a00f883a 	mov	r7,r20
 4003a4c:	4008d8c0 	call	4008d8c <__muldf3>
 4003a50:	1009883a 	mov	r4,r2
 4003a54:	180b883a 	mov	r5,r3
 4003a58:	000d883a 	mov	r6,zero
 4003a5c:	01d00734 	movhi	r7,16412
 4003a60:	4008cd80 	call	4008cd8 <__adddf3>
 4003a64:	057f3034 	movhi	r21,64704
 4003a68:	1025883a 	mov	r18,r2
 4003a6c:	1d6b883a 	add	r21,r3,r21
 4003a70:	9809883a 	mov	r4,r19
 4003a74:	a00b883a 	mov	r5,r20
 4003a78:	000d883a 	mov	r6,zero
 4003a7c:	01d00534 	movhi	r7,16404
 4003a80:	4008d2c0 	call	4008d2c <__subdf3>
 4003a84:	1009883a 	mov	r4,r2
 4003a88:	180b883a 	mov	r5,r3
 4003a8c:	900d883a 	mov	r6,r18
 4003a90:	a80f883a 	mov	r7,r21
 4003a94:	1027883a 	mov	r19,r2
 4003a98:	1829883a 	mov	r20,r3
 4003a9c:	40092dc0 	call	40092dc <__gtdf2>
 4003aa0:	00806616 	blt	zero,r2,4003c3c <_dtoa_r+0x12f8>
 4003aa4:	a9e0003c 	xorhi	r7,r21,32768
 4003aa8:	9809883a 	mov	r4,r19
 4003aac:	a00b883a 	mov	r5,r20
 4003ab0:	900d883a 	mov	r6,r18
 4003ab4:	40093a40 	call	40093a4 <__ltdf2>
 4003ab8:	103d710e 	bge	r2,zero,4003080 <__alt_data_end+0xfe003080>
 4003abc:	0029883a 	mov	r20,zero
 4003ac0:	002b883a 	mov	r21,zero
 4003ac4:	003f5406 	br	4003818 <__alt_data_end+0xfe003818>
 4003ac8:	d9800a17 	ldw	r6,40(sp)
 4003acc:	e00b883a 	mov	r5,fp
 4003ad0:	8009883a 	mov	r4,r16
 4003ad4:	40063440 	call	4006344 <__pow5mult>
 4003ad8:	1039883a 	mov	fp,r2
 4003adc:	003e2e06 	br	4003398 <__alt_data_end+0xfe003398>
 4003ae0:	d8000c15 	stw	zero,48(sp)
 4003ae4:	003f2006 	br	4003768 <__alt_data_end+0xfe003768>
 4003ae8:	00800044 	movi	r2,1
 4003aec:	d8800c15 	stw	r2,48(sp)
 4003af0:	003c5d06 	br	4002c68 <__alt_data_end+0xfe002c68>
 4003af4:	d8c00a17 	ldw	r3,40(sp)
 4003af8:	d9000b17 	ldw	r4,44(sp)
 4003afc:	dcc00a15 	stw	r19,40(sp)
 4003b00:	98c5c83a 	sub	r2,r19,r3
 4003b04:	2089883a 	add	r4,r4,r2
 4003b08:	d9000b15 	stw	r4,44(sp)
 4003b0c:	0027883a 	mov	r19,zero
 4003b10:	003df206 	br	40032dc <__alt_data_end+0xfe0032dc>
 4003b14:	d9000317 	ldw	r4,12(sp)
 4003b18:	8829883a 	mov	r20,r17
 4003b1c:	04800084 	movi	r18,2
 4003b20:	d9001015 	stw	r4,64(sp)
 4003b24:	003c8106 	br	4002d2c <__alt_data_end+0xfe002d2c>
 4003b28:	04800044 	movi	r18,1
 4003b2c:	dc800e15 	stw	r18,56(sp)
 4003b30:	dc800915 	stw	r18,36(sp)
 4003b34:	dc802115 	stw	r18,132(sp)
 4003b38:	003f1206 	br	4003784 <__alt_data_end+0xfe003784>
 4003b3c:	d8800617 	ldw	r2,24(sp)
 4003b40:	00abc83a 	sub	r21,zero,r2
 4003b44:	a800a426 	beq	r21,zero,4003dd8 <_dtoa_r+0x1494>
 4003b48:	a88003cc 	andi	r2,r21,15
 4003b4c:	100490fa 	slli	r2,r2,3
 4003b50:	00c10074 	movhi	r3,1025
 4003b54:	18f1a804 	addi	r3,r3,-14688
 4003b58:	d9000317 	ldw	r4,12(sp)
 4003b5c:	1885883a 	add	r2,r3,r2
 4003b60:	11800017 	ldw	r6,0(r2)
 4003b64:	11c00117 	ldw	r7,4(r2)
 4003b68:	a82bd13a 	srai	r21,r21,4
 4003b6c:	880b883a 	mov	r5,r17
 4003b70:	4008d8c0 	call	4008d8c <__muldf3>
 4003b74:	1027883a 	mov	r19,r2
 4003b78:	1829883a 	mov	r20,r3
 4003b7c:	a800e826 	beq	r21,zero,4003f20 <_dtoa_r+0x15dc>
 4003b80:	05810074 	movhi	r22,1025
 4003b84:	b5b19e04 	addi	r22,r22,-14728
 4003b88:	04800084 	movi	r18,2
 4003b8c:	a980004c 	andi	r6,r21,1
 4003b90:	1009883a 	mov	r4,r2
 4003b94:	a82bd07a 	srai	r21,r21,1
 4003b98:	180b883a 	mov	r5,r3
 4003b9c:	30000426 	beq	r6,zero,4003bb0 <_dtoa_r+0x126c>
 4003ba0:	b1800017 	ldw	r6,0(r22)
 4003ba4:	b1c00117 	ldw	r7,4(r22)
 4003ba8:	94800044 	addi	r18,r18,1
 4003bac:	4008d8c0 	call	4008d8c <__muldf3>
 4003bb0:	b5800204 	addi	r22,r22,8
 4003bb4:	a83ff51e 	bne	r21,zero,4003b8c <__alt_data_end+0xfe003b8c>
 4003bb8:	1027883a 	mov	r19,r2
 4003bbc:	1829883a 	mov	r20,r3
 4003bc0:	003c7306 	br	4002d90 <__alt_data_end+0xfe002d90>
 4003bc4:	21000044 	addi	r4,r4,1
 4003bc8:	11000005 	stb	r4,0(r2)
 4003bcc:	003e5c06 	br	4003540 <__alt_data_end+0xfe003540>
 4003bd0:	a9400117 	ldw	r5,4(r21)
 4003bd4:	8009883a 	mov	r4,r16
 4003bd8:	4005c800 	call	4005c80 <_Balloc>
 4003bdc:	a9800417 	ldw	r6,16(r21)
 4003be0:	11000304 	addi	r4,r2,12
 4003be4:	a9400304 	addi	r5,r21,12
 4003be8:	31800084 	addi	r6,r6,2
 4003bec:	318d883a 	add	r6,r6,r6
 4003bf0:	318d883a 	add	r6,r6,r6
 4003bf4:	1023883a 	mov	r17,r2
 4003bf8:	40059b40 	call	40059b4 <memcpy>
 4003bfc:	8009883a 	mov	r4,r16
 4003c00:	880b883a 	mov	r5,r17
 4003c04:	01800044 	movi	r6,1
 4003c08:	40064700 	call	4006470 <__lshift>
 4003c0c:	1027883a 	mov	r19,r2
 4003c10:	003e8f06 	br	4003650 <__alt_data_end+0xfe003650>
 4003c14:	b807883a 	mov	r3,r23
 4003c18:	00800e44 	movi	r2,57
 4003c1c:	ddc00717 	ldw	r23,28(sp)
 4003c20:	18809026 	beq	r3,r2,4003e64 <_dtoa_r+0x1520>
 4003c24:	18c00044 	addi	r3,r3,1
 4003c28:	003f2b06 	br	40038d8 <__alt_data_end+0xfe0038d8>
 4003c2c:	b807883a 	mov	r3,r23
 4003c30:	982b883a 	mov	r21,r19
 4003c34:	ddc00717 	ldw	r23,28(sp)
 4003c38:	003e2406 	br	40034cc <__alt_data_end+0xfe0034cc>
 4003c3c:	0029883a 	mov	r20,zero
 4003c40:	002b883a 	mov	r21,zero
 4003c44:	003f7206 	br	4003a10 <__alt_data_end+0xfe003a10>
 4003c48:	593fffc4 	addi	r4,r11,-1
 4003c4c:	200490fa 	slli	r2,r4,3
 4003c50:	00c10074 	movhi	r3,1025
 4003c54:	18f1a804 	addi	r3,r3,-14688
 4003c58:	d9001015 	stw	r4,64(sp)
 4003c5c:	1885883a 	add	r2,r3,r2
 4003c60:	11000017 	ldw	r4,0(r2)
 4003c64:	11400117 	ldw	r5,4(r2)
 4003c68:	900d883a 	mov	r6,r18
 4003c6c:	a80f883a 	mov	r7,r21
 4003c70:	dac01615 	stw	r11,88(sp)
 4003c74:	4008d8c0 	call	4008d8c <__muldf3>
 4003c78:	a00b883a 	mov	r5,r20
 4003c7c:	9809883a 	mov	r4,r19
 4003c80:	d8c01215 	stw	r3,72(sp)
 4003c84:	d8801115 	stw	r2,68(sp)
 4003c88:	40094d40 	call	40094d4 <__fixdfsi>
 4003c8c:	1009883a 	mov	r4,r2
 4003c90:	1025883a 	mov	r18,r2
 4003c94:	40094000 	call	4009400 <__floatsidf>
 4003c98:	9809883a 	mov	r4,r19
 4003c9c:	a00b883a 	mov	r5,r20
 4003ca0:	100d883a 	mov	r6,r2
 4003ca4:	180f883a 	mov	r7,r3
 4003ca8:	94800c04 	addi	r18,r18,48
 4003cac:	4008d2c0 	call	4008d2c <__subdf3>
 4003cb0:	bc800005 	stb	r18,0(r23)
 4003cb4:	dac01617 	ldw	r11,88(sp)
 4003cb8:	102b883a 	mov	r21,r2
 4003cbc:	00800044 	movi	r2,1
 4003cc0:	bd800044 	addi	r22,r23,1
 4003cc4:	1815883a 	mov	r10,r3
 4003cc8:	58802226 	beq	r11,r2,4003d54 <_dtoa_r+0x1410>
 4003ccc:	bad7883a 	add	r11,r23,r11
 4003cd0:	dc001415 	stw	r16,80(sp)
 4003cd4:	a805883a 	mov	r2,r21
 4003cd8:	b027883a 	mov	r19,r22
 4003cdc:	5821883a 	mov	r16,r11
 4003ce0:	882b883a 	mov	r21,r17
 4003ce4:	000d883a 	mov	r6,zero
 4003ce8:	01d00934 	movhi	r7,16420
 4003cec:	1009883a 	mov	r4,r2
 4003cf0:	180b883a 	mov	r5,r3
 4003cf4:	4008d8c0 	call	4008d8c <__muldf3>
 4003cf8:	180b883a 	mov	r5,r3
 4003cfc:	1009883a 	mov	r4,r2
 4003d00:	1829883a 	mov	r20,r3
 4003d04:	1023883a 	mov	r17,r2
 4003d08:	40094d40 	call	40094d4 <__fixdfsi>
 4003d0c:	1009883a 	mov	r4,r2
 4003d10:	1025883a 	mov	r18,r2
 4003d14:	40094000 	call	4009400 <__floatsidf>
 4003d18:	8809883a 	mov	r4,r17
 4003d1c:	a00b883a 	mov	r5,r20
 4003d20:	100d883a 	mov	r6,r2
 4003d24:	180f883a 	mov	r7,r3
 4003d28:	94800c04 	addi	r18,r18,48
 4003d2c:	4008d2c0 	call	4008d2c <__subdf3>
 4003d30:	9cc00044 	addi	r19,r19,1
 4003d34:	9cbfffc5 	stb	r18,-1(r19)
 4003d38:	9c3fea1e 	bne	r19,r16,4003ce4 <__alt_data_end+0xfe003ce4>
 4003d3c:	1815883a 	mov	r10,r3
 4003d40:	d8c01017 	ldw	r3,64(sp)
 4003d44:	dc001417 	ldw	r16,80(sp)
 4003d48:	a823883a 	mov	r17,r21
 4003d4c:	b0ed883a 	add	r22,r22,r3
 4003d50:	102b883a 	mov	r21,r2
 4003d54:	d9001117 	ldw	r4,68(sp)
 4003d58:	d9401217 	ldw	r5,72(sp)
 4003d5c:	000d883a 	mov	r6,zero
 4003d60:	01cff834 	movhi	r7,16352
 4003d64:	da801515 	stw	r10,84(sp)
 4003d68:	4008cd80 	call	4008cd8 <__adddf3>
 4003d6c:	da801517 	ldw	r10,84(sp)
 4003d70:	1009883a 	mov	r4,r2
 4003d74:	180b883a 	mov	r5,r3
 4003d78:	500f883a 	mov	r7,r10
 4003d7c:	a80d883a 	mov	r6,r21
 4003d80:	40093a40 	call	40093a4 <__ltdf2>
 4003d84:	da801517 	ldw	r10,84(sp)
 4003d88:	10003b0e 	bge	r2,zero,4003e78 <_dtoa_r+0x1534>
 4003d8c:	d9c01317 	ldw	r7,76(sp)
 4003d90:	b53fffc3 	ldbu	r20,-1(r22)
 4003d94:	d9c00615 	stw	r7,24(sp)
 4003d98:	003d3106 	br	4003260 <__alt_data_end+0xfe003260>
 4003d9c:	d8800817 	ldw	r2,32(sp)
 4003da0:	11e5c83a 	sub	r18,r2,r7
 4003da4:	0005883a 	mov	r2,zero
 4003da8:	003d5006 	br	40032ec <__alt_data_end+0xfe0032ec>
 4003dac:	05800044 	movi	r22,1
 4003db0:	003dc406 	br	40034c4 <__alt_data_end+0xfe0034c4>
 4003db4:	a5000044 	addi	r20,r20,1
 4003db8:	15000005 	stb	r20,0(r2)
 4003dbc:	003c8206 	br	4002fc8 <__alt_data_end+0xfe002fc8>
 4003dc0:	d8800217 	ldw	r2,8(sp)
 4003dc4:	00c00d84 	movi	r3,54
 4003dc8:	dcc00a17 	ldw	r19,40(sp)
 4003dcc:	1885c83a 	sub	r2,r3,r2
 4003dd0:	dc800817 	ldw	r18,32(sp)
 4003dd4:	003d4506 	br	40032ec <__alt_data_end+0xfe0032ec>
 4003dd8:	dcc00317 	ldw	r19,12(sp)
 4003ddc:	8829883a 	mov	r20,r17
 4003de0:	04800084 	movi	r18,2
 4003de4:	003bea06 	br	4002d90 <__alt_data_end+0xfe002d90>
 4003de8:	d9000917 	ldw	r4,36(sp)
 4003dec:	203f1126 	beq	r4,zero,4003a34 <__alt_data_end+0xfe003a34>
 4003df0:	d9c00e17 	ldw	r7,56(sp)
 4003df4:	01fca20e 	bge	zero,r7,4003080 <__alt_data_end+0xfe003080>
 4003df8:	a00b883a 	mov	r5,r20
 4003dfc:	9809883a 	mov	r4,r19
 4003e00:	000d883a 	mov	r6,zero
 4003e04:	01d00934 	movhi	r7,16420
 4003e08:	4008d8c0 	call	4008d8c <__muldf3>
 4003e0c:	91000044 	addi	r4,r18,1
 4003e10:	1027883a 	mov	r19,r2
 4003e14:	1829883a 	mov	r20,r3
 4003e18:	40094000 	call	4009400 <__floatsidf>
 4003e1c:	9809883a 	mov	r4,r19
 4003e20:	a00b883a 	mov	r5,r20
 4003e24:	100d883a 	mov	r6,r2
 4003e28:	180f883a 	mov	r7,r3
 4003e2c:	4008d8c0 	call	4008d8c <__muldf3>
 4003e30:	1009883a 	mov	r4,r2
 4003e34:	180b883a 	mov	r5,r3
 4003e38:	000d883a 	mov	r6,zero
 4003e3c:	01d00734 	movhi	r7,16412
 4003e40:	4008cd80 	call	4008cd8 <__adddf3>
 4003e44:	1025883a 	mov	r18,r2
 4003e48:	d8800617 	ldw	r2,24(sp)
 4003e4c:	057f3034 	movhi	r21,64704
 4003e50:	1d6b883a 	add	r21,r3,r21
 4003e54:	10bfffc4 	addi	r2,r2,-1
 4003e58:	d8801315 	stw	r2,76(sp)
 4003e5c:	dac00e17 	ldw	r11,56(sp)
 4003e60:	003be706 	br	4002e00 <__alt_data_end+0xfe002e00>
 4003e64:	01000e44 	movi	r4,57
 4003e68:	91000005 	stb	r4,0(r18)
 4003e6c:	95800044 	addi	r22,r18,1
 4003e70:	982b883a 	mov	r21,r19
 4003e74:	003da106 	br	40034fc <__alt_data_end+0xfe0034fc>
 4003e78:	d9801117 	ldw	r6,68(sp)
 4003e7c:	d9c01217 	ldw	r7,72(sp)
 4003e80:	0009883a 	mov	r4,zero
 4003e84:	014ff834 	movhi	r5,16352
 4003e88:	da801515 	stw	r10,84(sp)
 4003e8c:	4008d2c0 	call	4008d2c <__subdf3>
 4003e90:	da801517 	ldw	r10,84(sp)
 4003e94:	1009883a 	mov	r4,r2
 4003e98:	180b883a 	mov	r5,r3
 4003e9c:	a80d883a 	mov	r6,r21
 4003ea0:	500f883a 	mov	r7,r10
 4003ea4:	40092dc0 	call	40092dc <__gtdf2>
 4003ea8:	00bc750e 	bge	zero,r2,4003080 <__alt_data_end+0xfe003080>
 4003eac:	01000c04 	movi	r4,48
 4003eb0:	00000106 	br	4003eb8 <_dtoa_r+0x1574>
 4003eb4:	102d883a 	mov	r22,r2
 4003eb8:	b0bfffc4 	addi	r2,r22,-1
 4003ebc:	10c00007 	ldb	r3,0(r2)
 4003ec0:	193ffc26 	beq	r3,r4,4003eb4 <__alt_data_end+0xfe003eb4>
 4003ec4:	d8801317 	ldw	r2,76(sp)
 4003ec8:	d8800615 	stw	r2,24(sp)
 4003ecc:	003c3e06 	br	4002fc8 <__alt_data_end+0xfe002fc8>
 4003ed0:	d9001317 	ldw	r4,76(sp)
 4003ed4:	df001117 	ldw	fp,68(sp)
 4003ed8:	d9000615 	stw	r4,24(sp)
 4003edc:	003ce006 	br	4003260 <__alt_data_end+0xfe003260>
 4003ee0:	df001117 	ldw	fp,68(sp)
 4003ee4:	dc401217 	ldw	r17,72(sp)
 4003ee8:	003c6506 	br	4003080 <__alt_data_end+0xfe003080>
 4003eec:	103e7a1e 	bne	r2,zero,40038d8 <__alt_data_end+0xfe0038d8>
 4003ef0:	1880004c 	andi	r2,r3,1
 4003ef4:	103e7826 	beq	r2,zero,40038d8 <__alt_data_end+0xfe0038d8>
 4003ef8:	003e7406 	br	40038cc <__alt_data_end+0xfe0038cc>
 4003efc:	8009883a 	mov	r4,r16
 4003f00:	a80b883a 	mov	r5,r21
 4003f04:	01800284 	movi	r6,10
 4003f08:	000f883a 	mov	r7,zero
 4003f0c:	4005d500 	call	4005d50 <__multadd>
 4003f10:	d9000e17 	ldw	r4,56(sp)
 4003f14:	102b883a 	mov	r21,r2
 4003f18:	d9000915 	stw	r4,36(sp)
 4003f1c:	003d5106 	br	4003464 <__alt_data_end+0xfe003464>
 4003f20:	04800084 	movi	r18,2
 4003f24:	003b9a06 	br	4002d90 <__alt_data_end+0xfe002d90>
 4003f28:	d8c01317 	ldw	r3,76(sp)
 4003f2c:	d8c00615 	stw	r3,24(sp)
 4003f30:	003ccb06 	br	4003260 <__alt_data_end+0xfe003260>
 4003f34:	d8c01317 	ldw	r3,76(sp)
 4003f38:	d8c00615 	stw	r3,24(sp)
 4003f3c:	003c2206 	br	4002fc8 <__alt_data_end+0xfe002fc8>
 4003f40:	20fd3826 	beq	r4,r3,4003424 <__alt_data_end+0xfe003424>
 4003f44:	00c00f04 	movi	r3,60
 4003f48:	1885c83a 	sub	r2,r3,r2
 4003f4c:	003da906 	br	40035f4 <__alt_data_end+0xfe0035f4>
 4003f50:	000b883a 	mov	r5,zero
 4003f54:	003b5406 	br	4002ca8 <__alt_data_end+0xfe002ca8>
 4003f58:	04c00044 	movi	r19,1
 4003f5c:	003b3b06 	br	4002c4c <__alt_data_end+0xfe002c4c>

04003f60 <_fflush_r>:
 4003f60:	defffb04 	addi	sp,sp,-20
 4003f64:	dcc00315 	stw	r19,12(sp)
 4003f68:	dc400115 	stw	r17,4(sp)
 4003f6c:	dfc00415 	stw	ra,16(sp)
 4003f70:	dc800215 	stw	r18,8(sp)
 4003f74:	dc000015 	stw	r16,0(sp)
 4003f78:	2027883a 	mov	r19,r4
 4003f7c:	2823883a 	mov	r17,r5
 4003f80:	20000226 	beq	r4,zero,4003f8c <_fflush_r+0x2c>
 4003f84:	20800e17 	ldw	r2,56(r4)
 4003f88:	10005726 	beq	r2,zero,40040e8 <_fflush_r+0x188>
 4003f8c:	8880030b 	ldhu	r2,12(r17)
 4003f90:	10c0020c 	andi	r3,r2,8
 4003f94:	18ffffcc 	andi	r3,r3,65535
 4003f98:	18e0001c 	xori	r3,r3,32768
 4003f9c:	18e00004 	addi	r3,r3,-32768
 4003fa0:	1800311e 	bne	r3,zero,4004068 <_fflush_r+0x108>
 4003fa4:	89000117 	ldw	r4,4(r17)
 4003fa8:	10c20014 	ori	r3,r2,2048
 4003fac:	88c0030d 	sth	r3,12(r17)
 4003fb0:	180b883a 	mov	r5,r3
 4003fb4:	0100520e 	bge	zero,r4,4004100 <_fflush_r+0x1a0>
 4003fb8:	88c00a17 	ldw	r3,40(r17)
 4003fbc:	18002226 	beq	r3,zero,4004048 <_fflush_r+0xe8>
 4003fc0:	1084000c 	andi	r2,r2,4096
 4003fc4:	10bfffcc 	andi	r2,r2,65535
 4003fc8:	10a0001c 	xori	r2,r2,32768
 4003fcc:	10a00004 	addi	r2,r2,-32768
 4003fd0:	10004e26 	beq	r2,zero,400410c <_fflush_r+0x1ac>
 4003fd4:	8c001417 	ldw	r16,80(r17)
 4003fd8:	2940010c 	andi	r5,r5,4
 4003fdc:	297fffcc 	andi	r5,r5,65535
 4003fe0:	2960001c 	xori	r5,r5,32768
 4003fe4:	29600004 	addi	r5,r5,-32768
 4003fe8:	28000626 	beq	r5,zero,4004004 <_fflush_r+0xa4>
 4003fec:	89000117 	ldw	r4,4(r17)
 4003ff0:	88800c17 	ldw	r2,48(r17)
 4003ff4:	8121c83a 	sub	r16,r16,r4
 4003ff8:	10000226 	beq	r2,zero,4004004 <_fflush_r+0xa4>
 4003ffc:	88800f17 	ldw	r2,60(r17)
 4004000:	80a1c83a 	sub	r16,r16,r2
 4004004:	89400717 	ldw	r5,28(r17)
 4004008:	9809883a 	mov	r4,r19
 400400c:	800d883a 	mov	r6,r16
 4004010:	000f883a 	mov	r7,zero
 4004014:	183ee83a 	callr	r3
 4004018:	8080281e 	bne	r16,r2,40040bc <_fflush_r+0x15c>
 400401c:	8880030b 	ldhu	r2,12(r17)
 4004020:	88c00417 	ldw	r3,16(r17)
 4004024:	88000115 	stw	zero,4(r17)
 4004028:	113dffcc 	andi	r4,r2,63487
 400402c:	1084000c 	andi	r2,r2,4096
 4004030:	10bfffcc 	andi	r2,r2,65535
 4004034:	10a0001c 	xori	r2,r2,32768
 4004038:	8900030d 	sth	r4,12(r17)
 400403c:	88c00015 	stw	r3,0(r17)
 4004040:	10a00004 	addi	r2,r2,-32768
 4004044:	10002c1e 	bne	r2,zero,40040f8 <_fflush_r+0x198>
 4004048:	0005883a 	mov	r2,zero
 400404c:	dfc00417 	ldw	ra,16(sp)
 4004050:	dcc00317 	ldw	r19,12(sp)
 4004054:	dc800217 	ldw	r18,8(sp)
 4004058:	dc400117 	ldw	r17,4(sp)
 400405c:	dc000017 	ldw	r16,0(sp)
 4004060:	dec00504 	addi	sp,sp,20
 4004064:	f800283a 	ret
 4004068:	8c800417 	ldw	r18,16(r17)
 400406c:	903ff626 	beq	r18,zero,4004048 <__alt_data_end+0xfe004048>
 4004070:	8c000017 	ldw	r16,0(r17)
 4004074:	108000cc 	andi	r2,r2,3
 4004078:	8c800015 	stw	r18,0(r17)
 400407c:	84a1c83a 	sub	r16,r16,r18
 4004080:	10001b1e 	bne	r2,zero,40040f0 <_fflush_r+0x190>
 4004084:	88800517 	ldw	r2,20(r17)
 4004088:	88800215 	stw	r2,8(r17)
 400408c:	04000316 	blt	zero,r16,400409c <_fflush_r+0x13c>
 4004090:	003fed06 	br	4004048 <__alt_data_end+0xfe004048>
 4004094:	90a5883a 	add	r18,r18,r2
 4004098:	043feb0e 	bge	zero,r16,4004048 <__alt_data_end+0xfe004048>
 400409c:	88800917 	ldw	r2,36(r17)
 40040a0:	89400717 	ldw	r5,28(r17)
 40040a4:	800f883a 	mov	r7,r16
 40040a8:	900d883a 	mov	r6,r18
 40040ac:	9809883a 	mov	r4,r19
 40040b0:	103ee83a 	callr	r2
 40040b4:	80a1c83a 	sub	r16,r16,r2
 40040b8:	00bff616 	blt	zero,r2,4004094 <__alt_data_end+0xfe004094>
 40040bc:	88c0030b 	ldhu	r3,12(r17)
 40040c0:	00bfffc4 	movi	r2,-1
 40040c4:	18c01014 	ori	r3,r3,64
 40040c8:	88c0030d 	sth	r3,12(r17)
 40040cc:	dfc00417 	ldw	ra,16(sp)
 40040d0:	dcc00317 	ldw	r19,12(sp)
 40040d4:	dc800217 	ldw	r18,8(sp)
 40040d8:	dc400117 	ldw	r17,4(sp)
 40040dc:	dc000017 	ldw	r16,0(sp)
 40040e0:	dec00504 	addi	sp,sp,20
 40040e4:	f800283a 	ret
 40040e8:	400421c0 	call	400421c <__sinit>
 40040ec:	003fa706 	br	4003f8c <__alt_data_end+0xfe003f8c>
 40040f0:	0005883a 	mov	r2,zero
 40040f4:	003fe406 	br	4004088 <__alt_data_end+0xfe004088>
 40040f8:	8c001415 	stw	r16,80(r17)
 40040fc:	003fd206 	br	4004048 <__alt_data_end+0xfe004048>
 4004100:	88c00f17 	ldw	r3,60(r17)
 4004104:	00ffac16 	blt	zero,r3,4003fb8 <__alt_data_end+0xfe003fb8>
 4004108:	003fcf06 	br	4004048 <__alt_data_end+0xfe004048>
 400410c:	89400717 	ldw	r5,28(r17)
 4004110:	9809883a 	mov	r4,r19
 4004114:	000d883a 	mov	r6,zero
 4004118:	01c00044 	movi	r7,1
 400411c:	183ee83a 	callr	r3
 4004120:	1021883a 	mov	r16,r2
 4004124:	00bfffc4 	movi	r2,-1
 4004128:	80800326 	beq	r16,r2,4004138 <_fflush_r+0x1d8>
 400412c:	8940030b 	ldhu	r5,12(r17)
 4004130:	88c00a17 	ldw	r3,40(r17)
 4004134:	003fa806 	br	4003fd8 <__alt_data_end+0xfe003fd8>
 4004138:	98c00017 	ldw	r3,0(r19)
 400413c:	00800744 	movi	r2,29
 4004140:	18bfde1e 	bne	r3,r2,40040bc <__alt_data_end+0xfe0040bc>
 4004144:	003fc006 	br	4004048 <__alt_data_end+0xfe004048>

04004148 <fflush>:
 4004148:	200b883a 	mov	r5,r4
 400414c:	20000426 	beq	r4,zero,4004160 <fflush+0x18>
 4004150:	00810074 	movhi	r2,1025
 4004154:	10b8b704 	addi	r2,r2,-7460
 4004158:	11000017 	ldw	r4,0(r2)
 400415c:	4003f601 	jmpi	4003f60 <_fflush_r>
 4004160:	00810074 	movhi	r2,1025
 4004164:	10b8b604 	addi	r2,r2,-7464
 4004168:	11000017 	ldw	r4,0(r2)
 400416c:	01410034 	movhi	r5,1024
 4004170:	294fd804 	addi	r5,r5,16224
 4004174:	4004dfc1 	jmpi	4004dfc <_fwalk_reent>

04004178 <__fp_lock>:
 4004178:	0005883a 	mov	r2,zero
 400417c:	f800283a 	ret

04004180 <__fp_unlock>:
 4004180:	0005883a 	mov	r2,zero
 4004184:	f800283a 	ret

04004188 <_cleanup_r>:
 4004188:	01410034 	movhi	r5,1024
 400418c:	295ed504 	addi	r5,r5,31572
 4004190:	4004d541 	jmpi	4004d54 <_fwalk>

04004194 <__sfmoreglue>:
 4004194:	defffc04 	addi	sp,sp,-16
 4004198:	dc800215 	stw	r18,8(sp)
 400419c:	2825883a 	mov	r18,r5
 40041a0:	dc000015 	stw	r16,0(sp)
 40041a4:	01401704 	movi	r5,92
 40041a8:	2021883a 	mov	r16,r4
 40041ac:	9009883a 	mov	r4,r18
 40041b0:	dfc00315 	stw	ra,12(sp)
 40041b4:	dc400115 	stw	r17,4(sp)
 40041b8:	40097e40 	call	40097e4 <__mulsi3>
 40041bc:	8009883a 	mov	r4,r16
 40041c0:	11400304 	addi	r5,r2,12
 40041c4:	1023883a 	mov	r17,r2
 40041c8:	40051380 	call	4005138 <_malloc_r>
 40041cc:	1021883a 	mov	r16,r2
 40041d0:	10000726 	beq	r2,zero,40041f0 <__sfmoreglue+0x5c>
 40041d4:	11000304 	addi	r4,r2,12
 40041d8:	10000015 	stw	zero,0(r2)
 40041dc:	14800115 	stw	r18,4(r2)
 40041e0:	11000215 	stw	r4,8(r2)
 40041e4:	000b883a 	mov	r5,zero
 40041e8:	880d883a 	mov	r6,r17
 40041ec:	40004340 	call	4000434 <memset>
 40041f0:	8005883a 	mov	r2,r16
 40041f4:	dfc00317 	ldw	ra,12(sp)
 40041f8:	dc800217 	ldw	r18,8(sp)
 40041fc:	dc400117 	ldw	r17,4(sp)
 4004200:	dc000017 	ldw	r16,0(sp)
 4004204:	dec00404 	addi	sp,sp,16
 4004208:	f800283a 	ret

0400420c <_cleanup>:
 400420c:	00810074 	movhi	r2,1025
 4004210:	10b8b604 	addi	r2,r2,-7464
 4004214:	11000017 	ldw	r4,0(r2)
 4004218:	40041881 	jmpi	4004188 <_cleanup_r>

0400421c <__sinit>:
 400421c:	20800e17 	ldw	r2,56(r4)
 4004220:	1000401e 	bne	r2,zero,4004324 <__sinit+0x108>
 4004224:	21400117 	ldw	r5,4(r4)
 4004228:	01810034 	movhi	r6,1024
 400422c:	31906204 	addi	r6,r6,16776
 4004230:	20c00217 	ldw	r3,8(r4)
 4004234:	21800f15 	stw	r6,60(r4)
 4004238:	2080bb04 	addi	r2,r4,748
 400423c:	02400044 	movi	r9,1
 4004240:	018000c4 	movi	r6,3
 4004244:	2180b915 	stw	r6,740(r4)
 4004248:	2080ba15 	stw	r2,744(r4)
 400424c:	22400e15 	stw	r9,56(r4)
 4004250:	20800317 	ldw	r2,12(r4)
 4004254:	2000b815 	stw	zero,736(r4)
 4004258:	02010034 	movhi	r8,1024
 400425c:	421d5004 	addi	r8,r8,30016
 4004260:	01c10034 	movhi	r7,1024
 4004264:	39dd6504 	addi	r7,r7,30100
 4004268:	01810034 	movhi	r6,1024
 400426c:	319d8704 	addi	r6,r6,30236
 4004270:	01010034 	movhi	r4,1024
 4004274:	211d9e04 	addi	r4,r4,30328
 4004278:	02800104 	movi	r10,4
 400427c:	28000015 	stw	zero,0(r5)
 4004280:	28000115 	stw	zero,4(r5)
 4004284:	28000215 	stw	zero,8(r5)
 4004288:	2a80030d 	sth	r10,12(r5)
 400428c:	2800038d 	sth	zero,14(r5)
 4004290:	28000415 	stw	zero,16(r5)
 4004294:	28000515 	stw	zero,20(r5)
 4004298:	28000615 	stw	zero,24(r5)
 400429c:	29400715 	stw	r5,28(r5)
 40042a0:	2a000815 	stw	r8,32(r5)
 40042a4:	29c00915 	stw	r7,36(r5)
 40042a8:	29800a15 	stw	r6,40(r5)
 40042ac:	29000b15 	stw	r4,44(r5)
 40042b0:	01400284 	movi	r5,10
 40042b4:	18000015 	stw	zero,0(r3)
 40042b8:	18000115 	stw	zero,4(r3)
 40042bc:	18000215 	stw	zero,8(r3)
 40042c0:	1940030d 	sth	r5,12(r3)
 40042c4:	1a40038d 	sth	r9,14(r3)
 40042c8:	18000415 	stw	zero,16(r3)
 40042cc:	18000515 	stw	zero,20(r3)
 40042d0:	18000615 	stw	zero,24(r3)
 40042d4:	18c00715 	stw	r3,28(r3)
 40042d8:	1a000815 	stw	r8,32(r3)
 40042dc:	19c00915 	stw	r7,36(r3)
 40042e0:	19800a15 	stw	r6,40(r3)
 40042e4:	19000b15 	stw	r4,44(r3)
 40042e8:	00c00484 	movi	r3,18
 40042ec:	10c0030d 	sth	r3,12(r2)
 40042f0:	00c00084 	movi	r3,2
 40042f4:	10000015 	stw	zero,0(r2)
 40042f8:	10000115 	stw	zero,4(r2)
 40042fc:	10000215 	stw	zero,8(r2)
 4004300:	10c0038d 	sth	r3,14(r2)
 4004304:	10000415 	stw	zero,16(r2)
 4004308:	10000515 	stw	zero,20(r2)
 400430c:	10000615 	stw	zero,24(r2)
 4004310:	10800715 	stw	r2,28(r2)
 4004314:	12000815 	stw	r8,32(r2)
 4004318:	11c00915 	stw	r7,36(r2)
 400431c:	11800a15 	stw	r6,40(r2)
 4004320:	11000b15 	stw	r4,44(r2)
 4004324:	f800283a 	ret

04004328 <__sfp>:
 4004328:	defffc04 	addi	sp,sp,-16
 400432c:	00810074 	movhi	r2,1025
 4004330:	10b8b604 	addi	r2,r2,-7464
 4004334:	dc400115 	stw	r17,4(sp)
 4004338:	14400017 	ldw	r17,0(r2)
 400433c:	dc800215 	stw	r18,8(sp)
 4004340:	dfc00315 	stw	ra,12(sp)
 4004344:	88800e17 	ldw	r2,56(r17)
 4004348:	dc000015 	stw	r16,0(sp)
 400434c:	2025883a 	mov	r18,r4
 4004350:	10002826 	beq	r2,zero,40043f4 <__sfp+0xcc>
 4004354:	8c40b804 	addi	r17,r17,736
 4004358:	043fffc4 	movi	r16,-1
 400435c:	89400117 	ldw	r5,4(r17)
 4004360:	88800217 	ldw	r2,8(r17)
 4004364:	297fffc4 	addi	r5,r5,-1
 4004368:	28000a16 	blt	r5,zero,4004394 <__sfp+0x6c>
 400436c:	10c0030f 	ldh	r3,12(r2)
 4004370:	18000c26 	beq	r3,zero,40043a4 <__sfp+0x7c>
 4004374:	10c01a04 	addi	r3,r2,104
 4004378:	00000206 	br	4004384 <__sfp+0x5c>
 400437c:	19bfe90f 	ldh	r6,-92(r3)
 4004380:	30000826 	beq	r6,zero,40043a4 <__sfp+0x7c>
 4004384:	297fffc4 	addi	r5,r5,-1
 4004388:	18bffd04 	addi	r2,r3,-12
 400438c:	18c01704 	addi	r3,r3,92
 4004390:	2c3ffa1e 	bne	r5,r16,400437c <__alt_data_end+0xfe00437c>
 4004394:	88800017 	ldw	r2,0(r17)
 4004398:	10001926 	beq	r2,zero,4004400 <__sfp+0xd8>
 400439c:	1023883a 	mov	r17,r2
 40043a0:	003fee06 	br	400435c <__alt_data_end+0xfe00435c>
 40043a4:	00ffffc4 	movi	r3,-1
 40043a8:	10c0038d 	sth	r3,14(r2)
 40043ac:	00c00044 	movi	r3,1
 40043b0:	10c0030d 	sth	r3,12(r2)
 40043b4:	10000015 	stw	zero,0(r2)
 40043b8:	10000215 	stw	zero,8(r2)
 40043bc:	10000115 	stw	zero,4(r2)
 40043c0:	10000415 	stw	zero,16(r2)
 40043c4:	10000515 	stw	zero,20(r2)
 40043c8:	10000615 	stw	zero,24(r2)
 40043cc:	10000c15 	stw	zero,48(r2)
 40043d0:	10000d15 	stw	zero,52(r2)
 40043d4:	10001115 	stw	zero,68(r2)
 40043d8:	10001215 	stw	zero,72(r2)
 40043dc:	dfc00317 	ldw	ra,12(sp)
 40043e0:	dc800217 	ldw	r18,8(sp)
 40043e4:	dc400117 	ldw	r17,4(sp)
 40043e8:	dc000017 	ldw	r16,0(sp)
 40043ec:	dec00404 	addi	sp,sp,16
 40043f0:	f800283a 	ret
 40043f4:	8809883a 	mov	r4,r17
 40043f8:	400421c0 	call	400421c <__sinit>
 40043fc:	003fd506 	br	4004354 <__alt_data_end+0xfe004354>
 4004400:	9009883a 	mov	r4,r18
 4004404:	01400104 	movi	r5,4
 4004408:	40041940 	call	4004194 <__sfmoreglue>
 400440c:	88800015 	stw	r2,0(r17)
 4004410:	103fe21e 	bne	r2,zero,400439c <__alt_data_end+0xfe00439c>
 4004414:	00800304 	movi	r2,12
 4004418:	90800015 	stw	r2,0(r18)
 400441c:	0005883a 	mov	r2,zero
 4004420:	003fee06 	br	40043dc <__alt_data_end+0xfe0043dc>

04004424 <__sfp_lock_acquire>:
 4004424:	f800283a 	ret

04004428 <__sfp_lock_release>:
 4004428:	f800283a 	ret

0400442c <__sinit_lock_acquire>:
 400442c:	f800283a 	ret

04004430 <__sinit_lock_release>:
 4004430:	f800283a 	ret

04004434 <__fp_lock_all>:
 4004434:	00810074 	movhi	r2,1025
 4004438:	10b8b704 	addi	r2,r2,-7460
 400443c:	11000017 	ldw	r4,0(r2)
 4004440:	01410034 	movhi	r5,1024
 4004444:	29505e04 	addi	r5,r5,16760
 4004448:	4004d541 	jmpi	4004d54 <_fwalk>

0400444c <__fp_unlock_all>:
 400444c:	00810074 	movhi	r2,1025
 4004450:	10b8b704 	addi	r2,r2,-7460
 4004454:	11000017 	ldw	r4,0(r2)
 4004458:	01410034 	movhi	r5,1024
 400445c:	29506004 	addi	r5,r5,16768
 4004460:	4004d541 	jmpi	4004d54 <_fwalk>

04004464 <_malloc_trim_r>:
 4004464:	defffb04 	addi	sp,sp,-20
 4004468:	dcc00315 	stw	r19,12(sp)
 400446c:	dc800215 	stw	r18,8(sp)
 4004470:	dc400115 	stw	r17,4(sp)
 4004474:	dc000015 	stw	r16,0(sp)
 4004478:	2827883a 	mov	r19,r5
 400447c:	dfc00415 	stw	ra,16(sp)
 4004480:	04410074 	movhi	r17,1025
 4004484:	8c733204 	addi	r17,r17,-13112
 4004488:	2021883a 	mov	r16,r4
 400448c:	400a40c0 	call	400a40c <__malloc_lock>
 4004490:	88800217 	ldw	r2,8(r17)
 4004494:	14800117 	ldw	r18,4(r2)
 4004498:	00bfff04 	movi	r2,-4
 400449c:	90a4703a 	and	r18,r18,r2
 40044a0:	9083fbc4 	addi	r2,r18,4079
 40044a4:	14e7c83a 	sub	r19,r2,r19
 40044a8:	9826d33a 	srli	r19,r19,12
 40044ac:	0083ffc4 	movi	r2,4095
 40044b0:	9cffffc4 	addi	r19,r19,-1
 40044b4:	9826933a 	slli	r19,r19,12
 40044b8:	14c0060e 	bge	r2,r19,40044d4 <_malloc_trim_r+0x70>
 40044bc:	8009883a 	mov	r4,r16
 40044c0:	000b883a 	mov	r5,zero
 40044c4:	40074dc0 	call	40074dc <_sbrk_r>
 40044c8:	88c00217 	ldw	r3,8(r17)
 40044cc:	1c87883a 	add	r3,r3,r18
 40044d0:	10c00a26 	beq	r2,r3,40044fc <_malloc_trim_r+0x98>
 40044d4:	8009883a 	mov	r4,r16
 40044d8:	400a42c0 	call	400a42c <__malloc_unlock>
 40044dc:	0005883a 	mov	r2,zero
 40044e0:	dfc00417 	ldw	ra,16(sp)
 40044e4:	dcc00317 	ldw	r19,12(sp)
 40044e8:	dc800217 	ldw	r18,8(sp)
 40044ec:	dc400117 	ldw	r17,4(sp)
 40044f0:	dc000017 	ldw	r16,0(sp)
 40044f4:	dec00504 	addi	sp,sp,20
 40044f8:	f800283a 	ret
 40044fc:	8009883a 	mov	r4,r16
 4004500:	04cbc83a 	sub	r5,zero,r19
 4004504:	40074dc0 	call	40074dc <_sbrk_r>
 4004508:	00ffffc4 	movi	r3,-1
 400450c:	10c01326 	beq	r2,r3,400455c <_malloc_trim_r+0xf8>
 4004510:	00810074 	movhi	r2,1025
 4004514:	10bf6804 	addi	r2,r2,-608
 4004518:	11000017 	ldw	r4,0(r2)
 400451c:	88c00217 	ldw	r3,8(r17)
 4004520:	94e5c83a 	sub	r18,r18,r19
 4004524:	94800054 	ori	r18,r18,1
 4004528:	24e7c83a 	sub	r19,r4,r19
 400452c:	1c800115 	stw	r18,4(r3)
 4004530:	8009883a 	mov	r4,r16
 4004534:	14c00015 	stw	r19,0(r2)
 4004538:	400a42c0 	call	400a42c <__malloc_unlock>
 400453c:	00800044 	movi	r2,1
 4004540:	dfc00417 	ldw	ra,16(sp)
 4004544:	dcc00317 	ldw	r19,12(sp)
 4004548:	dc800217 	ldw	r18,8(sp)
 400454c:	dc400117 	ldw	r17,4(sp)
 4004550:	dc000017 	ldw	r16,0(sp)
 4004554:	dec00504 	addi	sp,sp,20
 4004558:	f800283a 	ret
 400455c:	8009883a 	mov	r4,r16
 4004560:	000b883a 	mov	r5,zero
 4004564:	40074dc0 	call	40074dc <_sbrk_r>
 4004568:	88c00217 	ldw	r3,8(r17)
 400456c:	014003c4 	movi	r5,15
 4004570:	10c9c83a 	sub	r4,r2,r3
 4004574:	293fd70e 	bge	r5,r4,40044d4 <__alt_data_end+0xfe0044d4>
 4004578:	01410074 	movhi	r5,1025
 400457c:	2978b904 	addi	r5,r5,-7452
 4004580:	29400017 	ldw	r5,0(r5)
 4004584:	21000054 	ori	r4,r4,1
 4004588:	19000115 	stw	r4,4(r3)
 400458c:	1145c83a 	sub	r2,r2,r5
 4004590:	01410074 	movhi	r5,1025
 4004594:	297f6804 	addi	r5,r5,-608
 4004598:	28800015 	stw	r2,0(r5)
 400459c:	003fcd06 	br	40044d4 <__alt_data_end+0xfe0044d4>

040045a0 <_free_r>:
 40045a0:	defffd04 	addi	sp,sp,-12
 40045a4:	dc400115 	stw	r17,4(sp)
 40045a8:	dc000015 	stw	r16,0(sp)
 40045ac:	dfc00215 	stw	ra,8(sp)
 40045b0:	2821883a 	mov	r16,r5
 40045b4:	2023883a 	mov	r17,r4
 40045b8:	28004b26 	beq	r5,zero,40046e8 <_free_r+0x148>
 40045bc:	400a40c0 	call	400a40c <__malloc_lock>
 40045c0:	823fff17 	ldw	r8,-4(r16)
 40045c4:	00bfff84 	movi	r2,-2
 40045c8:	81bffe04 	addi	r6,r16,-8
 40045cc:	4084703a 	and	r2,r8,r2
 40045d0:	3087883a 	add	r3,r6,r2
 40045d4:	01410074 	movhi	r5,1025
 40045d8:	29733204 	addi	r5,r5,-13112
 40045dc:	1a400117 	ldw	r9,4(r3)
 40045e0:	29000217 	ldw	r4,8(r5)
 40045e4:	01ffff04 	movi	r7,-4
 40045e8:	49ce703a 	and	r7,r9,r7
 40045ec:	20c06526 	beq	r4,r3,4004784 <_free_r+0x1e4>
 40045f0:	19c00115 	stw	r7,4(r3)
 40045f4:	4200004c 	andi	r8,r8,1
 40045f8:	40003026 	beq	r8,zero,40046bc <_free_r+0x11c>
 40045fc:	0009883a 	mov	r4,zero
 4004600:	19d1883a 	add	r8,r3,r7
 4004604:	42000117 	ldw	r8,4(r8)
 4004608:	4200004c 	andi	r8,r8,1
 400460c:	4000061e 	bne	r8,zero,4004628 <_free_r+0x88>
 4004610:	11c5883a 	add	r2,r2,r7
 4004614:	19c00217 	ldw	r7,8(r3)
 4004618:	20004e26 	beq	r4,zero,4004754 <_free_r+0x1b4>
 400461c:	18c00317 	ldw	r3,12(r3)
 4004620:	38c00315 	stw	r3,12(r7)
 4004624:	19c00215 	stw	r7,8(r3)
 4004628:	11c00054 	ori	r7,r2,1
 400462c:	3087883a 	add	r3,r6,r2
 4004630:	31c00115 	stw	r7,4(r6)
 4004634:	18800015 	stw	r2,0(r3)
 4004638:	20001a1e 	bne	r4,zero,40046a4 <_free_r+0x104>
 400463c:	00c07fc4 	movi	r3,511
 4004640:	18802e2e 	bgeu	r3,r2,40046fc <_free_r+0x15c>
 4004644:	1006d27a 	srli	r3,r2,9
 4004648:	01000104 	movi	r4,4
 400464c:	20c06636 	bltu	r4,r3,40047e8 <_free_r+0x248>
 4004650:	1008d1ba 	srli	r4,r2,6
 4004654:	21000e04 	addi	r4,r4,56
 4004658:	210f883a 	add	r7,r4,r4
 400465c:	39cf883a 	add	r7,r7,r7
 4004660:	39cf883a 	add	r7,r7,r7
 4004664:	29cf883a 	add	r7,r5,r7
 4004668:	38c00217 	ldw	r3,8(r7)
 400466c:	01410074 	movhi	r5,1025
 4004670:	29733204 	addi	r5,r5,-13112
 4004674:	19c06126 	beq	r3,r7,40047fc <_free_r+0x25c>
 4004678:	013fff04 	movi	r4,-4
 400467c:	19400117 	ldw	r5,4(r3)
 4004680:	290a703a 	and	r5,r5,r4
 4004684:	1140022e 	bgeu	r2,r5,4004690 <_free_r+0xf0>
 4004688:	18c00217 	ldw	r3,8(r3)
 400468c:	38fffb1e 	bne	r7,r3,400467c <__alt_data_end+0xfe00467c>
 4004690:	18800317 	ldw	r2,12(r3)
 4004694:	30800315 	stw	r2,12(r6)
 4004698:	30c00215 	stw	r3,8(r6)
 400469c:	11800215 	stw	r6,8(r2)
 40046a0:	19800315 	stw	r6,12(r3)
 40046a4:	8809883a 	mov	r4,r17
 40046a8:	dfc00217 	ldw	ra,8(sp)
 40046ac:	dc400117 	ldw	r17,4(sp)
 40046b0:	dc000017 	ldw	r16,0(sp)
 40046b4:	dec00304 	addi	sp,sp,12
 40046b8:	400a42c1 	jmpi	400a42c <__malloc_unlock>
 40046bc:	813ffe17 	ldw	r4,-8(r16)
 40046c0:	2a400204 	addi	r9,r5,8
 40046c4:	310dc83a 	sub	r6,r6,r4
 40046c8:	32000217 	ldw	r8,8(r6)
 40046cc:	1105883a 	add	r2,r2,r4
 40046d0:	42404326 	beq	r8,r9,40047e0 <_free_r+0x240>
 40046d4:	32400317 	ldw	r9,12(r6)
 40046d8:	0009883a 	mov	r4,zero
 40046dc:	42400315 	stw	r9,12(r8)
 40046e0:	4a000215 	stw	r8,8(r9)
 40046e4:	003fc606 	br	4004600 <__alt_data_end+0xfe004600>
 40046e8:	dfc00217 	ldw	ra,8(sp)
 40046ec:	dc400117 	ldw	r17,4(sp)
 40046f0:	dc000017 	ldw	r16,0(sp)
 40046f4:	dec00304 	addi	sp,sp,12
 40046f8:	f800283a 	ret
 40046fc:	1004d0fa 	srli	r2,r2,3
 4004700:	02000044 	movi	r8,1
 4004704:	29c00117 	ldw	r7,4(r5)
 4004708:	1087883a 	add	r3,r2,r2
 400470c:	18c7883a 	add	r3,r3,r3
 4004710:	1005d0ba 	srai	r2,r2,2
 4004714:	18c7883a 	add	r3,r3,r3
 4004718:	28c7883a 	add	r3,r5,r3
 400471c:	19000217 	ldw	r4,8(r3)
 4004720:	4084983a 	sll	r2,r8,r2
 4004724:	30c00315 	stw	r3,12(r6)
 4004728:	31000215 	stw	r4,8(r6)
 400472c:	11c4b03a 	or	r2,r2,r7
 4004730:	21800315 	stw	r6,12(r4)
 4004734:	8809883a 	mov	r4,r17
 4004738:	28800115 	stw	r2,4(r5)
 400473c:	19800215 	stw	r6,8(r3)
 4004740:	dfc00217 	ldw	ra,8(sp)
 4004744:	dc400117 	ldw	r17,4(sp)
 4004748:	dc000017 	ldw	r16,0(sp)
 400474c:	dec00304 	addi	sp,sp,12
 4004750:	400a42c1 	jmpi	400a42c <__malloc_unlock>
 4004754:	02010074 	movhi	r8,1025
 4004758:	42333404 	addi	r8,r8,-13104
 400475c:	3a3faf1e 	bne	r7,r8,400461c <__alt_data_end+0xfe00461c>
 4004760:	29800515 	stw	r6,20(r5)
 4004764:	29800415 	stw	r6,16(r5)
 4004768:	11000054 	ori	r4,r2,1
 400476c:	3087883a 	add	r3,r6,r2
 4004770:	31c00315 	stw	r7,12(r6)
 4004774:	31c00215 	stw	r7,8(r6)
 4004778:	31000115 	stw	r4,4(r6)
 400477c:	18800015 	stw	r2,0(r3)
 4004780:	003fc806 	br	40046a4 <__alt_data_end+0xfe0046a4>
 4004784:	4200004c 	andi	r8,r8,1
 4004788:	3885883a 	add	r2,r7,r2
 400478c:	4000071e 	bne	r8,zero,40047ac <_free_r+0x20c>
 4004790:	81fffe17 	ldw	r7,-8(r16)
 4004794:	31cdc83a 	sub	r6,r6,r7
 4004798:	30c00317 	ldw	r3,12(r6)
 400479c:	31000217 	ldw	r4,8(r6)
 40047a0:	11c5883a 	add	r2,r2,r7
 40047a4:	20c00315 	stw	r3,12(r4)
 40047a8:	19000215 	stw	r4,8(r3)
 40047ac:	00c10074 	movhi	r3,1025
 40047b0:	18f8ba04 	addi	r3,r3,-7448
 40047b4:	18c00017 	ldw	r3,0(r3)
 40047b8:	11000054 	ori	r4,r2,1
 40047bc:	31000115 	stw	r4,4(r6)
 40047c0:	29800215 	stw	r6,8(r5)
 40047c4:	10ffb736 	bltu	r2,r3,40046a4 <__alt_data_end+0xfe0046a4>
 40047c8:	00810074 	movhi	r2,1025
 40047cc:	10bf6004 	addi	r2,r2,-640
 40047d0:	11400017 	ldw	r5,0(r2)
 40047d4:	8809883a 	mov	r4,r17
 40047d8:	40044640 	call	4004464 <_malloc_trim_r>
 40047dc:	003fb106 	br	40046a4 <__alt_data_end+0xfe0046a4>
 40047e0:	01000044 	movi	r4,1
 40047e4:	003f8606 	br	4004600 <__alt_data_end+0xfe004600>
 40047e8:	01000504 	movi	r4,20
 40047ec:	20c00b36 	bltu	r4,r3,400481c <_free_r+0x27c>
 40047f0:	190016c4 	addi	r4,r3,91
 40047f4:	210f883a 	add	r7,r4,r4
 40047f8:	003f9806 	br	400465c <__alt_data_end+0xfe00465c>
 40047fc:	2009d0ba 	srai	r4,r4,2
 4004800:	00800044 	movi	r2,1
 4004804:	29c00117 	ldw	r7,4(r5)
 4004808:	1108983a 	sll	r4,r2,r4
 400480c:	1805883a 	mov	r2,r3
 4004810:	21c8b03a 	or	r4,r4,r7
 4004814:	29000115 	stw	r4,4(r5)
 4004818:	003f9e06 	br	4004694 <__alt_data_end+0xfe004694>
 400481c:	01001504 	movi	r4,84
 4004820:	20c00436 	bltu	r4,r3,4004834 <_free_r+0x294>
 4004824:	1008d33a 	srli	r4,r2,12
 4004828:	21001b84 	addi	r4,r4,110
 400482c:	210f883a 	add	r7,r4,r4
 4004830:	003f8a06 	br	400465c <__alt_data_end+0xfe00465c>
 4004834:	01005504 	movi	r4,340
 4004838:	20c00436 	bltu	r4,r3,400484c <_free_r+0x2ac>
 400483c:	1008d3fa 	srli	r4,r2,15
 4004840:	21001dc4 	addi	r4,r4,119
 4004844:	210f883a 	add	r7,r4,r4
 4004848:	003f8406 	br	400465c <__alt_data_end+0xfe00465c>
 400484c:	01015504 	movi	r4,1364
 4004850:	20c00436 	bltu	r4,r3,4004864 <_free_r+0x2c4>
 4004854:	1008d4ba 	srli	r4,r2,18
 4004858:	21001f04 	addi	r4,r4,124
 400485c:	210f883a 	add	r7,r4,r4
 4004860:	003f7e06 	br	400465c <__alt_data_end+0xfe00465c>
 4004864:	01c03f04 	movi	r7,252
 4004868:	01001f84 	movi	r4,126
 400486c:	003f7b06 	br	400465c <__alt_data_end+0xfe00465c>

04004870 <__sfvwrite_r>:
 4004870:	30800217 	ldw	r2,8(r6)
 4004874:	defff504 	addi	sp,sp,-44
 4004878:	dd400615 	stw	r21,24(sp)
 400487c:	dd000515 	stw	r20,20(sp)
 4004880:	dc000115 	stw	r16,4(sp)
 4004884:	dfc00a15 	stw	ra,40(sp)
 4004888:	df000915 	stw	fp,36(sp)
 400488c:	ddc00815 	stw	r23,32(sp)
 4004890:	dd800715 	stw	r22,28(sp)
 4004894:	dcc00415 	stw	r19,16(sp)
 4004898:	dc800315 	stw	r18,12(sp)
 400489c:	dc400215 	stw	r17,8(sp)
 40048a0:	3029883a 	mov	r20,r6
 40048a4:	202b883a 	mov	r21,r4
 40048a8:	2821883a 	mov	r16,r5
 40048ac:	10002126 	beq	r2,zero,4004934 <__sfvwrite_r+0xc4>
 40048b0:	2880030b 	ldhu	r2,12(r5)
 40048b4:	10c0020c 	andi	r3,r2,8
 40048b8:	18ffffcc 	andi	r3,r3,65535
 40048bc:	18e0001c 	xori	r3,r3,32768
 40048c0:	18e00004 	addi	r3,r3,-32768
 40048c4:	18002826 	beq	r3,zero,4004968 <__sfvwrite_r+0xf8>
 40048c8:	28c00417 	ldw	r3,16(r5)
 40048cc:	18002626 	beq	r3,zero,4004968 <__sfvwrite_r+0xf8>
 40048d0:	10c0008c 	andi	r3,r2,2
 40048d4:	18ffffcc 	andi	r3,r3,65535
 40048d8:	18e0001c 	xori	r3,r3,32768
 40048dc:	18e00004 	addi	r3,r3,-32768
 40048e0:	a4400017 	ldw	r17,0(r20)
 40048e4:	18002b26 	beq	r3,zero,4004994 <__sfvwrite_r+0x124>
 40048e8:	0027883a 	mov	r19,zero
 40048ec:	0025883a 	mov	r18,zero
 40048f0:	05810004 	movi	r22,1024
 40048f4:	980d883a 	mov	r6,r19
 40048f8:	a809883a 	mov	r4,r21
 40048fc:	90004f26 	beq	r18,zero,4004a3c <__sfvwrite_r+0x1cc>
 4004900:	900f883a 	mov	r7,r18
 4004904:	81400717 	ldw	r5,28(r16)
 4004908:	b480012e 	bgeu	r22,r18,4004910 <__sfvwrite_r+0xa0>
 400490c:	01c10004 	movi	r7,1024
 4004910:	80800917 	ldw	r2,36(r16)
 4004914:	103ee83a 	callr	r2
 4004918:	0080540e 	bge	zero,r2,4004a6c <__sfvwrite_r+0x1fc>
 400491c:	a0c00217 	ldw	r3,8(r20)
 4004920:	98a7883a 	add	r19,r19,r2
 4004924:	90a5c83a 	sub	r18,r18,r2
 4004928:	1885c83a 	sub	r2,r3,r2
 400492c:	a0800215 	stw	r2,8(r20)
 4004930:	103ff01e 	bne	r2,zero,40048f4 <__alt_data_end+0xfe0048f4>
 4004934:	0005883a 	mov	r2,zero
 4004938:	dfc00a17 	ldw	ra,40(sp)
 400493c:	df000917 	ldw	fp,36(sp)
 4004940:	ddc00817 	ldw	r23,32(sp)
 4004944:	dd800717 	ldw	r22,28(sp)
 4004948:	dd400617 	ldw	r21,24(sp)
 400494c:	dd000517 	ldw	r20,20(sp)
 4004950:	dcc00417 	ldw	r19,16(sp)
 4004954:	dc800317 	ldw	r18,12(sp)
 4004958:	dc400217 	ldw	r17,8(sp)
 400495c:	dc000117 	ldw	r16,4(sp)
 4004960:	dec00b04 	addi	sp,sp,44
 4004964:	f800283a 	ret
 4004968:	a809883a 	mov	r4,r21
 400496c:	800b883a 	mov	r5,r16
 4004970:	40025940 	call	4002594 <__swsetup_r>
 4004974:	1000f01e 	bne	r2,zero,4004d38 <__sfvwrite_r+0x4c8>
 4004978:	8080030b 	ldhu	r2,12(r16)
 400497c:	a4400017 	ldw	r17,0(r20)
 4004980:	10c0008c 	andi	r3,r2,2
 4004984:	18ffffcc 	andi	r3,r3,65535
 4004988:	18e0001c 	xori	r3,r3,32768
 400498c:	18e00004 	addi	r3,r3,-32768
 4004990:	183fd51e 	bne	r3,zero,40048e8 <__alt_data_end+0xfe0048e8>
 4004994:	10c0004c 	andi	r3,r2,1
 4004998:	002d883a 	mov	r22,zero
 400499c:	1800381e 	bne	r3,zero,4004a80 <__sfvwrite_r+0x210>
 40049a0:	0025883a 	mov	r18,zero
 40049a4:	90002126 	beq	r18,zero,4004a2c <__sfvwrite_r+0x1bc>
 40049a8:	10c0800c 	andi	r3,r2,512
 40049ac:	18ffffcc 	andi	r3,r3,65535
 40049b0:	18e0001c 	xori	r3,r3,32768
 40049b4:	18e00004 	addi	r3,r3,-32768
 40049b8:	84c00217 	ldw	r19,8(r16)
 40049bc:	18006b26 	beq	r3,zero,4004b6c <__sfvwrite_r+0x2fc>
 40049c0:	980f883a 	mov	r7,r19
 40049c4:	94c08636 	bltu	r18,r19,4004be0 <__sfvwrite_r+0x370>
 40049c8:	10c1200c 	andi	r3,r2,1152
 40049cc:	18009f1e 	bne	r3,zero,4004c4c <__sfvwrite_r+0x3dc>
 40049d0:	81000017 	ldw	r4,0(r16)
 40049d4:	982f883a 	mov	r23,r19
 40049d8:	9039883a 	mov	fp,r18
 40049dc:	9027883a 	mov	r19,r18
 40049e0:	380d883a 	mov	r6,r7
 40049e4:	b00b883a 	mov	r5,r22
 40049e8:	d9c00015 	stw	r7,0(sp)
 40049ec:	4005af40 	call	4005af4 <memmove>
 40049f0:	d9c00017 	ldw	r7,0(sp)
 40049f4:	81000217 	ldw	r4,8(r16)
 40049f8:	80800017 	ldw	r2,0(r16)
 40049fc:	25efc83a 	sub	r23,r4,r23
 4004a00:	11cf883a 	add	r7,r2,r7
 4004a04:	85c00215 	stw	r23,8(r16)
 4004a08:	81c00015 	stw	r7,0(r16)
 4004a0c:	a0800217 	ldw	r2,8(r20)
 4004a10:	b72d883a 	add	r22,r22,fp
 4004a14:	9725c83a 	sub	r18,r18,fp
 4004a18:	14e7c83a 	sub	r19,r2,r19
 4004a1c:	a4c00215 	stw	r19,8(r20)
 4004a20:	983fc426 	beq	r19,zero,4004934 <__alt_data_end+0xfe004934>
 4004a24:	8080030b 	ldhu	r2,12(r16)
 4004a28:	903fdf1e 	bne	r18,zero,40049a8 <__alt_data_end+0xfe0049a8>
 4004a2c:	8d800017 	ldw	r22,0(r17)
 4004a30:	8c800117 	ldw	r18,4(r17)
 4004a34:	8c400204 	addi	r17,r17,8
 4004a38:	003fda06 	br	40049a4 <__alt_data_end+0xfe0049a4>
 4004a3c:	8cc00017 	ldw	r19,0(r17)
 4004a40:	8c800117 	ldw	r18,4(r17)
 4004a44:	8c400204 	addi	r17,r17,8
 4004a48:	003faa06 	br	40048f4 <__alt_data_end+0xfe0048f4>
 4004a4c:	4006e7c0 	call	4006e7c <_realloc_r>
 4004a50:	102f883a 	mov	r23,r2
 4004a54:	10009f1e 	bne	r2,zero,4004cd4 <__sfvwrite_r+0x464>
 4004a58:	81400417 	ldw	r5,16(r16)
 4004a5c:	a809883a 	mov	r4,r21
 4004a60:	40045a00 	call	40045a0 <_free_r>
 4004a64:	00800304 	movi	r2,12
 4004a68:	a8800015 	stw	r2,0(r21)
 4004a6c:	80c0030b 	ldhu	r3,12(r16)
 4004a70:	00bfffc4 	movi	r2,-1
 4004a74:	18c01014 	ori	r3,r3,64
 4004a78:	80c0030d 	sth	r3,12(r16)
 4004a7c:	003fae06 	br	4004938 <__alt_data_end+0xfe004938>
 4004a80:	0007883a 	mov	r3,zero
 4004a84:	0039883a 	mov	fp,zero
 4004a88:	0025883a 	mov	r18,zero
 4004a8c:	90001e26 	beq	r18,zero,4004b08 <__sfvwrite_r+0x298>
 4004a90:	18006526 	beq	r3,zero,4004c28 <__sfvwrite_r+0x3b8>
 4004a94:	b02f883a 	mov	r23,r22
 4004a98:	9580012e 	bgeu	r18,r22,4004aa0 <__sfvwrite_r+0x230>
 4004a9c:	902f883a 	mov	r23,r18
 4004aa0:	81000017 	ldw	r4,0(r16)
 4004aa4:	80800417 	ldw	r2,16(r16)
 4004aa8:	84c00217 	ldw	r19,8(r16)
 4004aac:	81c00517 	ldw	r7,20(r16)
 4004ab0:	1100022e 	bgeu	r2,r4,4004abc <__sfvwrite_r+0x24c>
 4004ab4:	99e7883a 	add	r19,r19,r7
 4004ab8:	9dc01816 	blt	r19,r23,4004b1c <__sfvwrite_r+0x2ac>
 4004abc:	b9c03b16 	blt	r23,r7,4004bac <__sfvwrite_r+0x33c>
 4004ac0:	80800917 	ldw	r2,36(r16)
 4004ac4:	81400717 	ldw	r5,28(r16)
 4004ac8:	a809883a 	mov	r4,r21
 4004acc:	d8c00015 	stw	r3,0(sp)
 4004ad0:	e00d883a 	mov	r6,fp
 4004ad4:	103ee83a 	callr	r2
 4004ad8:	1027883a 	mov	r19,r2
 4004adc:	d8c00017 	ldw	r3,0(sp)
 4004ae0:	00bfe20e 	bge	zero,r2,4004a6c <__alt_data_end+0xfe004a6c>
 4004ae4:	b4edc83a 	sub	r22,r22,r19
 4004ae8:	b0001a26 	beq	r22,zero,4004b54 <__sfvwrite_r+0x2e4>
 4004aec:	a0800217 	ldw	r2,8(r20)
 4004af0:	e4f9883a 	add	fp,fp,r19
 4004af4:	94e5c83a 	sub	r18,r18,r19
 4004af8:	14e7c83a 	sub	r19,r2,r19
 4004afc:	a4c00215 	stw	r19,8(r20)
 4004b00:	983f8c26 	beq	r19,zero,4004934 <__alt_data_end+0xfe004934>
 4004b04:	903fe21e 	bne	r18,zero,4004a90 <__alt_data_end+0xfe004a90>
 4004b08:	8f000017 	ldw	fp,0(r17)
 4004b0c:	8c800117 	ldw	r18,4(r17)
 4004b10:	0007883a 	mov	r3,zero
 4004b14:	8c400204 	addi	r17,r17,8
 4004b18:	003fdc06 	br	4004a8c <__alt_data_end+0xfe004a8c>
 4004b1c:	e00b883a 	mov	r5,fp
 4004b20:	980d883a 	mov	r6,r19
 4004b24:	d8c00015 	stw	r3,0(sp)
 4004b28:	4005af40 	call	4005af4 <memmove>
 4004b2c:	80800017 	ldw	r2,0(r16)
 4004b30:	a809883a 	mov	r4,r21
 4004b34:	800b883a 	mov	r5,r16
 4004b38:	14c5883a 	add	r2,r2,r19
 4004b3c:	80800015 	stw	r2,0(r16)
 4004b40:	4003f600 	call	4003f60 <_fflush_r>
 4004b44:	d8c00017 	ldw	r3,0(sp)
 4004b48:	103fc81e 	bne	r2,zero,4004a6c <__alt_data_end+0xfe004a6c>
 4004b4c:	b4edc83a 	sub	r22,r22,r19
 4004b50:	b03fe61e 	bne	r22,zero,4004aec <__alt_data_end+0xfe004aec>
 4004b54:	a809883a 	mov	r4,r21
 4004b58:	800b883a 	mov	r5,r16
 4004b5c:	4003f600 	call	4003f60 <_fflush_r>
 4004b60:	103fc21e 	bne	r2,zero,4004a6c <__alt_data_end+0xfe004a6c>
 4004b64:	0007883a 	mov	r3,zero
 4004b68:	003fe006 	br	4004aec <__alt_data_end+0xfe004aec>
 4004b6c:	81000017 	ldw	r4,0(r16)
 4004b70:	80800417 	ldw	r2,16(r16)
 4004b74:	1100022e 	bgeu	r2,r4,4004b80 <__sfvwrite_r+0x310>
 4004b78:	9839883a 	mov	fp,r19
 4004b7c:	9c806036 	bltu	r19,r18,4004d00 <__sfvwrite_r+0x490>
 4004b80:	81c00517 	ldw	r7,20(r16)
 4004b84:	91c01c36 	bltu	r18,r7,4004bf8 <__sfvwrite_r+0x388>
 4004b88:	80800917 	ldw	r2,36(r16)
 4004b8c:	81400717 	ldw	r5,28(r16)
 4004b90:	a809883a 	mov	r4,r21
 4004b94:	b00d883a 	mov	r6,r22
 4004b98:	103ee83a 	callr	r2
 4004b9c:	1027883a 	mov	r19,r2
 4004ba0:	00bfb20e 	bge	zero,r2,4004a6c <__alt_data_end+0xfe004a6c>
 4004ba4:	1039883a 	mov	fp,r2
 4004ba8:	003f9806 	br	4004a0c <__alt_data_end+0xfe004a0c>
 4004bac:	b80d883a 	mov	r6,r23
 4004bb0:	e00b883a 	mov	r5,fp
 4004bb4:	d8c00015 	stw	r3,0(sp)
 4004bb8:	4005af40 	call	4005af4 <memmove>
 4004bbc:	80800217 	ldw	r2,8(r16)
 4004bc0:	81000017 	ldw	r4,0(r16)
 4004bc4:	b827883a 	mov	r19,r23
 4004bc8:	15c5c83a 	sub	r2,r2,r23
 4004bcc:	25ef883a 	add	r23,r4,r23
 4004bd0:	80800215 	stw	r2,8(r16)
 4004bd4:	85c00015 	stw	r23,0(r16)
 4004bd8:	d8c00017 	ldw	r3,0(sp)
 4004bdc:	003fc106 	br	4004ae4 <__alt_data_end+0xfe004ae4>
 4004be0:	81000017 	ldw	r4,0(r16)
 4004be4:	902f883a 	mov	r23,r18
 4004be8:	9039883a 	mov	fp,r18
 4004bec:	9027883a 	mov	r19,r18
 4004bf0:	900f883a 	mov	r7,r18
 4004bf4:	003f7a06 	br	40049e0 <__alt_data_end+0xfe0049e0>
 4004bf8:	b00b883a 	mov	r5,r22
 4004bfc:	900d883a 	mov	r6,r18
 4004c00:	4005af40 	call	4005af4 <memmove>
 4004c04:	80c00217 	ldw	r3,8(r16)
 4004c08:	80800017 	ldw	r2,0(r16)
 4004c0c:	9027883a 	mov	r19,r18
 4004c10:	1c87c83a 	sub	r3,r3,r18
 4004c14:	1485883a 	add	r2,r2,r18
 4004c18:	80c00215 	stw	r3,8(r16)
 4004c1c:	80800015 	stw	r2,0(r16)
 4004c20:	9039883a 	mov	fp,r18
 4004c24:	003f7906 	br	4004a0c <__alt_data_end+0xfe004a0c>
 4004c28:	e009883a 	mov	r4,fp
 4004c2c:	01400284 	movi	r5,10
 4004c30:	900d883a 	mov	r6,r18
 4004c34:	40058bc0 	call	40058bc <memchr>
 4004c38:	10003c26 	beq	r2,zero,4004d2c <__sfvwrite_r+0x4bc>
 4004c3c:	15800044 	addi	r22,r2,1
 4004c40:	b72dc83a 	sub	r22,r22,fp
 4004c44:	00c00044 	movi	r3,1
 4004c48:	003f9206 	br	4004a94 <__alt_data_end+0xfe004a94>
 4004c4c:	81000517 	ldw	r4,20(r16)
 4004c50:	81400417 	ldw	r5,16(r16)
 4004c54:	80c00017 	ldw	r3,0(r16)
 4004c58:	210d883a 	add	r6,r4,r4
 4004c5c:	3109883a 	add	r4,r6,r4
 4004c60:	2026d7fa 	srli	r19,r4,31
 4004c64:	1979c83a 	sub	fp,r3,r5
 4004c68:	e1800044 	addi	r6,fp,1
 4004c6c:	9909883a 	add	r4,r19,r4
 4004c70:	2027d07a 	srai	r19,r4,1
 4004c74:	3489883a 	add	r4,r6,r18
 4004c78:	980d883a 	mov	r6,r19
 4004c7c:	9900022e 	bgeu	r19,r4,4004c88 <__sfvwrite_r+0x418>
 4004c80:	2027883a 	mov	r19,r4
 4004c84:	200d883a 	mov	r6,r4
 4004c88:	1081000c 	andi	r2,r2,1024
 4004c8c:	10bfffcc 	andi	r2,r2,65535
 4004c90:	10a0001c 	xori	r2,r2,32768
 4004c94:	10a00004 	addi	r2,r2,-32768
 4004c98:	a809883a 	mov	r4,r21
 4004c9c:	103f6b26 	beq	r2,zero,4004a4c <__alt_data_end+0xfe004a4c>
 4004ca0:	300b883a 	mov	r5,r6
 4004ca4:	40051380 	call	4005138 <_malloc_r>
 4004ca8:	102f883a 	mov	r23,r2
 4004cac:	103f6d26 	beq	r2,zero,4004a64 <__alt_data_end+0xfe004a64>
 4004cb0:	81400417 	ldw	r5,16(r16)
 4004cb4:	1009883a 	mov	r4,r2
 4004cb8:	e00d883a 	mov	r6,fp
 4004cbc:	40059b40 	call	40059b4 <memcpy>
 4004cc0:	8080030b 	ldhu	r2,12(r16)
 4004cc4:	00fedfc4 	movi	r3,-1153
 4004cc8:	10c4703a 	and	r2,r2,r3
 4004ccc:	10802014 	ori	r2,r2,128
 4004cd0:	8080030d 	sth	r2,12(r16)
 4004cd4:	bf09883a 	add	r4,r23,fp
 4004cd8:	9f07c83a 	sub	r3,r19,fp
 4004cdc:	85c00415 	stw	r23,16(r16)
 4004ce0:	84c00515 	stw	r19,20(r16)
 4004ce4:	81000015 	stw	r4,0(r16)
 4004ce8:	902f883a 	mov	r23,r18
 4004cec:	80c00215 	stw	r3,8(r16)
 4004cf0:	9039883a 	mov	fp,r18
 4004cf4:	9027883a 	mov	r19,r18
 4004cf8:	900f883a 	mov	r7,r18
 4004cfc:	003f3806 	br	40049e0 <__alt_data_end+0xfe0049e0>
 4004d00:	b00b883a 	mov	r5,r22
 4004d04:	980d883a 	mov	r6,r19
 4004d08:	4005af40 	call	4005af4 <memmove>
 4004d0c:	80800017 	ldw	r2,0(r16)
 4004d10:	a809883a 	mov	r4,r21
 4004d14:	800b883a 	mov	r5,r16
 4004d18:	14c5883a 	add	r2,r2,r19
 4004d1c:	80800015 	stw	r2,0(r16)
 4004d20:	4003f600 	call	4003f60 <_fflush_r>
 4004d24:	103f3926 	beq	r2,zero,4004a0c <__alt_data_end+0xfe004a0c>
 4004d28:	003f5006 	br	4004a6c <__alt_data_end+0xfe004a6c>
 4004d2c:	95800044 	addi	r22,r18,1
 4004d30:	00c00044 	movi	r3,1
 4004d34:	003f5706 	br	4004a94 <__alt_data_end+0xfe004a94>
 4004d38:	80c0030b 	ldhu	r3,12(r16)
 4004d3c:	00bfffc4 	movi	r2,-1
 4004d40:	18c01014 	ori	r3,r3,64
 4004d44:	80c0030d 	sth	r3,12(r16)
 4004d48:	00c00244 	movi	r3,9
 4004d4c:	a8c00015 	stw	r3,0(r21)
 4004d50:	003ef906 	br	4004938 <__alt_data_end+0xfe004938>

04004d54 <_fwalk>:
 4004d54:	defff904 	addi	sp,sp,-28
 4004d58:	dcc00315 	stw	r19,12(sp)
 4004d5c:	24c0b804 	addi	r19,r4,736
 4004d60:	dd400515 	stw	r21,20(sp)
 4004d64:	dd000415 	stw	r20,16(sp)
 4004d68:	dfc00615 	stw	ra,24(sp)
 4004d6c:	dc800215 	stw	r18,8(sp)
 4004d70:	dc400115 	stw	r17,4(sp)
 4004d74:	dc000015 	stw	r16,0(sp)
 4004d78:	282b883a 	mov	r21,r5
 4004d7c:	0029883a 	mov	r20,zero
 4004d80:	40044240 	call	4004424 <__sfp_lock_acquire>
 4004d84:	98001226 	beq	r19,zero,4004dd0 <_fwalk+0x7c>
 4004d88:	04bfffc4 	movi	r18,-1
 4004d8c:	9c400117 	ldw	r17,4(r19)
 4004d90:	9c000217 	ldw	r16,8(r19)
 4004d94:	8c7fffc4 	addi	r17,r17,-1
 4004d98:	88000b16 	blt	r17,zero,4004dc8 <_fwalk+0x74>
 4004d9c:	84000304 	addi	r16,r16,12
 4004da0:	80c0000f 	ldh	r3,0(r16)
 4004da4:	8c7fffc4 	addi	r17,r17,-1
 4004da8:	813ffd04 	addi	r4,r16,-12
 4004dac:	18000426 	beq	r3,zero,4004dc0 <_fwalk+0x6c>
 4004db0:	80c0008f 	ldh	r3,2(r16)
 4004db4:	1c800226 	beq	r3,r18,4004dc0 <_fwalk+0x6c>
 4004db8:	a83ee83a 	callr	r21
 4004dbc:	a0a8b03a 	or	r20,r20,r2
 4004dc0:	84001704 	addi	r16,r16,92
 4004dc4:	8cbff61e 	bne	r17,r18,4004da0 <__alt_data_end+0xfe004da0>
 4004dc8:	9cc00017 	ldw	r19,0(r19)
 4004dcc:	983fef1e 	bne	r19,zero,4004d8c <__alt_data_end+0xfe004d8c>
 4004dd0:	40044280 	call	4004428 <__sfp_lock_release>
 4004dd4:	a005883a 	mov	r2,r20
 4004dd8:	dfc00617 	ldw	ra,24(sp)
 4004ddc:	dd400517 	ldw	r21,20(sp)
 4004de0:	dd000417 	ldw	r20,16(sp)
 4004de4:	dcc00317 	ldw	r19,12(sp)
 4004de8:	dc800217 	ldw	r18,8(sp)
 4004dec:	dc400117 	ldw	r17,4(sp)
 4004df0:	dc000017 	ldw	r16,0(sp)
 4004df4:	dec00704 	addi	sp,sp,28
 4004df8:	f800283a 	ret

04004dfc <_fwalk_reent>:
 4004dfc:	defff804 	addi	sp,sp,-32
 4004e00:	dcc00315 	stw	r19,12(sp)
 4004e04:	24c0b804 	addi	r19,r4,736
 4004e08:	dd800615 	stw	r22,24(sp)
 4004e0c:	dd400515 	stw	r21,20(sp)
 4004e10:	dd000415 	stw	r20,16(sp)
 4004e14:	dfc00715 	stw	ra,28(sp)
 4004e18:	dc800215 	stw	r18,8(sp)
 4004e1c:	dc400115 	stw	r17,4(sp)
 4004e20:	dc000015 	stw	r16,0(sp)
 4004e24:	2029883a 	mov	r20,r4
 4004e28:	282b883a 	mov	r21,r5
 4004e2c:	002d883a 	mov	r22,zero
 4004e30:	40044240 	call	4004424 <__sfp_lock_acquire>
 4004e34:	98001326 	beq	r19,zero,4004e84 <_fwalk_reent+0x88>
 4004e38:	04bfffc4 	movi	r18,-1
 4004e3c:	9c400117 	ldw	r17,4(r19)
 4004e40:	9c000217 	ldw	r16,8(r19)
 4004e44:	8c7fffc4 	addi	r17,r17,-1
 4004e48:	88000c16 	blt	r17,zero,4004e7c <_fwalk_reent+0x80>
 4004e4c:	84000304 	addi	r16,r16,12
 4004e50:	80c0000f 	ldh	r3,0(r16)
 4004e54:	8c7fffc4 	addi	r17,r17,-1
 4004e58:	817ffd04 	addi	r5,r16,-12
 4004e5c:	18000526 	beq	r3,zero,4004e74 <_fwalk_reent+0x78>
 4004e60:	80c0008f 	ldh	r3,2(r16)
 4004e64:	a009883a 	mov	r4,r20
 4004e68:	1c800226 	beq	r3,r18,4004e74 <_fwalk_reent+0x78>
 4004e6c:	a83ee83a 	callr	r21
 4004e70:	b0acb03a 	or	r22,r22,r2
 4004e74:	84001704 	addi	r16,r16,92
 4004e78:	8cbff51e 	bne	r17,r18,4004e50 <__alt_data_end+0xfe004e50>
 4004e7c:	9cc00017 	ldw	r19,0(r19)
 4004e80:	983fee1e 	bne	r19,zero,4004e3c <__alt_data_end+0xfe004e3c>
 4004e84:	40044280 	call	4004428 <__sfp_lock_release>
 4004e88:	b005883a 	mov	r2,r22
 4004e8c:	dfc00717 	ldw	ra,28(sp)
 4004e90:	dd800617 	ldw	r22,24(sp)
 4004e94:	dd400517 	ldw	r21,20(sp)
 4004e98:	dd000417 	ldw	r20,16(sp)
 4004e9c:	dcc00317 	ldw	r19,12(sp)
 4004ea0:	dc800217 	ldw	r18,8(sp)
 4004ea4:	dc400117 	ldw	r17,4(sp)
 4004ea8:	dc000017 	ldw	r16,0(sp)
 4004eac:	dec00804 	addi	sp,sp,32
 4004eb0:	f800283a 	ret

04004eb4 <_setlocale_r>:
 4004eb4:	defffc04 	addi	sp,sp,-16
 4004eb8:	dc800215 	stw	r18,8(sp)
 4004ebc:	dc400115 	stw	r17,4(sp)
 4004ec0:	dc000015 	stw	r16,0(sp)
 4004ec4:	dfc00315 	stw	ra,12(sp)
 4004ec8:	3021883a 	mov	r16,r6
 4004ecc:	2023883a 	mov	r17,r4
 4004ed0:	2825883a 	mov	r18,r5
 4004ed4:	30001626 	beq	r6,zero,4004f30 <_setlocale_r+0x7c>
 4004ed8:	3009883a 	mov	r4,r6
 4004edc:	01410074 	movhi	r5,1025
 4004ee0:	29718304 	addi	r5,r5,-14836
 4004ee4:	40076800 	call	4007680 <strcmp>
 4004ee8:	10000a1e 	bne	r2,zero,4004f14 <_setlocale_r+0x60>
 4004eec:	8c800c15 	stw	r18,48(r17)
 4004ef0:	8c000d15 	stw	r16,52(r17)
 4004ef4:	00810074 	movhi	r2,1025
 4004ef8:	10b18304 	addi	r2,r2,-14836
 4004efc:	dfc00317 	ldw	ra,12(sp)
 4004f00:	dc800217 	ldw	r18,8(sp)
 4004f04:	dc400117 	ldw	r17,4(sp)
 4004f08:	dc000017 	ldw	r16,0(sp)
 4004f0c:	dec00404 	addi	sp,sp,16
 4004f10:	f800283a 	ret
 4004f14:	8009883a 	mov	r4,r16
 4004f18:	01410074 	movhi	r5,1025
 4004f1c:	29716e04 	addi	r5,r5,-14920
 4004f20:	40076800 	call	4007680 <strcmp>
 4004f24:	103ff126 	beq	r2,zero,4004eec <__alt_data_end+0xfe004eec>
 4004f28:	0005883a 	mov	r2,zero
 4004f2c:	003ff306 	br	4004efc <__alt_data_end+0xfe004efc>
 4004f30:	00810074 	movhi	r2,1025
 4004f34:	10b18304 	addi	r2,r2,-14836
 4004f38:	dfc00317 	ldw	ra,12(sp)
 4004f3c:	dc800217 	ldw	r18,8(sp)
 4004f40:	dc400117 	ldw	r17,4(sp)
 4004f44:	dc000017 	ldw	r16,0(sp)
 4004f48:	dec00404 	addi	sp,sp,16
 4004f4c:	f800283a 	ret

04004f50 <__locale_charset>:
 4004f50:	00810074 	movhi	r2,1025
 4004f54:	10b18404 	addi	r2,r2,-14832
 4004f58:	f800283a 	ret

04004f5c <_localeconv_r>:
 4004f5c:	00810074 	movhi	r2,1025
 4004f60:	10b18804 	addi	r2,r2,-14816
 4004f64:	f800283a 	ret

04004f68 <setlocale>:
 4004f68:	00c10074 	movhi	r3,1025
 4004f6c:	18f8b704 	addi	r3,r3,-7460
 4004f70:	2005883a 	mov	r2,r4
 4004f74:	19000017 	ldw	r4,0(r3)
 4004f78:	280d883a 	mov	r6,r5
 4004f7c:	100b883a 	mov	r5,r2
 4004f80:	4004eb41 	jmpi	4004eb4 <_setlocale_r>

04004f84 <localeconv>:
 4004f84:	00810074 	movhi	r2,1025
 4004f88:	10b18804 	addi	r2,r2,-14816
 4004f8c:	f800283a 	ret

04004f90 <__smakebuf_r>:
 4004f90:	2880030b 	ldhu	r2,12(r5)
 4004f94:	deffed04 	addi	sp,sp,-76
 4004f98:	dc401015 	stw	r17,64(sp)
 4004f9c:	10c0008c 	andi	r3,r2,2
 4004fa0:	18ffffcc 	andi	r3,r3,65535
 4004fa4:	18e0001c 	xori	r3,r3,32768
 4004fa8:	dc000f15 	stw	r16,60(sp)
 4004fac:	dfc01215 	stw	ra,72(sp)
 4004fb0:	dc801115 	stw	r18,68(sp)
 4004fb4:	18e00004 	addi	r3,r3,-32768
 4004fb8:	2821883a 	mov	r16,r5
 4004fbc:	2023883a 	mov	r17,r4
 4004fc0:	1800381e 	bne	r3,zero,40050a4 <__smakebuf_r+0x114>
 4004fc4:	2940038f 	ldh	r5,14(r5)
 4004fc8:	28002d16 	blt	r5,zero,4005080 <__smakebuf_r+0xf0>
 4004fcc:	d80d883a 	mov	r6,sp
 4004fd0:	4007b680 	call	4007b68 <_fstat_r>
 4004fd4:	10002916 	blt	r2,zero,400507c <__smakebuf_r+0xec>
 4004fd8:	d8800117 	ldw	r2,4(sp)
 4004fdc:	00e00014 	movui	r3,32768
 4004fe0:	10bc000c 	andi	r2,r2,61440
 4004fe4:	10c03c26 	beq	r2,r3,40050d8 <__smakebuf_r+0x148>
 4004fe8:	80c0030b 	ldhu	r3,12(r16)
 4004fec:	18c20014 	ori	r3,r3,2048
 4004ff0:	80c0030d 	sth	r3,12(r16)
 4004ff4:	00c80004 	movi	r3,8192
 4004ff8:	10c00c1e 	bne	r2,r3,400502c <__smakebuf_r+0x9c>
 4004ffc:	8140038f 	ldh	r5,14(r16)
 4005000:	8809883a 	mov	r4,r17
 4005004:	4007bd00 	call	4007bd0 <_isatty_r>
 4005008:	10000826 	beq	r2,zero,400502c <__smakebuf_r+0x9c>
 400500c:	80c0030b 	ldhu	r3,12(r16)
 4005010:	808010c4 	addi	r2,r16,67
 4005014:	80800015 	stw	r2,0(r16)
 4005018:	18c00054 	ori	r3,r3,1
 400501c:	80800415 	stw	r2,16(r16)
 4005020:	00800044 	movi	r2,1
 4005024:	80c0030d 	sth	r3,12(r16)
 4005028:	80800515 	stw	r2,20(r16)
 400502c:	04810004 	movi	r18,1024
 4005030:	8809883a 	mov	r4,r17
 4005034:	900b883a 	mov	r5,r18
 4005038:	40051380 	call	4005138 <_malloc_r>
 400503c:	10003026 	beq	r2,zero,4005100 <__smakebuf_r+0x170>
 4005040:	80c0030b 	ldhu	r3,12(r16)
 4005044:	01010034 	movhi	r4,1024
 4005048:	21106204 	addi	r4,r4,16776
 400504c:	89000f15 	stw	r4,60(r17)
 4005050:	18c02014 	ori	r3,r3,128
 4005054:	80c0030d 	sth	r3,12(r16)
 4005058:	80800015 	stw	r2,0(r16)
 400505c:	80800415 	stw	r2,16(r16)
 4005060:	84800515 	stw	r18,20(r16)
 4005064:	dfc01217 	ldw	ra,72(sp)
 4005068:	dc801117 	ldw	r18,68(sp)
 400506c:	dc401017 	ldw	r17,64(sp)
 4005070:	dc000f17 	ldw	r16,60(sp)
 4005074:	dec01304 	addi	sp,sp,76
 4005078:	f800283a 	ret
 400507c:	8080030b 	ldhu	r2,12(r16)
 4005080:	10c0200c 	andi	r3,r2,128
 4005084:	18ffffcc 	andi	r3,r3,65535
 4005088:	18e0001c 	xori	r3,r3,32768
 400508c:	18e00004 	addi	r3,r3,-32768
 4005090:	18000f1e 	bne	r3,zero,40050d0 <__smakebuf_r+0x140>
 4005094:	04810004 	movi	r18,1024
 4005098:	10820014 	ori	r2,r2,2048
 400509c:	8080030d 	sth	r2,12(r16)
 40050a0:	003fe306 	br	4005030 <__alt_data_end+0xfe005030>
 40050a4:	288010c4 	addi	r2,r5,67
 40050a8:	28800015 	stw	r2,0(r5)
 40050ac:	28800415 	stw	r2,16(r5)
 40050b0:	00800044 	movi	r2,1
 40050b4:	28800515 	stw	r2,20(r5)
 40050b8:	dfc01217 	ldw	ra,72(sp)
 40050bc:	dc801117 	ldw	r18,68(sp)
 40050c0:	dc401017 	ldw	r17,64(sp)
 40050c4:	dc000f17 	ldw	r16,60(sp)
 40050c8:	dec01304 	addi	sp,sp,76
 40050cc:	f800283a 	ret
 40050d0:	04801004 	movi	r18,64
 40050d4:	003ff006 	br	4005098 <__alt_data_end+0xfe005098>
 40050d8:	81000a17 	ldw	r4,40(r16)
 40050dc:	00c10034 	movhi	r3,1024
 40050e0:	18dd8704 	addi	r3,r3,30236
 40050e4:	20ffc01e 	bne	r4,r3,4004fe8 <__alt_data_end+0xfe004fe8>
 40050e8:	8080030b 	ldhu	r2,12(r16)
 40050ec:	00c10004 	movi	r3,1024
 40050f0:	80c01315 	stw	r3,76(r16)
 40050f4:	10c4b03a 	or	r2,r2,r3
 40050f8:	8080030d 	sth	r2,12(r16)
 40050fc:	003fcb06 	br	400502c <__alt_data_end+0xfe00502c>
 4005100:	8080030b 	ldhu	r2,12(r16)
 4005104:	10c0800c 	andi	r3,r2,512
 4005108:	18ffffcc 	andi	r3,r3,65535
 400510c:	18e0001c 	xori	r3,r3,32768
 4005110:	18e00004 	addi	r3,r3,-32768
 4005114:	183fd31e 	bne	r3,zero,4005064 <__alt_data_end+0xfe005064>
 4005118:	10800094 	ori	r2,r2,2
 400511c:	80c010c4 	addi	r3,r16,67
 4005120:	8080030d 	sth	r2,12(r16)
 4005124:	00800044 	movi	r2,1
 4005128:	80c00015 	stw	r3,0(r16)
 400512c:	80c00415 	stw	r3,16(r16)
 4005130:	80800515 	stw	r2,20(r16)
 4005134:	003fcb06 	br	4005064 <__alt_data_end+0xfe005064>

04005138 <_malloc_r>:
 4005138:	defff604 	addi	sp,sp,-40
 400513c:	dc800215 	stw	r18,8(sp)
 4005140:	dfc00915 	stw	ra,36(sp)
 4005144:	df000815 	stw	fp,32(sp)
 4005148:	ddc00715 	stw	r23,28(sp)
 400514c:	dd800615 	stw	r22,24(sp)
 4005150:	dd400515 	stw	r21,20(sp)
 4005154:	dd000415 	stw	r20,16(sp)
 4005158:	dcc00315 	stw	r19,12(sp)
 400515c:	dc400115 	stw	r17,4(sp)
 4005160:	dc000015 	stw	r16,0(sp)
 4005164:	288002c4 	addi	r2,r5,11
 4005168:	00c00584 	movi	r3,22
 400516c:	2025883a 	mov	r18,r4
 4005170:	18802b2e 	bgeu	r3,r2,4005220 <_malloc_r+0xe8>
 4005174:	047ffe04 	movi	r17,-8
 4005178:	1462703a 	and	r17,r2,r17
 400517c:	88002a16 	blt	r17,zero,4005228 <_malloc_r+0xf0>
 4005180:	89402936 	bltu	r17,r5,4005228 <_malloc_r+0xf0>
 4005184:	9009883a 	mov	r4,r18
 4005188:	400a40c0 	call	400a40c <__malloc_lock>
 400518c:	00807dc4 	movi	r2,503
 4005190:	14402936 	bltu	r2,r17,4005238 <_malloc_r+0x100>
 4005194:	8808d0fa 	srli	r4,r17,3
 4005198:	04c10074 	movhi	r19,1025
 400519c:	9cf33204 	addi	r19,r19,-13112
 40051a0:	2105883a 	add	r2,r4,r4
 40051a4:	1085883a 	add	r2,r2,r2
 40051a8:	1085883a 	add	r2,r2,r2
 40051ac:	9885883a 	add	r2,r19,r2
 40051b0:	14000317 	ldw	r16,12(r2)
 40051b4:	80815526 	beq	r16,r2,400570c <_malloc_r+0x5d4>
 40051b8:	81000117 	ldw	r4,4(r16)
 40051bc:	00bfff04 	movi	r2,-4
 40051c0:	80c00317 	ldw	r3,12(r16)
 40051c4:	2084703a 	and	r2,r4,r2
 40051c8:	8085883a 	add	r2,r16,r2
 40051cc:	11800117 	ldw	r6,4(r2)
 40051d0:	81400217 	ldw	r5,8(r16)
 40051d4:	9009883a 	mov	r4,r18
 40051d8:	31800054 	ori	r6,r6,1
 40051dc:	11800115 	stw	r6,4(r2)
 40051e0:	28c00315 	stw	r3,12(r5)
 40051e4:	19400215 	stw	r5,8(r3)
 40051e8:	400a42c0 	call	400a42c <__malloc_unlock>
 40051ec:	80800204 	addi	r2,r16,8
 40051f0:	dfc00917 	ldw	ra,36(sp)
 40051f4:	df000817 	ldw	fp,32(sp)
 40051f8:	ddc00717 	ldw	r23,28(sp)
 40051fc:	dd800617 	ldw	r22,24(sp)
 4005200:	dd400517 	ldw	r21,20(sp)
 4005204:	dd000417 	ldw	r20,16(sp)
 4005208:	dcc00317 	ldw	r19,12(sp)
 400520c:	dc800217 	ldw	r18,8(sp)
 4005210:	dc400117 	ldw	r17,4(sp)
 4005214:	dc000017 	ldw	r16,0(sp)
 4005218:	dec00a04 	addi	sp,sp,40
 400521c:	f800283a 	ret
 4005220:	04400404 	movi	r17,16
 4005224:	897fd72e 	bgeu	r17,r5,4005184 <__alt_data_end+0xfe005184>
 4005228:	00800304 	movi	r2,12
 400522c:	90800015 	stw	r2,0(r18)
 4005230:	0005883a 	mov	r2,zero
 4005234:	003fee06 	br	40051f0 <__alt_data_end+0xfe0051f0>
 4005238:	8808d27a 	srli	r4,r17,9
 400523c:	20007126 	beq	r4,zero,4005404 <_malloc_r+0x2cc>
 4005240:	00800104 	movi	r2,4
 4005244:	1100eb36 	bltu	r2,r4,40055f4 <_malloc_r+0x4bc>
 4005248:	8808d1ba 	srli	r4,r17,6
 400524c:	21000e04 	addi	r4,r4,56
 4005250:	210b883a 	add	r5,r4,r4
 4005254:	294b883a 	add	r5,r5,r5
 4005258:	294b883a 	add	r5,r5,r5
 400525c:	04c10074 	movhi	r19,1025
 4005260:	9cf33204 	addi	r19,r19,-13112
 4005264:	994b883a 	add	r5,r19,r5
 4005268:	2c000317 	ldw	r16,12(r5)
 400526c:	2c000e26 	beq	r5,r16,40052a8 <_malloc_r+0x170>
 4005270:	80c00117 	ldw	r3,4(r16)
 4005274:	01ffff04 	movi	r7,-4
 4005278:	018003c4 	movi	r6,15
 400527c:	19c6703a 	and	r3,r3,r7
 4005280:	1c45c83a 	sub	r2,r3,r17
 4005284:	30800716 	blt	r6,r2,40052a4 <_malloc_r+0x16c>
 4005288:	1000610e 	bge	r2,zero,4005410 <_malloc_r+0x2d8>
 400528c:	84000317 	ldw	r16,12(r16)
 4005290:	2c000526 	beq	r5,r16,40052a8 <_malloc_r+0x170>
 4005294:	80c00117 	ldw	r3,4(r16)
 4005298:	19c6703a 	and	r3,r3,r7
 400529c:	1c45c83a 	sub	r2,r3,r17
 40052a0:	30bff90e 	bge	r6,r2,4005288 <__alt_data_end+0xfe005288>
 40052a4:	213fffc4 	addi	r4,r4,-1
 40052a8:	21000044 	addi	r4,r4,1
 40052ac:	9c000417 	ldw	r16,16(r19)
 40052b0:	00c10074 	movhi	r3,1025
 40052b4:	18f33204 	addi	r3,r3,-13112
 40052b8:	1a400204 	addi	r9,r3,8
 40052bc:	8240ff26 	beq	r16,r9,40056bc <_malloc_r+0x584>
 40052c0:	81400117 	ldw	r5,4(r16)
 40052c4:	00bfff04 	movi	r2,-4
 40052c8:	018003c4 	movi	r6,15
 40052cc:	2884703a 	and	r2,r5,r2
 40052d0:	144bc83a 	sub	r5,r2,r17
 40052d4:	3140ea16 	blt	r6,r5,4005680 <_malloc_r+0x548>
 40052d8:	1a400515 	stw	r9,20(r3)
 40052dc:	1a400415 	stw	r9,16(r3)
 40052e0:	2800570e 	bge	r5,zero,4005440 <_malloc_r+0x308>
 40052e4:	01407fc4 	movi	r5,511
 40052e8:	2880ca36 	bltu	r5,r2,4005614 <_malloc_r+0x4dc>
 40052ec:	1004d0fa 	srli	r2,r2,3
 40052f0:	02000044 	movi	r8,1
 40052f4:	19c00117 	ldw	r7,4(r3)
 40052f8:	108b883a 	add	r5,r2,r2
 40052fc:	294b883a 	add	r5,r5,r5
 4005300:	1005d0ba 	srai	r2,r2,2
 4005304:	294b883a 	add	r5,r5,r5
 4005308:	28cb883a 	add	r5,r5,r3
 400530c:	29800217 	ldw	r6,8(r5)
 4005310:	4084983a 	sll	r2,r8,r2
 4005314:	81400315 	stw	r5,12(r16)
 4005318:	81800215 	stw	r6,8(r16)
 400531c:	11c4b03a 	or	r2,r2,r7
 4005320:	18800115 	stw	r2,4(r3)
 4005324:	2c000215 	stw	r16,8(r5)
 4005328:	34000315 	stw	r16,12(r6)
 400532c:	200bd0ba 	srai	r5,r4,2
 4005330:	00c00044 	movi	r3,1
 4005334:	194a983a 	sll	r5,r3,r5
 4005338:	11404936 	bltu	r2,r5,4005460 <_malloc_r+0x328>
 400533c:	1146703a 	and	r3,r2,r5
 4005340:	18000a1e 	bne	r3,zero,400536c <_malloc_r+0x234>
 4005344:	00ffff04 	movi	r3,-4
 4005348:	294b883a 	add	r5,r5,r5
 400534c:	20c8703a 	and	r4,r4,r3
 4005350:	1146703a 	and	r3,r2,r5
 4005354:	21000104 	addi	r4,r4,4
 4005358:	1800041e 	bne	r3,zero,400536c <_malloc_r+0x234>
 400535c:	294b883a 	add	r5,r5,r5
 4005360:	1146703a 	and	r3,r2,r5
 4005364:	21000104 	addi	r4,r4,4
 4005368:	183ffc26 	beq	r3,zero,400535c <__alt_data_end+0xfe00535c>
 400536c:	023fff04 	movi	r8,-4
 4005370:	01c003c4 	movi	r7,15
 4005374:	2105883a 	add	r2,r4,r4
 4005378:	1085883a 	add	r2,r2,r2
 400537c:	1085883a 	add	r2,r2,r2
 4005380:	9899883a 	add	r12,r19,r2
 4005384:	62800304 	addi	r10,r12,12
 4005388:	2017883a 	mov	r11,r4
 400538c:	54000017 	ldw	r16,0(r10)
 4005390:	51bffd04 	addi	r6,r10,-12
 4005394:	8180041e 	bne	r16,r6,40053a8 <_malloc_r+0x270>
 4005398:	0000ca06 	br	40056c4 <_malloc_r+0x58c>
 400539c:	10001c0e 	bge	r2,zero,4005410 <_malloc_r+0x2d8>
 40053a0:	84000317 	ldw	r16,12(r16)
 40053a4:	8180c726 	beq	r16,r6,40056c4 <_malloc_r+0x58c>
 40053a8:	80c00117 	ldw	r3,4(r16)
 40053ac:	1a06703a 	and	r3,r3,r8
 40053b0:	1c45c83a 	sub	r2,r3,r17
 40053b4:	38bff90e 	bge	r7,r2,400539c <__alt_data_end+0xfe00539c>
 40053b8:	81000317 	ldw	r4,12(r16)
 40053bc:	81400217 	ldw	r5,8(r16)
 40053c0:	8447883a 	add	r3,r16,r17
 40053c4:	8c400054 	ori	r17,r17,1
 40053c8:	29000315 	stw	r4,12(r5)
 40053cc:	21400215 	stw	r5,8(r4)
 40053d0:	84400115 	stw	r17,4(r16)
 40053d4:	1889883a 	add	r4,r3,r2
 40053d8:	11400054 	ori	r5,r2,1
 40053dc:	98c00515 	stw	r3,20(r19)
 40053e0:	98c00415 	stw	r3,16(r19)
 40053e4:	20800015 	stw	r2,0(r4)
 40053e8:	1a400315 	stw	r9,12(r3)
 40053ec:	1a400215 	stw	r9,8(r3)
 40053f0:	19400115 	stw	r5,4(r3)
 40053f4:	9009883a 	mov	r4,r18
 40053f8:	400a42c0 	call	400a42c <__malloc_unlock>
 40053fc:	80800204 	addi	r2,r16,8
 4005400:	003f7b06 	br	40051f0 <__alt_data_end+0xfe0051f0>
 4005404:	8808d0fa 	srli	r4,r17,3
 4005408:	210b883a 	add	r5,r4,r4
 400540c:	003f9106 	br	4005254 <__alt_data_end+0xfe005254>
 4005410:	80c7883a 	add	r3,r16,r3
 4005414:	19400117 	ldw	r5,4(r3)
 4005418:	80800317 	ldw	r2,12(r16)
 400541c:	81000217 	ldw	r4,8(r16)
 4005420:	29400054 	ori	r5,r5,1
 4005424:	19400115 	stw	r5,4(r3)
 4005428:	20800315 	stw	r2,12(r4)
 400542c:	11000215 	stw	r4,8(r2)
 4005430:	9009883a 	mov	r4,r18
 4005434:	400a42c0 	call	400a42c <__malloc_unlock>
 4005438:	80800204 	addi	r2,r16,8
 400543c:	003f6c06 	br	40051f0 <__alt_data_end+0xfe0051f0>
 4005440:	8085883a 	add	r2,r16,r2
 4005444:	10c00117 	ldw	r3,4(r2)
 4005448:	9009883a 	mov	r4,r18
 400544c:	18c00054 	ori	r3,r3,1
 4005450:	10c00115 	stw	r3,4(r2)
 4005454:	400a42c0 	call	400a42c <__malloc_unlock>
 4005458:	80800204 	addi	r2,r16,8
 400545c:	003f6406 	br	40051f0 <__alt_data_end+0xfe0051f0>
 4005460:	9c000217 	ldw	r16,8(r19)
 4005464:	00bfff04 	movi	r2,-4
 4005468:	85400117 	ldw	r21,4(r16)
 400546c:	a8aa703a 	and	r21,r21,r2
 4005470:	ac400336 	bltu	r21,r17,4005480 <_malloc_r+0x348>
 4005474:	ac45c83a 	sub	r2,r21,r17
 4005478:	00c003c4 	movi	r3,15
 400547c:	18805316 	blt	r3,r2,40055cc <_malloc_r+0x494>
 4005480:	d5e6aa17 	ldw	r23,-25944(gp)
 4005484:	d0e00317 	ldw	r3,-32756(gp)
 4005488:	00bfffc4 	movi	r2,-1
 400548c:	8579883a 	add	fp,r16,r21
 4005490:	8def883a 	add	r23,r17,r23
 4005494:	1880d226 	beq	r3,r2,40057e0 <_malloc_r+0x6a8>
 4005498:	bdc403c4 	addi	r23,r23,4111
 400549c:	00bc0004 	movi	r2,-4096
 40054a0:	b8ae703a 	and	r23,r23,r2
 40054a4:	9009883a 	mov	r4,r18
 40054a8:	b80b883a 	mov	r5,r23
 40054ac:	40074dc0 	call	40074dc <_sbrk_r>
 40054b0:	1029883a 	mov	r20,r2
 40054b4:	00bfffc4 	movi	r2,-1
 40054b8:	a080d126 	beq	r20,r2,4005800 <_malloc_r+0x6c8>
 40054bc:	a7009f36 	bltu	r20,fp,400573c <_malloc_r+0x604>
 40054c0:	05810074 	movhi	r22,1025
 40054c4:	b5bf6804 	addi	r22,r22,-608
 40054c8:	b0800017 	ldw	r2,0(r22)
 40054cc:	b885883a 	add	r2,r23,r2
 40054d0:	b0800015 	stw	r2,0(r22)
 40054d4:	e500cf26 	beq	fp,r20,4005814 <_malloc_r+0x6dc>
 40054d8:	d1200317 	ldw	r4,-32756(gp)
 40054dc:	00ffffc4 	movi	r3,-1
 40054e0:	20c0e026 	beq	r4,r3,4005864 <_malloc_r+0x72c>
 40054e4:	a739c83a 	sub	fp,r20,fp
 40054e8:	1705883a 	add	r2,r2,fp
 40054ec:	b0800015 	stw	r2,0(r22)
 40054f0:	a08001cc 	andi	r2,r20,7
 40054f4:	1000a526 	beq	r2,zero,400578c <_malloc_r+0x654>
 40054f8:	a0a9c83a 	sub	r20,r20,r2
 40054fc:	00c40204 	movi	r3,4104
 4005500:	a5000204 	addi	r20,r20,8
 4005504:	1885c83a 	sub	r2,r3,r2
 4005508:	a5c7883a 	add	r3,r20,r23
 400550c:	18c3ffcc 	andi	r3,r3,4095
 4005510:	10efc83a 	sub	r23,r2,r3
 4005514:	9009883a 	mov	r4,r18
 4005518:	b80b883a 	mov	r5,r23
 400551c:	40074dc0 	call	40074dc <_sbrk_r>
 4005520:	00ffffc4 	movi	r3,-1
 4005524:	10c0cc26 	beq	r2,r3,4005858 <_malloc_r+0x720>
 4005528:	1505c83a 	sub	r2,r2,r20
 400552c:	b887883a 	add	r3,r23,r2
 4005530:	18c00054 	ori	r3,r3,1
 4005534:	b0800017 	ldw	r2,0(r22)
 4005538:	9d000215 	stw	r20,8(r19)
 400553c:	a0c00115 	stw	r3,4(r20)
 4005540:	b885883a 	add	r2,r23,r2
 4005544:	b0800015 	stw	r2,0(r22)
 4005548:	84c00e26 	beq	r16,r19,4005584 <_malloc_r+0x44c>
 400554c:	00c003c4 	movi	r3,15
 4005550:	1d40902e 	bgeu	r3,r21,4005794 <_malloc_r+0x65c>
 4005554:	ad7ffd04 	addi	r21,r21,-12
 4005558:	013ffe04 	movi	r4,-8
 400555c:	a908703a 	and	r4,r21,r4
 4005560:	810b883a 	add	r5,r16,r4
 4005564:	01800144 	movi	r6,5
 4005568:	29800115 	stw	r6,4(r5)
 400556c:	29800215 	stw	r6,8(r5)
 4005570:	81400117 	ldw	r5,4(r16)
 4005574:	2940004c 	andi	r5,r5,1
 4005578:	214ab03a 	or	r5,r4,r5
 400557c:	81400115 	stw	r5,4(r16)
 4005580:	1900ae36 	bltu	r3,r4,400583c <_malloc_r+0x704>
 4005584:	d0e6a917 	ldw	r3,-25948(gp)
 4005588:	1880012e 	bgeu	r3,r2,4005590 <_malloc_r+0x458>
 400558c:	d0a6a915 	stw	r2,-25948(gp)
 4005590:	d0e6a817 	ldw	r3,-25952(gp)
 4005594:	9c000217 	ldw	r16,8(r19)
 4005598:	1880012e 	bgeu	r3,r2,40055a0 <_malloc_r+0x468>
 400559c:	d0a6a815 	stw	r2,-25952(gp)
 40055a0:	80c00117 	ldw	r3,4(r16)
 40055a4:	00bfff04 	movi	r2,-4
 40055a8:	1886703a 	and	r3,r3,r2
 40055ac:	1c45c83a 	sub	r2,r3,r17
 40055b0:	1c400236 	bltu	r3,r17,40055bc <_malloc_r+0x484>
 40055b4:	00c003c4 	movi	r3,15
 40055b8:	18800416 	blt	r3,r2,40055cc <_malloc_r+0x494>
 40055bc:	9009883a 	mov	r4,r18
 40055c0:	400a42c0 	call	400a42c <__malloc_unlock>
 40055c4:	0005883a 	mov	r2,zero
 40055c8:	003f0906 	br	40051f0 <__alt_data_end+0xfe0051f0>
 40055cc:	88c00054 	ori	r3,r17,1
 40055d0:	10800054 	ori	r2,r2,1
 40055d4:	80c00115 	stw	r3,4(r16)
 40055d8:	8463883a 	add	r17,r16,r17
 40055dc:	88800115 	stw	r2,4(r17)
 40055e0:	9009883a 	mov	r4,r18
 40055e4:	9c400215 	stw	r17,8(r19)
 40055e8:	400a42c0 	call	400a42c <__malloc_unlock>
 40055ec:	80800204 	addi	r2,r16,8
 40055f0:	003eff06 	br	40051f0 <__alt_data_end+0xfe0051f0>
 40055f4:	00800504 	movi	r2,20
 40055f8:	1100492e 	bgeu	r2,r4,4005720 <_malloc_r+0x5e8>
 40055fc:	00801504 	movi	r2,84
 4005600:	11005c36 	bltu	r2,r4,4005774 <_malloc_r+0x63c>
 4005604:	8808d33a 	srli	r4,r17,12
 4005608:	21001b84 	addi	r4,r4,110
 400560c:	210b883a 	add	r5,r4,r4
 4005610:	003f1006 	br	4005254 <__alt_data_end+0xfe005254>
 4005614:	1006d27a 	srli	r3,r2,9
 4005618:	01400104 	movi	r5,4
 400561c:	28c0432e 	bgeu	r5,r3,400572c <_malloc_r+0x5f4>
 4005620:	01400504 	movi	r5,20
 4005624:	28c07036 	bltu	r5,r3,40057e8 <_malloc_r+0x6b0>
 4005628:	194016c4 	addi	r5,r3,91
 400562c:	294d883a 	add	r6,r5,r5
 4005630:	318d883a 	add	r6,r6,r6
 4005634:	318d883a 	add	r6,r6,r6
 4005638:	998d883a 	add	r6,r19,r6
 400563c:	30c00217 	ldw	r3,8(r6)
 4005640:	01c10074 	movhi	r7,1025
 4005644:	39f33204 	addi	r7,r7,-13112
 4005648:	19805726 	beq	r3,r6,40057a8 <_malloc_r+0x670>
 400564c:	01ffff04 	movi	r7,-4
 4005650:	19400117 	ldw	r5,4(r3)
 4005654:	29ca703a 	and	r5,r5,r7
 4005658:	1140022e 	bgeu	r2,r5,4005664 <_malloc_r+0x52c>
 400565c:	18c00217 	ldw	r3,8(r3)
 4005660:	30fffb1e 	bne	r6,r3,4005650 <__alt_data_end+0xfe005650>
 4005664:	19400317 	ldw	r5,12(r3)
 4005668:	98800117 	ldw	r2,4(r19)
 400566c:	81400315 	stw	r5,12(r16)
 4005670:	80c00215 	stw	r3,8(r16)
 4005674:	2c000215 	stw	r16,8(r5)
 4005678:	1c000315 	stw	r16,12(r3)
 400567c:	003f2b06 	br	400532c <__alt_data_end+0xfe00532c>
 4005680:	8445883a 	add	r2,r16,r17
 4005684:	8c400054 	ori	r17,r17,1
 4005688:	18800515 	stw	r2,20(r3)
 400568c:	18800415 	stw	r2,16(r3)
 4005690:	29000054 	ori	r4,r5,1
 4005694:	1147883a 	add	r3,r2,r5
 4005698:	84400115 	stw	r17,4(r16)
 400569c:	11000115 	stw	r4,4(r2)
 40056a0:	12400315 	stw	r9,12(r2)
 40056a4:	12400215 	stw	r9,8(r2)
 40056a8:	19400015 	stw	r5,0(r3)
 40056ac:	9009883a 	mov	r4,r18
 40056b0:	400a42c0 	call	400a42c <__malloc_unlock>
 40056b4:	80800204 	addi	r2,r16,8
 40056b8:	003ecd06 	br	40051f0 <__alt_data_end+0xfe0051f0>
 40056bc:	18800117 	ldw	r2,4(r3)
 40056c0:	003f1a06 	br	400532c <__alt_data_end+0xfe00532c>
 40056c4:	5ac00044 	addi	r11,r11,1
 40056c8:	588000cc 	andi	r2,r11,3
 40056cc:	52800204 	addi	r10,r10,8
 40056d0:	103f2e1e 	bne	r2,zero,400538c <__alt_data_end+0xfe00538c>
 40056d4:	20c000cc 	andi	r3,r4,3
 40056d8:	60bffe04 	addi	r2,r12,-8
 40056dc:	18006f26 	beq	r3,zero,400589c <_malloc_r+0x764>
 40056e0:	63000017 	ldw	r12,0(r12)
 40056e4:	213fffc4 	addi	r4,r4,-1
 40056e8:	60bffa26 	beq	r12,r2,40056d4 <__alt_data_end+0xfe0056d4>
 40056ec:	98800117 	ldw	r2,4(r19)
 40056f0:	294b883a 	add	r5,r5,r5
 40056f4:	117f5a36 	bltu	r2,r5,4005460 <__alt_data_end+0xfe005460>
 40056f8:	283f5926 	beq	r5,zero,4005460 <__alt_data_end+0xfe005460>
 40056fc:	1146703a 	and	r3,r2,r5
 4005700:	18001626 	beq	r3,zero,400575c <_malloc_r+0x624>
 4005704:	5809883a 	mov	r4,r11
 4005708:	003f1a06 	br	4005374 <__alt_data_end+0xfe005374>
 400570c:	80800204 	addi	r2,r16,8
 4005710:	84000517 	ldw	r16,20(r16)
 4005714:	143ea81e 	bne	r2,r16,40051b8 <__alt_data_end+0xfe0051b8>
 4005718:	21000084 	addi	r4,r4,2
 400571c:	003ee306 	br	40052ac <__alt_data_end+0xfe0052ac>
 4005720:	210016c4 	addi	r4,r4,91
 4005724:	210b883a 	add	r5,r4,r4
 4005728:	003eca06 	br	4005254 <__alt_data_end+0xfe005254>
 400572c:	100ad1ba 	srli	r5,r2,6
 4005730:	29400e04 	addi	r5,r5,56
 4005734:	294d883a 	add	r6,r5,r5
 4005738:	003fbd06 	br	4005630 <__alt_data_end+0xfe005630>
 400573c:	84ff6026 	beq	r16,r19,40054c0 <__alt_data_end+0xfe0054c0>
 4005740:	00810074 	movhi	r2,1025
 4005744:	10b33204 	addi	r2,r2,-13112
 4005748:	14000217 	ldw	r16,8(r2)
 400574c:	00bfff04 	movi	r2,-4
 4005750:	80c00117 	ldw	r3,4(r16)
 4005754:	1886703a 	and	r3,r3,r2
 4005758:	003f9406 	br	40055ac <__alt_data_end+0xfe0055ac>
 400575c:	294b883a 	add	r5,r5,r5
 4005760:	1146703a 	and	r3,r2,r5
 4005764:	5ac00104 	addi	r11,r11,4
 4005768:	183ffc26 	beq	r3,zero,400575c <__alt_data_end+0xfe00575c>
 400576c:	5809883a 	mov	r4,r11
 4005770:	003f0006 	br	4005374 <__alt_data_end+0xfe005374>
 4005774:	00805504 	movi	r2,340
 4005778:	11001336 	bltu	r2,r4,40057c8 <_malloc_r+0x690>
 400577c:	8808d3fa 	srli	r4,r17,15
 4005780:	21001dc4 	addi	r4,r4,119
 4005784:	210b883a 	add	r5,r4,r4
 4005788:	003eb206 	br	4005254 <__alt_data_end+0xfe005254>
 400578c:	00840004 	movi	r2,4096
 4005790:	003f5d06 	br	4005508 <__alt_data_end+0xfe005508>
 4005794:	00800044 	movi	r2,1
 4005798:	a0800115 	stw	r2,4(r20)
 400579c:	a021883a 	mov	r16,r20
 40057a0:	0007883a 	mov	r3,zero
 40057a4:	003f8106 	br	40055ac <__alt_data_end+0xfe0055ac>
 40057a8:	280bd0ba 	srai	r5,r5,2
 40057ac:	01800044 	movi	r6,1
 40057b0:	38800117 	ldw	r2,4(r7)
 40057b4:	314c983a 	sll	r6,r6,r5
 40057b8:	180b883a 	mov	r5,r3
 40057bc:	3084b03a 	or	r2,r6,r2
 40057c0:	38800115 	stw	r2,4(r7)
 40057c4:	003fa906 	br	400566c <__alt_data_end+0xfe00566c>
 40057c8:	00815504 	movi	r2,1364
 40057cc:	11001836 	bltu	r2,r4,4005830 <_malloc_r+0x6f8>
 40057d0:	8808d4ba 	srli	r4,r17,18
 40057d4:	21001f04 	addi	r4,r4,124
 40057d8:	210b883a 	add	r5,r4,r4
 40057dc:	003e9d06 	br	4005254 <__alt_data_end+0xfe005254>
 40057e0:	bdc00404 	addi	r23,r23,16
 40057e4:	003f2f06 	br	40054a4 <__alt_data_end+0xfe0054a4>
 40057e8:	01401504 	movi	r5,84
 40057ec:	28c01f36 	bltu	r5,r3,400586c <_malloc_r+0x734>
 40057f0:	100ad33a 	srli	r5,r2,12
 40057f4:	29401b84 	addi	r5,r5,110
 40057f8:	294d883a 	add	r6,r5,r5
 40057fc:	003f8c06 	br	4005630 <__alt_data_end+0xfe005630>
 4005800:	9c000217 	ldw	r16,8(r19)
 4005804:	00bfff04 	movi	r2,-4
 4005808:	80c00117 	ldw	r3,4(r16)
 400580c:	1886703a 	and	r3,r3,r2
 4005810:	003f6606 	br	40055ac <__alt_data_end+0xfe0055ac>
 4005814:	e0c3ffcc 	andi	r3,fp,4095
 4005818:	183f2f1e 	bne	r3,zero,40054d8 <__alt_data_end+0xfe0054d8>
 400581c:	98c00217 	ldw	r3,8(r19)
 4005820:	bd49883a 	add	r4,r23,r21
 4005824:	21000054 	ori	r4,r4,1
 4005828:	19000115 	stw	r4,4(r3)
 400582c:	003f5506 	br	4005584 <__alt_data_end+0xfe005584>
 4005830:	01403f04 	movi	r5,252
 4005834:	01001f84 	movi	r4,126
 4005838:	003e8606 	br	4005254 <__alt_data_end+0xfe005254>
 400583c:	9009883a 	mov	r4,r18
 4005840:	81400204 	addi	r5,r16,8
 4005844:	40045a00 	call	40045a0 <_free_r>
 4005848:	00810074 	movhi	r2,1025
 400584c:	10bf6804 	addi	r2,r2,-608
 4005850:	10800017 	ldw	r2,0(r2)
 4005854:	003f4b06 	br	4005584 <__alt_data_end+0xfe005584>
 4005858:	00c00044 	movi	r3,1
 400585c:	002f883a 	mov	r23,zero
 4005860:	003f3406 	br	4005534 <__alt_data_end+0xfe005534>
 4005864:	d5200315 	stw	r20,-32756(gp)
 4005868:	003f2106 	br	40054f0 <__alt_data_end+0xfe0054f0>
 400586c:	01405504 	movi	r5,340
 4005870:	28c00436 	bltu	r5,r3,4005884 <_malloc_r+0x74c>
 4005874:	100ad3fa 	srli	r5,r2,15
 4005878:	29401dc4 	addi	r5,r5,119
 400587c:	294d883a 	add	r6,r5,r5
 4005880:	003f6b06 	br	4005630 <__alt_data_end+0xfe005630>
 4005884:	01415504 	movi	r5,1364
 4005888:	28c00936 	bltu	r5,r3,40058b0 <_malloc_r+0x778>
 400588c:	100ad4ba 	srli	r5,r2,18
 4005890:	29401f04 	addi	r5,r5,124
 4005894:	294d883a 	add	r6,r5,r5
 4005898:	003f6506 	br	4005630 <__alt_data_end+0xfe005630>
 400589c:	98800117 	ldw	r2,4(r19)
 40058a0:	0146303a 	nor	r3,zero,r5
 40058a4:	1884703a 	and	r2,r3,r2
 40058a8:	98800115 	stw	r2,4(r19)
 40058ac:	003f9006 	br	40056f0 <__alt_data_end+0xfe0056f0>
 40058b0:	01803f04 	movi	r6,252
 40058b4:	01401f84 	movi	r5,126
 40058b8:	003f5d06 	br	4005630 <__alt_data_end+0xfe005630>

040058bc <memchr>:
 40058bc:	008000c4 	movi	r2,3
 40058c0:	29403fcc 	andi	r5,r5,255
 40058c4:	1180282e 	bgeu	r2,r6,4005968 <memchr+0xac>
 40058c8:	2086703a 	and	r3,r4,r2
 40058cc:	1800351e 	bne	r3,zero,40059a4 <memchr+0xe8>
 40058d0:	2816923a 	slli	r11,r5,8
 40058d4:	2093883a 	add	r9,r4,r2
 40058d8:	22000084 	addi	r8,r4,2
 40058dc:	5957883a 	add	r11,r11,r5
 40058e0:	5816923a 	slli	r11,r11,8
 40058e4:	20c00044 	addi	r3,r4,1
 40058e8:	037fbff4 	movhi	r13,65279
 40058ec:	6b7fbfc4 	addi	r13,r13,-257
 40058f0:	5957883a 	add	r11,r11,r5
 40058f4:	5816923a 	slli	r11,r11,8
 40058f8:	03202074 	movhi	r12,32897
 40058fc:	63202004 	addi	r12,r12,-32640
 4005900:	101d883a 	mov	r14,r2
 4005904:	5957883a 	add	r11,r11,r5
 4005908:	21c00017 	ldw	r7,0(r4)
 400590c:	31bfff04 	addi	r6,r6,-4
 4005910:	1805883a 	mov	r2,r3
 4005914:	3acef03a 	xor	r7,r7,r11
 4005918:	3b55883a 	add	r10,r7,r13
 400591c:	01ce303a 	nor	r7,zero,r7
 4005920:	51ce703a 	and	r7,r10,r7
 4005924:	3b0e703a 	and	r7,r7,r12
 4005928:	38000a26 	beq	r7,zero,4005954 <memchr+0x98>
 400592c:	21c00003 	ldbu	r7,0(r4)
 4005930:	39401e26 	beq	r7,r5,40059ac <memchr+0xf0>
 4005934:	19c00003 	ldbu	r7,0(r3)
 4005938:	39401926 	beq	r7,r5,40059a0 <memchr+0xe4>
 400593c:	41c00003 	ldbu	r7,0(r8)
 4005940:	4005883a 	mov	r2,r8
 4005944:	39401626 	beq	r7,r5,40059a0 <memchr+0xe4>
 4005948:	49c00003 	ldbu	r7,0(r9)
 400594c:	4805883a 	mov	r2,r9
 4005950:	39401326 	beq	r7,r5,40059a0 <memchr+0xe4>
 4005954:	21000104 	addi	r4,r4,4
 4005958:	4a400104 	addi	r9,r9,4
 400595c:	42000104 	addi	r8,r8,4
 4005960:	18c00104 	addi	r3,r3,4
 4005964:	71bfe836 	bltu	r14,r6,4005908 <__alt_data_end+0xfe005908>
 4005968:	2005883a 	mov	r2,r4
 400596c:	30000a26 	beq	r6,zero,4005998 <memchr+0xdc>
 4005970:	10c00003 	ldbu	r3,0(r2)
 4005974:	19400a26 	beq	r3,r5,40059a0 <memchr+0xe4>
 4005978:	10c00044 	addi	r3,r2,1
 400597c:	118d883a 	add	r6,r2,r6
 4005980:	00000306 	br	4005990 <memchr+0xd4>
 4005984:	11000003 	ldbu	r4,0(r2)
 4005988:	18c00044 	addi	r3,r3,1
 400598c:	21400426 	beq	r4,r5,40059a0 <memchr+0xe4>
 4005990:	1805883a 	mov	r2,r3
 4005994:	19bffb1e 	bne	r3,r6,4005984 <__alt_data_end+0xfe005984>
 4005998:	0005883a 	mov	r2,zero
 400599c:	f800283a 	ret
 40059a0:	f800283a 	ret
 40059a4:	2005883a 	mov	r2,r4
 40059a8:	003ff106 	br	4005970 <__alt_data_end+0xfe005970>
 40059ac:	2005883a 	mov	r2,r4
 40059b0:	f800283a 	ret

040059b4 <memcpy>:
 40059b4:	defffb04 	addi	sp,sp,-20
 40059b8:	dc000015 	stw	r16,0(sp)
 40059bc:	dfc00415 	stw	ra,16(sp)
 40059c0:	dcc00315 	stw	r19,12(sp)
 40059c4:	dc800215 	stw	r18,8(sp)
 40059c8:	dc400115 	stw	r17,4(sp)
 40059cc:	00c003c4 	movi	r3,15
 40059d0:	2021883a 	mov	r16,r4
 40059d4:	3005883a 	mov	r2,r6
 40059d8:	1980032e 	bgeu	r3,r6,40059e8 <memcpy+0x34>
 40059dc:	2906b03a 	or	r3,r5,r4
 40059e0:	18c000cc 	andi	r3,r3,3
 40059e4:	18001026 	beq	r3,zero,4005a28 <memcpy+0x74>
 40059e8:	8007883a 	mov	r3,r16
 40059ec:	288f883a 	add	r7,r5,r2
 40059f0:	10000526 	beq	r2,zero,4005a08 <memcpy+0x54>
 40059f4:	29800003 	ldbu	r6,0(r5)
 40059f8:	18c00044 	addi	r3,r3,1
 40059fc:	29400044 	addi	r5,r5,1
 4005a00:	19bfffc5 	stb	r6,-1(r3)
 4005a04:	29fffb1e 	bne	r5,r7,40059f4 <__alt_data_end+0xfe0059f4>
 4005a08:	8005883a 	mov	r2,r16
 4005a0c:	dfc00417 	ldw	ra,16(sp)
 4005a10:	dcc00317 	ldw	r19,12(sp)
 4005a14:	dc800217 	ldw	r18,8(sp)
 4005a18:	dc400117 	ldw	r17,4(sp)
 4005a1c:	dc000017 	ldw	r16,0(sp)
 4005a20:	dec00504 	addi	sp,sp,20
 4005a24:	f800283a 	ret
 4005a28:	32bffc04 	addi	r10,r6,-16
 4005a2c:	5014d13a 	srli	r10,r10,4
 4005a30:	20800404 	addi	r2,r4,16
 4005a34:	2007883a 	mov	r3,r4
 4005a38:	5008913a 	slli	r4,r10,4
 4005a3c:	280f883a 	mov	r7,r5
 4005a40:	1105883a 	add	r2,r2,r4
 4005a44:	3a000017 	ldw	r8,0(r7)
 4005a48:	18c00404 	addi	r3,r3,16
 4005a4c:	39c00404 	addi	r7,r7,16
 4005a50:	1a3ffc15 	stw	r8,-16(r3)
 4005a54:	3a3ffd17 	ldw	r8,-12(r7)
 4005a58:	1a3ffd15 	stw	r8,-12(r3)
 4005a5c:	3a3ffe17 	ldw	r8,-8(r7)
 4005a60:	1a3ffe15 	stw	r8,-8(r3)
 4005a64:	3a3fff17 	ldw	r8,-4(r7)
 4005a68:	1a3fff15 	stw	r8,-4(r3)
 4005a6c:	18bff51e 	bne	r3,r2,4005a44 <__alt_data_end+0xfe005a44>
 4005a70:	52800044 	addi	r10,r10,1
 4005a74:	5014913a 	slli	r10,r10,4
 4005a78:	308003cc 	andi	r2,r6,15
 4005a7c:	010000c4 	movi	r4,3
 4005a80:	8287883a 	add	r3,r16,r10
 4005a84:	2a95883a 	add	r10,r5,r10
 4005a88:	2080182e 	bgeu	r4,r2,4005aec <memcpy+0x138>
 4005a8c:	147fff04 	addi	r17,r2,-4
 4005a90:	8808d0ba 	srli	r4,r17,2
 4005a94:	1a400104 	addi	r9,r3,4
 4005a98:	180d883a 	mov	r6,r3
 4005a9c:	2105883a 	add	r2,r4,r4
 4005aa0:	1085883a 	add	r2,r2,r2
 4005aa4:	4893883a 	add	r9,r9,r2
 4005aa8:	500f883a 	mov	r7,r10
 4005aac:	3a000017 	ldw	r8,0(r7)
 4005ab0:	31800104 	addi	r6,r6,4
 4005ab4:	39c00104 	addi	r7,r7,4
 4005ab8:	323fff15 	stw	r8,-4(r6)
 4005abc:	327ffb1e 	bne	r6,r9,4005aac <__alt_data_end+0xfe005aac>
 4005ac0:	20800044 	addi	r2,r4,1
 4005ac4:	1085883a 	add	r2,r2,r2
 4005ac8:	1085883a 	add	r2,r2,r2
 4005acc:	017fff04 	movi	r5,-4
 4005ad0:	18a5883a 	add	r18,r3,r2
 4005ad4:	50a7883a 	add	r19,r10,r2
 4005ad8:	40097e40 	call	40097e4 <__mulsi3>
 4005adc:	1445883a 	add	r2,r2,r17
 4005ae0:	980b883a 	mov	r5,r19
 4005ae4:	9007883a 	mov	r3,r18
 4005ae8:	003fc006 	br	40059ec <__alt_data_end+0xfe0059ec>
 4005aec:	500b883a 	mov	r5,r10
 4005af0:	003fbe06 	br	40059ec <__alt_data_end+0xfe0059ec>

04005af4 <memmove>:
 4005af4:	defffb04 	addi	sp,sp,-20
 4005af8:	dc000015 	stw	r16,0(sp)
 4005afc:	dfc00415 	stw	ra,16(sp)
 4005b00:	dcc00315 	stw	r19,12(sp)
 4005b04:	dc800215 	stw	r18,8(sp)
 4005b08:	dc400115 	stw	r17,4(sp)
 4005b0c:	2021883a 	mov	r16,r4
 4005b10:	300f883a 	mov	r7,r6
 4005b14:	2900122e 	bgeu	r5,r4,4005b60 <memmove+0x6c>
 4005b18:	2987883a 	add	r3,r5,r6
 4005b1c:	20c0102e 	bgeu	r4,r3,4005b60 <memmove+0x6c>
 4005b20:	218b883a 	add	r5,r4,r6
 4005b24:	1989c83a 	sub	r4,r3,r6
 4005b28:	30000526 	beq	r6,zero,4005b40 <memmove+0x4c>
 4005b2c:	18ffffc4 	addi	r3,r3,-1
 4005b30:	18800003 	ldbu	r2,0(r3)
 4005b34:	297fffc4 	addi	r5,r5,-1
 4005b38:	28800005 	stb	r2,0(r5)
 4005b3c:	193ffb1e 	bne	r3,r4,4005b2c <__alt_data_end+0xfe005b2c>
 4005b40:	8005883a 	mov	r2,r16
 4005b44:	dfc00417 	ldw	ra,16(sp)
 4005b48:	dcc00317 	ldw	r19,12(sp)
 4005b4c:	dc800217 	ldw	r18,8(sp)
 4005b50:	dc400117 	ldw	r17,4(sp)
 4005b54:	dc000017 	ldw	r16,0(sp)
 4005b58:	dec00504 	addi	sp,sp,20
 4005b5c:	f800283a 	ret
 4005b60:	008003c4 	movi	r2,15
 4005b64:	1180422e 	bgeu	r2,r6,4005c70 <memmove+0x17c>
 4005b68:	2c04b03a 	or	r2,r5,r16
 4005b6c:	108000cc 	andi	r2,r2,3
 4005b70:	10003f1e 	bne	r2,zero,4005c70 <memmove+0x17c>
 4005b74:	32bffc04 	addi	r10,r6,-16
 4005b78:	5014d13a 	srli	r10,r10,4
 4005b7c:	81000404 	addi	r4,r16,16
 4005b80:	8007883a 	mov	r3,r16
 4005b84:	5004913a 	slli	r2,r10,4
 4005b88:	280f883a 	mov	r7,r5
 4005b8c:	2089883a 	add	r4,r4,r2
 4005b90:	38800017 	ldw	r2,0(r7)
 4005b94:	18c00404 	addi	r3,r3,16
 4005b98:	39c00404 	addi	r7,r7,16
 4005b9c:	18bffc15 	stw	r2,-16(r3)
 4005ba0:	38bffd17 	ldw	r2,-12(r7)
 4005ba4:	18bffd15 	stw	r2,-12(r3)
 4005ba8:	38bffe17 	ldw	r2,-8(r7)
 4005bac:	18bffe15 	stw	r2,-8(r3)
 4005bb0:	38bfff17 	ldw	r2,-4(r7)
 4005bb4:	18bfff15 	stw	r2,-4(r3)
 4005bb8:	193ff51e 	bne	r3,r4,4005b90 <__alt_data_end+0xfe005b90>
 4005bbc:	52800044 	addi	r10,r10,1
 4005bc0:	5014913a 	slli	r10,r10,4
 4005bc4:	31c003cc 	andi	r7,r6,15
 4005bc8:	008000c4 	movi	r2,3
 4005bcc:	8287883a 	add	r3,r16,r10
 4005bd0:	2a95883a 	add	r10,r5,r10
 4005bd4:	11c0282e 	bgeu	r2,r7,4005c78 <memmove+0x184>
 4005bd8:	3c7fff04 	addi	r17,r7,-4
 4005bdc:	8808d0ba 	srli	r4,r17,2
 4005be0:	1a400104 	addi	r9,r3,4
 4005be4:	180d883a 	mov	r6,r3
 4005be8:	2105883a 	add	r2,r4,r4
 4005bec:	1085883a 	add	r2,r2,r2
 4005bf0:	4893883a 	add	r9,r9,r2
 4005bf4:	5005883a 	mov	r2,r10
 4005bf8:	12000017 	ldw	r8,0(r2)
 4005bfc:	31800104 	addi	r6,r6,4
 4005c00:	10800104 	addi	r2,r2,4
 4005c04:	323fff15 	stw	r8,-4(r6)
 4005c08:	327ffb1e 	bne	r6,r9,4005bf8 <__alt_data_end+0xfe005bf8>
 4005c0c:	20800044 	addi	r2,r4,1
 4005c10:	1085883a 	add	r2,r2,r2
 4005c14:	1085883a 	add	r2,r2,r2
 4005c18:	017fff04 	movi	r5,-4
 4005c1c:	18a5883a 	add	r18,r3,r2
 4005c20:	50a7883a 	add	r19,r10,r2
 4005c24:	40097e40 	call	40097e4 <__mulsi3>
 4005c28:	144f883a 	add	r7,r2,r17
 4005c2c:	980b883a 	mov	r5,r19
 4005c30:	9007883a 	mov	r3,r18
 4005c34:	383fc226 	beq	r7,zero,4005b40 <__alt_data_end+0xfe005b40>
 4005c38:	19cf883a 	add	r7,r3,r7
 4005c3c:	29800003 	ldbu	r6,0(r5)
 4005c40:	18c00044 	addi	r3,r3,1
 4005c44:	29400044 	addi	r5,r5,1
 4005c48:	19bfffc5 	stb	r6,-1(r3)
 4005c4c:	19fffb1e 	bne	r3,r7,4005c3c <__alt_data_end+0xfe005c3c>
 4005c50:	8005883a 	mov	r2,r16
 4005c54:	dfc00417 	ldw	ra,16(sp)
 4005c58:	dcc00317 	ldw	r19,12(sp)
 4005c5c:	dc800217 	ldw	r18,8(sp)
 4005c60:	dc400117 	ldw	r17,4(sp)
 4005c64:	dc000017 	ldw	r16,0(sp)
 4005c68:	dec00504 	addi	sp,sp,20
 4005c6c:	f800283a 	ret
 4005c70:	8007883a 	mov	r3,r16
 4005c74:	003fef06 	br	4005c34 <__alt_data_end+0xfe005c34>
 4005c78:	500b883a 	mov	r5,r10
 4005c7c:	003fed06 	br	4005c34 <__alt_data_end+0xfe005c34>

04005c80 <_Balloc>:
 4005c80:	20801317 	ldw	r2,76(r4)
 4005c84:	defffc04 	addi	sp,sp,-16
 4005c88:	dc400115 	stw	r17,4(sp)
 4005c8c:	dc000015 	stw	r16,0(sp)
 4005c90:	dfc00315 	stw	ra,12(sp)
 4005c94:	dc800215 	stw	r18,8(sp)
 4005c98:	2023883a 	mov	r17,r4
 4005c9c:	2821883a 	mov	r16,r5
 4005ca0:	10000f26 	beq	r2,zero,4005ce0 <_Balloc+0x60>
 4005ca4:	8407883a 	add	r3,r16,r16
 4005ca8:	18c7883a 	add	r3,r3,r3
 4005cac:	10c7883a 	add	r3,r2,r3
 4005cb0:	18800017 	ldw	r2,0(r3)
 4005cb4:	10001126 	beq	r2,zero,4005cfc <_Balloc+0x7c>
 4005cb8:	11000017 	ldw	r4,0(r2)
 4005cbc:	19000015 	stw	r4,0(r3)
 4005cc0:	10000415 	stw	zero,16(r2)
 4005cc4:	10000315 	stw	zero,12(r2)
 4005cc8:	dfc00317 	ldw	ra,12(sp)
 4005ccc:	dc800217 	ldw	r18,8(sp)
 4005cd0:	dc400117 	ldw	r17,4(sp)
 4005cd4:	dc000017 	ldw	r16,0(sp)
 4005cd8:	dec00404 	addi	sp,sp,16
 4005cdc:	f800283a 	ret
 4005ce0:	01400104 	movi	r5,4
 4005ce4:	01800404 	movi	r6,16
 4005ce8:	40078e80 	call	40078e8 <_calloc_r>
 4005cec:	88801315 	stw	r2,76(r17)
 4005cf0:	103fec1e 	bne	r2,zero,4005ca4 <__alt_data_end+0xfe005ca4>
 4005cf4:	0005883a 	mov	r2,zero
 4005cf8:	003ff306 	br	4005cc8 <__alt_data_end+0xfe005cc8>
 4005cfc:	01400044 	movi	r5,1
 4005d00:	2c24983a 	sll	r18,r5,r16
 4005d04:	8809883a 	mov	r4,r17
 4005d08:	91800144 	addi	r6,r18,5
 4005d0c:	318d883a 	add	r6,r6,r6
 4005d10:	318d883a 	add	r6,r6,r6
 4005d14:	40078e80 	call	40078e8 <_calloc_r>
 4005d18:	103ff626 	beq	r2,zero,4005cf4 <__alt_data_end+0xfe005cf4>
 4005d1c:	14000115 	stw	r16,4(r2)
 4005d20:	14800215 	stw	r18,8(r2)
 4005d24:	003fe606 	br	4005cc0 <__alt_data_end+0xfe005cc0>

04005d28 <_Bfree>:
 4005d28:	28000826 	beq	r5,zero,4005d4c <_Bfree+0x24>
 4005d2c:	28c00117 	ldw	r3,4(r5)
 4005d30:	20801317 	ldw	r2,76(r4)
 4005d34:	18c7883a 	add	r3,r3,r3
 4005d38:	18c7883a 	add	r3,r3,r3
 4005d3c:	10c5883a 	add	r2,r2,r3
 4005d40:	10c00017 	ldw	r3,0(r2)
 4005d44:	28c00015 	stw	r3,0(r5)
 4005d48:	11400015 	stw	r5,0(r2)
 4005d4c:	f800283a 	ret

04005d50 <__multadd>:
 4005d50:	defff604 	addi	sp,sp,-40
 4005d54:	dd400515 	stw	r21,20(sp)
 4005d58:	2d400417 	ldw	r21,16(r5)
 4005d5c:	df000815 	stw	fp,32(sp)
 4005d60:	ddc00715 	stw	r23,28(sp)
 4005d64:	dd800615 	stw	r22,24(sp)
 4005d68:	dd000415 	stw	r20,16(sp)
 4005d6c:	dc400115 	stw	r17,4(sp)
 4005d70:	dc000015 	stw	r16,0(sp)
 4005d74:	dfc00915 	stw	ra,36(sp)
 4005d78:	dcc00315 	stw	r19,12(sp)
 4005d7c:	dc800215 	stw	r18,8(sp)
 4005d80:	282d883a 	mov	r22,r5
 4005d84:	202f883a 	mov	r23,r4
 4005d88:	3029883a 	mov	r20,r6
 4005d8c:	3839883a 	mov	fp,r7
 4005d90:	2c000504 	addi	r16,r5,20
 4005d94:	0023883a 	mov	r17,zero
 4005d98:	84c00017 	ldw	r19,0(r16)
 4005d9c:	a00b883a 	mov	r5,r20
 4005da0:	8c400044 	addi	r17,r17,1
 4005da4:	993fffcc 	andi	r4,r19,65535
 4005da8:	40097e40 	call	40097e4 <__mulsi3>
 4005dac:	1725883a 	add	r18,r2,fp
 4005db0:	9808d43a 	srli	r4,r19,16
 4005db4:	9026d43a 	srli	r19,r18,16
 4005db8:	a00b883a 	mov	r5,r20
 4005dbc:	40097e40 	call	40097e4 <__mulsi3>
 4005dc0:	988f883a 	add	r7,r19,r2
 4005dc4:	3804943a 	slli	r2,r7,16
 4005dc8:	94bfffcc 	andi	r18,r18,65535
 4005dcc:	3838d43a 	srli	fp,r7,16
 4005dd0:	14a5883a 	add	r18,r2,r18
 4005dd4:	84800015 	stw	r18,0(r16)
 4005dd8:	84000104 	addi	r16,r16,4
 4005ddc:	8d7fee16 	blt	r17,r21,4005d98 <__alt_data_end+0xfe005d98>
 4005de0:	e0000926 	beq	fp,zero,4005e08 <__multadd+0xb8>
 4005de4:	b0800217 	ldw	r2,8(r22)
 4005de8:	a880140e 	bge	r21,r2,4005e3c <__multadd+0xec>
 4005dec:	a8800144 	addi	r2,r21,5
 4005df0:	1085883a 	add	r2,r2,r2
 4005df4:	1085883a 	add	r2,r2,r2
 4005df8:	b085883a 	add	r2,r22,r2
 4005dfc:	ad400044 	addi	r21,r21,1
 4005e00:	17000015 	stw	fp,0(r2)
 4005e04:	b5400415 	stw	r21,16(r22)
 4005e08:	b005883a 	mov	r2,r22
 4005e0c:	dfc00917 	ldw	ra,36(sp)
 4005e10:	df000817 	ldw	fp,32(sp)
 4005e14:	ddc00717 	ldw	r23,28(sp)
 4005e18:	dd800617 	ldw	r22,24(sp)
 4005e1c:	dd400517 	ldw	r21,20(sp)
 4005e20:	dd000417 	ldw	r20,16(sp)
 4005e24:	dcc00317 	ldw	r19,12(sp)
 4005e28:	dc800217 	ldw	r18,8(sp)
 4005e2c:	dc400117 	ldw	r17,4(sp)
 4005e30:	dc000017 	ldw	r16,0(sp)
 4005e34:	dec00a04 	addi	sp,sp,40
 4005e38:	f800283a 	ret
 4005e3c:	b1400117 	ldw	r5,4(r22)
 4005e40:	b809883a 	mov	r4,r23
 4005e44:	29400044 	addi	r5,r5,1
 4005e48:	4005c800 	call	4005c80 <_Balloc>
 4005e4c:	b1800417 	ldw	r6,16(r22)
 4005e50:	b1400304 	addi	r5,r22,12
 4005e54:	11000304 	addi	r4,r2,12
 4005e58:	31800084 	addi	r6,r6,2
 4005e5c:	318d883a 	add	r6,r6,r6
 4005e60:	318d883a 	add	r6,r6,r6
 4005e64:	1021883a 	mov	r16,r2
 4005e68:	40059b40 	call	40059b4 <memcpy>
 4005e6c:	b0c00117 	ldw	r3,4(r22)
 4005e70:	b8801317 	ldw	r2,76(r23)
 4005e74:	18c7883a 	add	r3,r3,r3
 4005e78:	18c7883a 	add	r3,r3,r3
 4005e7c:	10c5883a 	add	r2,r2,r3
 4005e80:	10c00017 	ldw	r3,0(r2)
 4005e84:	b0c00015 	stw	r3,0(r22)
 4005e88:	15800015 	stw	r22,0(r2)
 4005e8c:	802d883a 	mov	r22,r16
 4005e90:	003fd606 	br	4005dec <__alt_data_end+0xfe005dec>

04005e94 <__s2b>:
 4005e94:	defff904 	addi	sp,sp,-28
 4005e98:	dd000415 	stw	r20,16(sp)
 4005e9c:	dc400115 	stw	r17,4(sp)
 4005ea0:	2829883a 	mov	r20,r5
 4005ea4:	2023883a 	mov	r17,r4
 4005ea8:	01400244 	movi	r5,9
 4005eac:	39000204 	addi	r4,r7,8
 4005eb0:	dcc00315 	stw	r19,12(sp)
 4005eb4:	dc800215 	stw	r18,8(sp)
 4005eb8:	dfc00615 	stw	ra,24(sp)
 4005ebc:	dd400515 	stw	r21,20(sp)
 4005ec0:	dc000015 	stw	r16,0(sp)
 4005ec4:	3825883a 	mov	r18,r7
 4005ec8:	3027883a 	mov	r19,r6
 4005ecc:	40097280 	call	4009728 <__divsi3>
 4005ed0:	00c00044 	movi	r3,1
 4005ed4:	000b883a 	mov	r5,zero
 4005ed8:	1880030e 	bge	r3,r2,4005ee8 <__s2b+0x54>
 4005edc:	18c7883a 	add	r3,r3,r3
 4005ee0:	29400044 	addi	r5,r5,1
 4005ee4:	18bffd16 	blt	r3,r2,4005edc <__alt_data_end+0xfe005edc>
 4005ee8:	8809883a 	mov	r4,r17
 4005eec:	4005c800 	call	4005c80 <_Balloc>
 4005ef0:	d8c00717 	ldw	r3,28(sp)
 4005ef4:	10c00515 	stw	r3,20(r2)
 4005ef8:	00c00044 	movi	r3,1
 4005efc:	10c00415 	stw	r3,16(r2)
 4005f00:	00c00244 	movi	r3,9
 4005f04:	1cc0210e 	bge	r3,r19,4005f8c <__s2b+0xf8>
 4005f08:	a0eb883a 	add	r21,r20,r3
 4005f0c:	a821883a 	mov	r16,r21
 4005f10:	a4e9883a 	add	r20,r20,r19
 4005f14:	81c00007 	ldb	r7,0(r16)
 4005f18:	8809883a 	mov	r4,r17
 4005f1c:	84000044 	addi	r16,r16,1
 4005f20:	100b883a 	mov	r5,r2
 4005f24:	01800284 	movi	r6,10
 4005f28:	39fff404 	addi	r7,r7,-48
 4005f2c:	4005d500 	call	4005d50 <__multadd>
 4005f30:	853ff81e 	bne	r16,r20,4005f14 <__alt_data_end+0xfe005f14>
 4005f34:	ace1883a 	add	r16,r21,r19
 4005f38:	843ffe04 	addi	r16,r16,-8
 4005f3c:	9c800a0e 	bge	r19,r18,4005f68 <__s2b+0xd4>
 4005f40:	94e5c83a 	sub	r18,r18,r19
 4005f44:	84a5883a 	add	r18,r16,r18
 4005f48:	81c00007 	ldb	r7,0(r16)
 4005f4c:	8809883a 	mov	r4,r17
 4005f50:	84000044 	addi	r16,r16,1
 4005f54:	100b883a 	mov	r5,r2
 4005f58:	01800284 	movi	r6,10
 4005f5c:	39fff404 	addi	r7,r7,-48
 4005f60:	4005d500 	call	4005d50 <__multadd>
 4005f64:	84bff81e 	bne	r16,r18,4005f48 <__alt_data_end+0xfe005f48>
 4005f68:	dfc00617 	ldw	ra,24(sp)
 4005f6c:	dd400517 	ldw	r21,20(sp)
 4005f70:	dd000417 	ldw	r20,16(sp)
 4005f74:	dcc00317 	ldw	r19,12(sp)
 4005f78:	dc800217 	ldw	r18,8(sp)
 4005f7c:	dc400117 	ldw	r17,4(sp)
 4005f80:	dc000017 	ldw	r16,0(sp)
 4005f84:	dec00704 	addi	sp,sp,28
 4005f88:	f800283a 	ret
 4005f8c:	a4000284 	addi	r16,r20,10
 4005f90:	1827883a 	mov	r19,r3
 4005f94:	003fe906 	br	4005f3c <__alt_data_end+0xfe005f3c>

04005f98 <__hi0bits>:
 4005f98:	20bfffec 	andhi	r2,r4,65535
 4005f9c:	1000141e 	bne	r2,zero,4005ff0 <__hi0bits+0x58>
 4005fa0:	2008943a 	slli	r4,r4,16
 4005fa4:	00800404 	movi	r2,16
 4005fa8:	20ffc02c 	andhi	r3,r4,65280
 4005fac:	1800021e 	bne	r3,zero,4005fb8 <__hi0bits+0x20>
 4005fb0:	2008923a 	slli	r4,r4,8
 4005fb4:	10800204 	addi	r2,r2,8
 4005fb8:	20fc002c 	andhi	r3,r4,61440
 4005fbc:	1800021e 	bne	r3,zero,4005fc8 <__hi0bits+0x30>
 4005fc0:	2008913a 	slli	r4,r4,4
 4005fc4:	10800104 	addi	r2,r2,4
 4005fc8:	20f0002c 	andhi	r3,r4,49152
 4005fcc:	1800031e 	bne	r3,zero,4005fdc <__hi0bits+0x44>
 4005fd0:	2109883a 	add	r4,r4,r4
 4005fd4:	10800084 	addi	r2,r2,2
 4005fd8:	2109883a 	add	r4,r4,r4
 4005fdc:	20000316 	blt	r4,zero,4005fec <__hi0bits+0x54>
 4005fe0:	2110002c 	andhi	r4,r4,16384
 4005fe4:	2000041e 	bne	r4,zero,4005ff8 <__hi0bits+0x60>
 4005fe8:	00800804 	movi	r2,32
 4005fec:	f800283a 	ret
 4005ff0:	0005883a 	mov	r2,zero
 4005ff4:	003fec06 	br	4005fa8 <__alt_data_end+0xfe005fa8>
 4005ff8:	10800044 	addi	r2,r2,1
 4005ffc:	f800283a 	ret

04006000 <__lo0bits>:
 4006000:	20c00017 	ldw	r3,0(r4)
 4006004:	188001cc 	andi	r2,r3,7
 4006008:	10000826 	beq	r2,zero,400602c <__lo0bits+0x2c>
 400600c:	1880004c 	andi	r2,r3,1
 4006010:	1000211e 	bne	r2,zero,4006098 <__lo0bits+0x98>
 4006014:	1880008c 	andi	r2,r3,2
 4006018:	1000211e 	bne	r2,zero,40060a0 <__lo0bits+0xa0>
 400601c:	1806d0ba 	srli	r3,r3,2
 4006020:	00800084 	movi	r2,2
 4006024:	20c00015 	stw	r3,0(r4)
 4006028:	f800283a 	ret
 400602c:	18bfffcc 	andi	r2,r3,65535
 4006030:	10001326 	beq	r2,zero,4006080 <__lo0bits+0x80>
 4006034:	0005883a 	mov	r2,zero
 4006038:	19403fcc 	andi	r5,r3,255
 400603c:	2800021e 	bne	r5,zero,4006048 <__lo0bits+0x48>
 4006040:	1806d23a 	srli	r3,r3,8
 4006044:	10800204 	addi	r2,r2,8
 4006048:	194003cc 	andi	r5,r3,15
 400604c:	2800021e 	bne	r5,zero,4006058 <__lo0bits+0x58>
 4006050:	1806d13a 	srli	r3,r3,4
 4006054:	10800104 	addi	r2,r2,4
 4006058:	194000cc 	andi	r5,r3,3
 400605c:	2800021e 	bne	r5,zero,4006068 <__lo0bits+0x68>
 4006060:	1806d0ba 	srli	r3,r3,2
 4006064:	10800084 	addi	r2,r2,2
 4006068:	1940004c 	andi	r5,r3,1
 400606c:	2800081e 	bne	r5,zero,4006090 <__lo0bits+0x90>
 4006070:	1806d07a 	srli	r3,r3,1
 4006074:	1800051e 	bne	r3,zero,400608c <__lo0bits+0x8c>
 4006078:	00800804 	movi	r2,32
 400607c:	f800283a 	ret
 4006080:	1806d43a 	srli	r3,r3,16
 4006084:	00800404 	movi	r2,16
 4006088:	003feb06 	br	4006038 <__alt_data_end+0xfe006038>
 400608c:	10800044 	addi	r2,r2,1
 4006090:	20c00015 	stw	r3,0(r4)
 4006094:	f800283a 	ret
 4006098:	0005883a 	mov	r2,zero
 400609c:	f800283a 	ret
 40060a0:	1806d07a 	srli	r3,r3,1
 40060a4:	00800044 	movi	r2,1
 40060a8:	20c00015 	stw	r3,0(r4)
 40060ac:	f800283a 	ret

040060b0 <__i2b>:
 40060b0:	defffd04 	addi	sp,sp,-12
 40060b4:	dc000015 	stw	r16,0(sp)
 40060b8:	04000044 	movi	r16,1
 40060bc:	dc400115 	stw	r17,4(sp)
 40060c0:	2823883a 	mov	r17,r5
 40060c4:	800b883a 	mov	r5,r16
 40060c8:	dfc00215 	stw	ra,8(sp)
 40060cc:	4005c800 	call	4005c80 <_Balloc>
 40060d0:	14400515 	stw	r17,20(r2)
 40060d4:	14000415 	stw	r16,16(r2)
 40060d8:	dfc00217 	ldw	ra,8(sp)
 40060dc:	dc400117 	ldw	r17,4(sp)
 40060e0:	dc000017 	ldw	r16,0(sp)
 40060e4:	dec00304 	addi	sp,sp,12
 40060e8:	f800283a 	ret

040060ec <__multiply>:
 40060ec:	defff004 	addi	sp,sp,-64
 40060f0:	dc800815 	stw	r18,32(sp)
 40060f4:	dc400715 	stw	r17,28(sp)
 40060f8:	34800417 	ldw	r18,16(r6)
 40060fc:	2c400417 	ldw	r17,16(r5)
 4006100:	ddc00d15 	stw	r23,52(sp)
 4006104:	dc000615 	stw	r16,24(sp)
 4006108:	dfc00f15 	stw	ra,60(sp)
 400610c:	df000e15 	stw	fp,56(sp)
 4006110:	dd800c15 	stw	r22,48(sp)
 4006114:	dd400b15 	stw	r21,44(sp)
 4006118:	dd000a15 	stw	r20,40(sp)
 400611c:	dcc00915 	stw	r19,36(sp)
 4006120:	2821883a 	mov	r16,r5
 4006124:	302f883a 	mov	r23,r6
 4006128:	8c80050e 	bge	r17,r18,4006140 <__multiply+0x54>
 400612c:	8807883a 	mov	r3,r17
 4006130:	3021883a 	mov	r16,r6
 4006134:	9023883a 	mov	r17,r18
 4006138:	282f883a 	mov	r23,r5
 400613c:	1825883a 	mov	r18,r3
 4006140:	80800217 	ldw	r2,8(r16)
 4006144:	8c87883a 	add	r3,r17,r18
 4006148:	d8c00115 	stw	r3,4(sp)
 400614c:	81400117 	ldw	r5,4(r16)
 4006150:	10c0010e 	bge	r2,r3,4006158 <__multiply+0x6c>
 4006154:	29400044 	addi	r5,r5,1
 4006158:	4005c800 	call	4005c80 <_Balloc>
 400615c:	d8c00117 	ldw	r3,4(sp)
 4006160:	d8800515 	stw	r2,20(sp)
 4006164:	14c00504 	addi	r19,r2,20
 4006168:	1d400144 	addi	r21,r3,5
 400616c:	ad6b883a 	add	r21,r21,r21
 4006170:	ad6b883a 	add	r21,r21,r21
 4006174:	156b883a 	add	r21,r2,r21
 4006178:	dd400215 	stw	r21,8(sp)
 400617c:	9805883a 	mov	r2,r19
 4006180:	9d40042e 	bgeu	r19,r21,4006194 <__multiply+0xa8>
 4006184:	d8c00217 	ldw	r3,8(sp)
 4006188:	10000015 	stw	zero,0(r2)
 400618c:	10800104 	addi	r2,r2,4
 4006190:	10fffc36 	bltu	r2,r3,4006184 <__alt_data_end+0xfe006184>
 4006194:	94800144 	addi	r18,r18,5
 4006198:	94a5883a 	add	r18,r18,r18
 400619c:	94ad883a 	add	r22,r18,r18
 40061a0:	8c400144 	addi	r17,r17,5
 40061a4:	8c63883a 	add	r17,r17,r17
 40061a8:	bdad883a 	add	r22,r23,r22
 40061ac:	80c00504 	addi	r3,r16,20
 40061b0:	8c63883a 	add	r17,r17,r17
 40061b4:	bc800504 	addi	r18,r23,20
 40061b8:	dd800315 	stw	r22,12(sp)
 40061bc:	d8c00415 	stw	r3,16(sp)
 40061c0:	dcc00015 	stw	r19,0(sp)
 40061c4:	8463883a 	add	r17,r16,r17
 40061c8:	9580412e 	bgeu	r18,r22,40062d0 <__multiply+0x1e4>
 40061cc:	90800017 	ldw	r2,0(r18)
 40061d0:	173fffcc 	andi	fp,r2,65535
 40061d4:	e0001a26 	beq	fp,zero,4006240 <__multiply+0x154>
 40061d8:	dd000017 	ldw	r20,0(sp)
 40061dc:	dd800417 	ldw	r22,16(sp)
 40061e0:	002b883a 	mov	r21,zero
 40061e4:	b4c00017 	ldw	r19,0(r22)
 40061e8:	a4000017 	ldw	r16,0(r20)
 40061ec:	e00b883a 	mov	r5,fp
 40061f0:	993fffcc 	andi	r4,r19,65535
 40061f4:	40097e40 	call	40097e4 <__mulsi3>
 40061f8:	9808d43a 	srli	r4,r19,16
 40061fc:	817fffcc 	andi	r5,r16,65535
 4006200:	1145883a 	add	r2,r2,r5
 4006204:	e00b883a 	mov	r5,fp
 4006208:	1567883a 	add	r19,r2,r21
 400620c:	8020d43a 	srli	r16,r16,16
 4006210:	40097e40 	call	40097e4 <__mulsi3>
 4006214:	9808d43a 	srli	r4,r19,16
 4006218:	1405883a 	add	r2,r2,r16
 400621c:	a4c0000d 	sth	r19,0(r20)
 4006220:	110f883a 	add	r7,r2,r4
 4006224:	a1c0008d 	sth	r7,2(r20)
 4006228:	b5800104 	addi	r22,r22,4
 400622c:	382ad43a 	srli	r21,r7,16
 4006230:	a5000104 	addi	r20,r20,4
 4006234:	b47feb36 	bltu	r22,r17,40061e4 <__alt_data_end+0xfe0061e4>
 4006238:	a5400015 	stw	r21,0(r20)
 400623c:	90800017 	ldw	r2,0(r18)
 4006240:	1038d43a 	srli	fp,r2,16
 4006244:	e0001c26 	beq	fp,zero,40062b8 <__multiply+0x1cc>
 4006248:	d8c00017 	ldw	r3,0(sp)
 400624c:	dd000417 	ldw	r20,16(sp)
 4006250:	002b883a 	mov	r21,zero
 4006254:	1d800017 	ldw	r22,0(r3)
 4006258:	182f883a 	mov	r23,r3
 400625c:	b021883a 	mov	r16,r22
 4006260:	a4c00017 	ldw	r19,0(r20)
 4006264:	8020d43a 	srli	r16,r16,16
 4006268:	e00b883a 	mov	r5,fp
 400626c:	993fffcc 	andi	r4,r19,65535
 4006270:	40097e40 	call	40097e4 <__mulsi3>
 4006274:	1405883a 	add	r2,r2,r16
 4006278:	9808d43a 	srli	r4,r19,16
 400627c:	156b883a 	add	r21,r2,r21
 4006280:	bdc00104 	addi	r23,r23,4
 4006284:	bdbfff0d 	sth	r22,-4(r23)
 4006288:	bd7fff8d 	sth	r21,-2(r23)
 400628c:	bc000017 	ldw	r16,0(r23)
 4006290:	e00b883a 	mov	r5,fp
 4006294:	40097e40 	call	40097e4 <__mulsi3>
 4006298:	a80ed43a 	srli	r7,r21,16
 400629c:	813fffcc 	andi	r4,r16,65535
 40062a0:	2085883a 	add	r2,r4,r2
 40062a4:	11ed883a 	add	r22,r2,r7
 40062a8:	a5000104 	addi	r20,r20,4
 40062ac:	b02ad43a 	srli	r21,r22,16
 40062b0:	a47feb36 	bltu	r20,r17,4006260 <__alt_data_end+0xfe006260>
 40062b4:	bd800015 	stw	r22,0(r23)
 40062b8:	d8c00017 	ldw	r3,0(sp)
 40062bc:	94800104 	addi	r18,r18,4
 40062c0:	18c00104 	addi	r3,r3,4
 40062c4:	d8c00015 	stw	r3,0(sp)
 40062c8:	d8c00317 	ldw	r3,12(sp)
 40062cc:	90ffbf36 	bltu	r18,r3,40061cc <__alt_data_end+0xfe0061cc>
 40062d0:	d8c00117 	ldw	r3,4(sp)
 40062d4:	00c00c0e 	bge	zero,r3,4006308 <__multiply+0x21c>
 40062d8:	d8c00217 	ldw	r3,8(sp)
 40062dc:	18bfff17 	ldw	r2,-4(r3)
 40062e0:	1d7fff04 	addi	r21,r3,-4
 40062e4:	10000326 	beq	r2,zero,40062f4 <__multiply+0x208>
 40062e8:	00000706 	br	4006308 <__multiply+0x21c>
 40062ec:	a8800017 	ldw	r2,0(r21)
 40062f0:	1000051e 	bne	r2,zero,4006308 <__multiply+0x21c>
 40062f4:	d8c00117 	ldw	r3,4(sp)
 40062f8:	ad7fff04 	addi	r21,r21,-4
 40062fc:	18ffffc4 	addi	r3,r3,-1
 4006300:	d8c00115 	stw	r3,4(sp)
 4006304:	183ff91e 	bne	r3,zero,40062ec <__alt_data_end+0xfe0062ec>
 4006308:	d8800517 	ldw	r2,20(sp)
 400630c:	d8c00117 	ldw	r3,4(sp)
 4006310:	10c00415 	stw	r3,16(r2)
 4006314:	dfc00f17 	ldw	ra,60(sp)
 4006318:	df000e17 	ldw	fp,56(sp)
 400631c:	ddc00d17 	ldw	r23,52(sp)
 4006320:	dd800c17 	ldw	r22,48(sp)
 4006324:	dd400b17 	ldw	r21,44(sp)
 4006328:	dd000a17 	ldw	r20,40(sp)
 400632c:	dcc00917 	ldw	r19,36(sp)
 4006330:	dc800817 	ldw	r18,32(sp)
 4006334:	dc400717 	ldw	r17,28(sp)
 4006338:	dc000617 	ldw	r16,24(sp)
 400633c:	dec01004 	addi	sp,sp,64
 4006340:	f800283a 	ret

04006344 <__pow5mult>:
 4006344:	defffb04 	addi	sp,sp,-20
 4006348:	dcc00315 	stw	r19,12(sp)
 400634c:	dc800215 	stw	r18,8(sp)
 4006350:	dc000015 	stw	r16,0(sp)
 4006354:	dfc00415 	stw	ra,16(sp)
 4006358:	dc400115 	stw	r17,4(sp)
 400635c:	308000cc 	andi	r2,r6,3
 4006360:	3021883a 	mov	r16,r6
 4006364:	2027883a 	mov	r19,r4
 4006368:	2825883a 	mov	r18,r5
 400636c:	10002e1e 	bne	r2,zero,4006428 <__pow5mult+0xe4>
 4006370:	8021d0ba 	srai	r16,r16,2
 4006374:	80001a26 	beq	r16,zero,40063e0 <__pow5mult+0x9c>
 4006378:	9c401217 	ldw	r17,72(r19)
 400637c:	8800061e 	bne	r17,zero,4006398 <__pow5mult+0x54>
 4006380:	00003406 	br	4006454 <__pow5mult+0x110>
 4006384:	8021d07a 	srai	r16,r16,1
 4006388:	80001526 	beq	r16,zero,40063e0 <__pow5mult+0x9c>
 400638c:	88c00017 	ldw	r3,0(r17)
 4006390:	18001b26 	beq	r3,zero,4006400 <__pow5mult+0xbc>
 4006394:	1823883a 	mov	r17,r3
 4006398:	80c0004c 	andi	r3,r16,1
 400639c:	183ff926 	beq	r3,zero,4006384 <__alt_data_end+0xfe006384>
 40063a0:	900b883a 	mov	r5,r18
 40063a4:	880d883a 	mov	r6,r17
 40063a8:	9809883a 	mov	r4,r19
 40063ac:	40060ec0 	call	40060ec <__multiply>
 40063b0:	90001b26 	beq	r18,zero,4006420 <__pow5mult+0xdc>
 40063b4:	91000117 	ldw	r4,4(r18)
 40063b8:	98c01317 	ldw	r3,76(r19)
 40063bc:	8021d07a 	srai	r16,r16,1
 40063c0:	2109883a 	add	r4,r4,r4
 40063c4:	2109883a 	add	r4,r4,r4
 40063c8:	1907883a 	add	r3,r3,r4
 40063cc:	19000017 	ldw	r4,0(r3)
 40063d0:	91000015 	stw	r4,0(r18)
 40063d4:	1c800015 	stw	r18,0(r3)
 40063d8:	1025883a 	mov	r18,r2
 40063dc:	803feb1e 	bne	r16,zero,400638c <__alt_data_end+0xfe00638c>
 40063e0:	9005883a 	mov	r2,r18
 40063e4:	dfc00417 	ldw	ra,16(sp)
 40063e8:	dcc00317 	ldw	r19,12(sp)
 40063ec:	dc800217 	ldw	r18,8(sp)
 40063f0:	dc400117 	ldw	r17,4(sp)
 40063f4:	dc000017 	ldw	r16,0(sp)
 40063f8:	dec00504 	addi	sp,sp,20
 40063fc:	f800283a 	ret
 4006400:	880b883a 	mov	r5,r17
 4006404:	880d883a 	mov	r6,r17
 4006408:	9809883a 	mov	r4,r19
 400640c:	40060ec0 	call	40060ec <__multiply>
 4006410:	88800015 	stw	r2,0(r17)
 4006414:	10000015 	stw	zero,0(r2)
 4006418:	1023883a 	mov	r17,r2
 400641c:	003fde06 	br	4006398 <__alt_data_end+0xfe006398>
 4006420:	1025883a 	mov	r18,r2
 4006424:	003fd706 	br	4006384 <__alt_data_end+0xfe006384>
 4006428:	10bfffc4 	addi	r2,r2,-1
 400642c:	1085883a 	add	r2,r2,r2
 4006430:	00c10074 	movhi	r3,1025
 4006434:	18f1da04 	addi	r3,r3,-14488
 4006438:	1085883a 	add	r2,r2,r2
 400643c:	1885883a 	add	r2,r3,r2
 4006440:	11800017 	ldw	r6,0(r2)
 4006444:	000f883a 	mov	r7,zero
 4006448:	4005d500 	call	4005d50 <__multadd>
 400644c:	1025883a 	mov	r18,r2
 4006450:	003fc706 	br	4006370 <__alt_data_end+0xfe006370>
 4006454:	9809883a 	mov	r4,r19
 4006458:	01409c44 	movi	r5,625
 400645c:	40060b00 	call	40060b0 <__i2b>
 4006460:	98801215 	stw	r2,72(r19)
 4006464:	1023883a 	mov	r17,r2
 4006468:	10000015 	stw	zero,0(r2)
 400646c:	003fca06 	br	4006398 <__alt_data_end+0xfe006398>

04006470 <__lshift>:
 4006470:	defff904 	addi	sp,sp,-28
 4006474:	dd400515 	stw	r21,20(sp)
 4006478:	dc400115 	stw	r17,4(sp)
 400647c:	2d400417 	ldw	r21,16(r5)
 4006480:	3023d17a 	srai	r17,r6,5
 4006484:	28800217 	ldw	r2,8(r5)
 4006488:	dd000415 	stw	r20,16(sp)
 400648c:	8d6b883a 	add	r21,r17,r21
 4006490:	dcc00315 	stw	r19,12(sp)
 4006494:	dc800215 	stw	r18,8(sp)
 4006498:	dc000015 	stw	r16,0(sp)
 400649c:	dfc00615 	stw	ra,24(sp)
 40064a0:	ac000044 	addi	r16,r21,1
 40064a4:	2825883a 	mov	r18,r5
 40064a8:	3029883a 	mov	r20,r6
 40064ac:	2027883a 	mov	r19,r4
 40064b0:	29400117 	ldw	r5,4(r5)
 40064b4:	1400030e 	bge	r2,r16,40064c4 <__lshift+0x54>
 40064b8:	1085883a 	add	r2,r2,r2
 40064bc:	29400044 	addi	r5,r5,1
 40064c0:	143ffd16 	blt	r2,r16,40064b8 <__alt_data_end+0xfe0064b8>
 40064c4:	9809883a 	mov	r4,r19
 40064c8:	4005c800 	call	4005c80 <_Balloc>
 40064cc:	10c00504 	addi	r3,r2,20
 40064d0:	0440090e 	bge	zero,r17,40064f8 <__lshift+0x88>
 40064d4:	000f883a 	mov	r7,zero
 40064d8:	18000015 	stw	zero,0(r3)
 40064dc:	39c00044 	addi	r7,r7,1
 40064e0:	18c00104 	addi	r3,r3,4
 40064e4:	3c7ffc1e 	bne	r7,r17,40064d8 <__alt_data_end+0xfe0064d8>
 40064e8:	38c00144 	addi	r3,r7,5
 40064ec:	18c7883a 	add	r3,r3,r3
 40064f0:	18c7883a 	add	r3,r3,r3
 40064f4:	10c7883a 	add	r3,r2,r3
 40064f8:	92000417 	ldw	r8,16(r18)
 40064fc:	a18007cc 	andi	r6,r20,31
 4006500:	91c00504 	addi	r7,r18,20
 4006504:	42000144 	addi	r8,r8,5
 4006508:	4211883a 	add	r8,r8,r8
 400650c:	4211883a 	add	r8,r8,r8
 4006510:	9211883a 	add	r8,r18,r8
 4006514:	30002226 	beq	r6,zero,40065a0 <__lshift+0x130>
 4006518:	02800804 	movi	r10,32
 400651c:	5195c83a 	sub	r10,r10,r6
 4006520:	000b883a 	mov	r5,zero
 4006524:	3a400017 	ldw	r9,0(r7)
 4006528:	18c00104 	addi	r3,r3,4
 400652c:	39c00104 	addi	r7,r7,4
 4006530:	4992983a 	sll	r9,r9,r6
 4006534:	2a4ab03a 	or	r5,r5,r9
 4006538:	197fff15 	stw	r5,-4(r3)
 400653c:	397fff17 	ldw	r5,-4(r7)
 4006540:	2a8ad83a 	srl	r5,r5,r10
 4006544:	3a3ff736 	bltu	r7,r8,4006524 <__alt_data_end+0xfe006524>
 4006548:	19400015 	stw	r5,0(r3)
 400654c:	28000126 	beq	r5,zero,4006554 <__lshift+0xe4>
 4006550:	ac000084 	addi	r16,r21,2
 4006554:	91000117 	ldw	r4,4(r18)
 4006558:	98c01317 	ldw	r3,76(r19)
 400655c:	843fffc4 	addi	r16,r16,-1
 4006560:	2109883a 	add	r4,r4,r4
 4006564:	2109883a 	add	r4,r4,r4
 4006568:	1907883a 	add	r3,r3,r4
 400656c:	19000017 	ldw	r4,0(r3)
 4006570:	14000415 	stw	r16,16(r2)
 4006574:	91000015 	stw	r4,0(r18)
 4006578:	1c800015 	stw	r18,0(r3)
 400657c:	dfc00617 	ldw	ra,24(sp)
 4006580:	dd400517 	ldw	r21,20(sp)
 4006584:	dd000417 	ldw	r20,16(sp)
 4006588:	dcc00317 	ldw	r19,12(sp)
 400658c:	dc800217 	ldw	r18,8(sp)
 4006590:	dc400117 	ldw	r17,4(sp)
 4006594:	dc000017 	ldw	r16,0(sp)
 4006598:	dec00704 	addi	sp,sp,28
 400659c:	f800283a 	ret
 40065a0:	39400017 	ldw	r5,0(r7)
 40065a4:	18c00104 	addi	r3,r3,4
 40065a8:	39c00104 	addi	r7,r7,4
 40065ac:	197fff15 	stw	r5,-4(r3)
 40065b0:	3a3fe82e 	bgeu	r7,r8,4006554 <__alt_data_end+0xfe006554>
 40065b4:	39400017 	ldw	r5,0(r7)
 40065b8:	18c00104 	addi	r3,r3,4
 40065bc:	39c00104 	addi	r7,r7,4
 40065c0:	197fff15 	stw	r5,-4(r3)
 40065c4:	3a3ff636 	bltu	r7,r8,40065a0 <__alt_data_end+0xfe0065a0>
 40065c8:	003fe206 	br	4006554 <__alt_data_end+0xfe006554>

040065cc <__mcmp>:
 40065cc:	20800417 	ldw	r2,16(r4)
 40065d0:	28c00417 	ldw	r3,16(r5)
 40065d4:	10c5c83a 	sub	r2,r2,r3
 40065d8:	10000f1e 	bne	r2,zero,4006618 <__mcmp+0x4c>
 40065dc:	18c00144 	addi	r3,r3,5
 40065e0:	18c7883a 	add	r3,r3,r3
 40065e4:	18c7883a 	add	r3,r3,r3
 40065e8:	21c00504 	addi	r7,r4,20
 40065ec:	28cb883a 	add	r5,r5,r3
 40065f0:	20c9883a 	add	r4,r4,r3
 40065f4:	213fff04 	addi	r4,r4,-4
 40065f8:	297fff04 	addi	r5,r5,-4
 40065fc:	21800017 	ldw	r6,0(r4)
 4006600:	28c00017 	ldw	r3,0(r5)
 4006604:	30c0021e 	bne	r6,r3,4006610 <__mcmp+0x44>
 4006608:	393ffa36 	bltu	r7,r4,40065f4 <__alt_data_end+0xfe0065f4>
 400660c:	f800283a 	ret
 4006610:	30c00236 	bltu	r6,r3,400661c <__mcmp+0x50>
 4006614:	00800044 	movi	r2,1
 4006618:	f800283a 	ret
 400661c:	00bfffc4 	movi	r2,-1
 4006620:	f800283a 	ret

04006624 <__mdiff>:
 4006624:	defffb04 	addi	sp,sp,-20
 4006628:	dc000015 	stw	r16,0(sp)
 400662c:	2821883a 	mov	r16,r5
 4006630:	dc800215 	stw	r18,8(sp)
 4006634:	300b883a 	mov	r5,r6
 4006638:	2025883a 	mov	r18,r4
 400663c:	8009883a 	mov	r4,r16
 4006640:	dc400115 	stw	r17,4(sp)
 4006644:	dfc00415 	stw	ra,16(sp)
 4006648:	dcc00315 	stw	r19,12(sp)
 400664c:	3023883a 	mov	r17,r6
 4006650:	40065cc0 	call	40065cc <__mcmp>
 4006654:	10005026 	beq	r2,zero,4006798 <__mdiff+0x174>
 4006658:	10004a16 	blt	r2,zero,4006784 <__mdiff+0x160>
 400665c:	0027883a 	mov	r19,zero
 4006660:	81400117 	ldw	r5,4(r16)
 4006664:	9009883a 	mov	r4,r18
 4006668:	4005c800 	call	4005c80 <_Balloc>
 400666c:	82400417 	ldw	r9,16(r16)
 4006670:	89800417 	ldw	r6,16(r17)
 4006674:	14c00315 	stw	r19,12(r2)
 4006678:	4b800144 	addi	r14,r9,5
 400667c:	31800144 	addi	r6,r6,5
 4006680:	739d883a 	add	r14,r14,r14
 4006684:	318d883a 	add	r6,r6,r6
 4006688:	739d883a 	add	r14,r14,r14
 400668c:	318d883a 	add	r6,r6,r6
 4006690:	81c00504 	addi	r7,r16,20
 4006694:	839d883a 	add	r14,r16,r14
 4006698:	8a000504 	addi	r8,r17,20
 400669c:	898d883a 	add	r6,r17,r6
 40066a0:	10c00504 	addi	r3,r2,20
 40066a4:	0009883a 	mov	r4,zero
 40066a8:	3b000017 	ldw	r12,0(r7)
 40066ac:	42c00017 	ldw	r11,0(r8)
 40066b0:	42000104 	addi	r8,r8,4
 40066b4:	62bfffcc 	andi	r10,r12,65535
 40066b8:	5b7fffcc 	andi	r13,r11,65535
 40066bc:	5109883a 	add	r4,r10,r4
 40066c0:	2355c83a 	sub	r10,r4,r13
 40066c4:	5816d43a 	srli	r11,r11,16
 40066c8:	6008d43a 	srli	r4,r12,16
 40066cc:	501bd43a 	srai	r13,r10,16
 40066d0:	1a80000d 	sth	r10,0(r3)
 40066d4:	22c9c83a 	sub	r4,r4,r11
 40066d8:	2349883a 	add	r4,r4,r13
 40066dc:	1900008d 	sth	r4,2(r3)
 40066e0:	39c00104 	addi	r7,r7,4
 40066e4:	2009d43a 	srai	r4,r4,16
 40066e8:	18c00104 	addi	r3,r3,4
 40066ec:	41bfee36 	bltu	r8,r6,40066a8 <__alt_data_end+0xfe0066a8>
 40066f0:	180b883a 	mov	r5,r3
 40066f4:	3815883a 	mov	r10,r7
 40066f8:	3b80132e 	bgeu	r7,r14,4006748 <__mdiff+0x124>
 40066fc:	3a000017 	ldw	r8,0(r7)
 4006700:	18c00104 	addi	r3,r3,4
 4006704:	39c00104 	addi	r7,r7,4
 4006708:	41bfffcc 	andi	r6,r8,65535
 400670c:	310d883a 	add	r6,r6,r4
 4006710:	3009d43a 	srai	r4,r6,16
 4006714:	4010d43a 	srli	r8,r8,16
 4006718:	19bfff0d 	sth	r6,-4(r3)
 400671c:	2209883a 	add	r4,r4,r8
 4006720:	193fff8d 	sth	r4,-2(r3)
 4006724:	2009d43a 	srai	r4,r4,16
 4006728:	3bbff436 	bltu	r7,r14,40066fc <__alt_data_end+0xfe0066fc>
 400672c:	0286303a 	nor	r3,zero,r10
 4006730:	1b87883a 	add	r3,r3,r14
 4006734:	1806d0ba 	srli	r3,r3,2
 4006738:	18c00044 	addi	r3,r3,1
 400673c:	18c7883a 	add	r3,r3,r3
 4006740:	18c7883a 	add	r3,r3,r3
 4006744:	28c7883a 	add	r3,r5,r3
 4006748:	193fff17 	ldw	r4,-4(r3)
 400674c:	18ffff04 	addi	r3,r3,-4
 4006750:	2000041e 	bne	r4,zero,4006764 <__mdiff+0x140>
 4006754:	18ffff04 	addi	r3,r3,-4
 4006758:	19000017 	ldw	r4,0(r3)
 400675c:	4a7fffc4 	addi	r9,r9,-1
 4006760:	203ffc26 	beq	r4,zero,4006754 <__alt_data_end+0xfe006754>
 4006764:	12400415 	stw	r9,16(r2)
 4006768:	dfc00417 	ldw	ra,16(sp)
 400676c:	dcc00317 	ldw	r19,12(sp)
 4006770:	dc800217 	ldw	r18,8(sp)
 4006774:	dc400117 	ldw	r17,4(sp)
 4006778:	dc000017 	ldw	r16,0(sp)
 400677c:	dec00504 	addi	sp,sp,20
 4006780:	f800283a 	ret
 4006784:	8005883a 	mov	r2,r16
 4006788:	04c00044 	movi	r19,1
 400678c:	8821883a 	mov	r16,r17
 4006790:	1023883a 	mov	r17,r2
 4006794:	003fb206 	br	4006660 <__alt_data_end+0xfe006660>
 4006798:	9009883a 	mov	r4,r18
 400679c:	000b883a 	mov	r5,zero
 40067a0:	4005c800 	call	4005c80 <_Balloc>
 40067a4:	00c00044 	movi	r3,1
 40067a8:	10c00415 	stw	r3,16(r2)
 40067ac:	10000515 	stw	zero,20(r2)
 40067b0:	dfc00417 	ldw	ra,16(sp)
 40067b4:	dcc00317 	ldw	r19,12(sp)
 40067b8:	dc800217 	ldw	r18,8(sp)
 40067bc:	dc400117 	ldw	r17,4(sp)
 40067c0:	dc000017 	ldw	r16,0(sp)
 40067c4:	dec00504 	addi	sp,sp,20
 40067c8:	f800283a 	ret

040067cc <__ulp>:
 40067cc:	295ffc2c 	andhi	r5,r5,32752
 40067d0:	00bf3034 	movhi	r2,64704
 40067d4:	2887883a 	add	r3,r5,r2
 40067d8:	00c0020e 	bge	zero,r3,40067e4 <__ulp+0x18>
 40067dc:	0005883a 	mov	r2,zero
 40067e0:	f800283a 	ret
 40067e4:	00c7c83a 	sub	r3,zero,r3
 40067e8:	1805d53a 	srai	r2,r3,20
 40067ec:	00c004c4 	movi	r3,19
 40067f0:	18800a0e 	bge	r3,r2,400681c <__ulp+0x50>
 40067f4:	01000c84 	movi	r4,50
 40067f8:	0007883a 	mov	r3,zero
 40067fc:	20800516 	blt	r4,r2,4006814 <__ulp+0x48>
 4006800:	01000cc4 	movi	r4,51
 4006804:	2085c83a 	sub	r2,r4,r2
 4006808:	01000044 	movi	r4,1
 400680c:	2084983a 	sll	r2,r4,r2
 4006810:	f800283a 	ret
 4006814:	00800044 	movi	r2,1
 4006818:	f800283a 	ret
 400681c:	00c00234 	movhi	r3,8
 4006820:	1887d83a 	sra	r3,r3,r2
 4006824:	0005883a 	mov	r2,zero
 4006828:	f800283a 	ret

0400682c <__b2d>:
 400682c:	defffa04 	addi	sp,sp,-24
 4006830:	dc000015 	stw	r16,0(sp)
 4006834:	24000417 	ldw	r16,16(r4)
 4006838:	dc400115 	stw	r17,4(sp)
 400683c:	dcc00315 	stw	r19,12(sp)
 4006840:	84000144 	addi	r16,r16,5
 4006844:	8421883a 	add	r16,r16,r16
 4006848:	8421883a 	add	r16,r16,r16
 400684c:	2421883a 	add	r16,r4,r16
 4006850:	847fff17 	ldw	r17,-4(r16)
 4006854:	24c00504 	addi	r19,r4,20
 4006858:	dd000415 	stw	r20,16(sp)
 400685c:	8809883a 	mov	r4,r17
 4006860:	dc800215 	stw	r18,8(sp)
 4006864:	2829883a 	mov	r20,r5
 4006868:	dfc00515 	stw	ra,20(sp)
 400686c:	4005f980 	call	4005f98 <__hi0bits>
 4006870:	00c00804 	movi	r3,32
 4006874:	1887c83a 	sub	r3,r3,r2
 4006878:	a0c00015 	stw	r3,0(r20)
 400687c:	00c00284 	movi	r3,10
 4006880:	84bfff04 	addi	r18,r16,-4
 4006884:	18801216 	blt	r3,r2,40068d0 <__b2d+0xa4>
 4006888:	010002c4 	movi	r4,11
 400688c:	2089c83a 	sub	r4,r4,r2
 4006890:	8906d83a 	srl	r3,r17,r4
 4006894:	18cffc34 	orhi	r3,r3,16368
 4006898:	9c80322e 	bgeu	r19,r18,4006964 <__b2d+0x138>
 400689c:	817ffe17 	ldw	r5,-8(r16)
 40068a0:	2908d83a 	srl	r4,r5,r4
 40068a4:	10800544 	addi	r2,r2,21
 40068a8:	88a2983a 	sll	r17,r17,r2
 40068ac:	2444b03a 	or	r2,r4,r17
 40068b0:	dfc00517 	ldw	ra,20(sp)
 40068b4:	dd000417 	ldw	r20,16(sp)
 40068b8:	dcc00317 	ldw	r19,12(sp)
 40068bc:	dc800217 	ldw	r18,8(sp)
 40068c0:	dc400117 	ldw	r17,4(sp)
 40068c4:	dc000017 	ldw	r16,0(sp)
 40068c8:	dec00604 	addi	sp,sp,24
 40068cc:	f800283a 	ret
 40068d0:	9c801636 	bltu	r19,r18,400692c <__b2d+0x100>
 40068d4:	113ffd44 	addi	r4,r2,-11
 40068d8:	000b883a 	mov	r5,zero
 40068dc:	20001726 	beq	r4,zero,400693c <__b2d+0x110>
 40068e0:	00c00ac4 	movi	r3,43
 40068e4:	1885c83a 	sub	r2,r3,r2
 40068e8:	8906983a 	sll	r3,r17,r4
 40068ec:	288cd83a 	srl	r6,r5,r2
 40068f0:	18cffc34 	orhi	r3,r3,16368
 40068f4:	1986b03a 	or	r3,r3,r6
 40068f8:	9c801c2e 	bgeu	r19,r18,400696c <__b2d+0x140>
 40068fc:	91bfff17 	ldw	r6,-4(r18)
 4006900:	3084d83a 	srl	r2,r6,r2
 4006904:	2908983a 	sll	r4,r5,r4
 4006908:	1104b03a 	or	r2,r2,r4
 400690c:	dfc00517 	ldw	ra,20(sp)
 4006910:	dd000417 	ldw	r20,16(sp)
 4006914:	dcc00317 	ldw	r19,12(sp)
 4006918:	dc800217 	ldw	r18,8(sp)
 400691c:	dc400117 	ldw	r17,4(sp)
 4006920:	dc000017 	ldw	r16,0(sp)
 4006924:	dec00604 	addi	sp,sp,24
 4006928:	f800283a 	ret
 400692c:	113ffd44 	addi	r4,r2,-11
 4006930:	84bffe04 	addi	r18,r16,-8
 4006934:	817ffe17 	ldw	r5,-8(r16)
 4006938:	203fe91e 	bne	r4,zero,40068e0 <__alt_data_end+0xfe0068e0>
 400693c:	88cffc34 	orhi	r3,r17,16368
 4006940:	2805883a 	mov	r2,r5
 4006944:	dfc00517 	ldw	ra,20(sp)
 4006948:	dd000417 	ldw	r20,16(sp)
 400694c:	dcc00317 	ldw	r19,12(sp)
 4006950:	dc800217 	ldw	r18,8(sp)
 4006954:	dc400117 	ldw	r17,4(sp)
 4006958:	dc000017 	ldw	r16,0(sp)
 400695c:	dec00604 	addi	sp,sp,24
 4006960:	f800283a 	ret
 4006964:	0009883a 	mov	r4,zero
 4006968:	003fce06 	br	40068a4 <__alt_data_end+0xfe0068a4>
 400696c:	0005883a 	mov	r2,zero
 4006970:	003fe406 	br	4006904 <__alt_data_end+0xfe006904>

04006974 <__d2b>:
 4006974:	defff804 	addi	sp,sp,-32
 4006978:	dc400315 	stw	r17,12(sp)
 400697c:	3023883a 	mov	r17,r6
 4006980:	dc800415 	stw	r18,16(sp)
 4006984:	8824907a 	slli	r18,r17,1
 4006988:	dcc00515 	stw	r19,20(sp)
 400698c:	2827883a 	mov	r19,r5
 4006990:	9024d57a 	srli	r18,r18,21
 4006994:	01400044 	movi	r5,1
 4006998:	dd000615 	stw	r20,24(sp)
 400699c:	dc000215 	stw	r16,8(sp)
 40069a0:	dfc00715 	stw	ra,28(sp)
 40069a4:	3829883a 	mov	r20,r7
 40069a8:	4005c800 	call	4005c80 <_Balloc>
 40069ac:	1021883a 	mov	r16,r2
 40069b0:	00800434 	movhi	r2,16
 40069b4:	10bfffc4 	addi	r2,r2,-1
 40069b8:	88a2703a 	and	r17,r17,r2
 40069bc:	90000126 	beq	r18,zero,40069c4 <__d2b+0x50>
 40069c0:	8c400434 	orhi	r17,r17,16
 40069c4:	dc400015 	stw	r17,0(sp)
 40069c8:	98002226 	beq	r19,zero,4006a54 <__d2b+0xe0>
 40069cc:	d9000104 	addi	r4,sp,4
 40069d0:	dcc00115 	stw	r19,4(sp)
 40069d4:	40060000 	call	4006000 <__lo0bits>
 40069d8:	d8c00017 	ldw	r3,0(sp)
 40069dc:	10002d1e 	bne	r2,zero,4006a94 <__d2b+0x120>
 40069e0:	d9000117 	ldw	r4,4(sp)
 40069e4:	81000515 	stw	r4,20(r16)
 40069e8:	1823003a 	cmpeq	r17,r3,zero
 40069ec:	01000084 	movi	r4,2
 40069f0:	2463c83a 	sub	r17,r4,r17
 40069f4:	80c00615 	stw	r3,24(r16)
 40069f8:	84400415 	stw	r17,16(r16)
 40069fc:	90001d1e 	bne	r18,zero,4006a74 <__d2b+0x100>
 4006a00:	88c00104 	addi	r3,r17,4
 4006a04:	18c7883a 	add	r3,r3,r3
 4006a08:	18c7883a 	add	r3,r3,r3
 4006a0c:	80c7883a 	add	r3,r16,r3
 4006a10:	19000017 	ldw	r4,0(r3)
 4006a14:	10bef384 	addi	r2,r2,-1074
 4006a18:	a0800015 	stw	r2,0(r20)
 4006a1c:	4005f980 	call	4005f98 <__hi0bits>
 4006a20:	8822917a 	slli	r17,r17,5
 4006a24:	d8c00817 	ldw	r3,32(sp)
 4006a28:	8885c83a 	sub	r2,r17,r2
 4006a2c:	18800015 	stw	r2,0(r3)
 4006a30:	8005883a 	mov	r2,r16
 4006a34:	dfc00717 	ldw	ra,28(sp)
 4006a38:	dd000617 	ldw	r20,24(sp)
 4006a3c:	dcc00517 	ldw	r19,20(sp)
 4006a40:	dc800417 	ldw	r18,16(sp)
 4006a44:	dc400317 	ldw	r17,12(sp)
 4006a48:	dc000217 	ldw	r16,8(sp)
 4006a4c:	dec00804 	addi	sp,sp,32
 4006a50:	f800283a 	ret
 4006a54:	d809883a 	mov	r4,sp
 4006a58:	40060000 	call	4006000 <__lo0bits>
 4006a5c:	d8c00017 	ldw	r3,0(sp)
 4006a60:	04400044 	movi	r17,1
 4006a64:	84400415 	stw	r17,16(r16)
 4006a68:	80c00515 	stw	r3,20(r16)
 4006a6c:	10800804 	addi	r2,r2,32
 4006a70:	903fe326 	beq	r18,zero,4006a00 <__alt_data_end+0xfe006a00>
 4006a74:	00c00d44 	movi	r3,53
 4006a78:	94bef344 	addi	r18,r18,-1075
 4006a7c:	90a5883a 	add	r18,r18,r2
 4006a80:	1885c83a 	sub	r2,r3,r2
 4006a84:	d8c00817 	ldw	r3,32(sp)
 4006a88:	a4800015 	stw	r18,0(r20)
 4006a8c:	18800015 	stw	r2,0(r3)
 4006a90:	003fe706 	br	4006a30 <__alt_data_end+0xfe006a30>
 4006a94:	01000804 	movi	r4,32
 4006a98:	2089c83a 	sub	r4,r4,r2
 4006a9c:	1908983a 	sll	r4,r3,r4
 4006aa0:	d9400117 	ldw	r5,4(sp)
 4006aa4:	1886d83a 	srl	r3,r3,r2
 4006aa8:	2148b03a 	or	r4,r4,r5
 4006aac:	81000515 	stw	r4,20(r16)
 4006ab0:	d8c00015 	stw	r3,0(sp)
 4006ab4:	003fcc06 	br	40069e8 <__alt_data_end+0xfe0069e8>

04006ab8 <__ratio>:
 4006ab8:	defff904 	addi	sp,sp,-28
 4006abc:	dc400315 	stw	r17,12(sp)
 4006ac0:	2823883a 	mov	r17,r5
 4006ac4:	d9400104 	addi	r5,sp,4
 4006ac8:	dfc00615 	stw	ra,24(sp)
 4006acc:	dcc00515 	stw	r19,20(sp)
 4006ad0:	dc800415 	stw	r18,16(sp)
 4006ad4:	2027883a 	mov	r19,r4
 4006ad8:	dc000215 	stw	r16,8(sp)
 4006adc:	400682c0 	call	400682c <__b2d>
 4006ae0:	8809883a 	mov	r4,r17
 4006ae4:	d80b883a 	mov	r5,sp
 4006ae8:	1025883a 	mov	r18,r2
 4006aec:	1821883a 	mov	r16,r3
 4006af0:	400682c0 	call	400682c <__b2d>
 4006af4:	99400417 	ldw	r5,16(r19)
 4006af8:	89000417 	ldw	r4,16(r17)
 4006afc:	d9800117 	ldw	r6,4(sp)
 4006b00:	2909c83a 	sub	r4,r5,r4
 4006b04:	d9400017 	ldw	r5,0(sp)
 4006b08:	2008917a 	slli	r4,r4,5
 4006b0c:	314bc83a 	sub	r5,r6,r5
 4006b10:	290b883a 	add	r5,r5,r4
 4006b14:	01400e0e 	bge	zero,r5,4006b50 <__ratio+0x98>
 4006b18:	280a953a 	slli	r5,r5,20
 4006b1c:	2c21883a 	add	r16,r5,r16
 4006b20:	9009883a 	mov	r4,r18
 4006b24:	800b883a 	mov	r5,r16
 4006b28:	100d883a 	mov	r6,r2
 4006b2c:	180f883a 	mov	r7,r3
 4006b30:	40090700 	call	4009070 <__divdf3>
 4006b34:	dfc00617 	ldw	ra,24(sp)
 4006b38:	dcc00517 	ldw	r19,20(sp)
 4006b3c:	dc800417 	ldw	r18,16(sp)
 4006b40:	dc400317 	ldw	r17,12(sp)
 4006b44:	dc000217 	ldw	r16,8(sp)
 4006b48:	dec00704 	addi	sp,sp,28
 4006b4c:	f800283a 	ret
 4006b50:	280a953a 	slli	r5,r5,20
 4006b54:	1947c83a 	sub	r3,r3,r5
 4006b58:	003ff106 	br	4006b20 <__alt_data_end+0xfe006b20>

04006b5c <_mprec_log10>:
 4006b5c:	defffe04 	addi	sp,sp,-8
 4006b60:	dc000015 	stw	r16,0(sp)
 4006b64:	dfc00115 	stw	ra,4(sp)
 4006b68:	008005c4 	movi	r2,23
 4006b6c:	2021883a 	mov	r16,r4
 4006b70:	11000d0e 	bge	r2,r4,4006ba8 <_mprec_log10+0x4c>
 4006b74:	0005883a 	mov	r2,zero
 4006b78:	00cffc34 	movhi	r3,16368
 4006b7c:	843fffc4 	addi	r16,r16,-1
 4006b80:	1009883a 	mov	r4,r2
 4006b84:	180b883a 	mov	r5,r3
 4006b88:	000d883a 	mov	r6,zero
 4006b8c:	01d00934 	movhi	r7,16420
 4006b90:	4008d8c0 	call	4008d8c <__muldf3>
 4006b94:	803ff91e 	bne	r16,zero,4006b7c <__alt_data_end+0xfe006b7c>
 4006b98:	dfc00117 	ldw	ra,4(sp)
 4006b9c:	dc000017 	ldw	r16,0(sp)
 4006ba0:	dec00204 	addi	sp,sp,8
 4006ba4:	f800283a 	ret
 4006ba8:	202090fa 	slli	r16,r4,3
 4006bac:	00810074 	movhi	r2,1025
 4006bb0:	10b1a804 	addi	r2,r2,-14688
 4006bb4:	1421883a 	add	r16,r2,r16
 4006bb8:	80800017 	ldw	r2,0(r16)
 4006bbc:	80c00117 	ldw	r3,4(r16)
 4006bc0:	dfc00117 	ldw	ra,4(sp)
 4006bc4:	dc000017 	ldw	r16,0(sp)
 4006bc8:	dec00204 	addi	sp,sp,8
 4006bcc:	f800283a 	ret

04006bd0 <__copybits>:
 4006bd0:	297fffc4 	addi	r5,r5,-1
 4006bd4:	31c00417 	ldw	r7,16(r6)
 4006bd8:	2811d17a 	srai	r8,r5,5
 4006bdc:	30800504 	addi	r2,r6,20
 4006be0:	39c00144 	addi	r7,r7,5
 4006be4:	42000044 	addi	r8,r8,1
 4006be8:	39cf883a 	add	r7,r7,r7
 4006bec:	4211883a 	add	r8,r8,r8
 4006bf0:	39cf883a 	add	r7,r7,r7
 4006bf4:	4211883a 	add	r8,r8,r8
 4006bf8:	31cf883a 	add	r7,r6,r7
 4006bfc:	2211883a 	add	r8,r4,r8
 4006c00:	11c00d2e 	bgeu	r2,r7,4006c38 <__copybits+0x68>
 4006c04:	2007883a 	mov	r3,r4
 4006c08:	11400017 	ldw	r5,0(r2)
 4006c0c:	18c00104 	addi	r3,r3,4
 4006c10:	10800104 	addi	r2,r2,4
 4006c14:	197fff15 	stw	r5,-4(r3)
 4006c18:	11fffb36 	bltu	r2,r7,4006c08 <__alt_data_end+0xfe006c08>
 4006c1c:	3985c83a 	sub	r2,r7,r6
 4006c20:	10bffac4 	addi	r2,r2,-21
 4006c24:	1004d0ba 	srli	r2,r2,2
 4006c28:	10800044 	addi	r2,r2,1
 4006c2c:	1085883a 	add	r2,r2,r2
 4006c30:	1085883a 	add	r2,r2,r2
 4006c34:	2089883a 	add	r4,r4,r2
 4006c38:	2200032e 	bgeu	r4,r8,4006c48 <__copybits+0x78>
 4006c3c:	20000015 	stw	zero,0(r4)
 4006c40:	21000104 	addi	r4,r4,4
 4006c44:	223ffd36 	bltu	r4,r8,4006c3c <__alt_data_end+0xfe006c3c>
 4006c48:	f800283a 	ret

04006c4c <__any_on>:
 4006c4c:	21800417 	ldw	r6,16(r4)
 4006c50:	2805d17a 	srai	r2,r5,5
 4006c54:	20c00504 	addi	r3,r4,20
 4006c58:	30800f0e 	bge	r6,r2,4006c98 <__any_on+0x4c>
 4006c5c:	3005883a 	mov	r2,r6
 4006c60:	10800144 	addi	r2,r2,5
 4006c64:	1085883a 	add	r2,r2,r2
 4006c68:	1085883a 	add	r2,r2,r2
 4006c6c:	2089883a 	add	r4,r4,r2
 4006c70:	1900152e 	bgeu	r3,r4,4006cc8 <__any_on+0x7c>
 4006c74:	20bfff17 	ldw	r2,-4(r4)
 4006c78:	213fff04 	addi	r4,r4,-4
 4006c7c:	1000041e 	bne	r2,zero,4006c90 <__any_on+0x44>
 4006c80:	1900112e 	bgeu	r3,r4,4006cc8 <__any_on+0x7c>
 4006c84:	213fff04 	addi	r4,r4,-4
 4006c88:	20800017 	ldw	r2,0(r4)
 4006c8c:	103ffc26 	beq	r2,zero,4006c80 <__alt_data_end+0xfe006c80>
 4006c90:	00800044 	movi	r2,1
 4006c94:	f800283a 	ret
 4006c98:	11bff10e 	bge	r2,r6,4006c60 <__alt_data_end+0xfe006c60>
 4006c9c:	294007cc 	andi	r5,r5,31
 4006ca0:	283fef26 	beq	r5,zero,4006c60 <__alt_data_end+0xfe006c60>
 4006ca4:	11800144 	addi	r6,r2,5
 4006ca8:	318d883a 	add	r6,r6,r6
 4006cac:	318d883a 	add	r6,r6,r6
 4006cb0:	218d883a 	add	r6,r4,r6
 4006cb4:	31800017 	ldw	r6,0(r6)
 4006cb8:	314ed83a 	srl	r7,r6,r5
 4006cbc:	394a983a 	sll	r5,r7,r5
 4006cc0:	29bff31e 	bne	r5,r6,4006c90 <__alt_data_end+0xfe006c90>
 4006cc4:	003fe606 	br	4006c60 <__alt_data_end+0xfe006c60>
 4006cc8:	0005883a 	mov	r2,zero
 4006ccc:	f800283a 	ret

04006cd0 <_putc_r>:
 4006cd0:	defffc04 	addi	sp,sp,-16
 4006cd4:	dc000215 	stw	r16,8(sp)
 4006cd8:	dfc00315 	stw	ra,12(sp)
 4006cdc:	2021883a 	mov	r16,r4
 4006ce0:	20000226 	beq	r4,zero,4006cec <_putc_r+0x1c>
 4006ce4:	20800e17 	ldw	r2,56(r4)
 4006ce8:	10001d26 	beq	r2,zero,4006d60 <_putc_r+0x90>
 4006cec:	30800217 	ldw	r2,8(r6)
 4006cf0:	10bfffc4 	addi	r2,r2,-1
 4006cf4:	30800215 	stw	r2,8(r6)
 4006cf8:	10000a16 	blt	r2,zero,4006d24 <_putc_r+0x54>
 4006cfc:	30800017 	ldw	r2,0(r6)
 4006d00:	11400005 	stb	r5,0(r2)
 4006d04:	30800017 	ldw	r2,0(r6)
 4006d08:	10c00044 	addi	r3,r2,1
 4006d0c:	10800003 	ldbu	r2,0(r2)
 4006d10:	30c00015 	stw	r3,0(r6)
 4006d14:	dfc00317 	ldw	ra,12(sp)
 4006d18:	dc000217 	ldw	r16,8(sp)
 4006d1c:	dec00404 	addi	sp,sp,16
 4006d20:	f800283a 	ret
 4006d24:	30c00617 	ldw	r3,24(r6)
 4006d28:	10c01316 	blt	r2,r3,4006d78 <_putc_r+0xa8>
 4006d2c:	30800017 	ldw	r2,0(r6)
 4006d30:	01000284 	movi	r4,10
 4006d34:	11400005 	stb	r5,0(r2)
 4006d38:	30c00017 	ldw	r3,0(r6)
 4006d3c:	19400003 	ldbu	r5,0(r3)
 4006d40:	29000d26 	beq	r5,r4,4006d78 <_putc_r+0xa8>
 4006d44:	18c00044 	addi	r3,r3,1
 4006d48:	2805883a 	mov	r2,r5
 4006d4c:	30c00015 	stw	r3,0(r6)
 4006d50:	dfc00317 	ldw	ra,12(sp)
 4006d54:	dc000217 	ldw	r16,8(sp)
 4006d58:	dec00404 	addi	sp,sp,16
 4006d5c:	f800283a 	ret
 4006d60:	d9400015 	stw	r5,0(sp)
 4006d64:	d9800115 	stw	r6,4(sp)
 4006d68:	400421c0 	call	400421c <__sinit>
 4006d6c:	d9800117 	ldw	r6,4(sp)
 4006d70:	d9400017 	ldw	r5,0(sp)
 4006d74:	003fdd06 	br	4006cec <__alt_data_end+0xfe006cec>
 4006d78:	8009883a 	mov	r4,r16
 4006d7c:	dfc00317 	ldw	ra,12(sp)
 4006d80:	dc000217 	ldw	r16,8(sp)
 4006d84:	dec00404 	addi	sp,sp,16
 4006d88:	40077241 	jmpi	4007724 <__swbuf_r>

04006d8c <putc>:
 4006d8c:	defffc04 	addi	sp,sp,-16
 4006d90:	dc400115 	stw	r17,4(sp)
 4006d94:	04410074 	movhi	r17,1025
 4006d98:	8c78b704 	addi	r17,r17,-7460
 4006d9c:	88800017 	ldw	r2,0(r17)
 4006da0:	dc800215 	stw	r18,8(sp)
 4006da4:	dc000015 	stw	r16,0(sp)
 4006da8:	dfc00315 	stw	ra,12(sp)
 4006dac:	2025883a 	mov	r18,r4
 4006db0:	2821883a 	mov	r16,r5
 4006db4:	10000226 	beq	r2,zero,4006dc0 <putc+0x34>
 4006db8:	10c00e17 	ldw	r3,56(r2)
 4006dbc:	18002126 	beq	r3,zero,4006e44 <putc+0xb8>
 4006dc0:	80800217 	ldw	r2,8(r16)
 4006dc4:	10bfffc4 	addi	r2,r2,-1
 4006dc8:	80800215 	stw	r2,8(r16)
 4006dcc:	10000c16 	blt	r2,zero,4006e00 <putc+0x74>
 4006dd0:	80800017 	ldw	r2,0(r16)
 4006dd4:	14800005 	stb	r18,0(r2)
 4006dd8:	80800017 	ldw	r2,0(r16)
 4006ddc:	10c00044 	addi	r3,r2,1
 4006de0:	10800003 	ldbu	r2,0(r2)
 4006de4:	80c00015 	stw	r3,0(r16)
 4006de8:	dfc00317 	ldw	ra,12(sp)
 4006dec:	dc800217 	ldw	r18,8(sp)
 4006df0:	dc400117 	ldw	r17,4(sp)
 4006df4:	dc000017 	ldw	r16,0(sp)
 4006df8:	dec00404 	addi	sp,sp,16
 4006dfc:	f800283a 	ret
 4006e00:	80c00617 	ldw	r3,24(r16)
 4006e04:	10c01216 	blt	r2,r3,4006e50 <putc+0xc4>
 4006e08:	80800017 	ldw	r2,0(r16)
 4006e0c:	01000284 	movi	r4,10
 4006e10:	14800005 	stb	r18,0(r2)
 4006e14:	80c00017 	ldw	r3,0(r16)
 4006e18:	19400003 	ldbu	r5,0(r3)
 4006e1c:	29001526 	beq	r5,r4,4006e74 <putc+0xe8>
 4006e20:	18c00044 	addi	r3,r3,1
 4006e24:	2805883a 	mov	r2,r5
 4006e28:	80c00015 	stw	r3,0(r16)
 4006e2c:	dfc00317 	ldw	ra,12(sp)
 4006e30:	dc800217 	ldw	r18,8(sp)
 4006e34:	dc400117 	ldw	r17,4(sp)
 4006e38:	dc000017 	ldw	r16,0(sp)
 4006e3c:	dec00404 	addi	sp,sp,16
 4006e40:	f800283a 	ret
 4006e44:	1009883a 	mov	r4,r2
 4006e48:	400421c0 	call	400421c <__sinit>
 4006e4c:	003fdc06 	br	4006dc0 <__alt_data_end+0xfe006dc0>
 4006e50:	89000017 	ldw	r4,0(r17)
 4006e54:	900b883a 	mov	r5,r18
 4006e58:	800d883a 	mov	r6,r16
 4006e5c:	dfc00317 	ldw	ra,12(sp)
 4006e60:	dc800217 	ldw	r18,8(sp)
 4006e64:	dc400117 	ldw	r17,4(sp)
 4006e68:	dc000017 	ldw	r16,0(sp)
 4006e6c:	dec00404 	addi	sp,sp,16
 4006e70:	40077241 	jmpi	4007724 <__swbuf_r>
 4006e74:	89000017 	ldw	r4,0(r17)
 4006e78:	003ff706 	br	4006e58 <__alt_data_end+0xfe006e58>

04006e7c <_realloc_r>:
 4006e7c:	defff504 	addi	sp,sp,-44
 4006e80:	dd400615 	stw	r21,24(sp)
 4006e84:	dc800315 	stw	r18,12(sp)
 4006e88:	dc000115 	stw	r16,4(sp)
 4006e8c:	dfc00a15 	stw	ra,40(sp)
 4006e90:	df000915 	stw	fp,36(sp)
 4006e94:	ddc00815 	stw	r23,32(sp)
 4006e98:	dd800715 	stw	r22,28(sp)
 4006e9c:	dd000515 	stw	r20,20(sp)
 4006ea0:	dcc00415 	stw	r19,16(sp)
 4006ea4:	dc400215 	stw	r17,8(sp)
 4006ea8:	2821883a 	mov	r16,r5
 4006eac:	202b883a 	mov	r21,r4
 4006eb0:	3025883a 	mov	r18,r6
 4006eb4:	28009626 	beq	r5,zero,4007110 <_realloc_r+0x294>
 4006eb8:	400a40c0 	call	400a40c <__malloc_lock>
 4006ebc:	80bfff17 	ldw	r2,-4(r16)
 4006ec0:	04ffff04 	movi	r19,-4
 4006ec4:	90c002c4 	addi	r3,r18,11
 4006ec8:	01000584 	movi	r4,22
 4006ecc:	85bffe04 	addi	r22,r16,-8
 4006ed0:	14e6703a 	and	r19,r2,r19
 4006ed4:	20c0372e 	bgeu	r4,r3,4006fb4 <_realloc_r+0x138>
 4006ed8:	047ffe04 	movi	r17,-8
 4006edc:	1c62703a 	and	r17,r3,r17
 4006ee0:	8807883a 	mov	r3,r17
 4006ee4:	88005a16 	blt	r17,zero,4007050 <_realloc_r+0x1d4>
 4006ee8:	8c805936 	bltu	r17,r18,4007050 <_realloc_r+0x1d4>
 4006eec:	98c0340e 	bge	r19,r3,4006fc0 <_realloc_r+0x144>
 4006ef0:	07010074 	movhi	fp,1025
 4006ef4:	e7333204 	addi	fp,fp,-13112
 4006ef8:	e1400217 	ldw	r5,8(fp)
 4006efc:	b4c9883a 	add	r4,r22,r19
 4006f00:	29009026 	beq	r5,r4,4007144 <_realloc_r+0x2c8>
 4006f04:	21800117 	ldw	r6,4(r4)
 4006f08:	01ffff84 	movi	r7,-2
 4006f0c:	31ce703a 	and	r7,r6,r7
 4006f10:	21cf883a 	add	r7,r4,r7
 4006f14:	39c00117 	ldw	r7,4(r7)
 4006f18:	39c0004c 	andi	r7,r7,1
 4006f1c:	38004326 	beq	r7,zero,400702c <_realloc_r+0x1b0>
 4006f20:	000d883a 	mov	r6,zero
 4006f24:	0009883a 	mov	r4,zero
 4006f28:	1080004c 	andi	r2,r2,1
 4006f2c:	10005a1e 	bne	r2,zero,4007098 <_realloc_r+0x21c>
 4006f30:	85fffe17 	ldw	r23,-8(r16)
 4006f34:	00bfff04 	movi	r2,-4
 4006f38:	b5efc83a 	sub	r23,r22,r23
 4006f3c:	b9c00117 	ldw	r7,4(r23)
 4006f40:	388e703a 	and	r7,r7,r2
 4006f44:	3ccf883a 	add	r7,r7,r19
 4006f48:	20005226 	beq	r4,zero,4007094 <_realloc_r+0x218>
 4006f4c:	31e9883a 	add	r20,r6,r7
 4006f50:	2140c726 	beq	r4,r5,4007270 <_realloc_r+0x3f4>
 4006f54:	a0c04f16 	blt	r20,r3,4007094 <_realloc_r+0x218>
 4006f58:	20800317 	ldw	r2,12(r4)
 4006f5c:	20c00217 	ldw	r3,8(r4)
 4006f60:	99bfff04 	addi	r6,r19,-4
 4006f64:	01000904 	movi	r4,36
 4006f68:	18800315 	stw	r2,12(r3)
 4006f6c:	10c00215 	stw	r3,8(r2)
 4006f70:	b8c00217 	ldw	r3,8(r23)
 4006f74:	b8800317 	ldw	r2,12(r23)
 4006f78:	bc800204 	addi	r18,r23,8
 4006f7c:	18800315 	stw	r2,12(r3)
 4006f80:	10c00215 	stw	r3,8(r2)
 4006f84:	2180ed36 	bltu	r4,r6,400733c <_realloc_r+0x4c0>
 4006f88:	008004c4 	movi	r2,19
 4006f8c:	11809b2e 	bgeu	r2,r6,40071fc <_realloc_r+0x380>
 4006f90:	80800017 	ldw	r2,0(r16)
 4006f94:	b8800215 	stw	r2,8(r23)
 4006f98:	80800117 	ldw	r2,4(r16)
 4006f9c:	b8800315 	stw	r2,12(r23)
 4006fa0:	008006c4 	movi	r2,27
 4006fa4:	1180f936 	bltu	r2,r6,400738c <_realloc_r+0x510>
 4006fa8:	b8800404 	addi	r2,r23,16
 4006fac:	80c00204 	addi	r3,r16,8
 4006fb0:	00009406 	br	4007204 <_realloc_r+0x388>
 4006fb4:	00c00404 	movi	r3,16
 4006fb8:	1823883a 	mov	r17,r3
 4006fbc:	003fca06 	br	4006ee8 <__alt_data_end+0xfe006ee8>
 4006fc0:	9829883a 	mov	r20,r19
 4006fc4:	a447c83a 	sub	r3,r20,r17
 4006fc8:	010003c4 	movi	r4,15
 4006fcc:	1080004c 	andi	r2,r2,1
 4006fd0:	20c02336 	bltu	r4,r3,4007060 <_realloc_r+0x1e4>
 4006fd4:	1504b03a 	or	r2,r2,r20
 4006fd8:	b0800115 	stw	r2,4(r22)
 4006fdc:	b52d883a 	add	r22,r22,r20
 4006fe0:	b0800117 	ldw	r2,4(r22)
 4006fe4:	10800054 	ori	r2,r2,1
 4006fe8:	b0800115 	stw	r2,4(r22)
 4006fec:	a809883a 	mov	r4,r21
 4006ff0:	400a42c0 	call	400a42c <__malloc_unlock>
 4006ff4:	8025883a 	mov	r18,r16
 4006ff8:	9005883a 	mov	r2,r18
 4006ffc:	dfc00a17 	ldw	ra,40(sp)
 4007000:	df000917 	ldw	fp,36(sp)
 4007004:	ddc00817 	ldw	r23,32(sp)
 4007008:	dd800717 	ldw	r22,28(sp)
 400700c:	dd400617 	ldw	r21,24(sp)
 4007010:	dd000517 	ldw	r20,20(sp)
 4007014:	dcc00417 	ldw	r19,16(sp)
 4007018:	dc800317 	ldw	r18,12(sp)
 400701c:	dc400217 	ldw	r17,8(sp)
 4007020:	dc000117 	ldw	r16,4(sp)
 4007024:	dec00b04 	addi	sp,sp,44
 4007028:	f800283a 	ret
 400702c:	01ffff04 	movi	r7,-4
 4007030:	31cc703a 	and	r6,r6,r7
 4007034:	34e9883a 	add	r20,r6,r19
 4007038:	a0ffbb16 	blt	r20,r3,4006f28 <__alt_data_end+0xfe006f28>
 400703c:	20c00317 	ldw	r3,12(r4)
 4007040:	21000217 	ldw	r4,8(r4)
 4007044:	20c00315 	stw	r3,12(r4)
 4007048:	19000215 	stw	r4,8(r3)
 400704c:	003fdd06 	br	4006fc4 <__alt_data_end+0xfe006fc4>
 4007050:	00800304 	movi	r2,12
 4007054:	a8800015 	stw	r2,0(r21)
 4007058:	0025883a 	mov	r18,zero
 400705c:	003fe606 	br	4006ff8 <__alt_data_end+0xfe006ff8>
 4007060:	1444b03a 	or	r2,r2,r17
 4007064:	b0800115 	stw	r2,4(r22)
 4007068:	b44b883a 	add	r5,r22,r17
 400706c:	18800054 	ori	r2,r3,1
 4007070:	28800115 	stw	r2,4(r5)
 4007074:	28c7883a 	add	r3,r5,r3
 4007078:	18800117 	ldw	r2,4(r3)
 400707c:	a809883a 	mov	r4,r21
 4007080:	29400204 	addi	r5,r5,8
 4007084:	10800054 	ori	r2,r2,1
 4007088:	18800115 	stw	r2,4(r3)
 400708c:	40045a00 	call	40045a0 <_free_r>
 4007090:	003fd606 	br	4006fec <__alt_data_end+0xfe006fec>
 4007094:	38c0330e 	bge	r7,r3,4007164 <_realloc_r+0x2e8>
 4007098:	900b883a 	mov	r5,r18
 400709c:	a809883a 	mov	r4,r21
 40070a0:	40051380 	call	4005138 <_malloc_r>
 40070a4:	1025883a 	mov	r18,r2
 40070a8:	10001626 	beq	r2,zero,4007104 <_realloc_r+0x288>
 40070ac:	80bfff17 	ldw	r2,-4(r16)
 40070b0:	00ffff84 	movi	r3,-2
 40070b4:	913ffe04 	addi	r4,r18,-8
 40070b8:	10c6703a 	and	r3,r2,r3
 40070bc:	b0c7883a 	add	r3,r22,r3
 40070c0:	20c09926 	beq	r4,r3,4007328 <_realloc_r+0x4ac>
 40070c4:	99bfff04 	addi	r6,r19,-4
 40070c8:	00800904 	movi	r2,36
 40070cc:	11806436 	bltu	r2,r6,4007260 <_realloc_r+0x3e4>
 40070d0:	00c004c4 	movi	r3,19
 40070d4:	19804036 	bltu	r3,r6,40071d8 <_realloc_r+0x35c>
 40070d8:	9005883a 	mov	r2,r18
 40070dc:	8007883a 	mov	r3,r16
 40070e0:	19000017 	ldw	r4,0(r3)
 40070e4:	11000015 	stw	r4,0(r2)
 40070e8:	19000117 	ldw	r4,4(r3)
 40070ec:	11000115 	stw	r4,4(r2)
 40070f0:	18c00217 	ldw	r3,8(r3)
 40070f4:	10c00215 	stw	r3,8(r2)
 40070f8:	a809883a 	mov	r4,r21
 40070fc:	800b883a 	mov	r5,r16
 4007100:	40045a00 	call	40045a0 <_free_r>
 4007104:	a809883a 	mov	r4,r21
 4007108:	400a42c0 	call	400a42c <__malloc_unlock>
 400710c:	003fba06 	br	4006ff8 <__alt_data_end+0xfe006ff8>
 4007110:	300b883a 	mov	r5,r6
 4007114:	dfc00a17 	ldw	ra,40(sp)
 4007118:	df000917 	ldw	fp,36(sp)
 400711c:	ddc00817 	ldw	r23,32(sp)
 4007120:	dd800717 	ldw	r22,28(sp)
 4007124:	dd400617 	ldw	r21,24(sp)
 4007128:	dd000517 	ldw	r20,20(sp)
 400712c:	dcc00417 	ldw	r19,16(sp)
 4007130:	dc800317 	ldw	r18,12(sp)
 4007134:	dc400217 	ldw	r17,8(sp)
 4007138:	dc000117 	ldw	r16,4(sp)
 400713c:	dec00b04 	addi	sp,sp,44
 4007140:	40051381 	jmpi	4005138 <_malloc_r>
 4007144:	29800117 	ldw	r6,4(r5)
 4007148:	013fff04 	movi	r4,-4
 400714c:	89c00404 	addi	r7,r17,16
 4007150:	310c703a 	and	r6,r6,r4
 4007154:	34c9883a 	add	r4,r6,r19
 4007158:	21c0340e 	bge	r4,r7,400722c <_realloc_r+0x3b0>
 400715c:	2809883a 	mov	r4,r5
 4007160:	003f7106 	br	4006f28 <__alt_data_end+0xfe006f28>
 4007164:	b8800317 	ldw	r2,12(r23)
 4007168:	b8c00217 	ldw	r3,8(r23)
 400716c:	99bfff04 	addi	r6,r19,-4
 4007170:	01000904 	movi	r4,36
 4007174:	18800315 	stw	r2,12(r3)
 4007178:	10c00215 	stw	r3,8(r2)
 400717c:	bc800204 	addi	r18,r23,8
 4007180:	21807836 	bltu	r4,r6,4007364 <_realloc_r+0x4e8>
 4007184:	008004c4 	movi	r2,19
 4007188:	1180732e 	bgeu	r2,r6,4007358 <_realloc_r+0x4dc>
 400718c:	80800017 	ldw	r2,0(r16)
 4007190:	b8800215 	stw	r2,8(r23)
 4007194:	80800117 	ldw	r2,4(r16)
 4007198:	b8800315 	stw	r2,12(r23)
 400719c:	008006c4 	movi	r2,27
 40071a0:	11808936 	bltu	r2,r6,40073c8 <_realloc_r+0x54c>
 40071a4:	b8800404 	addi	r2,r23,16
 40071a8:	80c00204 	addi	r3,r16,8
 40071ac:	19000017 	ldw	r4,0(r3)
 40071b0:	9021883a 	mov	r16,r18
 40071b4:	3829883a 	mov	r20,r7
 40071b8:	11000015 	stw	r4,0(r2)
 40071bc:	19000117 	ldw	r4,4(r3)
 40071c0:	b82d883a 	mov	r22,r23
 40071c4:	11000115 	stw	r4,4(r2)
 40071c8:	18c00217 	ldw	r3,8(r3)
 40071cc:	10c00215 	stw	r3,8(r2)
 40071d0:	b8800117 	ldw	r2,4(r23)
 40071d4:	003f7b06 	br	4006fc4 <__alt_data_end+0xfe006fc4>
 40071d8:	80c00017 	ldw	r3,0(r16)
 40071dc:	90c00015 	stw	r3,0(r18)
 40071e0:	80c00117 	ldw	r3,4(r16)
 40071e4:	90c00115 	stw	r3,4(r18)
 40071e8:	00c006c4 	movi	r3,27
 40071ec:	19804636 	bltu	r3,r6,4007308 <_realloc_r+0x48c>
 40071f0:	90800204 	addi	r2,r18,8
 40071f4:	80c00204 	addi	r3,r16,8
 40071f8:	003fb906 	br	40070e0 <__alt_data_end+0xfe0070e0>
 40071fc:	9005883a 	mov	r2,r18
 4007200:	8007883a 	mov	r3,r16
 4007204:	19000017 	ldw	r4,0(r3)
 4007208:	9021883a 	mov	r16,r18
 400720c:	b82d883a 	mov	r22,r23
 4007210:	11000015 	stw	r4,0(r2)
 4007214:	19000117 	ldw	r4,4(r3)
 4007218:	11000115 	stw	r4,4(r2)
 400721c:	18c00217 	ldw	r3,8(r3)
 4007220:	10c00215 	stw	r3,8(r2)
 4007224:	b8800117 	ldw	r2,4(r23)
 4007228:	003f6606 	br	4006fc4 <__alt_data_end+0xfe006fc4>
 400722c:	2445c83a 	sub	r2,r4,r17
 4007230:	b46d883a 	add	r22,r22,r17
 4007234:	10800054 	ori	r2,r2,1
 4007238:	b0800115 	stw	r2,4(r22)
 400723c:	80bfff17 	ldw	r2,-4(r16)
 4007240:	a809883a 	mov	r4,r21
 4007244:	e5800215 	stw	r22,8(fp)
 4007248:	1080004c 	andi	r2,r2,1
 400724c:	88a2b03a 	or	r17,r17,r2
 4007250:	847fff15 	stw	r17,-4(r16)
 4007254:	400a42c0 	call	400a42c <__malloc_unlock>
 4007258:	8025883a 	mov	r18,r16
 400725c:	003f6606 	br	4006ff8 <__alt_data_end+0xfe006ff8>
 4007260:	9009883a 	mov	r4,r18
 4007264:	800b883a 	mov	r5,r16
 4007268:	4005af40 	call	4005af4 <memmove>
 400726c:	003fa206 	br	40070f8 <__alt_data_end+0xfe0070f8>
 4007270:	88800404 	addi	r2,r17,16
 4007274:	a0bf8716 	blt	r20,r2,4007094 <__alt_data_end+0xfe007094>
 4007278:	b8800317 	ldw	r2,12(r23)
 400727c:	b8c00217 	ldw	r3,8(r23)
 4007280:	99bfff04 	addi	r6,r19,-4
 4007284:	01000904 	movi	r4,36
 4007288:	18800315 	stw	r2,12(r3)
 400728c:	10c00215 	stw	r3,8(r2)
 4007290:	bc800204 	addi	r18,r23,8
 4007294:	21806536 	bltu	r4,r6,400742c <_realloc_r+0x5b0>
 4007298:	008004c4 	movi	r2,19
 400729c:	1180592e 	bgeu	r2,r6,4007404 <_realloc_r+0x588>
 40072a0:	80800017 	ldw	r2,0(r16)
 40072a4:	b8800215 	stw	r2,8(r23)
 40072a8:	80800117 	ldw	r2,4(r16)
 40072ac:	b8800315 	stw	r2,12(r23)
 40072b0:	008006c4 	movi	r2,27
 40072b4:	11806136 	bltu	r2,r6,400743c <_realloc_r+0x5c0>
 40072b8:	b8800404 	addi	r2,r23,16
 40072bc:	80c00204 	addi	r3,r16,8
 40072c0:	19000017 	ldw	r4,0(r3)
 40072c4:	11000015 	stw	r4,0(r2)
 40072c8:	19000117 	ldw	r4,4(r3)
 40072cc:	11000115 	stw	r4,4(r2)
 40072d0:	18c00217 	ldw	r3,8(r3)
 40072d4:	10c00215 	stw	r3,8(r2)
 40072d8:	a447c83a 	sub	r3,r20,r17
 40072dc:	bc45883a 	add	r2,r23,r17
 40072e0:	18c00054 	ori	r3,r3,1
 40072e4:	10c00115 	stw	r3,4(r2)
 40072e8:	b8c00117 	ldw	r3,4(r23)
 40072ec:	e0800215 	stw	r2,8(fp)
 40072f0:	a809883a 	mov	r4,r21
 40072f4:	1880004c 	andi	r2,r3,1
 40072f8:	88a2b03a 	or	r17,r17,r2
 40072fc:	bc400115 	stw	r17,4(r23)
 4007300:	400a42c0 	call	400a42c <__malloc_unlock>
 4007304:	003f3c06 	br	4006ff8 <__alt_data_end+0xfe006ff8>
 4007308:	80c00217 	ldw	r3,8(r16)
 400730c:	90c00215 	stw	r3,8(r18)
 4007310:	80c00317 	ldw	r3,12(r16)
 4007314:	90c00315 	stw	r3,12(r18)
 4007318:	30802426 	beq	r6,r2,40073ac <_realloc_r+0x530>
 400731c:	90800404 	addi	r2,r18,16
 4007320:	80c00404 	addi	r3,r16,16
 4007324:	003f6e06 	br	40070e0 <__alt_data_end+0xfe0070e0>
 4007328:	953fff17 	ldw	r20,-4(r18)
 400732c:	00ffff04 	movi	r3,-4
 4007330:	a0e8703a 	and	r20,r20,r3
 4007334:	a4e9883a 	add	r20,r20,r19
 4007338:	003f2206 	br	4006fc4 <__alt_data_end+0xfe006fc4>
 400733c:	800b883a 	mov	r5,r16
 4007340:	9009883a 	mov	r4,r18
 4007344:	4005af40 	call	4005af4 <memmove>
 4007348:	9021883a 	mov	r16,r18
 400734c:	b8800117 	ldw	r2,4(r23)
 4007350:	b82d883a 	mov	r22,r23
 4007354:	003f1b06 	br	4006fc4 <__alt_data_end+0xfe006fc4>
 4007358:	9005883a 	mov	r2,r18
 400735c:	8007883a 	mov	r3,r16
 4007360:	003f9206 	br	40071ac <__alt_data_end+0xfe0071ac>
 4007364:	800b883a 	mov	r5,r16
 4007368:	9009883a 	mov	r4,r18
 400736c:	d9c00015 	stw	r7,0(sp)
 4007370:	4005af40 	call	4005af4 <memmove>
 4007374:	d9c00017 	ldw	r7,0(sp)
 4007378:	9021883a 	mov	r16,r18
 400737c:	b8800117 	ldw	r2,4(r23)
 4007380:	3829883a 	mov	r20,r7
 4007384:	b82d883a 	mov	r22,r23
 4007388:	003f0e06 	br	4006fc4 <__alt_data_end+0xfe006fc4>
 400738c:	80800217 	ldw	r2,8(r16)
 4007390:	b8800415 	stw	r2,16(r23)
 4007394:	80800317 	ldw	r2,12(r16)
 4007398:	b8800515 	stw	r2,20(r23)
 400739c:	31001226 	beq	r6,r4,40073e8 <_realloc_r+0x56c>
 40073a0:	b8800604 	addi	r2,r23,24
 40073a4:	80c00404 	addi	r3,r16,16
 40073a8:	003f9606 	br	4007204 <__alt_data_end+0xfe007204>
 40073ac:	81000417 	ldw	r4,16(r16)
 40073b0:	90800604 	addi	r2,r18,24
 40073b4:	80c00604 	addi	r3,r16,24
 40073b8:	91000415 	stw	r4,16(r18)
 40073bc:	81000517 	ldw	r4,20(r16)
 40073c0:	91000515 	stw	r4,20(r18)
 40073c4:	003f4606 	br	40070e0 <__alt_data_end+0xfe0070e0>
 40073c8:	80800217 	ldw	r2,8(r16)
 40073cc:	b8800415 	stw	r2,16(r23)
 40073d0:	80800317 	ldw	r2,12(r16)
 40073d4:	b8800515 	stw	r2,20(r23)
 40073d8:	31000d26 	beq	r6,r4,4007410 <_realloc_r+0x594>
 40073dc:	b8800604 	addi	r2,r23,24
 40073e0:	80c00404 	addi	r3,r16,16
 40073e4:	003f7106 	br	40071ac <__alt_data_end+0xfe0071ac>
 40073e8:	81000417 	ldw	r4,16(r16)
 40073ec:	b8800804 	addi	r2,r23,32
 40073f0:	80c00604 	addi	r3,r16,24
 40073f4:	b9000615 	stw	r4,24(r23)
 40073f8:	81000517 	ldw	r4,20(r16)
 40073fc:	b9000715 	stw	r4,28(r23)
 4007400:	003f8006 	br	4007204 <__alt_data_end+0xfe007204>
 4007404:	9005883a 	mov	r2,r18
 4007408:	8007883a 	mov	r3,r16
 400740c:	003fac06 	br	40072c0 <__alt_data_end+0xfe0072c0>
 4007410:	81000417 	ldw	r4,16(r16)
 4007414:	b8800804 	addi	r2,r23,32
 4007418:	80c00604 	addi	r3,r16,24
 400741c:	b9000615 	stw	r4,24(r23)
 4007420:	81000517 	ldw	r4,20(r16)
 4007424:	b9000715 	stw	r4,28(r23)
 4007428:	003f6006 	br	40071ac <__alt_data_end+0xfe0071ac>
 400742c:	9009883a 	mov	r4,r18
 4007430:	800b883a 	mov	r5,r16
 4007434:	4005af40 	call	4005af4 <memmove>
 4007438:	003fa706 	br	40072d8 <__alt_data_end+0xfe0072d8>
 400743c:	80800217 	ldw	r2,8(r16)
 4007440:	b8800415 	stw	r2,16(r23)
 4007444:	80800317 	ldw	r2,12(r16)
 4007448:	b8800515 	stw	r2,20(r23)
 400744c:	31000326 	beq	r6,r4,400745c <_realloc_r+0x5e0>
 4007450:	b8800604 	addi	r2,r23,24
 4007454:	80c00404 	addi	r3,r16,16
 4007458:	003f9906 	br	40072c0 <__alt_data_end+0xfe0072c0>
 400745c:	81000417 	ldw	r4,16(r16)
 4007460:	b8800804 	addi	r2,r23,32
 4007464:	80c00604 	addi	r3,r16,24
 4007468:	b9000615 	stw	r4,24(r23)
 400746c:	81000517 	ldw	r4,20(r16)
 4007470:	b9000715 	stw	r4,28(r23)
 4007474:	003f9206 	br	40072c0 <__alt_data_end+0xfe0072c0>

04007478 <__isinfd>:
 4007478:	0105c83a 	sub	r2,zero,r4
 400747c:	1108b03a 	or	r4,r2,r4
 4007480:	2004d7fa 	srli	r2,r4,31
 4007484:	00e00034 	movhi	r3,32768
 4007488:	18ffffc4 	addi	r3,r3,-1
 400748c:	28ca703a 	and	r5,r5,r3
 4007490:	1144b03a 	or	r2,r2,r5
 4007494:	00dffc34 	movhi	r3,32752
 4007498:	1885c83a 	sub	r2,r3,r2
 400749c:	0087c83a 	sub	r3,zero,r2
 40074a0:	1884b03a 	or	r2,r3,r2
 40074a4:	1005d7fa 	srai	r2,r2,31
 40074a8:	10800044 	addi	r2,r2,1
 40074ac:	f800283a 	ret

040074b0 <__isnand>:
 40074b0:	0105c83a 	sub	r2,zero,r4
 40074b4:	1108b03a 	or	r4,r2,r4
 40074b8:	2004d7fa 	srli	r2,r4,31
 40074bc:	00e00034 	movhi	r3,32768
 40074c0:	18ffffc4 	addi	r3,r3,-1
 40074c4:	28ca703a 	and	r5,r5,r3
 40074c8:	1144b03a 	or	r2,r2,r5
 40074cc:	00dffc34 	movhi	r3,32752
 40074d0:	1885c83a 	sub	r2,r3,r2
 40074d4:	1004d7fa 	srli	r2,r2,31
 40074d8:	f800283a 	ret

040074dc <_sbrk_r>:
 40074dc:	defffd04 	addi	sp,sp,-12
 40074e0:	dc400115 	stw	r17,4(sp)
 40074e4:	dc000015 	stw	r16,0(sp)
 40074e8:	2023883a 	mov	r17,r4
 40074ec:	04010074 	movhi	r16,1025
 40074f0:	843f6104 	addi	r16,r16,-636
 40074f4:	2809883a 	mov	r4,r5
 40074f8:	dfc00215 	stw	ra,8(sp)
 40074fc:	80000015 	stw	zero,0(r16)
 4007500:	400a6100 	call	400a610 <sbrk>
 4007504:	00ffffc4 	movi	r3,-1
 4007508:	10c00526 	beq	r2,r3,4007520 <_sbrk_r+0x44>
 400750c:	dfc00217 	ldw	ra,8(sp)
 4007510:	dc400117 	ldw	r17,4(sp)
 4007514:	dc000017 	ldw	r16,0(sp)
 4007518:	dec00304 	addi	sp,sp,12
 400751c:	f800283a 	ret
 4007520:	80c00017 	ldw	r3,0(r16)
 4007524:	183ff926 	beq	r3,zero,400750c <__alt_data_end+0xfe00750c>
 4007528:	88c00015 	stw	r3,0(r17)
 400752c:	dfc00217 	ldw	ra,8(sp)
 4007530:	dc400117 	ldw	r17,4(sp)
 4007534:	dc000017 	ldw	r16,0(sp)
 4007538:	dec00304 	addi	sp,sp,12
 400753c:	f800283a 	ret

04007540 <__sread>:
 4007540:	defffe04 	addi	sp,sp,-8
 4007544:	dc000015 	stw	r16,0(sp)
 4007548:	2821883a 	mov	r16,r5
 400754c:	2940038f 	ldh	r5,14(r5)
 4007550:	dfc00115 	stw	ra,4(sp)
 4007554:	4007ca00 	call	4007ca0 <_read_r>
 4007558:	10000716 	blt	r2,zero,4007578 <__sread+0x38>
 400755c:	80c01417 	ldw	r3,80(r16)
 4007560:	1887883a 	add	r3,r3,r2
 4007564:	80c01415 	stw	r3,80(r16)
 4007568:	dfc00117 	ldw	ra,4(sp)
 400756c:	dc000017 	ldw	r16,0(sp)
 4007570:	dec00204 	addi	sp,sp,8
 4007574:	f800283a 	ret
 4007578:	80c0030b 	ldhu	r3,12(r16)
 400757c:	18fbffcc 	andi	r3,r3,61439
 4007580:	80c0030d 	sth	r3,12(r16)
 4007584:	dfc00117 	ldw	ra,4(sp)
 4007588:	dc000017 	ldw	r16,0(sp)
 400758c:	dec00204 	addi	sp,sp,8
 4007590:	f800283a 	ret

04007594 <__swrite>:
 4007594:	2880030b 	ldhu	r2,12(r5)
 4007598:	defffb04 	addi	sp,sp,-20
 400759c:	dcc00315 	stw	r19,12(sp)
 40075a0:	10c0400c 	andi	r3,r2,256
 40075a4:	18ffffcc 	andi	r3,r3,65535
 40075a8:	18e0001c 	xori	r3,r3,32768
 40075ac:	dc800215 	stw	r18,8(sp)
 40075b0:	dc400115 	stw	r17,4(sp)
 40075b4:	dc000015 	stw	r16,0(sp)
 40075b8:	dfc00415 	stw	ra,16(sp)
 40075bc:	18e00004 	addi	r3,r3,-32768
 40075c0:	2821883a 	mov	r16,r5
 40075c4:	2027883a 	mov	r19,r4
 40075c8:	3025883a 	mov	r18,r6
 40075cc:	3823883a 	mov	r17,r7
 40075d0:	18000526 	beq	r3,zero,40075e8 <__swrite+0x54>
 40075d4:	2940038f 	ldh	r5,14(r5)
 40075d8:	000d883a 	mov	r6,zero
 40075dc:	01c00084 	movi	r7,2
 40075e0:	4007c340 	call	4007c34 <_lseek_r>
 40075e4:	8080030b 	ldhu	r2,12(r16)
 40075e8:	8140038f 	ldh	r5,14(r16)
 40075ec:	10bbffcc 	andi	r2,r2,61439
 40075f0:	9809883a 	mov	r4,r19
 40075f4:	900d883a 	mov	r6,r18
 40075f8:	880f883a 	mov	r7,r17
 40075fc:	8080030d 	sth	r2,12(r16)
 4007600:	dfc00417 	ldw	ra,16(sp)
 4007604:	dcc00317 	ldw	r19,12(sp)
 4007608:	dc800217 	ldw	r18,8(sp)
 400760c:	dc400117 	ldw	r17,4(sp)
 4007610:	dc000017 	ldw	r16,0(sp)
 4007614:	dec00504 	addi	sp,sp,20
 4007618:	400787c1 	jmpi	400787c <_write_r>

0400761c <__sseek>:
 400761c:	defffe04 	addi	sp,sp,-8
 4007620:	dc000015 	stw	r16,0(sp)
 4007624:	2821883a 	mov	r16,r5
 4007628:	2940038f 	ldh	r5,14(r5)
 400762c:	dfc00115 	stw	ra,4(sp)
 4007630:	4007c340 	call	4007c34 <_lseek_r>
 4007634:	00ffffc4 	movi	r3,-1
 4007638:	10c00826 	beq	r2,r3,400765c <__sseek+0x40>
 400763c:	80c0030b 	ldhu	r3,12(r16)
 4007640:	80801415 	stw	r2,80(r16)
 4007644:	18c40014 	ori	r3,r3,4096
 4007648:	80c0030d 	sth	r3,12(r16)
 400764c:	dfc00117 	ldw	ra,4(sp)
 4007650:	dc000017 	ldw	r16,0(sp)
 4007654:	dec00204 	addi	sp,sp,8
 4007658:	f800283a 	ret
 400765c:	80c0030b 	ldhu	r3,12(r16)
 4007660:	18fbffcc 	andi	r3,r3,61439
 4007664:	80c0030d 	sth	r3,12(r16)
 4007668:	dfc00117 	ldw	ra,4(sp)
 400766c:	dc000017 	ldw	r16,0(sp)
 4007670:	dec00204 	addi	sp,sp,8
 4007674:	f800283a 	ret

04007678 <__sclose>:
 4007678:	2940038f 	ldh	r5,14(r5)
 400767c:	40079b41 	jmpi	40079b4 <_close_r>

04007680 <strcmp>:
 4007680:	2904b03a 	or	r2,r5,r4
 4007684:	108000cc 	andi	r2,r2,3
 4007688:	1000171e 	bne	r2,zero,40076e8 <strcmp+0x68>
 400768c:	20800017 	ldw	r2,0(r4)
 4007690:	28c00017 	ldw	r3,0(r5)
 4007694:	10c0141e 	bne	r2,r3,40076e8 <strcmp+0x68>
 4007698:	027fbff4 	movhi	r9,65279
 400769c:	4a7fbfc4 	addi	r9,r9,-257
 40076a0:	1247883a 	add	r3,r2,r9
 40076a4:	0084303a 	nor	r2,zero,r2
 40076a8:	1884703a 	and	r2,r3,r2
 40076ac:	02202074 	movhi	r8,32897
 40076b0:	42202004 	addi	r8,r8,-32640
 40076b4:	1204703a 	and	r2,r2,r8
 40076b8:	10000226 	beq	r2,zero,40076c4 <strcmp+0x44>
 40076bc:	00001706 	br	400771c <strcmp+0x9c>
 40076c0:	3000161e 	bne	r6,zero,400771c <strcmp+0x9c>
 40076c4:	21000104 	addi	r4,r4,4
 40076c8:	20800017 	ldw	r2,0(r4)
 40076cc:	29400104 	addi	r5,r5,4
 40076d0:	28c00017 	ldw	r3,0(r5)
 40076d4:	124f883a 	add	r7,r2,r9
 40076d8:	008c303a 	nor	r6,zero,r2
 40076dc:	398c703a 	and	r6,r7,r6
 40076e0:	320c703a 	and	r6,r6,r8
 40076e4:	10fff626 	beq	r2,r3,40076c0 <__alt_data_end+0xfe0076c0>
 40076e8:	20800007 	ldb	r2,0(r4)
 40076ec:	1000051e 	bne	r2,zero,4007704 <strcmp+0x84>
 40076f0:	00000606 	br	400770c <strcmp+0x8c>
 40076f4:	21000044 	addi	r4,r4,1
 40076f8:	20800007 	ldb	r2,0(r4)
 40076fc:	29400044 	addi	r5,r5,1
 4007700:	10000226 	beq	r2,zero,400770c <strcmp+0x8c>
 4007704:	28c00007 	ldb	r3,0(r5)
 4007708:	10fffa26 	beq	r2,r3,40076f4 <__alt_data_end+0xfe0076f4>
 400770c:	20c00003 	ldbu	r3,0(r4)
 4007710:	28800003 	ldbu	r2,0(r5)
 4007714:	1885c83a 	sub	r2,r3,r2
 4007718:	f800283a 	ret
 400771c:	0005883a 	mov	r2,zero
 4007720:	f800283a 	ret

04007724 <__swbuf_r>:
 4007724:	defffc04 	addi	sp,sp,-16
 4007728:	dc800215 	stw	r18,8(sp)
 400772c:	dc400115 	stw	r17,4(sp)
 4007730:	dc000015 	stw	r16,0(sp)
 4007734:	dfc00315 	stw	ra,12(sp)
 4007738:	2023883a 	mov	r17,r4
 400773c:	2825883a 	mov	r18,r5
 4007740:	3021883a 	mov	r16,r6
 4007744:	20000226 	beq	r4,zero,4007750 <__swbuf_r+0x2c>
 4007748:	20800e17 	ldw	r2,56(r4)
 400774c:	10003b26 	beq	r2,zero,400783c <__swbuf_r+0x118>
 4007750:	8080030b 	ldhu	r2,12(r16)
 4007754:	80c00617 	ldw	r3,24(r16)
 4007758:	1080020c 	andi	r2,r2,8
 400775c:	10bfffcc 	andi	r2,r2,65535
 4007760:	10a0001c 	xori	r2,r2,32768
 4007764:	80c00215 	stw	r3,8(r16)
 4007768:	10a00004 	addi	r2,r2,-32768
 400776c:	10002226 	beq	r2,zero,40077f8 <__swbuf_r+0xd4>
 4007770:	80800417 	ldw	r2,16(r16)
 4007774:	10002026 	beq	r2,zero,40077f8 <__swbuf_r+0xd4>
 4007778:	80c00017 	ldw	r3,0(r16)
 400777c:	81000517 	ldw	r4,20(r16)
 4007780:	94803fcc 	andi	r18,r18,255
 4007784:	1885c83a 	sub	r2,r3,r2
 4007788:	1100250e 	bge	r2,r4,4007820 <__swbuf_r+0xfc>
 400778c:	10800044 	addi	r2,r2,1
 4007790:	81400217 	ldw	r5,8(r16)
 4007794:	19000044 	addi	r4,r3,1
 4007798:	297fffc4 	addi	r5,r5,-1
 400779c:	81400215 	stw	r5,8(r16)
 40077a0:	1c800005 	stb	r18,0(r3)
 40077a4:	80c00517 	ldw	r3,20(r16)
 40077a8:	81000015 	stw	r4,0(r16)
 40077ac:	18800c26 	beq	r3,r2,40077e0 <__swbuf_r+0xbc>
 40077b0:	8080030b 	ldhu	r2,12(r16)
 40077b4:	1080004c 	andi	r2,r2,1
 40077b8:	10000226 	beq	r2,zero,40077c4 <__swbuf_r+0xa0>
 40077bc:	00800284 	movi	r2,10
 40077c0:	90800726 	beq	r18,r2,40077e0 <__swbuf_r+0xbc>
 40077c4:	9005883a 	mov	r2,r18
 40077c8:	dfc00317 	ldw	ra,12(sp)
 40077cc:	dc800217 	ldw	r18,8(sp)
 40077d0:	dc400117 	ldw	r17,4(sp)
 40077d4:	dc000017 	ldw	r16,0(sp)
 40077d8:	dec00404 	addi	sp,sp,16
 40077dc:	f800283a 	ret
 40077e0:	8809883a 	mov	r4,r17
 40077e4:	800b883a 	mov	r5,r16
 40077e8:	4003f600 	call	4003f60 <_fflush_r>
 40077ec:	103ff526 	beq	r2,zero,40077c4 <__alt_data_end+0xfe0077c4>
 40077f0:	04bfffc4 	movi	r18,-1
 40077f4:	003ff306 	br	40077c4 <__alt_data_end+0xfe0077c4>
 40077f8:	8809883a 	mov	r4,r17
 40077fc:	800b883a 	mov	r5,r16
 4007800:	40025940 	call	4002594 <__swsetup_r>
 4007804:	10000f1e 	bne	r2,zero,4007844 <__swbuf_r+0x120>
 4007808:	80800417 	ldw	r2,16(r16)
 400780c:	80c00017 	ldw	r3,0(r16)
 4007810:	81000517 	ldw	r4,20(r16)
 4007814:	94803fcc 	andi	r18,r18,255
 4007818:	1885c83a 	sub	r2,r3,r2
 400781c:	113fdb16 	blt	r2,r4,400778c <__alt_data_end+0xfe00778c>
 4007820:	8809883a 	mov	r4,r17
 4007824:	800b883a 	mov	r5,r16
 4007828:	4003f600 	call	4003f60 <_fflush_r>
 400782c:	103ff01e 	bne	r2,zero,40077f0 <__alt_data_end+0xfe0077f0>
 4007830:	80c00017 	ldw	r3,0(r16)
 4007834:	00800044 	movi	r2,1
 4007838:	003fd506 	br	4007790 <__alt_data_end+0xfe007790>
 400783c:	400421c0 	call	400421c <__sinit>
 4007840:	003fc306 	br	4007750 <__alt_data_end+0xfe007750>
 4007844:	8080030b 	ldhu	r2,12(r16)
 4007848:	04bfffc4 	movi	r18,-1
 400784c:	10801014 	ori	r2,r2,64
 4007850:	8080030d 	sth	r2,12(r16)
 4007854:	00800244 	movi	r2,9
 4007858:	88800015 	stw	r2,0(r17)
 400785c:	003fd906 	br	40077c4 <__alt_data_end+0xfe0077c4>

04007860 <__swbuf>:
 4007860:	00c10074 	movhi	r3,1025
 4007864:	18f8b704 	addi	r3,r3,-7460
 4007868:	2005883a 	mov	r2,r4
 400786c:	19000017 	ldw	r4,0(r3)
 4007870:	280d883a 	mov	r6,r5
 4007874:	100b883a 	mov	r5,r2
 4007878:	40077241 	jmpi	4007724 <__swbuf_r>

0400787c <_write_r>:
 400787c:	defffd04 	addi	sp,sp,-12
 4007880:	dc400115 	stw	r17,4(sp)
 4007884:	dc000015 	stw	r16,0(sp)
 4007888:	2023883a 	mov	r17,r4
 400788c:	04010074 	movhi	r16,1025
 4007890:	843f6104 	addi	r16,r16,-636
 4007894:	2809883a 	mov	r4,r5
 4007898:	300b883a 	mov	r5,r6
 400789c:	380d883a 	mov	r6,r7
 40078a0:	dfc00215 	stw	ra,8(sp)
 40078a4:	80000015 	stw	zero,0(r16)
 40078a8:	400a7100 	call	400a710 <write>
 40078ac:	00ffffc4 	movi	r3,-1
 40078b0:	10c00526 	beq	r2,r3,40078c8 <_write_r+0x4c>
 40078b4:	dfc00217 	ldw	ra,8(sp)
 40078b8:	dc400117 	ldw	r17,4(sp)
 40078bc:	dc000017 	ldw	r16,0(sp)
 40078c0:	dec00304 	addi	sp,sp,12
 40078c4:	f800283a 	ret
 40078c8:	80c00017 	ldw	r3,0(r16)
 40078cc:	183ff926 	beq	r3,zero,40078b4 <__alt_data_end+0xfe0078b4>
 40078d0:	88c00015 	stw	r3,0(r17)
 40078d4:	dfc00217 	ldw	ra,8(sp)
 40078d8:	dc400117 	ldw	r17,4(sp)
 40078dc:	dc000017 	ldw	r16,0(sp)
 40078e0:	dec00304 	addi	sp,sp,12
 40078e4:	f800283a 	ret

040078e8 <_calloc_r>:
 40078e8:	defffe04 	addi	sp,sp,-8
 40078ec:	dc000015 	stw	r16,0(sp)
 40078f0:	2021883a 	mov	r16,r4
 40078f4:	3009883a 	mov	r4,r6
 40078f8:	dfc00115 	stw	ra,4(sp)
 40078fc:	40097e40 	call	40097e4 <__mulsi3>
 4007900:	8009883a 	mov	r4,r16
 4007904:	100b883a 	mov	r5,r2
 4007908:	40051380 	call	4005138 <_malloc_r>
 400790c:	1021883a 	mov	r16,r2
 4007910:	10000c26 	beq	r2,zero,4007944 <_calloc_r+0x5c>
 4007914:	11bfff17 	ldw	r6,-4(r2)
 4007918:	00ffff04 	movi	r3,-4
 400791c:	00800904 	movi	r2,36
 4007920:	30cc703a 	and	r6,r6,r3
 4007924:	30cd883a 	add	r6,r6,r3
 4007928:	11801436 	bltu	r2,r6,400797c <_calloc_r+0x94>
 400792c:	00c004c4 	movi	r3,19
 4007930:	19800936 	bltu	r3,r6,4007958 <_calloc_r+0x70>
 4007934:	8005883a 	mov	r2,r16
 4007938:	10000015 	stw	zero,0(r2)
 400793c:	10000115 	stw	zero,4(r2)
 4007940:	10000215 	stw	zero,8(r2)
 4007944:	8005883a 	mov	r2,r16
 4007948:	dfc00117 	ldw	ra,4(sp)
 400794c:	dc000017 	ldw	r16,0(sp)
 4007950:	dec00204 	addi	sp,sp,8
 4007954:	f800283a 	ret
 4007958:	80000015 	stw	zero,0(r16)
 400795c:	80000115 	stw	zero,4(r16)
 4007960:	00c006c4 	movi	r3,27
 4007964:	19800d2e 	bgeu	r3,r6,400799c <_calloc_r+0xb4>
 4007968:	80000215 	stw	zero,8(r16)
 400796c:	80000315 	stw	zero,12(r16)
 4007970:	30800c26 	beq	r6,r2,40079a4 <_calloc_r+0xbc>
 4007974:	80800404 	addi	r2,r16,16
 4007978:	003fef06 	br	4007938 <__alt_data_end+0xfe007938>
 400797c:	8009883a 	mov	r4,r16
 4007980:	000b883a 	mov	r5,zero
 4007984:	40004340 	call	4000434 <memset>
 4007988:	8005883a 	mov	r2,r16
 400798c:	dfc00117 	ldw	ra,4(sp)
 4007990:	dc000017 	ldw	r16,0(sp)
 4007994:	dec00204 	addi	sp,sp,8
 4007998:	f800283a 	ret
 400799c:	80800204 	addi	r2,r16,8
 40079a0:	003fe506 	br	4007938 <__alt_data_end+0xfe007938>
 40079a4:	80000415 	stw	zero,16(r16)
 40079a8:	80000515 	stw	zero,20(r16)
 40079ac:	80800604 	addi	r2,r16,24
 40079b0:	003fe106 	br	4007938 <__alt_data_end+0xfe007938>

040079b4 <_close_r>:
 40079b4:	defffd04 	addi	sp,sp,-12
 40079b8:	dc400115 	stw	r17,4(sp)
 40079bc:	dc000015 	stw	r16,0(sp)
 40079c0:	2023883a 	mov	r17,r4
 40079c4:	04010074 	movhi	r16,1025
 40079c8:	843f6104 	addi	r16,r16,-636
 40079cc:	2809883a 	mov	r4,r5
 40079d0:	dfc00215 	stw	ra,8(sp)
 40079d4:	80000015 	stw	zero,0(r16)
 40079d8:	4009e980 	call	4009e98 <close>
 40079dc:	00ffffc4 	movi	r3,-1
 40079e0:	10c00526 	beq	r2,r3,40079f8 <_close_r+0x44>
 40079e4:	dfc00217 	ldw	ra,8(sp)
 40079e8:	dc400117 	ldw	r17,4(sp)
 40079ec:	dc000017 	ldw	r16,0(sp)
 40079f0:	dec00304 	addi	sp,sp,12
 40079f4:	f800283a 	ret
 40079f8:	80c00017 	ldw	r3,0(r16)
 40079fc:	183ff926 	beq	r3,zero,40079e4 <__alt_data_end+0xfe0079e4>
 4007a00:	88c00015 	stw	r3,0(r17)
 4007a04:	dfc00217 	ldw	ra,8(sp)
 4007a08:	dc400117 	ldw	r17,4(sp)
 4007a0c:	dc000017 	ldw	r16,0(sp)
 4007a10:	dec00304 	addi	sp,sp,12
 4007a14:	f800283a 	ret

04007a18 <_fclose_r>:
 4007a18:	defffc04 	addi	sp,sp,-16
 4007a1c:	dc400115 	stw	r17,4(sp)
 4007a20:	dc000015 	stw	r16,0(sp)
 4007a24:	dfc00315 	stw	ra,12(sp)
 4007a28:	dc800215 	stw	r18,8(sp)
 4007a2c:	2821883a 	mov	r16,r5
 4007a30:	2023883a 	mov	r17,r4
 4007a34:	28003426 	beq	r5,zero,4007b08 <_fclose_r+0xf0>
 4007a38:	40044240 	call	4004424 <__sfp_lock_acquire>
 4007a3c:	88000226 	beq	r17,zero,4007a48 <_fclose_r+0x30>
 4007a40:	88800e17 	ldw	r2,56(r17)
 4007a44:	10003826 	beq	r2,zero,4007b28 <_fclose_r+0x110>
 4007a48:	8080030f 	ldh	r2,12(r16)
 4007a4c:	10002526 	beq	r2,zero,4007ae4 <_fclose_r+0xcc>
 4007a50:	8809883a 	mov	r4,r17
 4007a54:	800b883a 	mov	r5,r16
 4007a58:	4003f600 	call	4003f60 <_fflush_r>
 4007a5c:	1025883a 	mov	r18,r2
 4007a60:	80800b17 	ldw	r2,44(r16)
 4007a64:	10000426 	beq	r2,zero,4007a78 <_fclose_r+0x60>
 4007a68:	81400717 	ldw	r5,28(r16)
 4007a6c:	8809883a 	mov	r4,r17
 4007a70:	103ee83a 	callr	r2
 4007a74:	10003516 	blt	r2,zero,4007b4c <_fclose_r+0x134>
 4007a78:	8080030b 	ldhu	r2,12(r16)
 4007a7c:	1080200c 	andi	r2,r2,128
 4007a80:	10bfffcc 	andi	r2,r2,65535
 4007a84:	10a0001c 	xori	r2,r2,32768
 4007a88:	10a00004 	addi	r2,r2,-32768
 4007a8c:	10002b1e 	bne	r2,zero,4007b3c <_fclose_r+0x124>
 4007a90:	81400c17 	ldw	r5,48(r16)
 4007a94:	28000526 	beq	r5,zero,4007aac <_fclose_r+0x94>
 4007a98:	80801004 	addi	r2,r16,64
 4007a9c:	28800226 	beq	r5,r2,4007aa8 <_fclose_r+0x90>
 4007aa0:	8809883a 	mov	r4,r17
 4007aa4:	40045a00 	call	40045a0 <_free_r>
 4007aa8:	80000c15 	stw	zero,48(r16)
 4007aac:	81401117 	ldw	r5,68(r16)
 4007ab0:	28000326 	beq	r5,zero,4007ac0 <_fclose_r+0xa8>
 4007ab4:	8809883a 	mov	r4,r17
 4007ab8:	40045a00 	call	40045a0 <_free_r>
 4007abc:	80001115 	stw	zero,68(r16)
 4007ac0:	8000030d 	sth	zero,12(r16)
 4007ac4:	40044280 	call	4004428 <__sfp_lock_release>
 4007ac8:	9005883a 	mov	r2,r18
 4007acc:	dfc00317 	ldw	ra,12(sp)
 4007ad0:	dc800217 	ldw	r18,8(sp)
 4007ad4:	dc400117 	ldw	r17,4(sp)
 4007ad8:	dc000017 	ldw	r16,0(sp)
 4007adc:	dec00404 	addi	sp,sp,16
 4007ae0:	f800283a 	ret
 4007ae4:	40044280 	call	4004428 <__sfp_lock_release>
 4007ae8:	0025883a 	mov	r18,zero
 4007aec:	9005883a 	mov	r2,r18
 4007af0:	dfc00317 	ldw	ra,12(sp)
 4007af4:	dc800217 	ldw	r18,8(sp)
 4007af8:	dc400117 	ldw	r17,4(sp)
 4007afc:	dc000017 	ldw	r16,0(sp)
 4007b00:	dec00404 	addi	sp,sp,16
 4007b04:	f800283a 	ret
 4007b08:	0025883a 	mov	r18,zero
 4007b0c:	9005883a 	mov	r2,r18
 4007b10:	dfc00317 	ldw	ra,12(sp)
 4007b14:	dc800217 	ldw	r18,8(sp)
 4007b18:	dc400117 	ldw	r17,4(sp)
 4007b1c:	dc000017 	ldw	r16,0(sp)
 4007b20:	dec00404 	addi	sp,sp,16
 4007b24:	f800283a 	ret
 4007b28:	8809883a 	mov	r4,r17
 4007b2c:	400421c0 	call	400421c <__sinit>
 4007b30:	8080030f 	ldh	r2,12(r16)
 4007b34:	103fc61e 	bne	r2,zero,4007a50 <__alt_data_end+0xfe007a50>
 4007b38:	003fea06 	br	4007ae4 <__alt_data_end+0xfe007ae4>
 4007b3c:	81400417 	ldw	r5,16(r16)
 4007b40:	8809883a 	mov	r4,r17
 4007b44:	40045a00 	call	40045a0 <_free_r>
 4007b48:	003fd106 	br	4007a90 <__alt_data_end+0xfe007a90>
 4007b4c:	04bfffc4 	movi	r18,-1
 4007b50:	003fc906 	br	4007a78 <__alt_data_end+0xfe007a78>

04007b54 <fclose>:
 4007b54:	00810074 	movhi	r2,1025
 4007b58:	10b8b704 	addi	r2,r2,-7460
 4007b5c:	200b883a 	mov	r5,r4
 4007b60:	11000017 	ldw	r4,0(r2)
 4007b64:	4007a181 	jmpi	4007a18 <_fclose_r>

04007b68 <_fstat_r>:
 4007b68:	defffd04 	addi	sp,sp,-12
 4007b6c:	dc400115 	stw	r17,4(sp)
 4007b70:	dc000015 	stw	r16,0(sp)
 4007b74:	2023883a 	mov	r17,r4
 4007b78:	04010074 	movhi	r16,1025
 4007b7c:	843f6104 	addi	r16,r16,-636
 4007b80:	2809883a 	mov	r4,r5
 4007b84:	300b883a 	mov	r5,r6
 4007b88:	dfc00215 	stw	ra,8(sp)
 4007b8c:	80000015 	stw	zero,0(r16)
 4007b90:	4009fe00 	call	4009fe0 <fstat>
 4007b94:	00ffffc4 	movi	r3,-1
 4007b98:	10c00526 	beq	r2,r3,4007bb0 <_fstat_r+0x48>
 4007b9c:	dfc00217 	ldw	ra,8(sp)
 4007ba0:	dc400117 	ldw	r17,4(sp)
 4007ba4:	dc000017 	ldw	r16,0(sp)
 4007ba8:	dec00304 	addi	sp,sp,12
 4007bac:	f800283a 	ret
 4007bb0:	80c00017 	ldw	r3,0(r16)
 4007bb4:	183ff926 	beq	r3,zero,4007b9c <__alt_data_end+0xfe007b9c>
 4007bb8:	88c00015 	stw	r3,0(r17)
 4007bbc:	dfc00217 	ldw	ra,8(sp)
 4007bc0:	dc400117 	ldw	r17,4(sp)
 4007bc4:	dc000017 	ldw	r16,0(sp)
 4007bc8:	dec00304 	addi	sp,sp,12
 4007bcc:	f800283a 	ret

04007bd0 <_isatty_r>:
 4007bd0:	defffd04 	addi	sp,sp,-12
 4007bd4:	dc400115 	stw	r17,4(sp)
 4007bd8:	dc000015 	stw	r16,0(sp)
 4007bdc:	2023883a 	mov	r17,r4
 4007be0:	04010074 	movhi	r16,1025
 4007be4:	843f6104 	addi	r16,r16,-636
 4007be8:	2809883a 	mov	r4,r5
 4007bec:	dfc00215 	stw	ra,8(sp)
 4007bf0:	80000015 	stw	zero,0(r16)
 4007bf4:	400a0e00 	call	400a0e0 <isatty>
 4007bf8:	00ffffc4 	movi	r3,-1
 4007bfc:	10c00526 	beq	r2,r3,4007c14 <_isatty_r+0x44>
 4007c00:	dfc00217 	ldw	ra,8(sp)
 4007c04:	dc400117 	ldw	r17,4(sp)
 4007c08:	dc000017 	ldw	r16,0(sp)
 4007c0c:	dec00304 	addi	sp,sp,12
 4007c10:	f800283a 	ret
 4007c14:	80c00017 	ldw	r3,0(r16)
 4007c18:	183ff926 	beq	r3,zero,4007c00 <__alt_data_end+0xfe007c00>
 4007c1c:	88c00015 	stw	r3,0(r17)
 4007c20:	dfc00217 	ldw	ra,8(sp)
 4007c24:	dc400117 	ldw	r17,4(sp)
 4007c28:	dc000017 	ldw	r16,0(sp)
 4007c2c:	dec00304 	addi	sp,sp,12
 4007c30:	f800283a 	ret

04007c34 <_lseek_r>:
 4007c34:	defffd04 	addi	sp,sp,-12
 4007c38:	dc400115 	stw	r17,4(sp)
 4007c3c:	dc000015 	stw	r16,0(sp)
 4007c40:	2023883a 	mov	r17,r4
 4007c44:	04010074 	movhi	r16,1025
 4007c48:	843f6104 	addi	r16,r16,-636
 4007c4c:	2809883a 	mov	r4,r5
 4007c50:	300b883a 	mov	r5,r6
 4007c54:	380d883a 	mov	r6,r7
 4007c58:	dfc00215 	stw	ra,8(sp)
 4007c5c:	80000015 	stw	zero,0(r16)
 4007c60:	400a2c00 	call	400a2c0 <lseek>
 4007c64:	00ffffc4 	movi	r3,-1
 4007c68:	10c00526 	beq	r2,r3,4007c80 <_lseek_r+0x4c>
 4007c6c:	dfc00217 	ldw	ra,8(sp)
 4007c70:	dc400117 	ldw	r17,4(sp)
 4007c74:	dc000017 	ldw	r16,0(sp)
 4007c78:	dec00304 	addi	sp,sp,12
 4007c7c:	f800283a 	ret
 4007c80:	80c00017 	ldw	r3,0(r16)
 4007c84:	183ff926 	beq	r3,zero,4007c6c <__alt_data_end+0xfe007c6c>
 4007c88:	88c00015 	stw	r3,0(r17)
 4007c8c:	dfc00217 	ldw	ra,8(sp)
 4007c90:	dc400117 	ldw	r17,4(sp)
 4007c94:	dc000017 	ldw	r16,0(sp)
 4007c98:	dec00304 	addi	sp,sp,12
 4007c9c:	f800283a 	ret

04007ca0 <_read_r>:
 4007ca0:	defffd04 	addi	sp,sp,-12
 4007ca4:	dc400115 	stw	r17,4(sp)
 4007ca8:	dc000015 	stw	r16,0(sp)
 4007cac:	2023883a 	mov	r17,r4
 4007cb0:	04010074 	movhi	r16,1025
 4007cb4:	843f6104 	addi	r16,r16,-636
 4007cb8:	2809883a 	mov	r4,r5
 4007cbc:	300b883a 	mov	r5,r6
 4007cc0:	380d883a 	mov	r6,r7
 4007cc4:	dfc00215 	stw	ra,8(sp)
 4007cc8:	80000015 	stw	zero,0(r16)
 4007ccc:	400a49c0 	call	400a49c <read>
 4007cd0:	00ffffc4 	movi	r3,-1
 4007cd4:	10c00526 	beq	r2,r3,4007cec <_read_r+0x4c>
 4007cd8:	dfc00217 	ldw	ra,8(sp)
 4007cdc:	dc400117 	ldw	r17,4(sp)
 4007ce0:	dc000017 	ldw	r16,0(sp)
 4007ce4:	dec00304 	addi	sp,sp,12
 4007ce8:	f800283a 	ret
 4007cec:	80c00017 	ldw	r3,0(r16)
 4007cf0:	183ff926 	beq	r3,zero,4007cd8 <__alt_data_end+0xfe007cd8>
 4007cf4:	88c00015 	stw	r3,0(r17)
 4007cf8:	dfc00217 	ldw	ra,8(sp)
 4007cfc:	dc400117 	ldw	r17,4(sp)
 4007d00:	dc000017 	ldw	r16,0(sp)
 4007d04:	dec00304 	addi	sp,sp,12
 4007d08:	f800283a 	ret

04007d0c <__udivdi3>:
 4007d0c:	defff504 	addi	sp,sp,-44
 4007d10:	dd000515 	stw	r20,20(sp)
 4007d14:	dcc00415 	stw	r19,16(sp)
 4007d18:	dc800315 	stw	r18,12(sp)
 4007d1c:	dc400215 	stw	r17,8(sp)
 4007d20:	dc000115 	stw	r16,4(sp)
 4007d24:	dfc00a15 	stw	ra,40(sp)
 4007d28:	df000915 	stw	fp,36(sp)
 4007d2c:	ddc00815 	stw	r23,32(sp)
 4007d30:	dd800715 	stw	r22,28(sp)
 4007d34:	dd400615 	stw	r21,24(sp)
 4007d38:	2025883a 	mov	r18,r4
 4007d3c:	2823883a 	mov	r17,r5
 4007d40:	3021883a 	mov	r16,r6
 4007d44:	2027883a 	mov	r19,r4
 4007d48:	2829883a 	mov	r20,r5
 4007d4c:	3800451e 	bne	r7,zero,4007e64 <__udivdi3+0x158>
 4007d50:	2980652e 	bgeu	r5,r6,4007ee8 <__udivdi3+0x1dc>
 4007d54:	00bfffd4 	movui	r2,65535
 4007d58:	1180b436 	bltu	r2,r6,400802c <__udivdi3+0x320>
 4007d5c:	00803fc4 	movi	r2,255
 4007d60:	11816636 	bltu	r2,r6,40082fc <__udivdi3+0x5f0>
 4007d64:	0005883a 	mov	r2,zero
 4007d68:	0007883a 	mov	r3,zero
 4007d6c:	3084d83a 	srl	r2,r6,r2
 4007d70:	01010074 	movhi	r4,1025
 4007d74:	2131e204 	addi	r4,r4,-14456
 4007d78:	2085883a 	add	r2,r4,r2
 4007d7c:	10800003 	ldbu	r2,0(r2)
 4007d80:	10c7883a 	add	r3,r2,r3
 4007d84:	00800804 	movi	r2,32
 4007d88:	10c5c83a 	sub	r2,r2,r3
 4007d8c:	10000526 	beq	r2,zero,4007da4 <__udivdi3+0x98>
 4007d90:	88a2983a 	sll	r17,r17,r2
 4007d94:	90c6d83a 	srl	r3,r18,r3
 4007d98:	30a0983a 	sll	r16,r6,r2
 4007d9c:	90a6983a 	sll	r19,r18,r2
 4007da0:	88e8b03a 	or	r20,r17,r3
 4007da4:	8022d43a 	srli	r17,r16,16
 4007da8:	a009883a 	mov	r4,r20
 4007dac:	857fffcc 	andi	r21,r16,65535
 4007db0:	880b883a 	mov	r5,r17
 4007db4:	40097dc0 	call	40097dc <__umodsi3>
 4007db8:	a009883a 	mov	r4,r20
 4007dbc:	880b883a 	mov	r5,r17
 4007dc0:	102d883a 	mov	r22,r2
 4007dc4:	40097d40 	call	40097d4 <__udivsi3>
 4007dc8:	1009883a 	mov	r4,r2
 4007dcc:	a80b883a 	mov	r5,r21
 4007dd0:	1025883a 	mov	r18,r2
 4007dd4:	40097e40 	call	40097e4 <__mulsi3>
 4007dd8:	1009883a 	mov	r4,r2
 4007ddc:	b006943a 	slli	r3,r22,16
 4007de0:	9804d43a 	srli	r2,r19,16
 4007de4:	1886b03a 	or	r3,r3,r2
 4007de8:	1900052e 	bgeu	r3,r4,4007e00 <__udivdi3+0xf4>
 4007dec:	1c07883a 	add	r3,r3,r16
 4007df0:	90bfffc4 	addi	r2,r18,-1
 4007df4:	1c000136 	bltu	r3,r16,4007dfc <__udivdi3+0xf0>
 4007df8:	19015536 	bltu	r3,r4,4008350 <__udivdi3+0x644>
 4007dfc:	1025883a 	mov	r18,r2
 4007e00:	1929c83a 	sub	r20,r3,r4
 4007e04:	880b883a 	mov	r5,r17
 4007e08:	a009883a 	mov	r4,r20
 4007e0c:	40097dc0 	call	40097dc <__umodsi3>
 4007e10:	102d883a 	mov	r22,r2
 4007e14:	880b883a 	mov	r5,r17
 4007e18:	a009883a 	mov	r4,r20
 4007e1c:	b02c943a 	slli	r22,r22,16
 4007e20:	40097d40 	call	40097d4 <__udivsi3>
 4007e24:	1009883a 	mov	r4,r2
 4007e28:	a80b883a 	mov	r5,r21
 4007e2c:	9cffffcc 	andi	r19,r19,65535
 4007e30:	1023883a 	mov	r17,r2
 4007e34:	b4e6b03a 	or	r19,r22,r19
 4007e38:	40097e40 	call	40097e4 <__mulsi3>
 4007e3c:	9880052e 	bgeu	r19,r2,4007e54 <__udivdi3+0x148>
 4007e40:	9c27883a 	add	r19,r19,r16
 4007e44:	88ffffc4 	addi	r3,r17,-1
 4007e48:	9c011436 	bltu	r19,r16,400829c <__udivdi3+0x590>
 4007e4c:	9881132e 	bgeu	r19,r2,400829c <__udivdi3+0x590>
 4007e50:	8c7fff84 	addi	r17,r17,-2
 4007e54:	9004943a 	slli	r2,r18,16
 4007e58:	0007883a 	mov	r3,zero
 4007e5c:	8884b03a 	or	r2,r17,r2
 4007e60:	00001506 	br	4007eb8 <__udivdi3+0x1ac>
 4007e64:	29c06a36 	bltu	r5,r7,4008010 <__udivdi3+0x304>
 4007e68:	00bfffd4 	movui	r2,65535
 4007e6c:	11c06a2e 	bgeu	r2,r7,4008018 <__udivdi3+0x30c>
 4007e70:	00804034 	movhi	r2,256
 4007e74:	10bfffc4 	addi	r2,r2,-1
 4007e78:	11c11436 	bltu	r2,r7,40082cc <__udivdi3+0x5c0>
 4007e7c:	00c00404 	movi	r3,16
 4007e80:	180b883a 	mov	r5,r3
 4007e84:	38c6d83a 	srl	r3,r7,r3
 4007e88:	01010074 	movhi	r4,1025
 4007e8c:	2131e204 	addi	r4,r4,-14456
 4007e90:	04000804 	movi	r16,32
 4007e94:	20c7883a 	add	r3,r4,r3
 4007e98:	18800003 	ldbu	r2,0(r3)
 4007e9c:	1145883a 	add	r2,r2,r5
 4007ea0:	80a1c83a 	sub	r16,r16,r2
 4007ea4:	80006e1e 	bne	r16,zero,4008060 <__udivdi3+0x354>
 4007ea8:	0007883a 	mov	r3,zero
 4007eac:	3c406a36 	bltu	r7,r17,4008058 <__udivdi3+0x34c>
 4007eb0:	9180692e 	bgeu	r18,r6,4008058 <__udivdi3+0x34c>
 4007eb4:	0005883a 	mov	r2,zero
 4007eb8:	dfc00a17 	ldw	ra,40(sp)
 4007ebc:	df000917 	ldw	fp,36(sp)
 4007ec0:	ddc00817 	ldw	r23,32(sp)
 4007ec4:	dd800717 	ldw	r22,28(sp)
 4007ec8:	dd400617 	ldw	r21,24(sp)
 4007ecc:	dd000517 	ldw	r20,20(sp)
 4007ed0:	dcc00417 	ldw	r19,16(sp)
 4007ed4:	dc800317 	ldw	r18,12(sp)
 4007ed8:	dc400217 	ldw	r17,8(sp)
 4007edc:	dc000117 	ldw	r16,4(sp)
 4007ee0:	dec00b04 	addi	sp,sp,44
 4007ee4:	f800283a 	ret
 4007ee8:	3000041e 	bne	r6,zero,4007efc <__udivdi3+0x1f0>
 4007eec:	01000044 	movi	r4,1
 4007ef0:	000b883a 	mov	r5,zero
 4007ef4:	40097d40 	call	40097d4 <__udivsi3>
 4007ef8:	1021883a 	mov	r16,r2
 4007efc:	00bfffd4 	movui	r2,65535
 4007f00:	1400502e 	bgeu	r2,r16,4008044 <__udivdi3+0x338>
 4007f04:	00804034 	movhi	r2,256
 4007f08:	10bfffc4 	addi	r2,r2,-1
 4007f0c:	1400f536 	bltu	r2,r16,40082e4 <__udivdi3+0x5d8>
 4007f10:	00800404 	movi	r2,16
 4007f14:	1007883a 	mov	r3,r2
 4007f18:	8084d83a 	srl	r2,r16,r2
 4007f1c:	01010074 	movhi	r4,1025
 4007f20:	2131e204 	addi	r4,r4,-14456
 4007f24:	2085883a 	add	r2,r4,r2
 4007f28:	10800003 	ldbu	r2,0(r2)
 4007f2c:	10c7883a 	add	r3,r2,r3
 4007f30:	00800804 	movi	r2,32
 4007f34:	10c5c83a 	sub	r2,r2,r3
 4007f38:	1000a01e 	bne	r2,zero,40081bc <__udivdi3+0x4b0>
 4007f3c:	8028d43a 	srli	r20,r16,16
 4007f40:	8c23c83a 	sub	r17,r17,r16
 4007f44:	857fffcc 	andi	r21,r16,65535
 4007f48:	00c00044 	movi	r3,1
 4007f4c:	8809883a 	mov	r4,r17
 4007f50:	a00b883a 	mov	r5,r20
 4007f54:	d8c00015 	stw	r3,0(sp)
 4007f58:	40097dc0 	call	40097dc <__umodsi3>
 4007f5c:	8809883a 	mov	r4,r17
 4007f60:	a00b883a 	mov	r5,r20
 4007f64:	102d883a 	mov	r22,r2
 4007f68:	40097d40 	call	40097d4 <__udivsi3>
 4007f6c:	1009883a 	mov	r4,r2
 4007f70:	a80b883a 	mov	r5,r21
 4007f74:	1025883a 	mov	r18,r2
 4007f78:	40097e40 	call	40097e4 <__mulsi3>
 4007f7c:	1009883a 	mov	r4,r2
 4007f80:	b00c943a 	slli	r6,r22,16
 4007f84:	9804d43a 	srli	r2,r19,16
 4007f88:	d8c00017 	ldw	r3,0(sp)
 4007f8c:	308cb03a 	or	r6,r6,r2
 4007f90:	3100052e 	bgeu	r6,r4,4007fa8 <__udivdi3+0x29c>
 4007f94:	340d883a 	add	r6,r6,r16
 4007f98:	90bfffc4 	addi	r2,r18,-1
 4007f9c:	34000136 	bltu	r6,r16,4007fa4 <__udivdi3+0x298>
 4007fa0:	3100e836 	bltu	r6,r4,4008344 <__udivdi3+0x638>
 4007fa4:	1025883a 	mov	r18,r2
 4007fa8:	3123c83a 	sub	r17,r6,r4
 4007fac:	8809883a 	mov	r4,r17
 4007fb0:	a00b883a 	mov	r5,r20
 4007fb4:	d8c00015 	stw	r3,0(sp)
 4007fb8:	40097dc0 	call	40097dc <__umodsi3>
 4007fbc:	102d883a 	mov	r22,r2
 4007fc0:	8809883a 	mov	r4,r17
 4007fc4:	a00b883a 	mov	r5,r20
 4007fc8:	b02c943a 	slli	r22,r22,16
 4007fcc:	40097d40 	call	40097d4 <__udivsi3>
 4007fd0:	1009883a 	mov	r4,r2
 4007fd4:	a80b883a 	mov	r5,r21
 4007fd8:	9cffffcc 	andi	r19,r19,65535
 4007fdc:	1023883a 	mov	r17,r2
 4007fe0:	b4e6b03a 	or	r19,r22,r19
 4007fe4:	40097e40 	call	40097e4 <__mulsi3>
 4007fe8:	d8c00017 	ldw	r3,0(sp)
 4007fec:	9880052e 	bgeu	r19,r2,4008004 <__udivdi3+0x2f8>
 4007ff0:	9c27883a 	add	r19,r19,r16
 4007ff4:	893fffc4 	addi	r4,r17,-1
 4007ff8:	9c00aa36 	bltu	r19,r16,40082a4 <__udivdi3+0x598>
 4007ffc:	9880a92e 	bgeu	r19,r2,40082a4 <__udivdi3+0x598>
 4008000:	8c7fff84 	addi	r17,r17,-2
 4008004:	9004943a 	slli	r2,r18,16
 4008008:	8884b03a 	or	r2,r17,r2
 400800c:	003faa06 	br	4007eb8 <__alt_data_end+0xfe007eb8>
 4008010:	0007883a 	mov	r3,zero
 4008014:	003fa706 	br	4007eb4 <__alt_data_end+0xfe007eb4>
 4008018:	00803fc4 	movi	r2,255
 400801c:	11c0ae36 	bltu	r2,r7,40082d8 <__udivdi3+0x5cc>
 4008020:	0007883a 	mov	r3,zero
 4008024:	000b883a 	mov	r5,zero
 4008028:	003f9606 	br	4007e84 <__alt_data_end+0xfe007e84>
 400802c:	00804034 	movhi	r2,256
 4008030:	10bfffc4 	addi	r2,r2,-1
 4008034:	1180ae36 	bltu	r2,r6,40082f0 <__udivdi3+0x5e4>
 4008038:	00800404 	movi	r2,16
 400803c:	1007883a 	mov	r3,r2
 4008040:	003f4a06 	br	4007d6c <__alt_data_end+0xfe007d6c>
 4008044:	00803fc4 	movi	r2,255
 4008048:	1400af36 	bltu	r2,r16,4008308 <__udivdi3+0x5fc>
 400804c:	0005883a 	mov	r2,zero
 4008050:	0007883a 	mov	r3,zero
 4008054:	003fb006 	br	4007f18 <__alt_data_end+0xfe007f18>
 4008058:	00800044 	movi	r2,1
 400805c:	003f9606 	br	4007eb8 <__alt_data_end+0xfe007eb8>
 4008060:	3c0e983a 	sll	r7,r7,r16
 4008064:	3086d83a 	srl	r3,r6,r2
 4008068:	88aed83a 	srl	r23,r17,r2
 400806c:	9084d83a 	srl	r2,r18,r2
 4008070:	38e6b03a 	or	r19,r7,r3
 4008074:	9828d43a 	srli	r20,r19,16
 4008078:	8c22983a 	sll	r17,r17,r16
 400807c:	b809883a 	mov	r4,r23
 4008080:	a00b883a 	mov	r5,r20
 4008084:	342a983a 	sll	r21,r6,r16
 4008088:	88a2b03a 	or	r17,r17,r2
 400808c:	40097dc0 	call	40097dc <__umodsi3>
 4008090:	b809883a 	mov	r4,r23
 4008094:	a00b883a 	mov	r5,r20
 4008098:	1039883a 	mov	fp,r2
 400809c:	9dbfffcc 	andi	r22,r19,65535
 40080a0:	40097d40 	call	40097d4 <__udivsi3>
 40080a4:	1009883a 	mov	r4,r2
 40080a8:	b00b883a 	mov	r5,r22
 40080ac:	102f883a 	mov	r23,r2
 40080b0:	40097e40 	call	40097e4 <__mulsi3>
 40080b4:	1009883a 	mov	r4,r2
 40080b8:	e00e943a 	slli	r7,fp,16
 40080bc:	8804d43a 	srli	r2,r17,16
 40080c0:	388eb03a 	or	r7,r7,r2
 40080c4:	3900042e 	bgeu	r7,r4,40080d8 <__udivdi3+0x3cc>
 40080c8:	3ccf883a 	add	r7,r7,r19
 40080cc:	b8bfffc4 	addi	r2,r23,-1
 40080d0:	3cc0942e 	bgeu	r7,r19,4008324 <__udivdi3+0x618>
 40080d4:	102f883a 	mov	r23,r2
 40080d8:	3939c83a 	sub	fp,r7,r4
 40080dc:	a00b883a 	mov	r5,r20
 40080e0:	e009883a 	mov	r4,fp
 40080e4:	40097dc0 	call	40097dc <__umodsi3>
 40080e8:	a00b883a 	mov	r5,r20
 40080ec:	e009883a 	mov	r4,fp
 40080f0:	d8800015 	stw	r2,0(sp)
 40080f4:	40097d40 	call	40097d4 <__udivsi3>
 40080f8:	1009883a 	mov	r4,r2
 40080fc:	b00b883a 	mov	r5,r22
 4008100:	1029883a 	mov	r20,r2
 4008104:	40097e40 	call	40097e4 <__mulsi3>
 4008108:	d8c00017 	ldw	r3,0(sp)
 400810c:	8c7fffcc 	andi	r17,r17,65535
 4008110:	1806943a 	slli	r3,r3,16
 4008114:	1c46b03a 	or	r3,r3,r17
 4008118:	1880042e 	bgeu	r3,r2,400812c <__udivdi3+0x420>
 400811c:	1cc7883a 	add	r3,r3,r19
 4008120:	a13fffc4 	addi	r4,r20,-1
 4008124:	1cc07b2e 	bgeu	r3,r19,4008314 <__udivdi3+0x608>
 4008128:	2029883a 	mov	r20,r4
 400812c:	b82e943a 	slli	r23,r23,16
 4008130:	a822d43a 	srli	r17,r21,16
 4008134:	ad7fffcc 	andi	r21,r21,65535
 4008138:	a5e8b03a 	or	r20,r20,r23
 400813c:	a5bfffcc 	andi	r22,r20,65535
 4008140:	b009883a 	mov	r4,r22
 4008144:	a80b883a 	mov	r5,r21
 4008148:	18afc83a 	sub	r23,r3,r2
 400814c:	a026d43a 	srli	r19,r20,16
 4008150:	40097e40 	call	40097e4 <__mulsi3>
 4008154:	b009883a 	mov	r4,r22
 4008158:	880b883a 	mov	r5,r17
 400815c:	1039883a 	mov	fp,r2
 4008160:	40097e40 	call	40097e4 <__mulsi3>
 4008164:	a80b883a 	mov	r5,r21
 4008168:	9809883a 	mov	r4,r19
 400816c:	102d883a 	mov	r22,r2
 4008170:	40097e40 	call	40097e4 <__mulsi3>
 4008174:	9809883a 	mov	r4,r19
 4008178:	880b883a 	mov	r5,r17
 400817c:	102b883a 	mov	r21,r2
 4008180:	40097e40 	call	40097e4 <__mulsi3>
 4008184:	100b883a 	mov	r5,r2
 4008188:	e004d43a 	srli	r2,fp,16
 400818c:	ad89883a 	add	r4,r21,r22
 4008190:	2089883a 	add	r4,r4,r2
 4008194:	2540022e 	bgeu	r4,r21,40081a0 <__udivdi3+0x494>
 4008198:	00800074 	movhi	r2,1
 400819c:	288b883a 	add	r5,r5,r2
 40081a0:	2004d43a 	srli	r2,r4,16
 40081a4:	288b883a 	add	r5,r5,r2
 40081a8:	b9404536 	bltu	r23,r5,40082c0 <__udivdi3+0x5b4>
 40081ac:	b9403f26 	beq	r23,r5,40082ac <__udivdi3+0x5a0>
 40081b0:	a005883a 	mov	r2,r20
 40081b4:	0007883a 	mov	r3,zero
 40081b8:	003f3f06 	br	4007eb8 <__alt_data_end+0xfe007eb8>
 40081bc:	80a0983a 	sll	r16,r16,r2
 40081c0:	88eed83a 	srl	r23,r17,r3
 40081c4:	90c6d83a 	srl	r3,r18,r3
 40081c8:	8028d43a 	srli	r20,r16,16
 40081cc:	88a2983a 	sll	r17,r17,r2
 40081d0:	b809883a 	mov	r4,r23
 40081d4:	a00b883a 	mov	r5,r20
 40081d8:	88ecb03a 	or	r22,r17,r3
 40081dc:	90a6983a 	sll	r19,r18,r2
 40081e0:	40097dc0 	call	40097dc <__umodsi3>
 40081e4:	b809883a 	mov	r4,r23
 40081e8:	a00b883a 	mov	r5,r20
 40081ec:	1023883a 	mov	r17,r2
 40081f0:	857fffcc 	andi	r21,r16,65535
 40081f4:	40097d40 	call	40097d4 <__udivsi3>
 40081f8:	1009883a 	mov	r4,r2
 40081fc:	a80b883a 	mov	r5,r21
 4008200:	102f883a 	mov	r23,r2
 4008204:	40097e40 	call	40097e4 <__mulsi3>
 4008208:	1009883a 	mov	r4,r2
 400820c:	880a943a 	slli	r5,r17,16
 4008210:	b004d43a 	srli	r2,r22,16
 4008214:	288ab03a 	or	r5,r5,r2
 4008218:	2900062e 	bgeu	r5,r4,4008234 <__udivdi3+0x528>
 400821c:	2c0b883a 	add	r5,r5,r16
 4008220:	b8bfffc4 	addi	r2,r23,-1
 4008224:	2c004536 	bltu	r5,r16,400833c <__udivdi3+0x630>
 4008228:	2900442e 	bgeu	r5,r4,400833c <__udivdi3+0x630>
 400822c:	bdffff84 	addi	r23,r23,-2
 4008230:	2c0b883a 	add	r5,r5,r16
 4008234:	2925c83a 	sub	r18,r5,r4
 4008238:	9009883a 	mov	r4,r18
 400823c:	a00b883a 	mov	r5,r20
 4008240:	40097dc0 	call	40097dc <__umodsi3>
 4008244:	1023883a 	mov	r17,r2
 4008248:	9009883a 	mov	r4,r18
 400824c:	a00b883a 	mov	r5,r20
 4008250:	8822943a 	slli	r17,r17,16
 4008254:	40097d40 	call	40097d4 <__udivsi3>
 4008258:	1009883a 	mov	r4,r2
 400825c:	a80b883a 	mov	r5,r21
 4008260:	b5bfffcc 	andi	r22,r22,65535
 4008264:	1025883a 	mov	r18,r2
 4008268:	8da2b03a 	or	r17,r17,r22
 400826c:	40097e40 	call	40097e4 <__mulsi3>
 4008270:	8880062e 	bgeu	r17,r2,400828c <__udivdi3+0x580>
 4008274:	8c23883a 	add	r17,r17,r16
 4008278:	90ffffc4 	addi	r3,r18,-1
 400827c:	8c002d36 	bltu	r17,r16,4008334 <__udivdi3+0x628>
 4008280:	88802c2e 	bgeu	r17,r2,4008334 <__udivdi3+0x628>
 4008284:	94bfff84 	addi	r18,r18,-2
 4008288:	8c23883a 	add	r17,r17,r16
 400828c:	b806943a 	slli	r3,r23,16
 4008290:	88a3c83a 	sub	r17,r17,r2
 4008294:	90c6b03a 	or	r3,r18,r3
 4008298:	003f2c06 	br	4007f4c <__alt_data_end+0xfe007f4c>
 400829c:	1823883a 	mov	r17,r3
 40082a0:	003eec06 	br	4007e54 <__alt_data_end+0xfe007e54>
 40082a4:	2023883a 	mov	r17,r4
 40082a8:	003f5606 	br	4008004 <__alt_data_end+0xfe008004>
 40082ac:	2008943a 	slli	r4,r4,16
 40082b0:	9420983a 	sll	r16,r18,r16
 40082b4:	e73fffcc 	andi	fp,fp,65535
 40082b8:	2709883a 	add	r4,r4,fp
 40082bc:	813fbc2e 	bgeu	r16,r4,40081b0 <__alt_data_end+0xfe0081b0>
 40082c0:	a0bfffc4 	addi	r2,r20,-1
 40082c4:	0007883a 	mov	r3,zero
 40082c8:	003efb06 	br	4007eb8 <__alt_data_end+0xfe007eb8>
 40082cc:	00c00604 	movi	r3,24
 40082d0:	180b883a 	mov	r5,r3
 40082d4:	003eeb06 	br	4007e84 <__alt_data_end+0xfe007e84>
 40082d8:	00c00204 	movi	r3,8
 40082dc:	180b883a 	mov	r5,r3
 40082e0:	003ee806 	br	4007e84 <__alt_data_end+0xfe007e84>
 40082e4:	00800604 	movi	r2,24
 40082e8:	1007883a 	mov	r3,r2
 40082ec:	003f0a06 	br	4007f18 <__alt_data_end+0xfe007f18>
 40082f0:	00800604 	movi	r2,24
 40082f4:	1007883a 	mov	r3,r2
 40082f8:	003e9c06 	br	4007d6c <__alt_data_end+0xfe007d6c>
 40082fc:	00800204 	movi	r2,8
 4008300:	1007883a 	mov	r3,r2
 4008304:	003e9906 	br	4007d6c <__alt_data_end+0xfe007d6c>
 4008308:	00800204 	movi	r2,8
 400830c:	1007883a 	mov	r3,r2
 4008310:	003f0106 	br	4007f18 <__alt_data_end+0xfe007f18>
 4008314:	18bf842e 	bgeu	r3,r2,4008128 <__alt_data_end+0xfe008128>
 4008318:	a53fff84 	addi	r20,r20,-2
 400831c:	1cc7883a 	add	r3,r3,r19
 4008320:	003f8206 	br	400812c <__alt_data_end+0xfe00812c>
 4008324:	393f6b2e 	bgeu	r7,r4,40080d4 <__alt_data_end+0xfe0080d4>
 4008328:	bdffff84 	addi	r23,r23,-2
 400832c:	3ccf883a 	add	r7,r7,r19
 4008330:	003f6906 	br	40080d8 <__alt_data_end+0xfe0080d8>
 4008334:	1825883a 	mov	r18,r3
 4008338:	003fd406 	br	400828c <__alt_data_end+0xfe00828c>
 400833c:	102f883a 	mov	r23,r2
 4008340:	003fbc06 	br	4008234 <__alt_data_end+0xfe008234>
 4008344:	94bfff84 	addi	r18,r18,-2
 4008348:	340d883a 	add	r6,r6,r16
 400834c:	003f1606 	br	4007fa8 <__alt_data_end+0xfe007fa8>
 4008350:	94bfff84 	addi	r18,r18,-2
 4008354:	1c07883a 	add	r3,r3,r16
 4008358:	003ea906 	br	4007e00 <__alt_data_end+0xfe007e00>

0400835c <__umoddi3>:
 400835c:	defff304 	addi	sp,sp,-52
 4008360:	dd000715 	stw	r20,28(sp)
 4008364:	dcc00615 	stw	r19,24(sp)
 4008368:	dc800515 	stw	r18,20(sp)
 400836c:	dc400415 	stw	r17,16(sp)
 4008370:	dc000315 	stw	r16,12(sp)
 4008374:	dfc00c15 	stw	ra,48(sp)
 4008378:	df000b15 	stw	fp,44(sp)
 400837c:	ddc00a15 	stw	r23,40(sp)
 4008380:	dd800915 	stw	r22,36(sp)
 4008384:	dd400815 	stw	r21,32(sp)
 4008388:	2025883a 	mov	r18,r4
 400838c:	2823883a 	mov	r17,r5
 4008390:	3021883a 	mov	r16,r6
 4008394:	2027883a 	mov	r19,r4
 4008398:	2829883a 	mov	r20,r5
 400839c:	38003a1e 	bne	r7,zero,4008488 <__umoddi3+0x12c>
 40083a0:	2980522e 	bgeu	r5,r6,40084ec <__umoddi3+0x190>
 40083a4:	00bfffd4 	movui	r2,65535
 40083a8:	1180a436 	bltu	r2,r6,400863c <__umoddi3+0x2e0>
 40083ac:	00803fc4 	movi	r2,255
 40083b0:	11816036 	bltu	r2,r6,4008934 <__umoddi3+0x5d8>
 40083b4:	0005883a 	mov	r2,zero
 40083b8:	0009883a 	mov	r4,zero
 40083bc:	3084d83a 	srl	r2,r6,r2
 40083c0:	00c10074 	movhi	r3,1025
 40083c4:	18f1e204 	addi	r3,r3,-14456
 40083c8:	05400804 	movi	r21,32
 40083cc:	1885883a 	add	r2,r3,r2
 40083d0:	10800003 	ldbu	r2,0(r2)
 40083d4:	1109883a 	add	r4,r2,r4
 40083d8:	a92bc83a 	sub	r21,r21,r4
 40083dc:	a8010e26 	beq	r21,zero,4008818 <__umoddi3+0x4bc>
 40083e0:	8d62983a 	sll	r17,r17,r21
 40083e4:	9108d83a 	srl	r4,r18,r4
 40083e8:	3560983a 	sll	r16,r6,r21
 40083ec:	9566983a 	sll	r19,r18,r21
 40083f0:	8928b03a 	or	r20,r17,r4
 40083f4:	8022d43a 	srli	r17,r16,16
 40083f8:	a009883a 	mov	r4,r20
 40083fc:	84bfffcc 	andi	r18,r16,65535
 4008400:	880b883a 	mov	r5,r17
 4008404:	40097dc0 	call	40097dc <__umodsi3>
 4008408:	a009883a 	mov	r4,r20
 400840c:	880b883a 	mov	r5,r17
 4008410:	102d883a 	mov	r22,r2
 4008414:	40097d40 	call	40097d4 <__udivsi3>
 4008418:	1009883a 	mov	r4,r2
 400841c:	900b883a 	mov	r5,r18
 4008420:	40097e40 	call	40097e4 <__mulsi3>
 4008424:	1009883a 	mov	r4,r2
 4008428:	b006943a 	slli	r3,r22,16
 400842c:	9804d43a 	srli	r2,r19,16
 4008430:	1886b03a 	or	r3,r3,r2
 4008434:	1900042e 	bgeu	r3,r4,4008448 <__umoddi3+0xec>
 4008438:	1c07883a 	add	r3,r3,r16
 400843c:	1c000236 	bltu	r3,r16,4008448 <__umoddi3+0xec>
 4008440:	1900012e 	bgeu	r3,r4,4008448 <__umoddi3+0xec>
 4008444:	1c07883a 	add	r3,r3,r16
 4008448:	1929c83a 	sub	r20,r3,r4
 400844c:	a009883a 	mov	r4,r20
 4008450:	880b883a 	mov	r5,r17
 4008454:	40097dc0 	call	40097dc <__umodsi3>
 4008458:	102d883a 	mov	r22,r2
 400845c:	a009883a 	mov	r4,r20
 4008460:	880b883a 	mov	r5,r17
 4008464:	b02c943a 	slli	r22,r22,16
 4008468:	40097d40 	call	40097d4 <__udivsi3>
 400846c:	1009883a 	mov	r4,r2
 4008470:	900b883a 	mov	r5,r18
 4008474:	9cffffcc 	andi	r19,r19,65535
 4008478:	40097e40 	call	40097e4 <__mulsi3>
 400847c:	b4e6b03a 	or	r19,r22,r19
 4008480:	9880572e 	bgeu	r19,r2,40085e0 <__umoddi3+0x284>
 4008484:	00005206 	br	40085d0 <__umoddi3+0x274>
 4008488:	29c05936 	bltu	r5,r7,40085f0 <__umoddi3+0x294>
 400848c:	00bfffd4 	movui	r2,65535
 4008490:	11c0652e 	bgeu	r2,r7,4008628 <__umoddi3+0x2cc>
 4008494:	00804034 	movhi	r2,256
 4008498:	10bfffc4 	addi	r2,r2,-1
 400849c:	11c11936 	bltu	r2,r7,4008904 <__umoddi3+0x5a8>
 40084a0:	00c00404 	movi	r3,16
 40084a4:	1827883a 	mov	r19,r3
 40084a8:	38c6d83a 	srl	r3,r7,r3
 40084ac:	01010074 	movhi	r4,1025
 40084b0:	2131e204 	addi	r4,r4,-14456
 40084b4:	04000804 	movi	r16,32
 40084b8:	20c7883a 	add	r3,r4,r3
 40084bc:	18800003 	ldbu	r2,0(r3)
 40084c0:	14e7883a 	add	r19,r2,r19
 40084c4:	84e1c83a 	sub	r16,r16,r19
 40084c8:	8000671e 	bne	r16,zero,4008668 <__umoddi3+0x30c>
 40084cc:	3c400136 	bltu	r7,r17,40084d4 <__umoddi3+0x178>
 40084d0:	91812536 	bltu	r18,r6,4008968 <__umoddi3+0x60c>
 40084d4:	9185c83a 	sub	r2,r18,r6
 40084d8:	89e3c83a 	sub	r17,r17,r7
 40084dc:	90a5803a 	cmpltu	r18,r18,r2
 40084e0:	8ca9c83a 	sub	r20,r17,r18
 40084e4:	a007883a 	mov	r3,r20
 40084e8:	00004306 	br	40085f8 <__umoddi3+0x29c>
 40084ec:	3000041e 	bne	r6,zero,4008500 <__umoddi3+0x1a4>
 40084f0:	01000044 	movi	r4,1
 40084f4:	000b883a 	mov	r5,zero
 40084f8:	40097d40 	call	40097d4 <__udivsi3>
 40084fc:	1021883a 	mov	r16,r2
 4008500:	00bfffd4 	movui	r2,65535
 4008504:	1400532e 	bgeu	r2,r16,4008654 <__umoddi3+0x2f8>
 4008508:	00804034 	movhi	r2,256
 400850c:	10bfffc4 	addi	r2,r2,-1
 4008510:	14010536 	bltu	r2,r16,4008928 <__umoddi3+0x5cc>
 4008514:	00800404 	movi	r2,16
 4008518:	1007883a 	mov	r3,r2
 400851c:	8084d83a 	srl	r2,r16,r2
 4008520:	01010074 	movhi	r4,1025
 4008524:	2131e204 	addi	r4,r4,-14456
 4008528:	05400804 	movi	r21,32
 400852c:	2085883a 	add	r2,r4,r2
 4008530:	10800003 	ldbu	r2,0(r2)
 4008534:	10c7883a 	add	r3,r2,r3
 4008538:	a8ebc83a 	sub	r21,r21,r3
 400853c:	a800b81e 	bne	r21,zero,4008820 <__umoddi3+0x4c4>
 4008540:	8028d43a 	srli	r20,r16,16
 4008544:	8c23c83a 	sub	r17,r17,r16
 4008548:	85bfffcc 	andi	r22,r16,65535
 400854c:	8809883a 	mov	r4,r17
 4008550:	a00b883a 	mov	r5,r20
 4008554:	40097dc0 	call	40097dc <__umodsi3>
 4008558:	8809883a 	mov	r4,r17
 400855c:	a00b883a 	mov	r5,r20
 4008560:	1025883a 	mov	r18,r2
 4008564:	40097d40 	call	40097d4 <__udivsi3>
 4008568:	1009883a 	mov	r4,r2
 400856c:	b00b883a 	mov	r5,r22
 4008570:	40097e40 	call	40097e4 <__mulsi3>
 4008574:	1009883a 	mov	r4,r2
 4008578:	9006943a 	slli	r3,r18,16
 400857c:	9804d43a 	srli	r2,r19,16
 4008580:	1886b03a 	or	r3,r3,r2
 4008584:	1900032e 	bgeu	r3,r4,4008594 <__umoddi3+0x238>
 4008588:	1c07883a 	add	r3,r3,r16
 400858c:	1c000136 	bltu	r3,r16,4008594 <__umoddi3+0x238>
 4008590:	1900f336 	bltu	r3,r4,4008960 <__umoddi3+0x604>
 4008594:	1923c83a 	sub	r17,r3,r4
 4008598:	8809883a 	mov	r4,r17
 400859c:	a00b883a 	mov	r5,r20
 40085a0:	40097dc0 	call	40097dc <__umodsi3>
 40085a4:	102f883a 	mov	r23,r2
 40085a8:	8809883a 	mov	r4,r17
 40085ac:	a00b883a 	mov	r5,r20
 40085b0:	b82e943a 	slli	r23,r23,16
 40085b4:	40097d40 	call	40097d4 <__udivsi3>
 40085b8:	1009883a 	mov	r4,r2
 40085bc:	b00b883a 	mov	r5,r22
 40085c0:	9cffffcc 	andi	r19,r19,65535
 40085c4:	40097e40 	call	40097e4 <__mulsi3>
 40085c8:	bce6b03a 	or	r19,r23,r19
 40085cc:	9880042e 	bgeu	r19,r2,40085e0 <__umoddi3+0x284>
 40085d0:	9c27883a 	add	r19,r19,r16
 40085d4:	9c000236 	bltu	r19,r16,40085e0 <__umoddi3+0x284>
 40085d8:	9880012e 	bgeu	r19,r2,40085e0 <__umoddi3+0x284>
 40085dc:	9c27883a 	add	r19,r19,r16
 40085e0:	9885c83a 	sub	r2,r19,r2
 40085e4:	1544d83a 	srl	r2,r2,r21
 40085e8:	0007883a 	mov	r3,zero
 40085ec:	00000206 	br	40085f8 <__umoddi3+0x29c>
 40085f0:	2005883a 	mov	r2,r4
 40085f4:	2807883a 	mov	r3,r5
 40085f8:	dfc00c17 	ldw	ra,48(sp)
 40085fc:	df000b17 	ldw	fp,44(sp)
 4008600:	ddc00a17 	ldw	r23,40(sp)
 4008604:	dd800917 	ldw	r22,36(sp)
 4008608:	dd400817 	ldw	r21,32(sp)
 400860c:	dd000717 	ldw	r20,28(sp)
 4008610:	dcc00617 	ldw	r19,24(sp)
 4008614:	dc800517 	ldw	r18,20(sp)
 4008618:	dc400417 	ldw	r17,16(sp)
 400861c:	dc000317 	ldw	r16,12(sp)
 4008620:	dec00d04 	addi	sp,sp,52
 4008624:	f800283a 	ret
 4008628:	00803fc4 	movi	r2,255
 400862c:	11c0b236 	bltu	r2,r7,40088f8 <__umoddi3+0x59c>
 4008630:	0007883a 	mov	r3,zero
 4008634:	0027883a 	mov	r19,zero
 4008638:	003f9b06 	br	40084a8 <__alt_data_end+0xfe0084a8>
 400863c:	00804034 	movhi	r2,256
 4008640:	10bfffc4 	addi	r2,r2,-1
 4008644:	1180b236 	bltu	r2,r6,4008910 <__umoddi3+0x5b4>
 4008648:	00800404 	movi	r2,16
 400864c:	1009883a 	mov	r4,r2
 4008650:	003f5a06 	br	40083bc <__alt_data_end+0xfe0083bc>
 4008654:	00803fc4 	movi	r2,255
 4008658:	1400b036 	bltu	r2,r16,400891c <__umoddi3+0x5c0>
 400865c:	0005883a 	mov	r2,zero
 4008660:	0007883a 	mov	r3,zero
 4008664:	003fad06 	br	400851c <__alt_data_end+0xfe00851c>
 4008668:	34c4d83a 	srl	r2,r6,r19
 400866c:	3c0e983a 	sll	r7,r7,r16
 4008670:	8cf8d83a 	srl	fp,r17,r19
 4008674:	8c22983a 	sll	r17,r17,r16
 4008678:	38a8b03a 	or	r20,r7,r2
 400867c:	a02ad43a 	srli	r21,r20,16
 4008680:	94c4d83a 	srl	r2,r18,r19
 4008684:	e009883a 	mov	r4,fp
 4008688:	a80b883a 	mov	r5,r21
 400868c:	342c983a 	sll	r22,r6,r16
 4008690:	88a2b03a 	or	r17,r17,r2
 4008694:	40097dc0 	call	40097dc <__umodsi3>
 4008698:	e009883a 	mov	r4,fp
 400869c:	a80b883a 	mov	r5,r21
 40086a0:	a5ffffcc 	andi	r23,r20,65535
 40086a4:	d8800215 	stw	r2,8(sp)
 40086a8:	40097d40 	call	40097d4 <__udivsi3>
 40086ac:	1009883a 	mov	r4,r2
 40086b0:	b80b883a 	mov	r5,r23
 40086b4:	1039883a 	mov	fp,r2
 40086b8:	40097e40 	call	40097e4 <__mulsi3>
 40086bc:	d8c00217 	ldw	r3,8(sp)
 40086c0:	1009883a 	mov	r4,r2
 40086c4:	8804d43a 	srli	r2,r17,16
 40086c8:	1806943a 	slli	r3,r3,16
 40086cc:	9424983a 	sll	r18,r18,r16
 40086d0:	1886b03a 	or	r3,r3,r2
 40086d4:	1900042e 	bgeu	r3,r4,40086e8 <__umoddi3+0x38c>
 40086d8:	1d07883a 	add	r3,r3,r20
 40086dc:	e0bfffc4 	addi	r2,fp,-1
 40086e0:	1d009b2e 	bgeu	r3,r20,4008950 <__umoddi3+0x5f4>
 40086e4:	1039883a 	mov	fp,r2
 40086e8:	1907c83a 	sub	r3,r3,r4
 40086ec:	1809883a 	mov	r4,r3
 40086f0:	a80b883a 	mov	r5,r21
 40086f4:	d8c00215 	stw	r3,8(sp)
 40086f8:	40097dc0 	call	40097dc <__umodsi3>
 40086fc:	d8c00217 	ldw	r3,8(sp)
 4008700:	a80b883a 	mov	r5,r21
 4008704:	d8800015 	stw	r2,0(sp)
 4008708:	1809883a 	mov	r4,r3
 400870c:	40097d40 	call	40097d4 <__udivsi3>
 4008710:	1009883a 	mov	r4,r2
 4008714:	b80b883a 	mov	r5,r23
 4008718:	102b883a 	mov	r21,r2
 400871c:	40097e40 	call	40097e4 <__mulsi3>
 4008720:	d9c00017 	ldw	r7,0(sp)
 4008724:	8c7fffcc 	andi	r17,r17,65535
 4008728:	380e943a 	slli	r7,r7,16
 400872c:	3c4eb03a 	or	r7,r7,r17
 4008730:	3880042e 	bgeu	r7,r2,4008744 <__umoddi3+0x3e8>
 4008734:	3d0f883a 	add	r7,r7,r20
 4008738:	a8ffffc4 	addi	r3,r21,-1
 400873c:	3d00802e 	bgeu	r7,r20,4008940 <__umoddi3+0x5e4>
 4008740:	182b883a 	mov	r21,r3
 4008744:	e038943a 	slli	fp,fp,16
 4008748:	b010d43a 	srli	r8,r22,16
 400874c:	b1bfffcc 	andi	r6,r22,65535
 4008750:	af2ab03a 	or	r21,r21,fp
 4008754:	a82ed43a 	srli	r23,r21,16
 4008758:	ad7fffcc 	andi	r21,r21,65535
 400875c:	300b883a 	mov	r5,r6
 4008760:	a809883a 	mov	r4,r21
 4008764:	38a3c83a 	sub	r17,r7,r2
 4008768:	d9800115 	stw	r6,4(sp)
 400876c:	da000015 	stw	r8,0(sp)
 4008770:	40097e40 	call	40097e4 <__mulsi3>
 4008774:	da000017 	ldw	r8,0(sp)
 4008778:	a809883a 	mov	r4,r21
 400877c:	1039883a 	mov	fp,r2
 4008780:	400b883a 	mov	r5,r8
 4008784:	da000215 	stw	r8,8(sp)
 4008788:	40097e40 	call	40097e4 <__mulsi3>
 400878c:	d9800117 	ldw	r6,4(sp)
 4008790:	b809883a 	mov	r4,r23
 4008794:	d8800015 	stw	r2,0(sp)
 4008798:	300b883a 	mov	r5,r6
 400879c:	40097e40 	call	40097e4 <__mulsi3>
 40087a0:	d8c00217 	ldw	r3,8(sp)
 40087a4:	b809883a 	mov	r4,r23
 40087a8:	102b883a 	mov	r21,r2
 40087ac:	180b883a 	mov	r5,r3
 40087b0:	40097e40 	call	40097e4 <__mulsi3>
 40087b4:	d9c00017 	ldw	r7,0(sp)
 40087b8:	1007883a 	mov	r3,r2
 40087bc:	e004d43a 	srli	r2,fp,16
 40087c0:	a9c9883a 	add	r4,r21,r7
 40087c4:	2089883a 	add	r4,r4,r2
 40087c8:	2540022e 	bgeu	r4,r21,40087d4 <__umoddi3+0x478>
 40087cc:	00800074 	movhi	r2,1
 40087d0:	1887883a 	add	r3,r3,r2
 40087d4:	2004d43a 	srli	r2,r4,16
 40087d8:	2008943a 	slli	r4,r4,16
 40087dc:	e73fffcc 	andi	fp,fp,65535
 40087e0:	1887883a 	add	r3,r3,r2
 40087e4:	2709883a 	add	r4,r4,fp
 40087e8:	88c03d36 	bltu	r17,r3,40088e0 <__umoddi3+0x584>
 40087ec:	88c06126 	beq	r17,r3,4008974 <__umoddi3+0x618>
 40087f0:	88c7c83a 	sub	r3,r17,r3
 40087f4:	202d883a 	mov	r22,r4
 40087f8:	95adc83a 	sub	r22,r18,r22
 40087fc:	95a5803a 	cmpltu	r18,r18,r22
 4008800:	1c87c83a 	sub	r3,r3,r18
 4008804:	1cc4983a 	sll	r2,r3,r19
 4008808:	b42cd83a 	srl	r22,r22,r16
 400880c:	1c06d83a 	srl	r3,r3,r16
 4008810:	1584b03a 	or	r2,r2,r22
 4008814:	003f7806 	br	40085f8 <__alt_data_end+0xfe0085f8>
 4008818:	002b883a 	mov	r21,zero
 400881c:	003ef506 	br	40083f4 <__alt_data_end+0xfe0083f4>
 4008820:	8560983a 	sll	r16,r16,r21
 4008824:	88e6d83a 	srl	r19,r17,r3
 4008828:	90c6d83a 	srl	r3,r18,r3
 400882c:	8028d43a 	srli	r20,r16,16
 4008830:	8d62983a 	sll	r17,r17,r21
 4008834:	9809883a 	mov	r4,r19
 4008838:	a00b883a 	mov	r5,r20
 400883c:	88eeb03a 	or	r23,r17,r3
 4008840:	40097dc0 	call	40097dc <__umodsi3>
 4008844:	9809883a 	mov	r4,r19
 4008848:	a00b883a 	mov	r5,r20
 400884c:	1023883a 	mov	r17,r2
 4008850:	85bfffcc 	andi	r22,r16,65535
 4008854:	40097d40 	call	40097d4 <__udivsi3>
 4008858:	1009883a 	mov	r4,r2
 400885c:	b00b883a 	mov	r5,r22
 4008860:	40097e40 	call	40097e4 <__mulsi3>
 4008864:	1007883a 	mov	r3,r2
 4008868:	8808943a 	slli	r4,r17,16
 400886c:	b804d43a 	srli	r2,r23,16
 4008870:	9566983a 	sll	r19,r18,r21
 4008874:	2088b03a 	or	r4,r4,r2
 4008878:	20c0042e 	bgeu	r4,r3,400888c <__umoddi3+0x530>
 400887c:	2409883a 	add	r4,r4,r16
 4008880:	24000236 	bltu	r4,r16,400888c <__umoddi3+0x530>
 4008884:	20c0012e 	bgeu	r4,r3,400888c <__umoddi3+0x530>
 4008888:	2409883a 	add	r4,r4,r16
 400888c:	20e5c83a 	sub	r18,r4,r3
 4008890:	9009883a 	mov	r4,r18
 4008894:	a00b883a 	mov	r5,r20
 4008898:	40097dc0 	call	40097dc <__umodsi3>
 400889c:	1023883a 	mov	r17,r2
 40088a0:	9009883a 	mov	r4,r18
 40088a4:	a00b883a 	mov	r5,r20
 40088a8:	8822943a 	slli	r17,r17,16
 40088ac:	40097d40 	call	40097d4 <__udivsi3>
 40088b0:	1009883a 	mov	r4,r2
 40088b4:	b00b883a 	mov	r5,r22
 40088b8:	bdffffcc 	andi	r23,r23,65535
 40088bc:	40097e40 	call	40097e4 <__mulsi3>
 40088c0:	8de2b03a 	or	r17,r17,r23
 40088c4:	8880042e 	bgeu	r17,r2,40088d8 <__umoddi3+0x57c>
 40088c8:	8c23883a 	add	r17,r17,r16
 40088cc:	8c000236 	bltu	r17,r16,40088d8 <__umoddi3+0x57c>
 40088d0:	8880012e 	bgeu	r17,r2,40088d8 <__umoddi3+0x57c>
 40088d4:	8c23883a 	add	r17,r17,r16
 40088d8:	88a3c83a 	sub	r17,r17,r2
 40088dc:	003f1b06 	br	400854c <__alt_data_end+0xfe00854c>
 40088e0:	25adc83a 	sub	r22,r4,r22
 40088e4:	1d07c83a 	sub	r3,r3,r20
 40088e8:	2589803a 	cmpltu	r4,r4,r22
 40088ec:	1907c83a 	sub	r3,r3,r4
 40088f0:	88c7c83a 	sub	r3,r17,r3
 40088f4:	003fc006 	br	40087f8 <__alt_data_end+0xfe0087f8>
 40088f8:	00c00204 	movi	r3,8
 40088fc:	1827883a 	mov	r19,r3
 4008900:	003ee906 	br	40084a8 <__alt_data_end+0xfe0084a8>
 4008904:	00c00604 	movi	r3,24
 4008908:	1827883a 	mov	r19,r3
 400890c:	003ee606 	br	40084a8 <__alt_data_end+0xfe0084a8>
 4008910:	00800604 	movi	r2,24
 4008914:	1009883a 	mov	r4,r2
 4008918:	003ea806 	br	40083bc <__alt_data_end+0xfe0083bc>
 400891c:	00800204 	movi	r2,8
 4008920:	1007883a 	mov	r3,r2
 4008924:	003efd06 	br	400851c <__alt_data_end+0xfe00851c>
 4008928:	00800604 	movi	r2,24
 400892c:	1007883a 	mov	r3,r2
 4008930:	003efa06 	br	400851c <__alt_data_end+0xfe00851c>
 4008934:	00800204 	movi	r2,8
 4008938:	1009883a 	mov	r4,r2
 400893c:	003e9f06 	br	40083bc <__alt_data_end+0xfe0083bc>
 4008940:	38bf7f2e 	bgeu	r7,r2,4008740 <__alt_data_end+0xfe008740>
 4008944:	ad7fff84 	addi	r21,r21,-2
 4008948:	3d0f883a 	add	r7,r7,r20
 400894c:	003f7d06 	br	4008744 <__alt_data_end+0xfe008744>
 4008950:	193f642e 	bgeu	r3,r4,40086e4 <__alt_data_end+0xfe0086e4>
 4008954:	e73fff84 	addi	fp,fp,-2
 4008958:	1d07883a 	add	r3,r3,r20
 400895c:	003f6206 	br	40086e8 <__alt_data_end+0xfe0086e8>
 4008960:	1c07883a 	add	r3,r3,r16
 4008964:	003f0b06 	br	4008594 <__alt_data_end+0xfe008594>
 4008968:	9005883a 	mov	r2,r18
 400896c:	a007883a 	mov	r3,r20
 4008970:	003f2106 	br	40085f8 <__alt_data_end+0xfe0085f8>
 4008974:	913fda36 	bltu	r18,r4,40088e0 <__alt_data_end+0xfe0088e0>
 4008978:	202d883a 	mov	r22,r4
 400897c:	0007883a 	mov	r3,zero
 4008980:	003f9d06 	br	40087f8 <__alt_data_end+0xfe0087f8>

04008984 <_fpadd_parts>:
 4008984:	2005883a 	mov	r2,r4
 4008988:	21000017 	ldw	r4,0(r4)
 400898c:	01c00044 	movi	r7,1
 4008990:	3900622e 	bgeu	r7,r4,4008b1c <_fpadd_parts+0x198>
 4008994:	28c00017 	ldw	r3,0(r5)
 4008998:	38c05f2e 	bgeu	r7,r3,4008b18 <_fpadd_parts+0x194>
 400899c:	01c00104 	movi	r7,4
 40089a0:	21c0c626 	beq	r4,r7,4008cbc <_fpadd_parts+0x338>
 40089a4:	19c05c26 	beq	r3,r7,4008b18 <_fpadd_parts+0x194>
 40089a8:	01c00084 	movi	r7,2
 40089ac:	19c06b26 	beq	r3,r7,4008b5c <_fpadd_parts+0x1d8>
 40089b0:	21c05926 	beq	r4,r7,4008b18 <_fpadd_parts+0x194>
 40089b4:	11c00217 	ldw	r7,8(r2)
 40089b8:	2ac00217 	ldw	r11,8(r5)
 40089bc:	13000317 	ldw	r12,12(r2)
 40089c0:	13400417 	ldw	r13,16(r2)
 40089c4:	3ac9c83a 	sub	r4,r7,r11
 40089c8:	2a000317 	ldw	r8,12(r5)
 40089cc:	2a400417 	ldw	r9,16(r5)
 40089d0:	2015883a 	mov	r10,r4
 40089d4:	20007516 	blt	r4,zero,4008bac <_fpadd_parts+0x228>
 40089d8:	00c00fc4 	movi	r3,63
 40089dc:	1a805016 	blt	r3,r10,4008b20 <_fpadd_parts+0x19c>
 40089e0:	0100870e 	bge	zero,r4,4008c00 <_fpadd_parts+0x27c>
 40089e4:	50fff804 	addi	r3,r10,-32
 40089e8:	18009916 	blt	r3,zero,4008c50 <_fpadd_parts+0x2cc>
 40089ec:	48d6d83a 	srl	r11,r9,r3
 40089f0:	001d883a 	mov	r14,zero
 40089f4:	18009e16 	blt	r3,zero,4008c70 <_fpadd_parts+0x2ec>
 40089f8:	01000044 	movi	r4,1
 40089fc:	20c6983a 	sll	r3,r4,r3
 4008a00:	0015883a 	mov	r10,zero
 4008a04:	513fffc4 	addi	r4,r10,-1
 4008a08:	2295403a 	cmpgeu	r10,r4,r10
 4008a0c:	1a87c83a 	sub	r3,r3,r10
 4008a10:	1a52703a 	and	r9,r3,r9
 4008a14:	2210703a 	and	r8,r4,r8
 4008a18:	4250b03a 	or	r8,r8,r9
 4008a1c:	4010c03a 	cmpne	r8,r8,zero
 4008a20:	42d0b03a 	or	r8,r8,r11
 4008a24:	7013883a 	mov	r9,r14
 4008a28:	11000117 	ldw	r4,4(r2)
 4008a2c:	28800117 	ldw	r2,4(r5)
 4008a30:	20804126 	beq	r4,r2,4008b38 <_fpadd_parts+0x1b4>
 4008a34:	20006326 	beq	r4,zero,4008bc4 <_fpadd_parts+0x240>
 4008a38:	4305c83a 	sub	r2,r8,r12
 4008a3c:	4091803a 	cmpltu	r8,r8,r2
 4008a40:	4b47c83a 	sub	r3,r9,r13
 4008a44:	1a07c83a 	sub	r3,r3,r8
 4008a48:	18006316 	blt	r3,zero,4008bd8 <_fpadd_parts+0x254>
 4008a4c:	30000115 	stw	zero,4(r6)
 4008a50:	31c00215 	stw	r7,8(r6)
 4008a54:	30800315 	stw	r2,12(r6)
 4008a58:	30c00415 	stw	r3,16(r6)
 4008a5c:	11ffffc4 	addi	r7,r2,-1
 4008a60:	388b403a 	cmpgeu	r5,r7,r2
 4008a64:	194bc83a 	sub	r5,r3,r5
 4008a68:	01040034 	movhi	r4,4096
 4008a6c:	213fffc4 	addi	r4,r4,-1
 4008a70:	21401736 	bltu	r4,r5,4008ad0 <_fpadd_parts+0x14c>
 4008a74:	29008226 	beq	r5,r4,4008c80 <_fpadd_parts+0x2fc>
 4008a78:	31400217 	ldw	r5,8(r6)
 4008a7c:	02840034 	movhi	r10,4096
 4008a80:	52bfffc4 	addi	r10,r10,-1
 4008a84:	033fff84 	movi	r12,-2
 4008a88:	297fffc4 	addi	r5,r5,-1
 4008a8c:	00000106 	br	4008a94 <_fpadd_parts+0x110>
 4008a90:	3a804a26 	beq	r7,r10,4008bbc <_fpadd_parts+0x238>
 4008a94:	1089883a 	add	r4,r2,r2
 4008a98:	2091803a 	cmpltu	r8,r4,r2
 4008a9c:	18c7883a 	add	r3,r3,r3
 4008aa0:	227fffc4 	addi	r9,r4,-1
 4008aa4:	40d1883a 	add	r8,r8,r3
 4008aa8:	490f403a 	cmpgeu	r7,r9,r4
 4008aac:	41cfc83a 	sub	r7,r8,r7
 4008ab0:	2817883a 	mov	r11,r5
 4008ab4:	2005883a 	mov	r2,r4
 4008ab8:	4007883a 	mov	r3,r8
 4008abc:	297fffc4 	addi	r5,r5,-1
 4008ac0:	51fff32e 	bgeu	r10,r7,4008a90 <__alt_data_end+0xfe008a90>
 4008ac4:	31000315 	stw	r4,12(r6)
 4008ac8:	32000415 	stw	r8,16(r6)
 4008acc:	32c00215 	stw	r11,8(r6)
 4008ad0:	010000c4 	movi	r4,3
 4008ad4:	31000015 	stw	r4,0(r6)
 4008ad8:	01080034 	movhi	r4,8192
 4008adc:	213fffc4 	addi	r4,r4,-1
 4008ae0:	20c00b2e 	bgeu	r4,r3,4008b10 <_fpadd_parts+0x18c>
 4008ae4:	180e97fa 	slli	r7,r3,31
 4008ae8:	1008d07a 	srli	r4,r2,1
 4008aec:	31400217 	ldw	r5,8(r6)
 4008af0:	1806d07a 	srli	r3,r3,1
 4008af4:	1080004c 	andi	r2,r2,1
 4008af8:	3908b03a 	or	r4,r7,r4
 4008afc:	1108b03a 	or	r4,r2,r4
 4008b00:	29400044 	addi	r5,r5,1
 4008b04:	31000315 	stw	r4,12(r6)
 4008b08:	30c00415 	stw	r3,16(r6)
 4008b0c:	31400215 	stw	r5,8(r6)
 4008b10:	3005883a 	mov	r2,r6
 4008b14:	f800283a 	ret
 4008b18:	2805883a 	mov	r2,r5
 4008b1c:	f800283a 	ret
 4008b20:	59c01e0e 	bge	r11,r7,4008b9c <_fpadd_parts+0x218>
 4008b24:	11000117 	ldw	r4,4(r2)
 4008b28:	28800117 	ldw	r2,4(r5)
 4008b2c:	0011883a 	mov	r8,zero
 4008b30:	0013883a 	mov	r9,zero
 4008b34:	20bfbf1e 	bne	r4,r2,4008a34 <__alt_data_end+0xfe008a34>
 4008b38:	4305883a 	add	r2,r8,r12
 4008b3c:	1207803a 	cmpltu	r3,r2,r8
 4008b40:	4b53883a 	add	r9,r9,r13
 4008b44:	1a47883a 	add	r3,r3,r9
 4008b48:	31000115 	stw	r4,4(r6)
 4008b4c:	31c00215 	stw	r7,8(r6)
 4008b50:	30800315 	stw	r2,12(r6)
 4008b54:	30c00415 	stw	r3,16(r6)
 4008b58:	003fdd06 	br	4008ad0 <__alt_data_end+0xfe008ad0>
 4008b5c:	20ffef1e 	bne	r4,r3,4008b1c <__alt_data_end+0xfe008b1c>
 4008b60:	31000015 	stw	r4,0(r6)
 4008b64:	10c00117 	ldw	r3,4(r2)
 4008b68:	30c00115 	stw	r3,4(r6)
 4008b6c:	10c00217 	ldw	r3,8(r2)
 4008b70:	11000117 	ldw	r4,4(r2)
 4008b74:	29400117 	ldw	r5,4(r5)
 4008b78:	30c00215 	stw	r3,8(r6)
 4008b7c:	10c00317 	ldw	r3,12(r2)
 4008b80:	2908703a 	and	r4,r5,r4
 4008b84:	30c00315 	stw	r3,12(r6)
 4008b88:	10c00417 	ldw	r3,16(r2)
 4008b8c:	31000115 	stw	r4,4(r6)
 4008b90:	3005883a 	mov	r2,r6
 4008b94:	30c00415 	stw	r3,16(r6)
 4008b98:	f800283a 	ret
 4008b9c:	580f883a 	mov	r7,r11
 4008ba0:	0019883a 	mov	r12,zero
 4008ba4:	001b883a 	mov	r13,zero
 4008ba8:	003f9f06 	br	4008a28 <__alt_data_end+0xfe008a28>
 4008bac:	0115c83a 	sub	r10,zero,r4
 4008bb0:	00c00fc4 	movi	r3,63
 4008bb4:	1abfda16 	blt	r3,r10,4008b20 <__alt_data_end+0xfe008b20>
 4008bb8:	003f8906 	br	40089e0 <__alt_data_end+0xfe0089e0>
 4008bbc:	627fb52e 	bgeu	r12,r9,4008a94 <__alt_data_end+0xfe008a94>
 4008bc0:	003fc006 	br	4008ac4 <__alt_data_end+0xfe008ac4>
 4008bc4:	6205c83a 	sub	r2,r12,r8
 4008bc8:	6099803a 	cmpltu	r12,r12,r2
 4008bcc:	6a47c83a 	sub	r3,r13,r9
 4008bd0:	1b07c83a 	sub	r3,r3,r12
 4008bd4:	183f9d0e 	bge	r3,zero,4008a4c <__alt_data_end+0xfe008a4c>
 4008bd8:	0085c83a 	sub	r2,zero,r2
 4008bdc:	1008c03a 	cmpne	r4,r2,zero
 4008be0:	00c7c83a 	sub	r3,zero,r3
 4008be4:	1907c83a 	sub	r3,r3,r4
 4008be8:	01000044 	movi	r4,1
 4008bec:	31000115 	stw	r4,4(r6)
 4008bf0:	31c00215 	stw	r7,8(r6)
 4008bf4:	30800315 	stw	r2,12(r6)
 4008bf8:	30c00415 	stw	r3,16(r6)
 4008bfc:	003f9706 	br	4008a5c <__alt_data_end+0xfe008a5c>
 4008c00:	203f8926 	beq	r4,zero,4008a28 <__alt_data_end+0xfe008a28>
 4008c04:	50fff804 	addi	r3,r10,-32
 4008c08:	3a8f883a 	add	r7,r7,r10
 4008c0c:	18002316 	blt	r3,zero,4008c9c <_fpadd_parts+0x318>
 4008c10:	68d6d83a 	srl	r11,r13,r3
 4008c14:	001d883a 	mov	r14,zero
 4008c18:	18001c16 	blt	r3,zero,4008c8c <_fpadd_parts+0x308>
 4008c1c:	01000044 	movi	r4,1
 4008c20:	20c6983a 	sll	r3,r4,r3
 4008c24:	0015883a 	mov	r10,zero
 4008c28:	513fffc4 	addi	r4,r10,-1
 4008c2c:	2295403a 	cmpgeu	r10,r4,r10
 4008c30:	1a87c83a 	sub	r3,r3,r10
 4008c34:	1b5a703a 	and	r13,r3,r13
 4008c38:	2318703a 	and	r12,r4,r12
 4008c3c:	6358b03a 	or	r12,r12,r13
 4008c40:	6018c03a 	cmpne	r12,r12,zero
 4008c44:	62d8b03a 	or	r12,r12,r11
 4008c48:	701b883a 	mov	r13,r14
 4008c4c:	003f7606 	br	4008a28 <__alt_data_end+0xfe008a28>
 4008c50:	4808907a 	slli	r4,r9,1
 4008c54:	02c007c4 	movi	r11,31
 4008c58:	5a97c83a 	sub	r11,r11,r10
 4008c5c:	22c8983a 	sll	r4,r4,r11
 4008c60:	4296d83a 	srl	r11,r8,r10
 4008c64:	4a9cd83a 	srl	r14,r9,r10
 4008c68:	22d6b03a 	or	r11,r4,r11
 4008c6c:	003f6106 	br	40089f4 <__alt_data_end+0xfe0089f4>
 4008c70:	00c00044 	movi	r3,1
 4008c74:	1a94983a 	sll	r10,r3,r10
 4008c78:	0007883a 	mov	r3,zero
 4008c7c:	003f6106 	br	4008a04 <__alt_data_end+0xfe008a04>
 4008c80:	013fff84 	movi	r4,-2
 4008c84:	21ff7c2e 	bgeu	r4,r7,4008a78 <__alt_data_end+0xfe008a78>
 4008c88:	003f9106 	br	4008ad0 <__alt_data_end+0xfe008ad0>
 4008c8c:	00c00044 	movi	r3,1
 4008c90:	1a94983a 	sll	r10,r3,r10
 4008c94:	0007883a 	mov	r3,zero
 4008c98:	003fe306 	br	4008c28 <__alt_data_end+0xfe008c28>
 4008c9c:	6816907a 	slli	r11,r13,1
 4008ca0:	010007c4 	movi	r4,31
 4008ca4:	2289c83a 	sub	r4,r4,r10
 4008ca8:	5908983a 	sll	r4,r11,r4
 4008cac:	6296d83a 	srl	r11,r12,r10
 4008cb0:	6a9cd83a 	srl	r14,r13,r10
 4008cb4:	22d6b03a 	or	r11,r4,r11
 4008cb8:	003fd706 	br	4008c18 <__alt_data_end+0xfe008c18>
 4008cbc:	193f971e 	bne	r3,r4,4008b1c <__alt_data_end+0xfe008b1c>
 4008cc0:	11000117 	ldw	r4,4(r2)
 4008cc4:	28c00117 	ldw	r3,4(r5)
 4008cc8:	20ff9426 	beq	r4,r3,4008b1c <__alt_data_end+0xfe008b1c>
 4008ccc:	00810074 	movhi	r2,1025
 4008cd0:	10b1dd04 	addi	r2,r2,-14476
 4008cd4:	f800283a 	ret

04008cd8 <__adddf3>:
 4008cd8:	deffec04 	addi	sp,sp,-80
 4008cdc:	d9001115 	stw	r4,68(sp)
 4008ce0:	d9401215 	stw	r5,72(sp)
 4008ce4:	d9001104 	addi	r4,sp,68
 4008ce8:	d9400a04 	addi	r5,sp,40
 4008cec:	dfc01315 	stw	ra,76(sp)
 4008cf0:	d9c01015 	stw	r7,64(sp)
 4008cf4:	d9800f15 	stw	r6,60(sp)
 4008cf8:	4009bec0 	call	4009bec <__unpack_d>
 4008cfc:	d9000f04 	addi	r4,sp,60
 4008d00:	d9400504 	addi	r5,sp,20
 4008d04:	4009bec0 	call	4009bec <__unpack_d>
 4008d08:	d9000a04 	addi	r4,sp,40
 4008d0c:	d9400504 	addi	r5,sp,20
 4008d10:	d80d883a 	mov	r6,sp
 4008d14:	40089840 	call	4008984 <_fpadd_parts>
 4008d18:	1009883a 	mov	r4,r2
 4008d1c:	40099c80 	call	40099c8 <__pack_d>
 4008d20:	dfc01317 	ldw	ra,76(sp)
 4008d24:	dec01404 	addi	sp,sp,80
 4008d28:	f800283a 	ret

04008d2c <__subdf3>:
 4008d2c:	deffec04 	addi	sp,sp,-80
 4008d30:	d9001115 	stw	r4,68(sp)
 4008d34:	d9401215 	stw	r5,72(sp)
 4008d38:	d9001104 	addi	r4,sp,68
 4008d3c:	d9400a04 	addi	r5,sp,40
 4008d40:	dfc01315 	stw	ra,76(sp)
 4008d44:	d9c01015 	stw	r7,64(sp)
 4008d48:	d9800f15 	stw	r6,60(sp)
 4008d4c:	4009bec0 	call	4009bec <__unpack_d>
 4008d50:	d9000f04 	addi	r4,sp,60
 4008d54:	d9400504 	addi	r5,sp,20
 4008d58:	4009bec0 	call	4009bec <__unpack_d>
 4008d5c:	d8800617 	ldw	r2,24(sp)
 4008d60:	d9000a04 	addi	r4,sp,40
 4008d64:	d9400504 	addi	r5,sp,20
 4008d68:	d80d883a 	mov	r6,sp
 4008d6c:	1080005c 	xori	r2,r2,1
 4008d70:	d8800615 	stw	r2,24(sp)
 4008d74:	40089840 	call	4008984 <_fpadd_parts>
 4008d78:	1009883a 	mov	r4,r2
 4008d7c:	40099c80 	call	40099c8 <__pack_d>
 4008d80:	dfc01317 	ldw	ra,76(sp)
 4008d84:	dec01404 	addi	sp,sp,80
 4008d88:	f800283a 	ret

04008d8c <__muldf3>:
 4008d8c:	deffe404 	addi	sp,sp,-112
 4008d90:	d9001115 	stw	r4,68(sp)
 4008d94:	d9401215 	stw	r5,72(sp)
 4008d98:	d9001104 	addi	r4,sp,68
 4008d9c:	d9400a04 	addi	r5,sp,40
 4008da0:	dfc01b15 	stw	ra,108(sp)
 4008da4:	d9800f15 	stw	r6,60(sp)
 4008da8:	d9c01015 	stw	r7,64(sp)
 4008dac:	ddc01a15 	stw	r23,104(sp)
 4008db0:	dd801915 	stw	r22,100(sp)
 4008db4:	dd401815 	stw	r21,96(sp)
 4008db8:	dd001715 	stw	r20,92(sp)
 4008dbc:	dcc01615 	stw	r19,88(sp)
 4008dc0:	dc801515 	stw	r18,84(sp)
 4008dc4:	dc401415 	stw	r17,80(sp)
 4008dc8:	dc001315 	stw	r16,76(sp)
 4008dcc:	4009bec0 	call	4009bec <__unpack_d>
 4008dd0:	d9000f04 	addi	r4,sp,60
 4008dd4:	d9400504 	addi	r5,sp,20
 4008dd8:	4009bec0 	call	4009bec <__unpack_d>
 4008ddc:	d8c00a17 	ldw	r3,40(sp)
 4008de0:	00800044 	movi	r2,1
 4008de4:	10c01136 	bltu	r2,r3,4008e2c <__muldf3+0xa0>
 4008de8:	d8c00b17 	ldw	r3,44(sp)
 4008dec:	d8800617 	ldw	r2,24(sp)
 4008df0:	d9000a04 	addi	r4,sp,40
 4008df4:	1884c03a 	cmpne	r2,r3,r2
 4008df8:	d8800b15 	stw	r2,44(sp)
 4008dfc:	40099c80 	call	40099c8 <__pack_d>
 4008e00:	dfc01b17 	ldw	ra,108(sp)
 4008e04:	ddc01a17 	ldw	r23,104(sp)
 4008e08:	dd801917 	ldw	r22,100(sp)
 4008e0c:	dd401817 	ldw	r21,96(sp)
 4008e10:	dd001717 	ldw	r20,92(sp)
 4008e14:	dcc01617 	ldw	r19,88(sp)
 4008e18:	dc801517 	ldw	r18,84(sp)
 4008e1c:	dc401417 	ldw	r17,80(sp)
 4008e20:	dc001317 	ldw	r16,76(sp)
 4008e24:	dec01c04 	addi	sp,sp,112
 4008e28:	f800283a 	ret
 4008e2c:	d9000517 	ldw	r4,20(sp)
 4008e30:	11000636 	bltu	r2,r4,4008e4c <__muldf3+0xc0>
 4008e34:	d8800617 	ldw	r2,24(sp)
 4008e38:	d8c00b17 	ldw	r3,44(sp)
 4008e3c:	d9000504 	addi	r4,sp,20
 4008e40:	1884c03a 	cmpne	r2,r3,r2
 4008e44:	d8800615 	stw	r2,24(sp)
 4008e48:	003fec06 	br	4008dfc <__alt_data_end+0xfe008dfc>
 4008e4c:	00800104 	movi	r2,4
 4008e50:	1880051e 	bne	r3,r2,4008e68 <__muldf3+0xdc>
 4008e54:	00800084 	movi	r2,2
 4008e58:	20bfe31e 	bne	r4,r2,4008de8 <__alt_data_end+0xfe008de8>
 4008e5c:	01010074 	movhi	r4,1025
 4008e60:	2131dd04 	addi	r4,r4,-14476
 4008e64:	003fe506 	br	4008dfc <__alt_data_end+0xfe008dfc>
 4008e68:	2080031e 	bne	r4,r2,4008e78 <__muldf3+0xec>
 4008e6c:	00800084 	movi	r2,2
 4008e70:	18bffa26 	beq	r3,r2,4008e5c <__alt_data_end+0xfe008e5c>
 4008e74:	003fef06 	br	4008e34 <__alt_data_end+0xfe008e34>
 4008e78:	00800084 	movi	r2,2
 4008e7c:	18bfda26 	beq	r3,r2,4008de8 <__alt_data_end+0xfe008de8>
 4008e80:	20bfec26 	beq	r4,r2,4008e34 <__alt_data_end+0xfe008e34>
 4008e84:	dc000d17 	ldw	r16,52(sp)
 4008e88:	dd000817 	ldw	r20,32(sp)
 4008e8c:	dc800917 	ldw	r18,36(sp)
 4008e90:	8009883a 	mov	r4,r16
 4008e94:	000b883a 	mov	r5,zero
 4008e98:	a00d883a 	mov	r6,r20
 4008e9c:	000f883a 	mov	r7,zero
 4008ea0:	400980c0 	call	400980c <__muldi3>
 4008ea4:	dc400e17 	ldw	r17,56(sp)
 4008ea8:	9009883a 	mov	r4,r18
 4008eac:	800d883a 	mov	r6,r16
 4008eb0:	000b883a 	mov	r5,zero
 4008eb4:	000f883a 	mov	r7,zero
 4008eb8:	102f883a 	mov	r23,r2
 4008ebc:	1827883a 	mov	r19,r3
 4008ec0:	400980c0 	call	400980c <__muldi3>
 4008ec4:	900d883a 	mov	r6,r18
 4008ec8:	8809883a 	mov	r4,r17
 4008ecc:	000b883a 	mov	r5,zero
 4008ed0:	000f883a 	mov	r7,zero
 4008ed4:	102b883a 	mov	r21,r2
 4008ed8:	1821883a 	mov	r16,r3
 4008edc:	400980c0 	call	400980c <__muldi3>
 4008ee0:	8809883a 	mov	r4,r17
 4008ee4:	000b883a 	mov	r5,zero
 4008ee8:	a00d883a 	mov	r6,r20
 4008eec:	000f883a 	mov	r7,zero
 4008ef0:	102d883a 	mov	r22,r2
 4008ef4:	1825883a 	mov	r18,r3
 4008ef8:	400980c0 	call	400980c <__muldi3>
 4008efc:	154b883a 	add	r5,r2,r21
 4008f00:	2889803a 	cmpltu	r4,r5,r2
 4008f04:	1c07883a 	add	r3,r3,r16
 4008f08:	20c9883a 	add	r4,r4,r3
 4008f0c:	24004b36 	bltu	r4,r16,400903c <__muldf3+0x2b0>
 4008f10:	8100011e 	bne	r16,r4,4008f18 <__muldf3+0x18c>
 4008f14:	2d404936 	bltu	r5,r21,400903c <__muldf3+0x2b0>
 4008f18:	0011883a 	mov	r8,zero
 4008f1c:	0007883a 	mov	r3,zero
 4008f20:	2ccb883a 	add	r5,r5,r19
 4008f24:	b80d883a 	mov	r6,r23
 4008f28:	2cc0012e 	bgeu	r5,r19,4008f30 <__muldf3+0x1a4>
 4008f2c:	02000044 	movi	r8,1
 4008f30:	258f883a 	add	r7,r4,r22
 4008f34:	3909803a 	cmpltu	r4,r7,r4
 4008f38:	da400c17 	ldw	r9,48(sp)
 4008f3c:	2489883a 	add	r4,r4,r18
 4008f40:	d8800717 	ldw	r2,28(sp)
 4008f44:	20c9883a 	add	r4,r4,r3
 4008f48:	da800b17 	ldw	r10,44(sp)
 4008f4c:	d8c00617 	ldw	r3,24(sp)
 4008f50:	3a11883a 	add	r8,r7,r8
 4008f54:	4885883a 	add	r2,r9,r2
 4008f58:	50c6c03a 	cmpne	r3,r10,r3
 4008f5c:	41cf803a 	cmpltu	r7,r8,r7
 4008f60:	12400104 	addi	r9,r2,4
 4008f64:	d8c00115 	stw	r3,4(sp)
 4008f68:	3909883a 	add	r4,r7,r4
 4008f6c:	da400215 	stw	r9,8(sp)
 4008f70:	03480034 	movhi	r13,8192
 4008f74:	6b7fffc4 	addi	r13,r13,-1
 4008f78:	4007883a 	mov	r3,r8
 4008f7c:	6900102e 	bgeu	r13,r4,4008fc0 <__muldf3+0x234>
 4008f80:	10800144 	addi	r2,r2,5
 4008f84:	180ed07a 	srli	r7,r3,1
 4008f88:	18c0004c 	andi	r3,r3,1
 4008f8c:	201097fa 	slli	r8,r4,31
 4008f90:	281697fa 	slli	r11,r5,31
 4008f94:	2008d07a 	srli	r4,r4,1
 4008f98:	3014d07a 	srli	r10,r6,1
 4008f9c:	2812d07a 	srli	r9,r5,1
 4008fa0:	1019883a 	mov	r12,r2
 4008fa4:	18000226 	beq	r3,zero,4008fb0 <__muldf3+0x224>
 4008fa8:	5a8cb03a 	or	r6,r11,r10
 4008fac:	49600034 	orhi	r5,r9,32768
 4008fb0:	41c6b03a 	or	r3,r8,r7
 4008fb4:	10800044 	addi	r2,r2,1
 4008fb8:	693ff236 	bltu	r13,r4,4008f84 <__alt_data_end+0xfe008f84>
 4008fbc:	db000215 	stw	r12,8(sp)
 4008fc0:	03440034 	movhi	r13,4096
 4008fc4:	6b7fffc4 	addi	r13,r13,-1
 4008fc8:	69001336 	bltu	r13,r4,4009018 <__muldf3+0x28c>
 4008fcc:	d8800217 	ldw	r2,8(sp)
 4008fd0:	10bfffc4 	addi	r2,r2,-1
 4008fd4:	18d3883a 	add	r9,r3,r3
 4008fd8:	48c7803a 	cmpltu	r3,r9,r3
 4008fdc:	2109883a 	add	r4,r4,r4
 4008fe0:	190f883a 	add	r7,r3,r4
 4008fe4:	3191883a 	add	r8,r6,r6
 4008fe8:	4197803a 	cmpltu	r11,r8,r6
 4008fec:	2955883a 	add	r10,r5,r5
 4008ff0:	1019883a 	mov	r12,r2
 4008ff4:	4807883a 	mov	r3,r9
 4008ff8:	3809883a 	mov	r4,r7
 4008ffc:	2800010e 	bge	r5,zero,4009004 <__muldf3+0x278>
 4009000:	48c00054 	ori	r3,r9,1
 4009004:	400d883a 	mov	r6,r8
 4009008:	5a8b883a 	add	r5,r11,r10
 400900c:	10bfffc4 	addi	r2,r2,-1
 4009010:	69fff02e 	bgeu	r13,r7,4008fd4 <__alt_data_end+0xfe008fd4>
 4009014:	db000215 	stw	r12,8(sp)
 4009018:	18803fcc 	andi	r2,r3,255
 400901c:	01c02004 	movi	r7,128
 4009020:	11c00926 	beq	r2,r7,4009048 <__muldf3+0x2bc>
 4009024:	008000c4 	movi	r2,3
 4009028:	d9000415 	stw	r4,16(sp)
 400902c:	d8c00315 	stw	r3,12(sp)
 4009030:	d8800015 	stw	r2,0(sp)
 4009034:	d809883a 	mov	r4,sp
 4009038:	003f7006 	br	4008dfc <__alt_data_end+0xfe008dfc>
 400903c:	0011883a 	mov	r8,zero
 4009040:	00c00044 	movi	r3,1
 4009044:	003fb606 	br	4008f20 <__alt_data_end+0xfe008f20>
 4009048:	19c0400c 	andi	r7,r3,256
 400904c:	383ff51e 	bne	r7,zero,4009024 <__alt_data_end+0xfe009024>
 4009050:	314ab03a 	or	r5,r6,r5
 4009054:	283ff326 	beq	r5,zero,4009024 <__alt_data_end+0xfe009024>
 4009058:	1885883a 	add	r2,r3,r2
 400905c:	10cb803a 	cmpltu	r5,r2,r3
 4009060:	00ffc004 	movi	r3,-256
 4009064:	10c6703a 	and	r3,r2,r3
 4009068:	2909883a 	add	r4,r5,r4
 400906c:	003fed06 	br	4009024 <__alt_data_end+0xfe009024>

04009070 <__divdf3>:
 4009070:	defff104 	addi	sp,sp,-60
 4009074:	d9000c15 	stw	r4,48(sp)
 4009078:	d9400d15 	stw	r5,52(sp)
 400907c:	d9000c04 	addi	r4,sp,48
 4009080:	d9400504 	addi	r5,sp,20
 4009084:	dfc00e15 	stw	ra,56(sp)
 4009088:	d9800a15 	stw	r6,40(sp)
 400908c:	d9c00b15 	stw	r7,44(sp)
 4009090:	4009bec0 	call	4009bec <__unpack_d>
 4009094:	d9000a04 	addi	r4,sp,40
 4009098:	d80b883a 	mov	r5,sp
 400909c:	4009bec0 	call	4009bec <__unpack_d>
 40090a0:	d8c00517 	ldw	r3,20(sp)
 40090a4:	00800044 	movi	r2,1
 40090a8:	10c00536 	bltu	r2,r3,40090c0 <__divdf3+0x50>
 40090ac:	d9000504 	addi	r4,sp,20
 40090b0:	40099c80 	call	40099c8 <__pack_d>
 40090b4:	dfc00e17 	ldw	ra,56(sp)
 40090b8:	dec00f04 	addi	sp,sp,60
 40090bc:	f800283a 	ret
 40090c0:	d9000017 	ldw	r4,0(sp)
 40090c4:	11000536 	bltu	r2,r4,40090dc <__divdf3+0x6c>
 40090c8:	d809883a 	mov	r4,sp
 40090cc:	40099c80 	call	40099c8 <__pack_d>
 40090d0:	dfc00e17 	ldw	ra,56(sp)
 40090d4:	dec00f04 	addi	sp,sp,60
 40090d8:	f800283a 	ret
 40090dc:	d9800617 	ldw	r6,24(sp)
 40090e0:	d9400117 	ldw	r5,4(sp)
 40090e4:	00800104 	movi	r2,4
 40090e8:	314af03a 	xor	r5,r6,r5
 40090ec:	d9400615 	stw	r5,24(sp)
 40090f0:	18800226 	beq	r3,r2,40090fc <__divdf3+0x8c>
 40090f4:	01400084 	movi	r5,2
 40090f8:	1940041e 	bne	r3,r5,400910c <__divdf3+0x9c>
 40090fc:	193feb1e 	bne	r3,r4,40090ac <__alt_data_end+0xfe0090ac>
 4009100:	01010074 	movhi	r4,1025
 4009104:	2131dd04 	addi	r4,r4,-14476
 4009108:	003fe906 	br	40090b0 <__alt_data_end+0xfe0090b0>
 400910c:	20803326 	beq	r4,r2,40091dc <__divdf3+0x16c>
 4009110:	21403726 	beq	r4,r5,40091f0 <__divdf3+0x180>
 4009114:	d8800217 	ldw	r2,8(sp)
 4009118:	d9000717 	ldw	r4,28(sp)
 400911c:	d8c00917 	ldw	r3,36(sp)
 4009120:	da000417 	ldw	r8,16(sp)
 4009124:	2089c83a 	sub	r4,r4,r2
 4009128:	d9000715 	stw	r4,28(sp)
 400912c:	d8800817 	ldw	r2,32(sp)
 4009130:	dbc00317 	ldw	r15,12(sp)
 4009134:	1a000236 	bltu	r3,r8,4009140 <__divdf3+0xd0>
 4009138:	40c0081e 	bne	r8,r3,400915c <__divdf3+0xec>
 400913c:	13c0072e 	bgeu	r2,r15,400915c <__divdf3+0xec>
 4009140:	108b883a 	add	r5,r2,r2
 4009144:	288d803a 	cmpltu	r6,r5,r2
 4009148:	18c7883a 	add	r3,r3,r3
 400914c:	213fffc4 	addi	r4,r4,-1
 4009150:	2805883a 	mov	r2,r5
 4009154:	30c7883a 	add	r3,r6,r3
 4009158:	d9000715 	stw	r4,28(sp)
 400915c:	01400f44 	movi	r5,61
 4009160:	000f883a 	mov	r7,zero
 4009164:	01040034 	movhi	r4,4096
 4009168:	0019883a 	mov	r12,zero
 400916c:	001b883a 	mov	r13,zero
 4009170:	201697fa 	slli	r11,r4,31
 4009174:	3814d07a 	srli	r10,r7,1
 4009178:	297fffc4 	addi	r5,r5,-1
 400917c:	1a000936 	bltu	r3,r8,40091a4 <__divdf3+0x134>
 4009180:	13cdc83a 	sub	r6,r2,r15
 4009184:	1193803a 	cmpltu	r9,r2,r6
 4009188:	1a1dc83a 	sub	r14,r3,r8
 400918c:	40c0011e 	bne	r8,r3,4009194 <__divdf3+0x124>
 4009190:	13c00436 	bltu	r2,r15,40091a4 <__divdf3+0x134>
 4009194:	3005883a 	mov	r2,r6
 4009198:	7247c83a 	sub	r3,r14,r9
 400919c:	61d8b03a 	or	r12,r12,r7
 40091a0:	691ab03a 	or	r13,r13,r4
 40091a4:	108d883a 	add	r6,r2,r2
 40091a8:	3093803a 	cmpltu	r9,r6,r2
 40091ac:	18c7883a 	add	r3,r3,r3
 40091b0:	5a8eb03a 	or	r7,r11,r10
 40091b4:	2008d07a 	srli	r4,r4,1
 40091b8:	3005883a 	mov	r2,r6
 40091bc:	48c7883a 	add	r3,r9,r3
 40091c0:	283feb1e 	bne	r5,zero,4009170 <__alt_data_end+0xfe009170>
 40091c4:	61003fcc 	andi	r4,r12,255
 40091c8:	01402004 	movi	r5,128
 40091cc:	21400b26 	beq	r4,r5,40091fc <__divdf3+0x18c>
 40091d0:	db000815 	stw	r12,32(sp)
 40091d4:	db400915 	stw	r13,36(sp)
 40091d8:	003fb406 	br	40090ac <__alt_data_end+0xfe0090ac>
 40091dc:	d8000815 	stw	zero,32(sp)
 40091e0:	d8000915 	stw	zero,36(sp)
 40091e4:	d8000715 	stw	zero,28(sp)
 40091e8:	d9000504 	addi	r4,sp,20
 40091ec:	003fb006 	br	40090b0 <__alt_data_end+0xfe0090b0>
 40091f0:	d8800515 	stw	r2,20(sp)
 40091f4:	d9000504 	addi	r4,sp,20
 40091f8:	003fad06 	br	40090b0 <__alt_data_end+0xfe0090b0>
 40091fc:	6140400c 	andi	r5,r12,256
 4009200:	283ff31e 	bne	r5,zero,40091d0 <__alt_data_end+0xfe0091d0>
 4009204:	30c4b03a 	or	r2,r6,r3
 4009208:	103ff126 	beq	r2,zero,40091d0 <__alt_data_end+0xfe0091d0>
 400920c:	6109883a 	add	r4,r12,r4
 4009210:	2305803a 	cmpltu	r2,r4,r12
 4009214:	033fc004 	movi	r12,-256
 4009218:	2318703a 	and	r12,r4,r12
 400921c:	135b883a 	add	r13,r2,r13
 4009220:	003feb06 	br	40091d0 <__alt_data_end+0xfe0091d0>

04009224 <__eqdf2>:
 4009224:	defff104 	addi	sp,sp,-60
 4009228:	d9000c15 	stw	r4,48(sp)
 400922c:	d9400d15 	stw	r5,52(sp)
 4009230:	d9000c04 	addi	r4,sp,48
 4009234:	d9400504 	addi	r5,sp,20
 4009238:	dfc00e15 	stw	ra,56(sp)
 400923c:	d9800a15 	stw	r6,40(sp)
 4009240:	d9c00b15 	stw	r7,44(sp)
 4009244:	4009bec0 	call	4009bec <__unpack_d>
 4009248:	d9000a04 	addi	r4,sp,40
 400924c:	d80b883a 	mov	r5,sp
 4009250:	4009bec0 	call	4009bec <__unpack_d>
 4009254:	d8c00517 	ldw	r3,20(sp)
 4009258:	00800044 	movi	r2,1
 400925c:	10c0052e 	bgeu	r2,r3,4009274 <__eqdf2+0x50>
 4009260:	d8c00017 	ldw	r3,0(sp)
 4009264:	10c0032e 	bgeu	r2,r3,4009274 <__eqdf2+0x50>
 4009268:	d9000504 	addi	r4,sp,20
 400926c:	d80b883a 	mov	r5,sp
 4009270:	4009cf00 	call	4009cf0 <__fpcmp_parts_d>
 4009274:	dfc00e17 	ldw	ra,56(sp)
 4009278:	dec00f04 	addi	sp,sp,60
 400927c:	f800283a 	ret

04009280 <__nedf2>:
 4009280:	defff104 	addi	sp,sp,-60
 4009284:	d9000c15 	stw	r4,48(sp)
 4009288:	d9400d15 	stw	r5,52(sp)
 400928c:	d9000c04 	addi	r4,sp,48
 4009290:	d9400504 	addi	r5,sp,20
 4009294:	dfc00e15 	stw	ra,56(sp)
 4009298:	d9800a15 	stw	r6,40(sp)
 400929c:	d9c00b15 	stw	r7,44(sp)
 40092a0:	4009bec0 	call	4009bec <__unpack_d>
 40092a4:	d9000a04 	addi	r4,sp,40
 40092a8:	d80b883a 	mov	r5,sp
 40092ac:	4009bec0 	call	4009bec <__unpack_d>
 40092b0:	d8c00517 	ldw	r3,20(sp)
 40092b4:	00800044 	movi	r2,1
 40092b8:	10c0052e 	bgeu	r2,r3,40092d0 <__nedf2+0x50>
 40092bc:	d8c00017 	ldw	r3,0(sp)
 40092c0:	10c0032e 	bgeu	r2,r3,40092d0 <__nedf2+0x50>
 40092c4:	d9000504 	addi	r4,sp,20
 40092c8:	d80b883a 	mov	r5,sp
 40092cc:	4009cf00 	call	4009cf0 <__fpcmp_parts_d>
 40092d0:	dfc00e17 	ldw	ra,56(sp)
 40092d4:	dec00f04 	addi	sp,sp,60
 40092d8:	f800283a 	ret

040092dc <__gtdf2>:
 40092dc:	defff104 	addi	sp,sp,-60
 40092e0:	d9000c15 	stw	r4,48(sp)
 40092e4:	d9400d15 	stw	r5,52(sp)
 40092e8:	d9000c04 	addi	r4,sp,48
 40092ec:	d9400504 	addi	r5,sp,20
 40092f0:	dfc00e15 	stw	ra,56(sp)
 40092f4:	d9800a15 	stw	r6,40(sp)
 40092f8:	d9c00b15 	stw	r7,44(sp)
 40092fc:	4009bec0 	call	4009bec <__unpack_d>
 4009300:	d9000a04 	addi	r4,sp,40
 4009304:	d80b883a 	mov	r5,sp
 4009308:	4009bec0 	call	4009bec <__unpack_d>
 400930c:	d8c00517 	ldw	r3,20(sp)
 4009310:	00800044 	movi	r2,1
 4009314:	10c0082e 	bgeu	r2,r3,4009338 <__gtdf2+0x5c>
 4009318:	d8c00017 	ldw	r3,0(sp)
 400931c:	10c0062e 	bgeu	r2,r3,4009338 <__gtdf2+0x5c>
 4009320:	d9000504 	addi	r4,sp,20
 4009324:	d80b883a 	mov	r5,sp
 4009328:	4009cf00 	call	4009cf0 <__fpcmp_parts_d>
 400932c:	dfc00e17 	ldw	ra,56(sp)
 4009330:	dec00f04 	addi	sp,sp,60
 4009334:	f800283a 	ret
 4009338:	00bfffc4 	movi	r2,-1
 400933c:	003ffb06 	br	400932c <__alt_data_end+0xfe00932c>

04009340 <__gedf2>:
 4009340:	defff104 	addi	sp,sp,-60
 4009344:	d9000c15 	stw	r4,48(sp)
 4009348:	d9400d15 	stw	r5,52(sp)
 400934c:	d9000c04 	addi	r4,sp,48
 4009350:	d9400504 	addi	r5,sp,20
 4009354:	dfc00e15 	stw	ra,56(sp)
 4009358:	d9800a15 	stw	r6,40(sp)
 400935c:	d9c00b15 	stw	r7,44(sp)
 4009360:	4009bec0 	call	4009bec <__unpack_d>
 4009364:	d9000a04 	addi	r4,sp,40
 4009368:	d80b883a 	mov	r5,sp
 400936c:	4009bec0 	call	4009bec <__unpack_d>
 4009370:	d8c00517 	ldw	r3,20(sp)
 4009374:	00800044 	movi	r2,1
 4009378:	10c0082e 	bgeu	r2,r3,400939c <__gedf2+0x5c>
 400937c:	d8c00017 	ldw	r3,0(sp)
 4009380:	10c0062e 	bgeu	r2,r3,400939c <__gedf2+0x5c>
 4009384:	d9000504 	addi	r4,sp,20
 4009388:	d80b883a 	mov	r5,sp
 400938c:	4009cf00 	call	4009cf0 <__fpcmp_parts_d>
 4009390:	dfc00e17 	ldw	ra,56(sp)
 4009394:	dec00f04 	addi	sp,sp,60
 4009398:	f800283a 	ret
 400939c:	00bfffc4 	movi	r2,-1
 40093a0:	003ffb06 	br	4009390 <__alt_data_end+0xfe009390>

040093a4 <__ltdf2>:
 40093a4:	defff104 	addi	sp,sp,-60
 40093a8:	d9000c15 	stw	r4,48(sp)
 40093ac:	d9400d15 	stw	r5,52(sp)
 40093b0:	d9000c04 	addi	r4,sp,48
 40093b4:	d9400504 	addi	r5,sp,20
 40093b8:	dfc00e15 	stw	ra,56(sp)
 40093bc:	d9800a15 	stw	r6,40(sp)
 40093c0:	d9c00b15 	stw	r7,44(sp)
 40093c4:	4009bec0 	call	4009bec <__unpack_d>
 40093c8:	d9000a04 	addi	r4,sp,40
 40093cc:	d80b883a 	mov	r5,sp
 40093d0:	4009bec0 	call	4009bec <__unpack_d>
 40093d4:	d8c00517 	ldw	r3,20(sp)
 40093d8:	00800044 	movi	r2,1
 40093dc:	10c0052e 	bgeu	r2,r3,40093f4 <__ltdf2+0x50>
 40093e0:	d8c00017 	ldw	r3,0(sp)
 40093e4:	10c0032e 	bgeu	r2,r3,40093f4 <__ltdf2+0x50>
 40093e8:	d9000504 	addi	r4,sp,20
 40093ec:	d80b883a 	mov	r5,sp
 40093f0:	4009cf00 	call	4009cf0 <__fpcmp_parts_d>
 40093f4:	dfc00e17 	ldw	ra,56(sp)
 40093f8:	dec00f04 	addi	sp,sp,60
 40093fc:	f800283a 	ret

04009400 <__floatsidf>:
 4009400:	2004d7fa 	srli	r2,r4,31
 4009404:	defff904 	addi	sp,sp,-28
 4009408:	00c000c4 	movi	r3,3
 400940c:	dfc00615 	stw	ra,24(sp)
 4009410:	dc000515 	stw	r16,20(sp)
 4009414:	d8c00015 	stw	r3,0(sp)
 4009418:	d8800115 	stw	r2,4(sp)
 400941c:	2000081e 	bne	r4,zero,4009440 <__floatsidf+0x40>
 4009420:	00800084 	movi	r2,2
 4009424:	d8800015 	stw	r2,0(sp)
 4009428:	d809883a 	mov	r4,sp
 400942c:	40099c80 	call	40099c8 <__pack_d>
 4009430:	dfc00617 	ldw	ra,24(sp)
 4009434:	dc000517 	ldw	r16,20(sp)
 4009438:	dec00704 	addi	sp,sp,28
 400943c:	f800283a 	ret
 4009440:	00c00f04 	movi	r3,60
 4009444:	d8c00215 	stw	r3,8(sp)
 4009448:	10000f1e 	bne	r2,zero,4009488 <__floatsidf+0x88>
 400944c:	2021883a 	mov	r16,r4
 4009450:	8009883a 	mov	r4,r16
 4009454:	400991c0 	call	400991c <__clzsi2>
 4009458:	11000744 	addi	r4,r2,29
 400945c:	0100110e 	bge	zero,r4,40094a4 <__floatsidf+0xa4>
 4009460:	10ffff44 	addi	r3,r2,-3
 4009464:	18001216 	blt	r3,zero,40094b0 <__floatsidf+0xb0>
 4009468:	80c6983a 	sll	r3,r16,r3
 400946c:	0009883a 	mov	r4,zero
 4009470:	014007c4 	movi	r5,31
 4009474:	2885c83a 	sub	r2,r5,r2
 4009478:	d9000315 	stw	r4,12(sp)
 400947c:	d8c00415 	stw	r3,16(sp)
 4009480:	d8800215 	stw	r2,8(sp)
 4009484:	003fe806 	br	4009428 <__alt_data_end+0xfe009428>
 4009488:	00a00034 	movhi	r2,32768
 400948c:	20800e26 	beq	r4,r2,40094c8 <__floatsidf+0xc8>
 4009490:	0121c83a 	sub	r16,zero,r4
 4009494:	8009883a 	mov	r4,r16
 4009498:	400991c0 	call	400991c <__clzsi2>
 400949c:	11000744 	addi	r4,r2,29
 40094a0:	013fef16 	blt	zero,r4,4009460 <__alt_data_end+0xfe009460>
 40094a4:	dc000315 	stw	r16,12(sp)
 40094a8:	d8000415 	stw	zero,16(sp)
 40094ac:	003fde06 	br	4009428 <__alt_data_end+0xfe009428>
 40094b0:	800ad07a 	srli	r5,r16,1
 40094b4:	00c007c4 	movi	r3,31
 40094b8:	1907c83a 	sub	r3,r3,r4
 40094bc:	28c6d83a 	srl	r3,r5,r3
 40094c0:	8108983a 	sll	r4,r16,r4
 40094c4:	003fea06 	br	4009470 <__alt_data_end+0xfe009470>
 40094c8:	0005883a 	mov	r2,zero
 40094cc:	00f07834 	movhi	r3,49632
 40094d0:	003fd706 	br	4009430 <__alt_data_end+0xfe009430>

040094d4 <__fixdfsi>:
 40094d4:	defff804 	addi	sp,sp,-32
 40094d8:	d9000515 	stw	r4,20(sp)
 40094dc:	d9400615 	stw	r5,24(sp)
 40094e0:	d9000504 	addi	r4,sp,20
 40094e4:	d80b883a 	mov	r5,sp
 40094e8:	dfc00715 	stw	ra,28(sp)
 40094ec:	4009bec0 	call	4009bec <__unpack_d>
 40094f0:	d8800017 	ldw	r2,0(sp)
 40094f4:	00c00084 	movi	r3,2
 40094f8:	10c01c26 	beq	r2,r3,400956c <__fixdfsi+0x98>
 40094fc:	00c00044 	movi	r3,1
 4009500:	18801a2e 	bgeu	r3,r2,400956c <__fixdfsi+0x98>
 4009504:	00c00104 	movi	r3,4
 4009508:	10c01126 	beq	r2,r3,4009550 <__fixdfsi+0x7c>
 400950c:	d8800217 	ldw	r2,8(sp)
 4009510:	10001616 	blt	r2,zero,400956c <__fixdfsi+0x98>
 4009514:	00c00784 	movi	r3,30
 4009518:	18800d16 	blt	r3,r2,4009550 <__fixdfsi+0x7c>
 400951c:	00c00f04 	movi	r3,60
 4009520:	1885c83a 	sub	r2,r3,r2
 4009524:	10fff804 	addi	r3,r2,-32
 4009528:	d9400317 	ldw	r5,12(sp)
 400952c:	d9000417 	ldw	r4,16(sp)
 4009530:	18001216 	blt	r3,zero,400957c <__fixdfsi+0xa8>
 4009534:	20c4d83a 	srl	r2,r4,r3
 4009538:	d8c00117 	ldw	r3,4(sp)
 400953c:	18000826 	beq	r3,zero,4009560 <__fixdfsi+0x8c>
 4009540:	0085c83a 	sub	r2,zero,r2
 4009544:	dfc00717 	ldw	ra,28(sp)
 4009548:	dec00804 	addi	sp,sp,32
 400954c:	f800283a 	ret
 4009550:	d8800117 	ldw	r2,4(sp)
 4009554:	00e00034 	movhi	r3,32768
 4009558:	1005003a 	cmpeq	r2,r2,zero
 400955c:	1885c83a 	sub	r2,r3,r2
 4009560:	dfc00717 	ldw	ra,28(sp)
 4009564:	dec00804 	addi	sp,sp,32
 4009568:	f800283a 	ret
 400956c:	0005883a 	mov	r2,zero
 4009570:	dfc00717 	ldw	ra,28(sp)
 4009574:	dec00804 	addi	sp,sp,32
 4009578:	f800283a 	ret
 400957c:	2008907a 	slli	r4,r4,1
 4009580:	018007c4 	movi	r6,31
 4009584:	308dc83a 	sub	r6,r6,r2
 4009588:	2188983a 	sll	r4,r4,r6
 400958c:	2884d83a 	srl	r2,r5,r2
 4009590:	2084b03a 	or	r2,r4,r2
 4009594:	003fe806 	br	4009538 <__alt_data_end+0xfe009538>

04009598 <__floatunsidf>:
 4009598:	defff904 	addi	sp,sp,-28
 400959c:	dc000515 	stw	r16,20(sp)
 40095a0:	dfc00615 	stw	ra,24(sp)
 40095a4:	d8000115 	stw	zero,4(sp)
 40095a8:	2021883a 	mov	r16,r4
 40095ac:	20001726 	beq	r4,zero,400960c <__floatunsidf+0x74>
 40095b0:	008000c4 	movi	r2,3
 40095b4:	d8800015 	stw	r2,0(sp)
 40095b8:	00800f04 	movi	r2,60
 40095bc:	d8800215 	stw	r2,8(sp)
 40095c0:	400991c0 	call	400991c <__clzsi2>
 40095c4:	10c00744 	addi	r3,r2,29
 40095c8:	18001816 	blt	r3,zero,400962c <__floatunsidf+0x94>
 40095cc:	18002d26 	beq	r3,zero,4009684 <__floatunsidf+0xec>
 40095d0:	113fff44 	addi	r4,r2,-3
 40095d4:	20002e16 	blt	r4,zero,4009690 <__floatunsidf+0xf8>
 40095d8:	8108983a 	sll	r4,r16,r4
 40095dc:	0021883a 	mov	r16,zero
 40095e0:	014007c4 	movi	r5,31
 40095e4:	2885c83a 	sub	r2,r5,r2
 40095e8:	dc000315 	stw	r16,12(sp)
 40095ec:	d9000415 	stw	r4,16(sp)
 40095f0:	d8800215 	stw	r2,8(sp)
 40095f4:	d809883a 	mov	r4,sp
 40095f8:	40099c80 	call	40099c8 <__pack_d>
 40095fc:	dfc00617 	ldw	ra,24(sp)
 4009600:	dc000517 	ldw	r16,20(sp)
 4009604:	dec00704 	addi	sp,sp,28
 4009608:	f800283a 	ret
 400960c:	00800084 	movi	r2,2
 4009610:	d809883a 	mov	r4,sp
 4009614:	d8800015 	stw	r2,0(sp)
 4009618:	40099c80 	call	40099c8 <__pack_d>
 400961c:	dfc00617 	ldw	ra,24(sp)
 4009620:	dc000517 	ldw	r16,20(sp)
 4009624:	dec00704 	addi	sp,sp,28
 4009628:	f800283a 	ret
 400962c:	00c7c83a 	sub	r3,zero,r3
 4009630:	193ff804 	addi	r4,r3,-32
 4009634:	20001c16 	blt	r4,zero,40096a8 <__floatunsidf+0x110>
 4009638:	000b883a 	mov	r5,zero
 400963c:	2009d7fa 	srai	r4,r4,31
 4009640:	80c6d83a 	srl	r3,r16,r3
 4009644:	297fffc4 	addi	r5,r5,-1
 4009648:	2c20703a 	and	r16,r5,r16
 400964c:	8020c03a 	cmpne	r16,r16,zero
 4009650:	1906703a 	and	r3,r3,r4
 4009654:	010007c4 	movi	r4,31
 4009658:	80c6b03a 	or	r3,r16,r3
 400965c:	2085c83a 	sub	r2,r4,r2
 4009660:	d809883a 	mov	r4,sp
 4009664:	d8c00315 	stw	r3,12(sp)
 4009668:	d8000415 	stw	zero,16(sp)
 400966c:	d8800215 	stw	r2,8(sp)
 4009670:	40099c80 	call	40099c8 <__pack_d>
 4009674:	dfc00617 	ldw	ra,24(sp)
 4009678:	dc000517 	ldw	r16,20(sp)
 400967c:	dec00704 	addi	sp,sp,28
 4009680:	f800283a 	ret
 4009684:	dc000315 	stw	r16,12(sp)
 4009688:	d8000415 	stw	zero,16(sp)
 400968c:	003fd906 	br	40095f4 <__alt_data_end+0xfe0095f4>
 4009690:	800ad07a 	srli	r5,r16,1
 4009694:	010007c4 	movi	r4,31
 4009698:	20c9c83a 	sub	r4,r4,r3
 400969c:	2908d83a 	srl	r4,r5,r4
 40096a0:	80e0983a 	sll	r16,r16,r3
 40096a4:	003fce06 	br	40095e0 <__alt_data_end+0xfe0095e0>
 40096a8:	01400044 	movi	r5,1
 40096ac:	28ca983a 	sll	r5,r5,r3
 40096b0:	003fe206 	br	400963c <__alt_data_end+0xfe00963c>

040096b4 <udivmodsi4>:
 40096b4:	2005883a 	mov	r2,r4
 40096b8:	2900182e 	bgeu	r5,r4,400971c <udivmodsi4+0x68>
 40096bc:	28001716 	blt	r5,zero,400971c <udivmodsi4+0x68>
 40096c0:	01000804 	movi	r4,32
 40096c4:	00c00044 	movi	r3,1
 40096c8:	00000206 	br	40096d4 <udivmodsi4+0x20>
 40096cc:	20001126 	beq	r4,zero,4009714 <udivmodsi4+0x60>
 40096d0:	28000516 	blt	r5,zero,40096e8 <udivmodsi4+0x34>
 40096d4:	294b883a 	add	r5,r5,r5
 40096d8:	213fffc4 	addi	r4,r4,-1
 40096dc:	18c7883a 	add	r3,r3,r3
 40096e0:	28bffa36 	bltu	r5,r2,40096cc <__alt_data_end+0xfe0096cc>
 40096e4:	18000b26 	beq	r3,zero,4009714 <udivmodsi4+0x60>
 40096e8:	0009883a 	mov	r4,zero
 40096ec:	11400236 	bltu	r2,r5,40096f8 <udivmodsi4+0x44>
 40096f0:	1145c83a 	sub	r2,r2,r5
 40096f4:	20c8b03a 	or	r4,r4,r3
 40096f8:	1806d07a 	srli	r3,r3,1
 40096fc:	280ad07a 	srli	r5,r5,1
 4009700:	183ffa1e 	bne	r3,zero,40096ec <__alt_data_end+0xfe0096ec>
 4009704:	3000021e 	bne	r6,zero,4009710 <udivmodsi4+0x5c>
 4009708:	2005883a 	mov	r2,r4
 400970c:	f800283a 	ret
 4009710:	f800283a 	ret
 4009714:	0009883a 	mov	r4,zero
 4009718:	003ffa06 	br	4009704 <__alt_data_end+0xfe009704>
 400971c:	00c00044 	movi	r3,1
 4009720:	0009883a 	mov	r4,zero
 4009724:	003ff106 	br	40096ec <__alt_data_end+0xfe0096ec>

04009728 <__divsi3>:
 4009728:	defffe04 	addi	sp,sp,-8
 400972c:	dfc00115 	stw	ra,4(sp)
 4009730:	dc000015 	stw	r16,0(sp)
 4009734:	20000a16 	blt	r4,zero,4009760 <__divsi3+0x38>
 4009738:	0021883a 	mov	r16,zero
 400973c:	28000b16 	blt	r5,zero,400976c <__divsi3+0x44>
 4009740:	000d883a 	mov	r6,zero
 4009744:	40096b40 	call	40096b4 <udivmodsi4>
 4009748:	80000126 	beq	r16,zero,4009750 <__divsi3+0x28>
 400974c:	0085c83a 	sub	r2,zero,r2
 4009750:	dfc00117 	ldw	ra,4(sp)
 4009754:	dc000017 	ldw	r16,0(sp)
 4009758:	dec00204 	addi	sp,sp,8
 400975c:	f800283a 	ret
 4009760:	0109c83a 	sub	r4,zero,r4
 4009764:	04000044 	movi	r16,1
 4009768:	283ff50e 	bge	r5,zero,4009740 <__alt_data_end+0xfe009740>
 400976c:	014bc83a 	sub	r5,zero,r5
 4009770:	8400005c 	xori	r16,r16,1
 4009774:	003ff206 	br	4009740 <__alt_data_end+0xfe009740>

04009778 <__modsi3>:
 4009778:	deffff04 	addi	sp,sp,-4
 400977c:	dfc00015 	stw	ra,0(sp)
 4009780:	20000516 	blt	r4,zero,4009798 <__modsi3+0x20>
 4009784:	28000c16 	blt	r5,zero,40097b8 <__modsi3+0x40>
 4009788:	01800044 	movi	r6,1
 400978c:	dfc00017 	ldw	ra,0(sp)
 4009790:	dec00104 	addi	sp,sp,4
 4009794:	40096b41 	jmpi	40096b4 <udivmodsi4>
 4009798:	0109c83a 	sub	r4,zero,r4
 400979c:	28000b16 	blt	r5,zero,40097cc <__modsi3+0x54>
 40097a0:	01800044 	movi	r6,1
 40097a4:	40096b40 	call	40096b4 <udivmodsi4>
 40097a8:	0085c83a 	sub	r2,zero,r2
 40097ac:	dfc00017 	ldw	ra,0(sp)
 40097b0:	dec00104 	addi	sp,sp,4
 40097b4:	f800283a 	ret
 40097b8:	014bc83a 	sub	r5,zero,r5
 40097bc:	01800044 	movi	r6,1
 40097c0:	dfc00017 	ldw	ra,0(sp)
 40097c4:	dec00104 	addi	sp,sp,4
 40097c8:	40096b41 	jmpi	40096b4 <udivmodsi4>
 40097cc:	014bc83a 	sub	r5,zero,r5
 40097d0:	003ff306 	br	40097a0 <__alt_data_end+0xfe0097a0>

040097d4 <__udivsi3>:
 40097d4:	000d883a 	mov	r6,zero
 40097d8:	40096b41 	jmpi	40096b4 <udivmodsi4>

040097dc <__umodsi3>:
 40097dc:	01800044 	movi	r6,1
 40097e0:	40096b41 	jmpi	40096b4 <udivmodsi4>

040097e4 <__mulsi3>:
 40097e4:	0005883a 	mov	r2,zero
 40097e8:	20000726 	beq	r4,zero,4009808 <__mulsi3+0x24>
 40097ec:	20c0004c 	andi	r3,r4,1
 40097f0:	2008d07a 	srli	r4,r4,1
 40097f4:	18000126 	beq	r3,zero,40097fc <__mulsi3+0x18>
 40097f8:	1145883a 	add	r2,r2,r5
 40097fc:	294b883a 	add	r5,r5,r5
 4009800:	203ffa1e 	bne	r4,zero,40097ec <__alt_data_end+0xfe0097ec>
 4009804:	f800283a 	ret
 4009808:	f800283a 	ret

0400980c <__muldi3>:
 400980c:	defff604 	addi	sp,sp,-40
 4009810:	dd400515 	stw	r21,20(sp)
 4009814:	dd000415 	stw	r20,16(sp)
 4009818:	257fffcc 	andi	r21,r4,65535
 400981c:	353fffcc 	andi	r20,r6,65535
 4009820:	dcc00315 	stw	r19,12(sp)
 4009824:	3026d43a 	srli	r19,r6,16
 4009828:	dd800615 	stw	r22,24(sp)
 400982c:	dc800215 	stw	r18,8(sp)
 4009830:	dc400115 	stw	r17,4(sp)
 4009834:	2024d43a 	srli	r18,r4,16
 4009838:	2023883a 	mov	r17,r4
 400983c:	282d883a 	mov	r22,r5
 4009840:	a009883a 	mov	r4,r20
 4009844:	a80b883a 	mov	r5,r21
 4009848:	dfc00915 	stw	ra,36(sp)
 400984c:	df000815 	stw	fp,32(sp)
 4009850:	ddc00715 	stw	r23,28(sp)
 4009854:	3839883a 	mov	fp,r7
 4009858:	dc000015 	stw	r16,0(sp)
 400985c:	3021883a 	mov	r16,r6
 4009860:	40097e40 	call	40097e4 <__mulsi3>
 4009864:	a80b883a 	mov	r5,r21
 4009868:	9809883a 	mov	r4,r19
 400986c:	102f883a 	mov	r23,r2
 4009870:	40097e40 	call	40097e4 <__mulsi3>
 4009874:	a009883a 	mov	r4,r20
 4009878:	900b883a 	mov	r5,r18
 400987c:	102b883a 	mov	r21,r2
 4009880:	40097e40 	call	40097e4 <__mulsi3>
 4009884:	9809883a 	mov	r4,r19
 4009888:	900b883a 	mov	r5,r18
 400988c:	1029883a 	mov	r20,r2
 4009890:	40097e40 	call	40097e4 <__mulsi3>
 4009894:	1007883a 	mov	r3,r2
 4009898:	b804d43a 	srli	r2,r23,16
 400989c:	a549883a 	add	r4,r20,r21
 40098a0:	2089883a 	add	r4,r4,r2
 40098a4:	2500022e 	bgeu	r4,r20,40098b0 <__muldi3+0xa4>
 40098a8:	00800074 	movhi	r2,1
 40098ac:	1887883a 	add	r3,r3,r2
 40098b0:	200cd43a 	srli	r6,r4,16
 40098b4:	2004943a 	slli	r2,r4,16
 40098b8:	e00b883a 	mov	r5,fp
 40098bc:	8809883a 	mov	r4,r17
 40098c0:	bdffffcc 	andi	r23,r23,65535
 40098c4:	19a3883a 	add	r17,r3,r6
 40098c8:	15ef883a 	add	r23,r2,r23
 40098cc:	40097e40 	call	40097e4 <__mulsi3>
 40098d0:	8009883a 	mov	r4,r16
 40098d4:	b00b883a 	mov	r5,r22
 40098d8:	1025883a 	mov	r18,r2
 40098dc:	40097e40 	call	40097e4 <__mulsi3>
 40098e0:	9085883a 	add	r2,r18,r2
 40098e4:	1447883a 	add	r3,r2,r17
 40098e8:	b805883a 	mov	r2,r23
 40098ec:	dfc00917 	ldw	ra,36(sp)
 40098f0:	df000817 	ldw	fp,32(sp)
 40098f4:	ddc00717 	ldw	r23,28(sp)
 40098f8:	dd800617 	ldw	r22,24(sp)
 40098fc:	dd400517 	ldw	r21,20(sp)
 4009900:	dd000417 	ldw	r20,16(sp)
 4009904:	dcc00317 	ldw	r19,12(sp)
 4009908:	dc800217 	ldw	r18,8(sp)
 400990c:	dc400117 	ldw	r17,4(sp)
 4009910:	dc000017 	ldw	r16,0(sp)
 4009914:	dec00a04 	addi	sp,sp,40
 4009918:	f800283a 	ret

0400991c <__clzsi2>:
 400991c:	00bfffd4 	movui	r2,65535
 4009920:	11000b36 	bltu	r2,r4,4009950 <__clzsi2+0x34>
 4009924:	00803fc4 	movi	r2,255
 4009928:	11001e2e 	bgeu	r2,r4,40099a4 <__clzsi2+0x88>
 400992c:	00c00204 	movi	r3,8
 4009930:	20c8d83a 	srl	r4,r4,r3
 4009934:	00c10074 	movhi	r3,1025
 4009938:	18f1e204 	addi	r3,r3,-14456
 400993c:	00800604 	movi	r2,24
 4009940:	1909883a 	add	r4,r3,r4
 4009944:	20c00003 	ldbu	r3,0(r4)
 4009948:	10c5c83a 	sub	r2,r2,r3
 400994c:	f800283a 	ret
 4009950:	00804034 	movhi	r2,256
 4009954:	10bfffc4 	addi	r2,r2,-1
 4009958:	11000936 	bltu	r2,r4,4009980 <__clzsi2+0x64>
 400995c:	00800404 	movi	r2,16
 4009960:	1007883a 	mov	r3,r2
 4009964:	20c8d83a 	srl	r4,r4,r3
 4009968:	00c10074 	movhi	r3,1025
 400996c:	18f1e204 	addi	r3,r3,-14456
 4009970:	1909883a 	add	r4,r3,r4
 4009974:	20c00003 	ldbu	r3,0(r4)
 4009978:	10c5c83a 	sub	r2,r2,r3
 400997c:	f800283a 	ret
 4009980:	00c00604 	movi	r3,24
 4009984:	20c8d83a 	srl	r4,r4,r3
 4009988:	00c10074 	movhi	r3,1025
 400998c:	18f1e204 	addi	r3,r3,-14456
 4009990:	00800204 	movi	r2,8
 4009994:	1909883a 	add	r4,r3,r4
 4009998:	20c00003 	ldbu	r3,0(r4)
 400999c:	10c5c83a 	sub	r2,r2,r3
 40099a0:	f800283a 	ret
 40099a4:	0007883a 	mov	r3,zero
 40099a8:	20c8d83a 	srl	r4,r4,r3
 40099ac:	00c10074 	movhi	r3,1025
 40099b0:	18f1e204 	addi	r3,r3,-14456
 40099b4:	00800804 	movi	r2,32
 40099b8:	1909883a 	add	r4,r3,r4
 40099bc:	20c00003 	ldbu	r3,0(r4)
 40099c0:	10c5c83a 	sub	r2,r2,r3
 40099c4:	f800283a 	ret

040099c8 <__pack_d>:
 40099c8:	20800017 	ldw	r2,0(r4)
 40099cc:	defff804 	addi	sp,sp,-32
 40099d0:	dcc00315 	stw	r19,12(sp)
 40099d4:	dc800215 	stw	r18,8(sp)
 40099d8:	dfc00715 	stw	ra,28(sp)
 40099dc:	dd800615 	stw	r22,24(sp)
 40099e0:	dd400515 	stw	r21,20(sp)
 40099e4:	dd000415 	stw	r20,16(sp)
 40099e8:	dc400115 	stw	r17,4(sp)
 40099ec:	dc000015 	stw	r16,0(sp)
 40099f0:	04800044 	movi	r18,1
 40099f4:	24400317 	ldw	r17,12(r4)
 40099f8:	24000417 	ldw	r16,16(r4)
 40099fc:	24c00117 	ldw	r19,4(r4)
 4009a00:	9080422e 	bgeu	r18,r2,4009b0c <__pack_d+0x144>
 4009a04:	00c00104 	movi	r3,4
 4009a08:	10c03c26 	beq	r2,r3,4009afc <__pack_d+0x134>
 4009a0c:	00c00084 	movi	r3,2
 4009a10:	10c01926 	beq	r2,r3,4009a78 <__pack_d+0xb0>
 4009a14:	8c04b03a 	or	r2,r17,r16
 4009a18:	10001726 	beq	r2,zero,4009a78 <__pack_d+0xb0>
 4009a1c:	21000217 	ldw	r4,8(r4)
 4009a20:	00bf0084 	movi	r2,-1022
 4009a24:	20804016 	blt	r4,r2,4009b28 <__pack_d+0x160>
 4009a28:	0080ffc4 	movi	r2,1023
 4009a2c:	11003316 	blt	r2,r4,4009afc <__pack_d+0x134>
 4009a30:	88803fcc 	andi	r2,r17,255
 4009a34:	00c02004 	movi	r3,128
 4009a38:	10c02926 	beq	r2,r3,4009ae0 <__pack_d+0x118>
 4009a3c:	88801fc4 	addi	r2,r17,127
 4009a40:	1463803a 	cmpltu	r17,r2,r17
 4009a44:	8c21883a 	add	r16,r17,r16
 4009a48:	1023883a 	mov	r17,r2
 4009a4c:	00880034 	movhi	r2,8192
 4009a50:	10bfffc4 	addi	r2,r2,-1
 4009a54:	14001c36 	bltu	r2,r16,4009ac8 <__pack_d+0x100>
 4009a58:	2100ffc4 	addi	r4,r4,1023
 4009a5c:	8006963a 	slli	r3,r16,24
 4009a60:	8804d23a 	srli	r2,r17,8
 4009a64:	8020913a 	slli	r16,r16,4
 4009a68:	2101ffcc 	andi	r4,r4,2047
 4009a6c:	1884b03a 	or	r2,r3,r2
 4009a70:	8020d33a 	srli	r16,r16,12
 4009a74:	00000306 	br	4009a84 <__pack_d+0xbc>
 4009a78:	0009883a 	mov	r4,zero
 4009a7c:	0005883a 	mov	r2,zero
 4009a80:	0021883a 	mov	r16,zero
 4009a84:	2008953a 	slli	r4,r4,20
 4009a88:	982697fa 	slli	r19,r19,31
 4009a8c:	00c00434 	movhi	r3,16
 4009a90:	18ffffc4 	addi	r3,r3,-1
 4009a94:	80e0703a 	and	r16,r16,r3
 4009a98:	8106b03a 	or	r3,r16,r4
 4009a9c:	1cc6b03a 	or	r3,r3,r19
 4009aa0:	dfc00717 	ldw	ra,28(sp)
 4009aa4:	dd800617 	ldw	r22,24(sp)
 4009aa8:	dd400517 	ldw	r21,20(sp)
 4009aac:	dd000417 	ldw	r20,16(sp)
 4009ab0:	dcc00317 	ldw	r19,12(sp)
 4009ab4:	dc800217 	ldw	r18,8(sp)
 4009ab8:	dc400117 	ldw	r17,4(sp)
 4009abc:	dc000017 	ldw	r16,0(sp)
 4009ac0:	dec00804 	addi	sp,sp,32
 4009ac4:	f800283a 	ret
 4009ac8:	800697fa 	slli	r3,r16,31
 4009acc:	8804d07a 	srli	r2,r17,1
 4009ad0:	21010004 	addi	r4,r4,1024
 4009ad4:	8020d07a 	srli	r16,r16,1
 4009ad8:	18a2b03a 	or	r17,r3,r2
 4009adc:	003fdf06 	br	4009a5c <__alt_data_end+0xfe009a5c>
 4009ae0:	88c0400c 	andi	r3,r17,256
 4009ae4:	183fd926 	beq	r3,zero,4009a4c <__alt_data_end+0xfe009a4c>
 4009ae8:	8885883a 	add	r2,r17,r2
 4009aec:	1463803a 	cmpltu	r17,r2,r17
 4009af0:	8c21883a 	add	r16,r17,r16
 4009af4:	1023883a 	mov	r17,r2
 4009af8:	003fd406 	br	4009a4c <__alt_data_end+0xfe009a4c>
 4009afc:	0101ffc4 	movi	r4,2047
 4009b00:	0005883a 	mov	r2,zero
 4009b04:	0021883a 	mov	r16,zero
 4009b08:	003fde06 	br	4009a84 <__alt_data_end+0xfe009a84>
 4009b0c:	84000234 	orhi	r16,r16,8
 4009b10:	00c00434 	movhi	r3,16
 4009b14:	18ffffc4 	addi	r3,r3,-1
 4009b18:	8805883a 	mov	r2,r17
 4009b1c:	80e0703a 	and	r16,r16,r3
 4009b20:	0101ffc4 	movi	r4,2047
 4009b24:	003fd706 	br	4009a84 <__alt_data_end+0xfe009a84>
 4009b28:	1129c83a 	sub	r20,r2,r4
 4009b2c:	00800e04 	movi	r2,56
 4009b30:	15002716 	blt	r2,r20,4009bd0 <__pack_d+0x208>
 4009b34:	800b883a 	mov	r5,r16
 4009b38:	a00d883a 	mov	r6,r20
 4009b3c:	8809883a 	mov	r4,r17
 4009b40:	4009dc00 	call	4009dc0 <__lshrdi3>
 4009b44:	9009883a 	mov	r4,r18
 4009b48:	000b883a 	mov	r5,zero
 4009b4c:	a00d883a 	mov	r6,r20
 4009b50:	102d883a 	mov	r22,r2
 4009b54:	182b883a 	mov	r21,r3
 4009b58:	4009e040 	call	4009e04 <__ashldi3>
 4009b5c:	1009003a 	cmpeq	r4,r2,zero
 4009b60:	1907c83a 	sub	r3,r3,r4
 4009b64:	10bfffc4 	addi	r2,r2,-1
 4009b68:	1c20703a 	and	r16,r3,r16
 4009b6c:	1444703a 	and	r2,r2,r17
 4009b70:	1404b03a 	or	r2,r2,r16
 4009b74:	1004c03a 	cmpne	r2,r2,zero
 4009b78:	1584b03a 	or	r2,r2,r22
 4009b7c:	11003fcc 	andi	r4,r2,255
 4009b80:	01402004 	movi	r5,128
 4009b84:	a807883a 	mov	r3,r21
 4009b88:	2140131e 	bne	r4,r5,4009bd8 <__pack_d+0x210>
 4009b8c:	1140400c 	andi	r5,r2,256
 4009b90:	28000426 	beq	r5,zero,4009ba4 <__pack_d+0x1dc>
 4009b94:	1109883a 	add	r4,r2,r4
 4009b98:	2085803a 	cmpltu	r2,r4,r2
 4009b9c:	1547883a 	add	r3,r2,r21
 4009ba0:	2005883a 	mov	r2,r4
 4009ba4:	1808963a 	slli	r4,r3,24
 4009ba8:	1004d23a 	srli	r2,r2,8
 4009bac:	1820913a 	slli	r16,r3,4
 4009bb0:	01440034 	movhi	r5,4096
 4009bb4:	297fffc4 	addi	r5,r5,-1
 4009bb8:	2084b03a 	or	r2,r4,r2
 4009bbc:	8020d33a 	srli	r16,r16,12
 4009bc0:	01000044 	movi	r4,1
 4009bc4:	28ffaf36 	bltu	r5,r3,4009a84 <__alt_data_end+0xfe009a84>
 4009bc8:	0009883a 	mov	r4,zero
 4009bcc:	003fad06 	br	4009a84 <__alt_data_end+0xfe009a84>
 4009bd0:	0005883a 	mov	r2,zero
 4009bd4:	0007883a 	mov	r3,zero
 4009bd8:	11001fc4 	addi	r4,r2,127
 4009bdc:	2085803a 	cmpltu	r2,r4,r2
 4009be0:	10c7883a 	add	r3,r2,r3
 4009be4:	2005883a 	mov	r2,r4
 4009be8:	003fee06 	br	4009ba4 <__alt_data_end+0xfe009ba4>

04009bec <__unpack_d>:
 4009bec:	21800117 	ldw	r6,4(r4)
 4009bf0:	20c00017 	ldw	r3,0(r4)
 4009bf4:	3004d7fa 	srli	r2,r6,31
 4009bf8:	3008d53a 	srli	r4,r6,20
 4009bfc:	28800115 	stw	r2,4(r5)
 4009c00:	2101ffcc 	andi	r4,r4,2047
 4009c04:	00800434 	movhi	r2,16
 4009c08:	10bfffc4 	addi	r2,r2,-1
 4009c0c:	3084703a 	and	r2,r6,r2
 4009c10:	20001a1e 	bne	r4,zero,4009c7c <__unpack_d+0x90>
 4009c14:	1888b03a 	or	r4,r3,r2
 4009c18:	20002626 	beq	r4,zero,4009cb4 <__unpack_d+0xc8>
 4009c1c:	1808d63a 	srli	r4,r3,24
 4009c20:	1004923a 	slli	r2,r2,8
 4009c24:	01bf0084 	movi	r6,-1022
 4009c28:	29800215 	stw	r6,8(r5)
 4009c2c:	2084b03a 	or	r2,r4,r2
 4009c30:	010000c4 	movi	r4,3
 4009c34:	29000015 	stw	r4,0(r5)
 4009c38:	02040034 	movhi	r8,4096
 4009c3c:	423fffc4 	addi	r8,r8,-1
 4009c40:	1806923a 	slli	r3,r3,8
 4009c44:	40801836 	bltu	r8,r2,4009ca8 <__unpack_d+0xbc>
 4009c48:	013f0044 	movi	r4,-1023
 4009c4c:	18cd883a 	add	r6,r3,r3
 4009c50:	30c7803a 	cmpltu	r3,r6,r3
 4009c54:	1085883a 	add	r2,r2,r2
 4009c58:	1885883a 	add	r2,r3,r2
 4009c5c:	200f883a 	mov	r7,r4
 4009c60:	3007883a 	mov	r3,r6
 4009c64:	213fffc4 	addi	r4,r4,-1
 4009c68:	40bff82e 	bgeu	r8,r2,4009c4c <__alt_data_end+0xfe009c4c>
 4009c6c:	29c00215 	stw	r7,8(r5)
 4009c70:	28c00315 	stw	r3,12(r5)
 4009c74:	28800415 	stw	r2,16(r5)
 4009c78:	f800283a 	ret
 4009c7c:	01c1ffc4 	movi	r7,2047
 4009c80:	21c00f26 	beq	r4,r7,4009cc0 <__unpack_d+0xd4>
 4009c84:	180cd63a 	srli	r6,r3,24
 4009c88:	1004923a 	slli	r2,r2,8
 4009c8c:	213f0044 	addi	r4,r4,-1023
 4009c90:	1806923a 	slli	r3,r3,8
 4009c94:	3084b03a 	or	r2,r6,r2
 4009c98:	29000215 	stw	r4,8(r5)
 4009c9c:	010000c4 	movi	r4,3
 4009ca0:	10840034 	orhi	r2,r2,4096
 4009ca4:	29000015 	stw	r4,0(r5)
 4009ca8:	28c00315 	stw	r3,12(r5)
 4009cac:	28800415 	stw	r2,16(r5)
 4009cb0:	f800283a 	ret
 4009cb4:	00800084 	movi	r2,2
 4009cb8:	28800015 	stw	r2,0(r5)
 4009cbc:	f800283a 	ret
 4009cc0:	1888b03a 	or	r4,r3,r2
 4009cc4:	20000526 	beq	r4,zero,4009cdc <__unpack_d+0xf0>
 4009cc8:	3180022c 	andhi	r6,r6,8
 4009ccc:	30000626 	beq	r6,zero,4009ce8 <__unpack_d+0xfc>
 4009cd0:	01000044 	movi	r4,1
 4009cd4:	29000015 	stw	r4,0(r5)
 4009cd8:	003ff306 	br	4009ca8 <__alt_data_end+0xfe009ca8>
 4009cdc:	00800104 	movi	r2,4
 4009ce0:	28800015 	stw	r2,0(r5)
 4009ce4:	f800283a 	ret
 4009ce8:	28000015 	stw	zero,0(r5)
 4009cec:	003fee06 	br	4009ca8 <__alt_data_end+0xfe009ca8>

04009cf0 <__fpcmp_parts_d>:
 4009cf0:	20c00017 	ldw	r3,0(r4)
 4009cf4:	00800044 	movi	r2,1
 4009cf8:	10c0142e 	bgeu	r2,r3,4009d4c <__fpcmp_parts_d+0x5c>
 4009cfc:	29800017 	ldw	r6,0(r5)
 4009d00:	1180122e 	bgeu	r2,r6,4009d4c <__fpcmp_parts_d+0x5c>
 4009d04:	01c00104 	movi	r7,4
 4009d08:	19c02826 	beq	r3,r7,4009dac <__fpcmp_parts_d+0xbc>
 4009d0c:	31c00926 	beq	r6,r7,4009d34 <__fpcmp_parts_d+0x44>
 4009d10:	01c00084 	movi	r7,2
 4009d14:	19c00626 	beq	r3,r7,4009d30 <__fpcmp_parts_d+0x40>
 4009d18:	31c00a26 	beq	r6,r7,4009d44 <__fpcmp_parts_d+0x54>
 4009d1c:	20c00117 	ldw	r3,4(r4)
 4009d20:	29800117 	ldw	r6,4(r5)
 4009d24:	19800b26 	beq	r3,r6,4009d54 <__fpcmp_parts_d+0x64>
 4009d28:	1800041e 	bne	r3,zero,4009d3c <__fpcmp_parts_d+0x4c>
 4009d2c:	f800283a 	ret
 4009d30:	30c01a26 	beq	r6,r3,4009d9c <__fpcmp_parts_d+0xac>
 4009d34:	28800117 	ldw	r2,4(r5)
 4009d38:	1000041e 	bne	r2,zero,4009d4c <__fpcmp_parts_d+0x5c>
 4009d3c:	00bfffc4 	movi	r2,-1
 4009d40:	f800283a 	ret
 4009d44:	20800117 	ldw	r2,4(r4)
 4009d48:	103ffc1e 	bne	r2,zero,4009d3c <__alt_data_end+0xfe009d3c>
 4009d4c:	00800044 	movi	r2,1
 4009d50:	f800283a 	ret
 4009d54:	21c00217 	ldw	r7,8(r4)
 4009d58:	29800217 	ldw	r6,8(r5)
 4009d5c:	31c0020e 	bge	r6,r7,4009d68 <__fpcmp_parts_d+0x78>
 4009d60:	183ff61e 	bne	r3,zero,4009d3c <__alt_data_end+0xfe009d3c>
 4009d64:	f800283a 	ret
 4009d68:	39800a16 	blt	r7,r6,4009d94 <__fpcmp_parts_d+0xa4>
 4009d6c:	20800417 	ldw	r2,16(r4)
 4009d70:	29800417 	ldw	r6,16(r5)
 4009d74:	21c00317 	ldw	r7,12(r4)
 4009d78:	29000317 	ldw	r4,12(r5)
 4009d7c:	30800936 	bltu	r6,r2,4009da4 <__fpcmp_parts_d+0xb4>
 4009d80:	1180011e 	bne	r2,r6,4009d88 <__fpcmp_parts_d+0x98>
 4009d84:	21c00736 	bltu	r4,r7,4009da4 <__fpcmp_parts_d+0xb4>
 4009d88:	11800236 	bltu	r2,r6,4009d94 <__fpcmp_parts_d+0xa4>
 4009d8c:	3080031e 	bne	r6,r2,4009d9c <__fpcmp_parts_d+0xac>
 4009d90:	3900022e 	bgeu	r7,r4,4009d9c <__fpcmp_parts_d+0xac>
 4009d94:	183fe926 	beq	r3,zero,4009d3c <__alt_data_end+0xfe009d3c>
 4009d98:	003fec06 	br	4009d4c <__alt_data_end+0xfe009d4c>
 4009d9c:	0005883a 	mov	r2,zero
 4009da0:	f800283a 	ret
 4009da4:	183fe926 	beq	r3,zero,4009d4c <__alt_data_end+0xfe009d4c>
 4009da8:	003fe406 	br	4009d3c <__alt_data_end+0xfe009d3c>
 4009dac:	30ffe51e 	bne	r6,r3,4009d44 <__alt_data_end+0xfe009d44>
 4009db0:	28c00117 	ldw	r3,4(r5)
 4009db4:	20800117 	ldw	r2,4(r4)
 4009db8:	1885c83a 	sub	r2,r3,r2
 4009dbc:	f800283a 	ret

04009dc0 <__lshrdi3>:
 4009dc0:	2005883a 	mov	r2,r4
 4009dc4:	2807883a 	mov	r3,r5
 4009dc8:	30000826 	beq	r6,zero,4009dec <__lshrdi3+0x2c>
 4009dcc:	01000804 	movi	r4,32
 4009dd0:	2189c83a 	sub	r4,r4,r6
 4009dd4:	0100060e 	bge	zero,r4,4009df0 <__lshrdi3+0x30>
 4009dd8:	1184d83a 	srl	r2,r2,r6
 4009ddc:	2908983a 	sll	r4,r5,r4
 4009de0:	298cd83a 	srl	r6,r5,r6
 4009de4:	2084b03a 	or	r2,r4,r2
 4009de8:	3007883a 	mov	r3,r6
 4009dec:	f800283a 	ret
 4009df0:	0105c83a 	sub	r2,zero,r4
 4009df4:	000d883a 	mov	r6,zero
 4009df8:	2884d83a 	srl	r2,r5,r2
 4009dfc:	3007883a 	mov	r3,r6
 4009e00:	003ffa06 	br	4009dec <__alt_data_end+0xfe009dec>

04009e04 <__ashldi3>:
 4009e04:	2005883a 	mov	r2,r4
 4009e08:	2807883a 	mov	r3,r5
 4009e0c:	30000826 	beq	r6,zero,4009e30 <__ashldi3+0x2c>
 4009e10:	01000804 	movi	r4,32
 4009e14:	2189c83a 	sub	r4,r4,r6
 4009e18:	0100060e 	bge	zero,r4,4009e34 <__ashldi3+0x30>
 4009e1c:	1108d83a 	srl	r4,r2,r4
 4009e20:	2986983a 	sll	r3,r5,r6
 4009e24:	118c983a 	sll	r6,r2,r6
 4009e28:	20c6b03a 	or	r3,r4,r3
 4009e2c:	3005883a 	mov	r2,r6
 4009e30:	f800283a 	ret
 4009e34:	0107c83a 	sub	r3,zero,r4
 4009e38:	000d883a 	mov	r6,zero
 4009e3c:	10c6983a 	sll	r3,r2,r3
 4009e40:	3005883a 	mov	r2,r6
 4009e44:	003ffa06 	br	4009e30 <__alt_data_end+0xfe009e30>

04009e48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009e48:	defffe04 	addi	sp,sp,-8
 4009e4c:	dfc00115 	stw	ra,4(sp)
 4009e50:	df000015 	stw	fp,0(sp)
 4009e54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4009e58:	00810074 	movhi	r2,1025
 4009e5c:	10b8c004 	addi	r2,r2,-7424
 4009e60:	10800017 	ldw	r2,0(r2)
 4009e64:	10000526 	beq	r2,zero,4009e7c <alt_get_errno+0x34>
 4009e68:	00810074 	movhi	r2,1025
 4009e6c:	10b8c004 	addi	r2,r2,-7424
 4009e70:	10800017 	ldw	r2,0(r2)
 4009e74:	103ee83a 	callr	r2
 4009e78:	00000206 	br	4009e84 <alt_get_errno+0x3c>
 4009e7c:	00810074 	movhi	r2,1025
 4009e80:	10bf6104 	addi	r2,r2,-636
}
 4009e84:	e037883a 	mov	sp,fp
 4009e88:	dfc00117 	ldw	ra,4(sp)
 4009e8c:	df000017 	ldw	fp,0(sp)
 4009e90:	dec00204 	addi	sp,sp,8
 4009e94:	f800283a 	ret

04009e98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4009e98:	defffb04 	addi	sp,sp,-20
 4009e9c:	dfc00415 	stw	ra,16(sp)
 4009ea0:	df000315 	stw	fp,12(sp)
 4009ea4:	df000304 	addi	fp,sp,12
 4009ea8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4009eac:	e0bfff17 	ldw	r2,-4(fp)
 4009eb0:	10000716 	blt	r2,zero,4009ed0 <close+0x38>
 4009eb4:	e13fff17 	ldw	r4,-4(fp)
 4009eb8:	01400304 	movi	r5,12
 4009ebc:	40097e40 	call	40097e4 <__mulsi3>
 4009ec0:	00c10074 	movhi	r3,1025
 4009ec4:	18f43e04 	addi	r3,r3,-12040
 4009ec8:	10c5883a 	add	r2,r2,r3
 4009ecc:	00000106 	br	4009ed4 <close+0x3c>
 4009ed0:	0005883a 	mov	r2,zero
 4009ed4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4009ed8:	e0bffd17 	ldw	r2,-12(fp)
 4009edc:	10001826 	beq	r2,zero,4009f40 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4009ee0:	e0bffd17 	ldw	r2,-12(fp)
 4009ee4:	10800017 	ldw	r2,0(r2)
 4009ee8:	10800417 	ldw	r2,16(r2)
 4009eec:	10000626 	beq	r2,zero,4009f08 <close+0x70>
 4009ef0:	e0bffd17 	ldw	r2,-12(fp)
 4009ef4:	10800017 	ldw	r2,0(r2)
 4009ef8:	10800417 	ldw	r2,16(r2)
 4009efc:	e13ffd17 	ldw	r4,-12(fp)
 4009f00:	103ee83a 	callr	r2
 4009f04:	00000106 	br	4009f0c <close+0x74>
 4009f08:	0005883a 	mov	r2,zero
 4009f0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4009f10:	e13fff17 	ldw	r4,-4(fp)
 4009f14:	400a5900 	call	400a590 <alt_release_fd>
    if (rval < 0)
 4009f18:	e0bffe17 	ldw	r2,-8(fp)
 4009f1c:	1000060e 	bge	r2,zero,4009f38 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4009f20:	4009e480 	call	4009e48 <alt_get_errno>
 4009f24:	e0fffe17 	ldw	r3,-8(fp)
 4009f28:	00c7c83a 	sub	r3,zero,r3
 4009f2c:	10c00015 	stw	r3,0(r2)
      return -1;
 4009f30:	00bfffc4 	movi	r2,-1
 4009f34:	00000606 	br	4009f50 <close+0xb8>
    }
    return 0;
 4009f38:	0005883a 	mov	r2,zero
 4009f3c:	00000406 	br	4009f50 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009f40:	4009e480 	call	4009e48 <alt_get_errno>
 4009f44:	00c01444 	movi	r3,81
 4009f48:	10c00015 	stw	r3,0(r2)
    return -1;
 4009f4c:	00bfffc4 	movi	r2,-1
  }
}
 4009f50:	e037883a 	mov	sp,fp
 4009f54:	dfc00117 	ldw	ra,4(sp)
 4009f58:	df000017 	ldw	fp,0(sp)
 4009f5c:	dec00204 	addi	sp,sp,8
 4009f60:	f800283a 	ret

04009f64 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4009f64:	defffc04 	addi	sp,sp,-16
 4009f68:	df000315 	stw	fp,12(sp)
 4009f6c:	df000304 	addi	fp,sp,12
 4009f70:	e13ffd15 	stw	r4,-12(fp)
 4009f74:	e17ffe15 	stw	r5,-8(fp)
 4009f78:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4009f7c:	e0bfff17 	ldw	r2,-4(fp)
}
 4009f80:	e037883a 	mov	sp,fp
 4009f84:	df000017 	ldw	fp,0(sp)
 4009f88:	dec00104 	addi	sp,sp,4
 4009f8c:	f800283a 	ret

04009f90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009f90:	defffe04 	addi	sp,sp,-8
 4009f94:	dfc00115 	stw	ra,4(sp)
 4009f98:	df000015 	stw	fp,0(sp)
 4009f9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4009fa0:	00810074 	movhi	r2,1025
 4009fa4:	10b8c004 	addi	r2,r2,-7424
 4009fa8:	10800017 	ldw	r2,0(r2)
 4009fac:	10000526 	beq	r2,zero,4009fc4 <alt_get_errno+0x34>
 4009fb0:	00810074 	movhi	r2,1025
 4009fb4:	10b8c004 	addi	r2,r2,-7424
 4009fb8:	10800017 	ldw	r2,0(r2)
 4009fbc:	103ee83a 	callr	r2
 4009fc0:	00000206 	br	4009fcc <alt_get_errno+0x3c>
 4009fc4:	00810074 	movhi	r2,1025
 4009fc8:	10bf6104 	addi	r2,r2,-636
}
 4009fcc:	e037883a 	mov	sp,fp
 4009fd0:	dfc00117 	ldw	ra,4(sp)
 4009fd4:	df000017 	ldw	fp,0(sp)
 4009fd8:	dec00204 	addi	sp,sp,8
 4009fdc:	f800283a 	ret

04009fe0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4009fe0:	defffb04 	addi	sp,sp,-20
 4009fe4:	dfc00415 	stw	ra,16(sp)
 4009fe8:	df000315 	stw	fp,12(sp)
 4009fec:	df000304 	addi	fp,sp,12
 4009ff0:	e13ffe15 	stw	r4,-8(fp)
 4009ff4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4009ff8:	e0bffe17 	ldw	r2,-8(fp)
 4009ffc:	10000716 	blt	r2,zero,400a01c <fstat+0x3c>
 400a000:	e13ffe17 	ldw	r4,-8(fp)
 400a004:	01400304 	movi	r5,12
 400a008:	40097e40 	call	40097e4 <__mulsi3>
 400a00c:	00c10074 	movhi	r3,1025
 400a010:	18f43e04 	addi	r3,r3,-12040
 400a014:	10c5883a 	add	r2,r2,r3
 400a018:	00000106 	br	400a020 <fstat+0x40>
 400a01c:	0005883a 	mov	r2,zero
 400a020:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400a024:	e0bffd17 	ldw	r2,-12(fp)
 400a028:	10001026 	beq	r2,zero,400a06c <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400a02c:	e0bffd17 	ldw	r2,-12(fp)
 400a030:	10800017 	ldw	r2,0(r2)
 400a034:	10800817 	ldw	r2,32(r2)
 400a038:	10000726 	beq	r2,zero,400a058 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 400a03c:	e0bffd17 	ldw	r2,-12(fp)
 400a040:	10800017 	ldw	r2,0(r2)
 400a044:	10800817 	ldw	r2,32(r2)
 400a048:	e13ffd17 	ldw	r4,-12(fp)
 400a04c:	e17fff17 	ldw	r5,-4(fp)
 400a050:	103ee83a 	callr	r2
 400a054:	00000906 	br	400a07c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400a058:	e0bfff17 	ldw	r2,-4(fp)
 400a05c:	00c80004 	movi	r3,8192
 400a060:	10c00115 	stw	r3,4(r2)
      return 0;
 400a064:	0005883a 	mov	r2,zero
 400a068:	00000406 	br	400a07c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a06c:	4009f900 	call	4009f90 <alt_get_errno>
 400a070:	00c01444 	movi	r3,81
 400a074:	10c00015 	stw	r3,0(r2)
    return -1;
 400a078:	00bfffc4 	movi	r2,-1
  }
}
 400a07c:	e037883a 	mov	sp,fp
 400a080:	dfc00117 	ldw	ra,4(sp)
 400a084:	df000017 	ldw	fp,0(sp)
 400a088:	dec00204 	addi	sp,sp,8
 400a08c:	f800283a 	ret

0400a090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a090:	defffe04 	addi	sp,sp,-8
 400a094:	dfc00115 	stw	ra,4(sp)
 400a098:	df000015 	stw	fp,0(sp)
 400a09c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a0a0:	00810074 	movhi	r2,1025
 400a0a4:	10b8c004 	addi	r2,r2,-7424
 400a0a8:	10800017 	ldw	r2,0(r2)
 400a0ac:	10000526 	beq	r2,zero,400a0c4 <alt_get_errno+0x34>
 400a0b0:	00810074 	movhi	r2,1025
 400a0b4:	10b8c004 	addi	r2,r2,-7424
 400a0b8:	10800017 	ldw	r2,0(r2)
 400a0bc:	103ee83a 	callr	r2
 400a0c0:	00000206 	br	400a0cc <alt_get_errno+0x3c>
 400a0c4:	00810074 	movhi	r2,1025
 400a0c8:	10bf6104 	addi	r2,r2,-636
}
 400a0cc:	e037883a 	mov	sp,fp
 400a0d0:	dfc00117 	ldw	ra,4(sp)
 400a0d4:	df000017 	ldw	fp,0(sp)
 400a0d8:	dec00204 	addi	sp,sp,8
 400a0dc:	f800283a 	ret

0400a0e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400a0e0:	deffed04 	addi	sp,sp,-76
 400a0e4:	dfc01215 	stw	ra,72(sp)
 400a0e8:	df001115 	stw	fp,68(sp)
 400a0ec:	df001104 	addi	fp,sp,68
 400a0f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a0f4:	e0bfff17 	ldw	r2,-4(fp)
 400a0f8:	10000716 	blt	r2,zero,400a118 <isatty+0x38>
 400a0fc:	e13fff17 	ldw	r4,-4(fp)
 400a100:	01400304 	movi	r5,12
 400a104:	40097e40 	call	40097e4 <__mulsi3>
 400a108:	00c10074 	movhi	r3,1025
 400a10c:	18f43e04 	addi	r3,r3,-12040
 400a110:	10c5883a 	add	r2,r2,r3
 400a114:	00000106 	br	400a11c <isatty+0x3c>
 400a118:	0005883a 	mov	r2,zero
 400a11c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400a120:	e0bfef17 	ldw	r2,-68(fp)
 400a124:	10000e26 	beq	r2,zero,400a160 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400a128:	e0bfef17 	ldw	r2,-68(fp)
 400a12c:	10800017 	ldw	r2,0(r2)
 400a130:	10800817 	ldw	r2,32(r2)
 400a134:	1000021e 	bne	r2,zero,400a140 <isatty+0x60>
    {
      return 1;
 400a138:	00800044 	movi	r2,1
 400a13c:	00000c06 	br	400a170 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400a140:	e0bff004 	addi	r2,fp,-64
 400a144:	e13fff17 	ldw	r4,-4(fp)
 400a148:	100b883a 	mov	r5,r2
 400a14c:	4009fe00 	call	4009fe0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400a150:	e0bff117 	ldw	r2,-60(fp)
 400a154:	10880020 	cmpeqi	r2,r2,8192
 400a158:	10803fcc 	andi	r2,r2,255
 400a15c:	00000406 	br	400a170 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a160:	400a0900 	call	400a090 <alt_get_errno>
 400a164:	00c01444 	movi	r3,81
 400a168:	10c00015 	stw	r3,0(r2)
    return 0;
 400a16c:	0005883a 	mov	r2,zero
  }
}
 400a170:	e037883a 	mov	sp,fp
 400a174:	dfc00117 	ldw	ra,4(sp)
 400a178:	df000017 	ldw	fp,0(sp)
 400a17c:	dec00204 	addi	sp,sp,8
 400a180:	f800283a 	ret

0400a184 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400a184:	defffc04 	addi	sp,sp,-16
 400a188:	df000315 	stw	fp,12(sp)
 400a18c:	df000304 	addi	fp,sp,12
 400a190:	e13ffd15 	stw	r4,-12(fp)
 400a194:	e17ffe15 	stw	r5,-8(fp)
 400a198:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400a19c:	e0fffe17 	ldw	r3,-8(fp)
 400a1a0:	e0bffd17 	ldw	r2,-12(fp)
 400a1a4:	18800e26 	beq	r3,r2,400a1e0 <alt_load_section+0x5c>
  {
    while( to != end )
 400a1a8:	00000a06 	br	400a1d4 <alt_load_section+0x50>
    {
      *to++ = *from++;
 400a1ac:	e0bffd17 	ldw	r2,-12(fp)
 400a1b0:	10c00017 	ldw	r3,0(r2)
 400a1b4:	e0bffe17 	ldw	r2,-8(fp)
 400a1b8:	10c00015 	stw	r3,0(r2)
 400a1bc:	e0bffe17 	ldw	r2,-8(fp)
 400a1c0:	10800104 	addi	r2,r2,4
 400a1c4:	e0bffe15 	stw	r2,-8(fp)
 400a1c8:	e0bffd17 	ldw	r2,-12(fp)
 400a1cc:	10800104 	addi	r2,r2,4
 400a1d0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400a1d4:	e0fffe17 	ldw	r3,-8(fp)
 400a1d8:	e0bfff17 	ldw	r2,-4(fp)
 400a1dc:	18bff31e 	bne	r3,r2,400a1ac <__alt_data_end+0xfe00a1ac>
    {
      *to++ = *from++;
    }
  }
}
 400a1e0:	e037883a 	mov	sp,fp
 400a1e4:	df000017 	ldw	fp,0(sp)
 400a1e8:	dec00104 	addi	sp,sp,4
 400a1ec:	f800283a 	ret

0400a1f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400a1f0:	defffe04 	addi	sp,sp,-8
 400a1f4:	dfc00115 	stw	ra,4(sp)
 400a1f8:	df000015 	stw	fp,0(sp)
 400a1fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400a200:	01010074 	movhi	r4,1025
 400a204:	2138c504 	addi	r4,r4,-7404
 400a208:	01410074 	movhi	r5,1025
 400a20c:	29722f04 	addi	r5,r5,-14148
 400a210:	01810074 	movhi	r6,1025
 400a214:	31b8c504 	addi	r6,r6,-7404
 400a218:	400a1840 	call	400a184 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400a21c:	01010034 	movhi	r4,1024
 400a220:	21000804 	addi	r4,r4,32
 400a224:	01410034 	movhi	r5,1024
 400a228:	29400804 	addi	r5,r5,32
 400a22c:	01810034 	movhi	r6,1024
 400a230:	31806e04 	addi	r6,r6,440
 400a234:	400a1840 	call	400a184 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400a238:	01010074 	movhi	r4,1025
 400a23c:	21313d04 	addi	r4,r4,-15116
 400a240:	01410074 	movhi	r5,1025
 400a244:	29713d04 	addi	r5,r5,-15116
 400a248:	01810074 	movhi	r6,1025
 400a24c:	31b22f04 	addi	r6,r6,-14148
 400a250:	400a1840 	call	400a184 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400a254:	400b4540 	call	400b454 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400a258:	400b6180 	call	400b618 <alt_icache_flush_all>
}
 400a25c:	e037883a 	mov	sp,fp
 400a260:	dfc00117 	ldw	ra,4(sp)
 400a264:	df000017 	ldw	fp,0(sp)
 400a268:	dec00204 	addi	sp,sp,8
 400a26c:	f800283a 	ret

0400a270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a270:	defffe04 	addi	sp,sp,-8
 400a274:	dfc00115 	stw	ra,4(sp)
 400a278:	df000015 	stw	fp,0(sp)
 400a27c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a280:	00810074 	movhi	r2,1025
 400a284:	10b8c004 	addi	r2,r2,-7424
 400a288:	10800017 	ldw	r2,0(r2)
 400a28c:	10000526 	beq	r2,zero,400a2a4 <alt_get_errno+0x34>
 400a290:	00810074 	movhi	r2,1025
 400a294:	10b8c004 	addi	r2,r2,-7424
 400a298:	10800017 	ldw	r2,0(r2)
 400a29c:	103ee83a 	callr	r2
 400a2a0:	00000206 	br	400a2ac <alt_get_errno+0x3c>
 400a2a4:	00810074 	movhi	r2,1025
 400a2a8:	10bf6104 	addi	r2,r2,-636
}
 400a2ac:	e037883a 	mov	sp,fp
 400a2b0:	dfc00117 	ldw	ra,4(sp)
 400a2b4:	df000017 	ldw	fp,0(sp)
 400a2b8:	dec00204 	addi	sp,sp,8
 400a2bc:	f800283a 	ret

0400a2c0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400a2c0:	defff904 	addi	sp,sp,-28
 400a2c4:	dfc00615 	stw	ra,24(sp)
 400a2c8:	df000515 	stw	fp,20(sp)
 400a2cc:	df000504 	addi	fp,sp,20
 400a2d0:	e13ffd15 	stw	r4,-12(fp)
 400a2d4:	e17ffe15 	stw	r5,-8(fp)
 400a2d8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400a2dc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a2e0:	e0bffd17 	ldw	r2,-12(fp)
 400a2e4:	10000716 	blt	r2,zero,400a304 <lseek+0x44>
 400a2e8:	e13ffd17 	ldw	r4,-12(fp)
 400a2ec:	01400304 	movi	r5,12
 400a2f0:	40097e40 	call	40097e4 <__mulsi3>
 400a2f4:	00c10074 	movhi	r3,1025
 400a2f8:	18f43e04 	addi	r3,r3,-12040
 400a2fc:	10c5883a 	add	r2,r2,r3
 400a300:	00000106 	br	400a308 <lseek+0x48>
 400a304:	0005883a 	mov	r2,zero
 400a308:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400a30c:	e0bffc17 	ldw	r2,-16(fp)
 400a310:	10001026 	beq	r2,zero,400a354 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400a314:	e0bffc17 	ldw	r2,-16(fp)
 400a318:	10800017 	ldw	r2,0(r2)
 400a31c:	10800717 	ldw	r2,28(r2)
 400a320:	10000926 	beq	r2,zero,400a348 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400a324:	e0bffc17 	ldw	r2,-16(fp)
 400a328:	10800017 	ldw	r2,0(r2)
 400a32c:	10800717 	ldw	r2,28(r2)
 400a330:	e13ffc17 	ldw	r4,-16(fp)
 400a334:	e17ffe17 	ldw	r5,-8(fp)
 400a338:	e1bfff17 	ldw	r6,-4(fp)
 400a33c:	103ee83a 	callr	r2
 400a340:	e0bffb15 	stw	r2,-20(fp)
 400a344:	00000506 	br	400a35c <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400a348:	00bfde84 	movi	r2,-134
 400a34c:	e0bffb15 	stw	r2,-20(fp)
 400a350:	00000206 	br	400a35c <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 400a354:	00bfebc4 	movi	r2,-81
 400a358:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400a35c:	e0bffb17 	ldw	r2,-20(fp)
 400a360:	1000060e 	bge	r2,zero,400a37c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400a364:	400a2700 	call	400a270 <alt_get_errno>
 400a368:	e0fffb17 	ldw	r3,-20(fp)
 400a36c:	00c7c83a 	sub	r3,zero,r3
 400a370:	10c00015 	stw	r3,0(r2)
    rc = -1;
 400a374:	00bfffc4 	movi	r2,-1
 400a378:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400a37c:	e0bffb17 	ldw	r2,-20(fp)
}
 400a380:	e037883a 	mov	sp,fp
 400a384:	dfc00117 	ldw	ra,4(sp)
 400a388:	df000017 	ldw	fp,0(sp)
 400a38c:	dec00204 	addi	sp,sp,8
 400a390:	f800283a 	ret

0400a394 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400a394:	defffd04 	addi	sp,sp,-12
 400a398:	dfc00215 	stw	ra,8(sp)
 400a39c:	df000115 	stw	fp,4(sp)
 400a3a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400a3a4:	0009883a 	mov	r4,zero
 400a3a8:	400a8380 	call	400a838 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400a3ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400a3b0:	400a86c0 	call	400a86c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400a3b4:	01010074 	movhi	r4,1025
 400a3b8:	21322504 	addi	r4,r4,-14188
 400a3bc:	01410074 	movhi	r5,1025
 400a3c0:	29722504 	addi	r5,r5,-14188
 400a3c4:	01810074 	movhi	r6,1025
 400a3c8:	31b22504 	addi	r6,r6,-14188
 400a3cc:	400b9dc0 	call	400b9dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400a3d0:	400b5600 	call	400b560 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400a3d4:	01010074 	movhi	r4,1025
 400a3d8:	212d6f04 	addi	r4,r4,-19012
 400a3dc:	400c1200 	call	400c120 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400a3e0:	d126ac17 	ldw	r4,-25936(gp)
 400a3e4:	d0e6ad17 	ldw	r3,-25932(gp)
 400a3e8:	d0a6ae17 	ldw	r2,-25928(gp)
 400a3ec:	180b883a 	mov	r5,r3
 400a3f0:	100d883a 	mov	r6,r2
 400a3f4:	40001f40 	call	40001f4 <main>
 400a3f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400a3fc:	01000044 	movi	r4,1
 400a400:	4009e980 	call	4009e98 <close>
  exit (result);
 400a404:	e13fff17 	ldw	r4,-4(fp)
 400a408:	400c1340 	call	400c134 <exit>

0400a40c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400a40c:	defffe04 	addi	sp,sp,-8
 400a410:	df000115 	stw	fp,4(sp)
 400a414:	df000104 	addi	fp,sp,4
 400a418:	e13fff15 	stw	r4,-4(fp)
}
 400a41c:	e037883a 	mov	sp,fp
 400a420:	df000017 	ldw	fp,0(sp)
 400a424:	dec00104 	addi	sp,sp,4
 400a428:	f800283a 	ret

0400a42c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400a42c:	defffe04 	addi	sp,sp,-8
 400a430:	df000115 	stw	fp,4(sp)
 400a434:	df000104 	addi	fp,sp,4
 400a438:	e13fff15 	stw	r4,-4(fp)
}
 400a43c:	e037883a 	mov	sp,fp
 400a440:	df000017 	ldw	fp,0(sp)
 400a444:	dec00104 	addi	sp,sp,4
 400a448:	f800283a 	ret

0400a44c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a44c:	defffe04 	addi	sp,sp,-8
 400a450:	dfc00115 	stw	ra,4(sp)
 400a454:	df000015 	stw	fp,0(sp)
 400a458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a45c:	00810074 	movhi	r2,1025
 400a460:	10b8c004 	addi	r2,r2,-7424
 400a464:	10800017 	ldw	r2,0(r2)
 400a468:	10000526 	beq	r2,zero,400a480 <alt_get_errno+0x34>
 400a46c:	00810074 	movhi	r2,1025
 400a470:	10b8c004 	addi	r2,r2,-7424
 400a474:	10800017 	ldw	r2,0(r2)
 400a478:	103ee83a 	callr	r2
 400a47c:	00000206 	br	400a488 <alt_get_errno+0x3c>
 400a480:	00810074 	movhi	r2,1025
 400a484:	10bf6104 	addi	r2,r2,-636
}
 400a488:	e037883a 	mov	sp,fp
 400a48c:	dfc00117 	ldw	ra,4(sp)
 400a490:	df000017 	ldw	fp,0(sp)
 400a494:	dec00204 	addi	sp,sp,8
 400a498:	f800283a 	ret

0400a49c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400a49c:	defff904 	addi	sp,sp,-28
 400a4a0:	dfc00615 	stw	ra,24(sp)
 400a4a4:	df000515 	stw	fp,20(sp)
 400a4a8:	df000504 	addi	fp,sp,20
 400a4ac:	e13ffd15 	stw	r4,-12(fp)
 400a4b0:	e17ffe15 	stw	r5,-8(fp)
 400a4b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a4b8:	e0bffd17 	ldw	r2,-12(fp)
 400a4bc:	10000716 	blt	r2,zero,400a4dc <read+0x40>
 400a4c0:	e13ffd17 	ldw	r4,-12(fp)
 400a4c4:	01400304 	movi	r5,12
 400a4c8:	40097e40 	call	40097e4 <__mulsi3>
 400a4cc:	00c10074 	movhi	r3,1025
 400a4d0:	18f43e04 	addi	r3,r3,-12040
 400a4d4:	10c5883a 	add	r2,r2,r3
 400a4d8:	00000106 	br	400a4e0 <read+0x44>
 400a4dc:	0005883a 	mov	r2,zero
 400a4e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400a4e4:	e0bffb17 	ldw	r2,-20(fp)
 400a4e8:	10002026 	beq	r2,zero,400a56c <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400a4ec:	e0bffb17 	ldw	r2,-20(fp)
 400a4f0:	10800217 	ldw	r2,8(r2)
 400a4f4:	108000cc 	andi	r2,r2,3
 400a4f8:	10800060 	cmpeqi	r2,r2,1
 400a4fc:	1000171e 	bne	r2,zero,400a55c <read+0xc0>
        (fd->dev->read))
 400a500:	e0bffb17 	ldw	r2,-20(fp)
 400a504:	10800017 	ldw	r2,0(r2)
 400a508:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400a50c:	10001326 	beq	r2,zero,400a55c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400a510:	e0bffb17 	ldw	r2,-20(fp)
 400a514:	10800017 	ldw	r2,0(r2)
 400a518:	10c00517 	ldw	r3,20(r2)
 400a51c:	e0bfff17 	ldw	r2,-4(fp)
 400a520:	e13ffb17 	ldw	r4,-20(fp)
 400a524:	e17ffe17 	ldw	r5,-8(fp)
 400a528:	100d883a 	mov	r6,r2
 400a52c:	183ee83a 	callr	r3
 400a530:	e0bffc15 	stw	r2,-16(fp)
 400a534:	e0bffc17 	ldw	r2,-16(fp)
 400a538:	1000060e 	bge	r2,zero,400a554 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400a53c:	400a44c0 	call	400a44c <alt_get_errno>
 400a540:	e0fffc17 	ldw	r3,-16(fp)
 400a544:	00c7c83a 	sub	r3,zero,r3
 400a548:	10c00015 	stw	r3,0(r2)
          return -1;
 400a54c:	00bfffc4 	movi	r2,-1
 400a550:	00000a06 	br	400a57c <read+0xe0>
        }
        return rval;
 400a554:	e0bffc17 	ldw	r2,-16(fp)
 400a558:	00000806 	br	400a57c <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400a55c:	400a44c0 	call	400a44c <alt_get_errno>
 400a560:	00c00344 	movi	r3,13
 400a564:	10c00015 	stw	r3,0(r2)
 400a568:	00000306 	br	400a578 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400a56c:	400a44c0 	call	400a44c <alt_get_errno>
 400a570:	00c01444 	movi	r3,81
 400a574:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 400a578:	00bfffc4 	movi	r2,-1
}
 400a57c:	e037883a 	mov	sp,fp
 400a580:	dfc00117 	ldw	ra,4(sp)
 400a584:	df000017 	ldw	fp,0(sp)
 400a588:	dec00204 	addi	sp,sp,8
 400a58c:	f800283a 	ret

0400a590 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400a590:	defffc04 	addi	sp,sp,-16
 400a594:	dfc00315 	stw	ra,12(sp)
 400a598:	df000215 	stw	fp,8(sp)
 400a59c:	dc000115 	stw	r16,4(sp)
 400a5a0:	df000104 	addi	fp,sp,4
 400a5a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400a5a8:	e0bfff17 	ldw	r2,-4(fp)
 400a5ac:	108000d0 	cmplti	r2,r2,3
 400a5b0:	1000111e 	bne	r2,zero,400a5f8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 400a5b4:	04010074 	movhi	r16,1025
 400a5b8:	84343e04 	addi	r16,r16,-12040
 400a5bc:	e0bfff17 	ldw	r2,-4(fp)
 400a5c0:	1009883a 	mov	r4,r2
 400a5c4:	01400304 	movi	r5,12
 400a5c8:	40097e40 	call	40097e4 <__mulsi3>
 400a5cc:	8085883a 	add	r2,r16,r2
 400a5d0:	10800204 	addi	r2,r2,8
 400a5d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400a5d8:	04010074 	movhi	r16,1025
 400a5dc:	84343e04 	addi	r16,r16,-12040
 400a5e0:	e0bfff17 	ldw	r2,-4(fp)
 400a5e4:	1009883a 	mov	r4,r2
 400a5e8:	01400304 	movi	r5,12
 400a5ec:	40097e40 	call	40097e4 <__mulsi3>
 400a5f0:	8085883a 	add	r2,r16,r2
 400a5f4:	10000015 	stw	zero,0(r2)
  }
}
 400a5f8:	e037883a 	mov	sp,fp
 400a5fc:	dfc00217 	ldw	ra,8(sp)
 400a600:	df000117 	ldw	fp,4(sp)
 400a604:	dc000017 	ldw	r16,0(sp)
 400a608:	dec00304 	addi	sp,sp,12
 400a60c:	f800283a 	ret

0400a610 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400a610:	defff904 	addi	sp,sp,-28
 400a614:	df000615 	stw	fp,24(sp)
 400a618:	df000604 	addi	fp,sp,24
 400a61c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a620:	0005303a 	rdctl	r2,status
 400a624:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a628:	e0fffc17 	ldw	r3,-16(fp)
 400a62c:	00bfff84 	movi	r2,-2
 400a630:	1884703a 	and	r2,r3,r2
 400a634:	1001703a 	wrctl	status,r2
  
  return context;
 400a638:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400a63c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400a640:	d0a00b17 	ldw	r2,-32724(gp)
 400a644:	10c000c4 	addi	r3,r2,3
 400a648:	00bfff04 	movi	r2,-4
 400a64c:	1884703a 	and	r2,r3,r2
 400a650:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400a654:	d0e00b17 	ldw	r3,-32724(gp)
 400a658:	e0bfff17 	ldw	r2,-4(fp)
 400a65c:	1885883a 	add	r2,r3,r2
 400a660:	00c18034 	movhi	r3,1536
 400a664:	18c00004 	addi	r3,r3,0
 400a668:	1880062e 	bgeu	r3,r2,400a684 <sbrk+0x74>
 400a66c:	e0bffa17 	ldw	r2,-24(fp)
 400a670:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a674:	e0bffd17 	ldw	r2,-12(fp)
 400a678:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400a67c:	00bfffc4 	movi	r2,-1
 400a680:	00000b06 	br	400a6b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400a684:	d0a00b17 	ldw	r2,-32724(gp)
 400a688:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 400a68c:	d0e00b17 	ldw	r3,-32724(gp)
 400a690:	e0bfff17 	ldw	r2,-4(fp)
 400a694:	1885883a 	add	r2,r3,r2
 400a698:	d0a00b15 	stw	r2,-32724(gp)
 400a69c:	e0bffa17 	ldw	r2,-24(fp)
 400a6a0:	e0bffe15 	stw	r2,-8(fp)
 400a6a4:	e0bffe17 	ldw	r2,-8(fp)
 400a6a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400a6ac:	e0bffb17 	ldw	r2,-20(fp)
} 
 400a6b0:	e037883a 	mov	sp,fp
 400a6b4:	df000017 	ldw	fp,0(sp)
 400a6b8:	dec00104 	addi	sp,sp,4
 400a6bc:	f800283a 	ret

0400a6c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a6c0:	defffe04 	addi	sp,sp,-8
 400a6c4:	dfc00115 	stw	ra,4(sp)
 400a6c8:	df000015 	stw	fp,0(sp)
 400a6cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a6d0:	00810074 	movhi	r2,1025
 400a6d4:	10b8c004 	addi	r2,r2,-7424
 400a6d8:	10800017 	ldw	r2,0(r2)
 400a6dc:	10000526 	beq	r2,zero,400a6f4 <alt_get_errno+0x34>
 400a6e0:	00810074 	movhi	r2,1025
 400a6e4:	10b8c004 	addi	r2,r2,-7424
 400a6e8:	10800017 	ldw	r2,0(r2)
 400a6ec:	103ee83a 	callr	r2
 400a6f0:	00000206 	br	400a6fc <alt_get_errno+0x3c>
 400a6f4:	00810074 	movhi	r2,1025
 400a6f8:	10bf6104 	addi	r2,r2,-636
}
 400a6fc:	e037883a 	mov	sp,fp
 400a700:	dfc00117 	ldw	ra,4(sp)
 400a704:	df000017 	ldw	fp,0(sp)
 400a708:	dec00204 	addi	sp,sp,8
 400a70c:	f800283a 	ret

0400a710 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400a710:	defff904 	addi	sp,sp,-28
 400a714:	dfc00615 	stw	ra,24(sp)
 400a718:	df000515 	stw	fp,20(sp)
 400a71c:	df000504 	addi	fp,sp,20
 400a720:	e13ffd15 	stw	r4,-12(fp)
 400a724:	e17ffe15 	stw	r5,-8(fp)
 400a728:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a72c:	e0bffd17 	ldw	r2,-12(fp)
 400a730:	10000716 	blt	r2,zero,400a750 <write+0x40>
 400a734:	e13ffd17 	ldw	r4,-12(fp)
 400a738:	01400304 	movi	r5,12
 400a73c:	40097e40 	call	40097e4 <__mulsi3>
 400a740:	00c10074 	movhi	r3,1025
 400a744:	18f43e04 	addi	r3,r3,-12040
 400a748:	10c5883a 	add	r2,r2,r3
 400a74c:	00000106 	br	400a754 <write+0x44>
 400a750:	0005883a 	mov	r2,zero
 400a754:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400a758:	e0bffb17 	ldw	r2,-20(fp)
 400a75c:	10001f26 	beq	r2,zero,400a7dc <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400a760:	e0bffb17 	ldw	r2,-20(fp)
 400a764:	10800217 	ldw	r2,8(r2)
 400a768:	108000cc 	andi	r2,r2,3
 400a76c:	10001726 	beq	r2,zero,400a7cc <write+0xbc>
 400a770:	e0bffb17 	ldw	r2,-20(fp)
 400a774:	10800017 	ldw	r2,0(r2)
 400a778:	10800617 	ldw	r2,24(r2)
 400a77c:	10001326 	beq	r2,zero,400a7cc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400a780:	e0bffb17 	ldw	r2,-20(fp)
 400a784:	10800017 	ldw	r2,0(r2)
 400a788:	10c00617 	ldw	r3,24(r2)
 400a78c:	e0bfff17 	ldw	r2,-4(fp)
 400a790:	e13ffb17 	ldw	r4,-20(fp)
 400a794:	e17ffe17 	ldw	r5,-8(fp)
 400a798:	100d883a 	mov	r6,r2
 400a79c:	183ee83a 	callr	r3
 400a7a0:	e0bffc15 	stw	r2,-16(fp)
 400a7a4:	e0bffc17 	ldw	r2,-16(fp)
 400a7a8:	1000060e 	bge	r2,zero,400a7c4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400a7ac:	400a6c00 	call	400a6c0 <alt_get_errno>
 400a7b0:	e0fffc17 	ldw	r3,-16(fp)
 400a7b4:	00c7c83a 	sub	r3,zero,r3
 400a7b8:	10c00015 	stw	r3,0(r2)
        return -1;
 400a7bc:	00bfffc4 	movi	r2,-1
 400a7c0:	00000a06 	br	400a7ec <write+0xdc>
      }
      return rval;
 400a7c4:	e0bffc17 	ldw	r2,-16(fp)
 400a7c8:	00000806 	br	400a7ec <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400a7cc:	400a6c00 	call	400a6c0 <alt_get_errno>
 400a7d0:	00c00344 	movi	r3,13
 400a7d4:	10c00015 	stw	r3,0(r2)
 400a7d8:	00000306 	br	400a7e8 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400a7dc:	400a6c00 	call	400a6c0 <alt_get_errno>
 400a7e0:	00c01444 	movi	r3,81
 400a7e4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 400a7e8:	00bfffc4 	movi	r2,-1
}
 400a7ec:	e037883a 	mov	sp,fp
 400a7f0:	dfc00117 	ldw	ra,4(sp)
 400a7f4:	df000017 	ldw	fp,0(sp)
 400a7f8:	dec00204 	addi	sp,sp,8
 400a7fc:	f800283a 	ret

0400a800 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400a800:	defffd04 	addi	sp,sp,-12
 400a804:	dfc00215 	stw	ra,8(sp)
 400a808:	df000115 	stw	fp,4(sp)
 400a80c:	df000104 	addi	fp,sp,4
 400a810:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400a814:	e13fff17 	ldw	r4,-4(fp)
 400a818:	01410074 	movhi	r5,1025
 400a81c:	2978bd04 	addi	r5,r5,-7436
 400a820:	400b4c00 	call	400b4c0 <alt_dev_llist_insert>
}
 400a824:	e037883a 	mov	sp,fp
 400a828:	dfc00117 	ldw	ra,4(sp)
 400a82c:	df000017 	ldw	fp,0(sp)
 400a830:	dec00204 	addi	sp,sp,8
 400a834:	f800283a 	ret

0400a838 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400a838:	defffd04 	addi	sp,sp,-12
 400a83c:	dfc00215 	stw	ra,8(sp)
 400a840:	df000115 	stw	fp,4(sp)
 400a844:	df000104 	addi	fp,sp,4
 400a848:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 400a84c:	400be880 	call	400be88 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400a850:	00800044 	movi	r2,1
 400a854:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400a858:	e037883a 	mov	sp,fp
 400a85c:	dfc00117 	ldw	ra,4(sp)
 400a860:	df000017 	ldw	fp,0(sp)
 400a864:	dec00204 	addi	sp,sp,8
 400a868:	f800283a 	ret

0400a86c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400a86c:	defffe04 	addi	sp,sp,-8
 400a870:	dfc00115 	stw	ra,4(sp)
 400a874:	df000015 	stw	fp,0(sp)
 400a878:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 400a87c:	01010074 	movhi	r4,1025
 400a880:	2134a804 	addi	r4,r4,-11616
 400a884:	000b883a 	mov	r5,zero
 400a888:	01800144 	movi	r6,5
 400a88c:	400aa180 	call	400aa18 <altera_avalon_jtag_uart_init>
 400a890:	01010074 	movhi	r4,1025
 400a894:	21349e04 	addi	r4,r4,-11656
 400a898:	400a8000 	call	400a800 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 400a89c:	0001883a 	nop
}
 400a8a0:	e037883a 	mov	sp,fp
 400a8a4:	dfc00117 	ldw	ra,4(sp)
 400a8a8:	df000017 	ldw	fp,0(sp)
 400a8ac:	dec00204 	addi	sp,sp,8
 400a8b0:	f800283a 	ret

0400a8b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400a8b4:	defffa04 	addi	sp,sp,-24
 400a8b8:	dfc00515 	stw	ra,20(sp)
 400a8bc:	df000415 	stw	fp,16(sp)
 400a8c0:	df000404 	addi	fp,sp,16
 400a8c4:	e13ffd15 	stw	r4,-12(fp)
 400a8c8:	e17ffe15 	stw	r5,-8(fp)
 400a8cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400a8d0:	e0bffd17 	ldw	r2,-12(fp)
 400a8d4:	10800017 	ldw	r2,0(r2)
 400a8d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400a8dc:	e0bffc17 	ldw	r2,-16(fp)
 400a8e0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 400a8e4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400a8e8:	10800217 	ldw	r2,8(r2)
 400a8ec:	1809883a 	mov	r4,r3
 400a8f0:	e17ffe17 	ldw	r5,-8(fp)
 400a8f4:	e1bfff17 	ldw	r6,-4(fp)
 400a8f8:	100f883a 	mov	r7,r2
 400a8fc:	400aedc0 	call	400aedc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400a900:	e037883a 	mov	sp,fp
 400a904:	dfc00117 	ldw	ra,4(sp)
 400a908:	df000017 	ldw	fp,0(sp)
 400a90c:	dec00204 	addi	sp,sp,8
 400a910:	f800283a 	ret

0400a914 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400a914:	defffa04 	addi	sp,sp,-24
 400a918:	dfc00515 	stw	ra,20(sp)
 400a91c:	df000415 	stw	fp,16(sp)
 400a920:	df000404 	addi	fp,sp,16
 400a924:	e13ffd15 	stw	r4,-12(fp)
 400a928:	e17ffe15 	stw	r5,-8(fp)
 400a92c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400a930:	e0bffd17 	ldw	r2,-12(fp)
 400a934:	10800017 	ldw	r2,0(r2)
 400a938:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400a93c:	e0bffc17 	ldw	r2,-16(fp)
 400a940:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 400a944:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400a948:	10800217 	ldw	r2,8(r2)
 400a94c:	1809883a 	mov	r4,r3
 400a950:	e17ffe17 	ldw	r5,-8(fp)
 400a954:	e1bfff17 	ldw	r6,-4(fp)
 400a958:	100f883a 	mov	r7,r2
 400a95c:	400b0f40 	call	400b0f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400a960:	e037883a 	mov	sp,fp
 400a964:	dfc00117 	ldw	ra,4(sp)
 400a968:	df000017 	ldw	fp,0(sp)
 400a96c:	dec00204 	addi	sp,sp,8
 400a970:	f800283a 	ret

0400a974 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400a974:	defffc04 	addi	sp,sp,-16
 400a978:	dfc00315 	stw	ra,12(sp)
 400a97c:	df000215 	stw	fp,8(sp)
 400a980:	df000204 	addi	fp,sp,8
 400a984:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400a988:	e0bfff17 	ldw	r2,-4(fp)
 400a98c:	10800017 	ldw	r2,0(r2)
 400a990:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400a994:	e0bffe17 	ldw	r2,-8(fp)
 400a998:	10c00a04 	addi	r3,r2,40
 400a99c:	e0bfff17 	ldw	r2,-4(fp)
 400a9a0:	10800217 	ldw	r2,8(r2)
 400a9a4:	1809883a 	mov	r4,r3
 400a9a8:	100b883a 	mov	r5,r2
 400a9ac:	400ad800 	call	400ad80 <altera_avalon_jtag_uart_close>
}
 400a9b0:	e037883a 	mov	sp,fp
 400a9b4:	dfc00117 	ldw	ra,4(sp)
 400a9b8:	df000017 	ldw	fp,0(sp)
 400a9bc:	dec00204 	addi	sp,sp,8
 400a9c0:	f800283a 	ret

0400a9c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400a9c4:	defffa04 	addi	sp,sp,-24
 400a9c8:	dfc00515 	stw	ra,20(sp)
 400a9cc:	df000415 	stw	fp,16(sp)
 400a9d0:	df000404 	addi	fp,sp,16
 400a9d4:	e13ffd15 	stw	r4,-12(fp)
 400a9d8:	e17ffe15 	stw	r5,-8(fp)
 400a9dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400a9e0:	e0bffd17 	ldw	r2,-12(fp)
 400a9e4:	10800017 	ldw	r2,0(r2)
 400a9e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400a9ec:	e0bffc17 	ldw	r2,-16(fp)
 400a9f0:	10800a04 	addi	r2,r2,40
 400a9f4:	1009883a 	mov	r4,r2
 400a9f8:	e17ffe17 	ldw	r5,-8(fp)
 400a9fc:	e1bfff17 	ldw	r6,-4(fp)
 400aa00:	400ade80 	call	400ade8 <altera_avalon_jtag_uart_ioctl>
}
 400aa04:	e037883a 	mov	sp,fp
 400aa08:	dfc00117 	ldw	ra,4(sp)
 400aa0c:	df000017 	ldw	fp,0(sp)
 400aa10:	dec00204 	addi	sp,sp,8
 400aa14:	f800283a 	ret

0400aa18 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400aa18:	defffa04 	addi	sp,sp,-24
 400aa1c:	dfc00515 	stw	ra,20(sp)
 400aa20:	df000415 	stw	fp,16(sp)
 400aa24:	df000404 	addi	fp,sp,16
 400aa28:	e13ffd15 	stw	r4,-12(fp)
 400aa2c:	e17ffe15 	stw	r5,-8(fp)
 400aa30:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400aa34:	e0bffd17 	ldw	r2,-12(fp)
 400aa38:	00c00044 	movi	r3,1
 400aa3c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400aa40:	e0bffd17 	ldw	r2,-12(fp)
 400aa44:	10800017 	ldw	r2,0(r2)
 400aa48:	10800104 	addi	r2,r2,4
 400aa4c:	e0fffd17 	ldw	r3,-12(fp)
 400aa50:	18c00817 	ldw	r3,32(r3)
 400aa54:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400aa58:	e0fffe17 	ldw	r3,-8(fp)
 400aa5c:	e0bfff17 	ldw	r2,-4(fp)
 400aa60:	d8000015 	stw	zero,0(sp)
 400aa64:	1809883a 	mov	r4,r3
 400aa68:	100b883a 	mov	r5,r2
 400aa6c:	01810074 	movhi	r6,1025
 400aa70:	31aab604 	addi	r6,r6,-21800
 400aa74:	e1fffd17 	ldw	r7,-12(fp)
 400aa78:	400b6340 	call	400b634 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400aa7c:	e0bffd17 	ldw	r2,-12(fp)
 400aa80:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400aa84:	e0bffd17 	ldw	r2,-12(fp)
 400aa88:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400aa8c:	00810074 	movhi	r2,1025
 400aa90:	10bf6604 	addi	r2,r2,-616
 400aa94:	10800017 	ldw	r2,0(r2)
 400aa98:	1809883a 	mov	r4,r3
 400aa9c:	100b883a 	mov	r5,r2
 400aaa0:	01810074 	movhi	r6,1025
 400aaa4:	31ab3704 	addi	r6,r6,-21284
 400aaa8:	e1fffd17 	ldw	r7,-12(fp)
 400aaac:	400b3140 	call	400b314 <alt_alarm_start>
 400aab0:	1000040e 	bge	r2,zero,400aac4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400aab4:	e0bffd17 	ldw	r2,-12(fp)
 400aab8:	00e00034 	movhi	r3,32768
 400aabc:	18ffffc4 	addi	r3,r3,-1
 400aac0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400aac4:	e037883a 	mov	sp,fp
 400aac8:	dfc00117 	ldw	ra,4(sp)
 400aacc:	df000017 	ldw	fp,0(sp)
 400aad0:	dec00204 	addi	sp,sp,8
 400aad4:	f800283a 	ret

0400aad8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400aad8:	defff804 	addi	sp,sp,-32
 400aadc:	df000715 	stw	fp,28(sp)
 400aae0:	df000704 	addi	fp,sp,28
 400aae4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400aae8:	e0bfff17 	ldw	r2,-4(fp)
 400aaec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400aaf0:	e0bffb17 	ldw	r2,-20(fp)
 400aaf4:	10800017 	ldw	r2,0(r2)
 400aaf8:	e0bffc15 	stw	r2,-16(fp)
 400aafc:	00000106 	br	400ab04 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 400ab00:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400ab04:	e0bffc17 	ldw	r2,-16(fp)
 400ab08:	10800104 	addi	r2,r2,4
 400ab0c:	10800037 	ldwio	r2,0(r2)
 400ab10:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400ab14:	e0bffd17 	ldw	r2,-12(fp)
 400ab18:	1080c00c 	andi	r2,r2,768
 400ab1c:	10006a26 	beq	r2,zero,400acc8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400ab20:	e0bffd17 	ldw	r2,-12(fp)
 400ab24:	1080400c 	andi	r2,r2,256
 400ab28:	10003326 	beq	r2,zero,400abf8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400ab2c:	00800074 	movhi	r2,1
 400ab30:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ab34:	e0bffb17 	ldw	r2,-20(fp)
 400ab38:	10800a17 	ldw	r2,40(r2)
 400ab3c:	10800044 	addi	r2,r2,1
 400ab40:	1081ffcc 	andi	r2,r2,2047
 400ab44:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400ab48:	e0bffb17 	ldw	r2,-20(fp)
 400ab4c:	10c00b17 	ldw	r3,44(r2)
 400ab50:	e0bffe17 	ldw	r2,-8(fp)
 400ab54:	18801426 	beq	r3,r2,400aba8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400ab58:	e0bffc17 	ldw	r2,-16(fp)
 400ab5c:	10800037 	ldwio	r2,0(r2)
 400ab60:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400ab64:	e0bff917 	ldw	r2,-28(fp)
 400ab68:	10a0000c 	andi	r2,r2,32768
 400ab6c:	10001026 	beq	r2,zero,400abb0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400ab70:	e0bffb17 	ldw	r2,-20(fp)
 400ab74:	10800a17 	ldw	r2,40(r2)
 400ab78:	e0fff917 	ldw	r3,-28(fp)
 400ab7c:	e13ffb17 	ldw	r4,-20(fp)
 400ab80:	2085883a 	add	r2,r4,r2
 400ab84:	10800e04 	addi	r2,r2,56
 400ab88:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ab8c:	e0bffb17 	ldw	r2,-20(fp)
 400ab90:	10800a17 	ldw	r2,40(r2)
 400ab94:	10800044 	addi	r2,r2,1
 400ab98:	10c1ffcc 	andi	r3,r2,2047
 400ab9c:	e0bffb17 	ldw	r2,-20(fp)
 400aba0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400aba4:	003fe306 	br	400ab34 <__alt_data_end+0xfe00ab34>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400aba8:	0001883a 	nop
 400abac:	00000106 	br	400abb4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400abb0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400abb4:	e0bff917 	ldw	r2,-28(fp)
 400abb8:	10bfffec 	andhi	r2,r2,65535
 400abbc:	10000e26 	beq	r2,zero,400abf8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400abc0:	e0bffb17 	ldw	r2,-20(fp)
 400abc4:	10c00817 	ldw	r3,32(r2)
 400abc8:	00bfff84 	movi	r2,-2
 400abcc:	1886703a 	and	r3,r3,r2
 400abd0:	e0bffb17 	ldw	r2,-20(fp)
 400abd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400abd8:	e0bffc17 	ldw	r2,-16(fp)
 400abdc:	10800104 	addi	r2,r2,4
 400abe0:	e0fffb17 	ldw	r3,-20(fp)
 400abe4:	18c00817 	ldw	r3,32(r3)
 400abe8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400abec:	e0bffc17 	ldw	r2,-16(fp)
 400abf0:	10800104 	addi	r2,r2,4
 400abf4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400abf8:	e0bffd17 	ldw	r2,-12(fp)
 400abfc:	1080800c 	andi	r2,r2,512
 400ac00:	103fbf26 	beq	r2,zero,400ab00 <__alt_data_end+0xfe00ab00>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400ac04:	e0bffd17 	ldw	r2,-12(fp)
 400ac08:	1004d43a 	srli	r2,r2,16
 400ac0c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400ac10:	00001406 	br	400ac64 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400ac14:	e0bffc17 	ldw	r2,-16(fp)
 400ac18:	e0fffb17 	ldw	r3,-20(fp)
 400ac1c:	18c00d17 	ldw	r3,52(r3)
 400ac20:	e13ffb17 	ldw	r4,-20(fp)
 400ac24:	20c7883a 	add	r3,r4,r3
 400ac28:	18c20e04 	addi	r3,r3,2104
 400ac2c:	18c00003 	ldbu	r3,0(r3)
 400ac30:	18c03fcc 	andi	r3,r3,255
 400ac34:	18c0201c 	xori	r3,r3,128
 400ac38:	18ffe004 	addi	r3,r3,-128
 400ac3c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ac40:	e0bffb17 	ldw	r2,-20(fp)
 400ac44:	10800d17 	ldw	r2,52(r2)
 400ac48:	10800044 	addi	r2,r2,1
 400ac4c:	10c1ffcc 	andi	r3,r2,2047
 400ac50:	e0bffb17 	ldw	r2,-20(fp)
 400ac54:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400ac58:	e0bffa17 	ldw	r2,-24(fp)
 400ac5c:	10bfffc4 	addi	r2,r2,-1
 400ac60:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400ac64:	e0bffa17 	ldw	r2,-24(fp)
 400ac68:	10000526 	beq	r2,zero,400ac80 <altera_avalon_jtag_uart_irq+0x1a8>
 400ac6c:	e0bffb17 	ldw	r2,-20(fp)
 400ac70:	10c00d17 	ldw	r3,52(r2)
 400ac74:	e0bffb17 	ldw	r2,-20(fp)
 400ac78:	10800c17 	ldw	r2,48(r2)
 400ac7c:	18bfe51e 	bne	r3,r2,400ac14 <__alt_data_end+0xfe00ac14>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400ac80:	e0bffa17 	ldw	r2,-24(fp)
 400ac84:	103f9e26 	beq	r2,zero,400ab00 <__alt_data_end+0xfe00ab00>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400ac88:	e0bffb17 	ldw	r2,-20(fp)
 400ac8c:	10c00817 	ldw	r3,32(r2)
 400ac90:	00bfff44 	movi	r2,-3
 400ac94:	1886703a 	and	r3,r3,r2
 400ac98:	e0bffb17 	ldw	r2,-20(fp)
 400ac9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400aca0:	e0bffb17 	ldw	r2,-20(fp)
 400aca4:	10800017 	ldw	r2,0(r2)
 400aca8:	10800104 	addi	r2,r2,4
 400acac:	e0fffb17 	ldw	r3,-20(fp)
 400acb0:	18c00817 	ldw	r3,32(r3)
 400acb4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400acb8:	e0bffc17 	ldw	r2,-16(fp)
 400acbc:	10800104 	addi	r2,r2,4
 400acc0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400acc4:	003f8e06 	br	400ab00 <__alt_data_end+0xfe00ab00>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400acc8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400accc:	e037883a 	mov	sp,fp
 400acd0:	df000017 	ldw	fp,0(sp)
 400acd4:	dec00104 	addi	sp,sp,4
 400acd8:	f800283a 	ret

0400acdc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400acdc:	defffc04 	addi	sp,sp,-16
 400ace0:	df000315 	stw	fp,12(sp)
 400ace4:	df000304 	addi	fp,sp,12
 400ace8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400acec:	e0bfff17 	ldw	r2,-4(fp)
 400acf0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400acf4:	e0bffd17 	ldw	r2,-12(fp)
 400acf8:	10800017 	ldw	r2,0(r2)
 400acfc:	10800104 	addi	r2,r2,4
 400ad00:	10800037 	ldwio	r2,0(r2)
 400ad04:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400ad08:	e0bffe17 	ldw	r2,-8(fp)
 400ad0c:	1081000c 	andi	r2,r2,1024
 400ad10:	10000a26 	beq	r2,zero,400ad3c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400ad14:	e0bffd17 	ldw	r2,-12(fp)
 400ad18:	10800017 	ldw	r2,0(r2)
 400ad1c:	10800104 	addi	r2,r2,4
 400ad20:	e0fffd17 	ldw	r3,-12(fp)
 400ad24:	18c00817 	ldw	r3,32(r3)
 400ad28:	18c10014 	ori	r3,r3,1024
 400ad2c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 400ad30:	e0bffd17 	ldw	r2,-12(fp)
 400ad34:	10000915 	stw	zero,36(r2)
 400ad38:	00000a06 	br	400ad64 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400ad3c:	e0bffd17 	ldw	r2,-12(fp)
 400ad40:	10800917 	ldw	r2,36(r2)
 400ad44:	00e00034 	movhi	r3,32768
 400ad48:	18ffff04 	addi	r3,r3,-4
 400ad4c:	18800536 	bltu	r3,r2,400ad64 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 400ad50:	e0bffd17 	ldw	r2,-12(fp)
 400ad54:	10800917 	ldw	r2,36(r2)
 400ad58:	10c00044 	addi	r3,r2,1
 400ad5c:	e0bffd17 	ldw	r2,-12(fp)
 400ad60:	10c00915 	stw	r3,36(r2)
 400ad64:	00810074 	movhi	r2,1025
 400ad68:	10bf6604 	addi	r2,r2,-616
 400ad6c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400ad70:	e037883a 	mov	sp,fp
 400ad74:	df000017 	ldw	fp,0(sp)
 400ad78:	dec00104 	addi	sp,sp,4
 400ad7c:	f800283a 	ret

0400ad80 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400ad80:	defffd04 	addi	sp,sp,-12
 400ad84:	df000215 	stw	fp,8(sp)
 400ad88:	df000204 	addi	fp,sp,8
 400ad8c:	e13ffe15 	stw	r4,-8(fp)
 400ad90:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400ad94:	00000506 	br	400adac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400ad98:	e0bfff17 	ldw	r2,-4(fp)
 400ad9c:	1090000c 	andi	r2,r2,16384
 400ada0:	10000226 	beq	r2,zero,400adac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400ada4:	00bffd44 	movi	r2,-11
 400ada8:	00000b06 	br	400add8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400adac:	e0bffe17 	ldw	r2,-8(fp)
 400adb0:	10c00d17 	ldw	r3,52(r2)
 400adb4:	e0bffe17 	ldw	r2,-8(fp)
 400adb8:	10800c17 	ldw	r2,48(r2)
 400adbc:	18800526 	beq	r3,r2,400add4 <altera_avalon_jtag_uart_close+0x54>
 400adc0:	e0bffe17 	ldw	r2,-8(fp)
 400adc4:	10c00917 	ldw	r3,36(r2)
 400adc8:	e0bffe17 	ldw	r2,-8(fp)
 400adcc:	10800117 	ldw	r2,4(r2)
 400add0:	18bff136 	bltu	r3,r2,400ad98 <__alt_data_end+0xfe00ad98>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400add4:	0005883a 	mov	r2,zero
}
 400add8:	e037883a 	mov	sp,fp
 400addc:	df000017 	ldw	fp,0(sp)
 400ade0:	dec00104 	addi	sp,sp,4
 400ade4:	f800283a 	ret

0400ade8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400ade8:	defffa04 	addi	sp,sp,-24
 400adec:	df000515 	stw	fp,20(sp)
 400adf0:	df000504 	addi	fp,sp,20
 400adf4:	e13ffd15 	stw	r4,-12(fp)
 400adf8:	e17ffe15 	stw	r5,-8(fp)
 400adfc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400ae00:	00bff9c4 	movi	r2,-25
 400ae04:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400ae08:	e0bffe17 	ldw	r2,-8(fp)
 400ae0c:	10da8060 	cmpeqi	r3,r2,27137
 400ae10:	1800031e 	bne	r3,zero,400ae20 <altera_avalon_jtag_uart_ioctl+0x38>
 400ae14:	109a80a0 	cmpeqi	r2,r2,27138
 400ae18:	1000181e 	bne	r2,zero,400ae7c <altera_avalon_jtag_uart_ioctl+0x94>
 400ae1c:	00002606 	br	400aeb8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400ae20:	e0bffd17 	ldw	r2,-12(fp)
 400ae24:	10c00117 	ldw	r3,4(r2)
 400ae28:	00a00034 	movhi	r2,32768
 400ae2c:	10bfffc4 	addi	r2,r2,-1
 400ae30:	18802226 	beq	r3,r2,400aebc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 400ae34:	e0bfff17 	ldw	r2,-4(fp)
 400ae38:	10800017 	ldw	r2,0(r2)
 400ae3c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400ae40:	e0bffc17 	ldw	r2,-16(fp)
 400ae44:	10800090 	cmplti	r2,r2,2
 400ae48:	1000061e 	bne	r2,zero,400ae64 <altera_avalon_jtag_uart_ioctl+0x7c>
 400ae4c:	e0fffc17 	ldw	r3,-16(fp)
 400ae50:	00a00034 	movhi	r2,32768
 400ae54:	10bfffc4 	addi	r2,r2,-1
 400ae58:	18800226 	beq	r3,r2,400ae64 <altera_avalon_jtag_uart_ioctl+0x7c>
 400ae5c:	e0bffc17 	ldw	r2,-16(fp)
 400ae60:	00000206 	br	400ae6c <altera_avalon_jtag_uart_ioctl+0x84>
 400ae64:	00a00034 	movhi	r2,32768
 400ae68:	10bfff84 	addi	r2,r2,-2
 400ae6c:	e0fffd17 	ldw	r3,-12(fp)
 400ae70:	18800115 	stw	r2,4(r3)
      rc = 0;
 400ae74:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400ae78:	00001006 	br	400aebc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400ae7c:	e0bffd17 	ldw	r2,-12(fp)
 400ae80:	10c00117 	ldw	r3,4(r2)
 400ae84:	00a00034 	movhi	r2,32768
 400ae88:	10bfffc4 	addi	r2,r2,-1
 400ae8c:	18800d26 	beq	r3,r2,400aec4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400ae90:	e0bffd17 	ldw	r2,-12(fp)
 400ae94:	10c00917 	ldw	r3,36(r2)
 400ae98:	e0bffd17 	ldw	r2,-12(fp)
 400ae9c:	10800117 	ldw	r2,4(r2)
 400aea0:	1885803a 	cmpltu	r2,r3,r2
 400aea4:	10c03fcc 	andi	r3,r2,255
 400aea8:	e0bfff17 	ldw	r2,-4(fp)
 400aeac:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400aeb0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400aeb4:	00000306 	br	400aec4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 400aeb8:	00000306 	br	400aec8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400aebc:	0001883a 	nop
 400aec0:	00000106 	br	400aec8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400aec4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400aec8:	e0bffb17 	ldw	r2,-20(fp)
}
 400aecc:	e037883a 	mov	sp,fp
 400aed0:	df000017 	ldw	fp,0(sp)
 400aed4:	dec00104 	addi	sp,sp,4
 400aed8:	f800283a 	ret

0400aedc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400aedc:	defff304 	addi	sp,sp,-52
 400aee0:	dfc00c15 	stw	ra,48(sp)
 400aee4:	df000b15 	stw	fp,44(sp)
 400aee8:	df000b04 	addi	fp,sp,44
 400aeec:	e13ffc15 	stw	r4,-16(fp)
 400aef0:	e17ffd15 	stw	r5,-12(fp)
 400aef4:	e1bffe15 	stw	r6,-8(fp)
 400aef8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400aefc:	e0bffd17 	ldw	r2,-12(fp)
 400af00:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400af04:	00004706 	br	400b024 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400af08:	e0bffc17 	ldw	r2,-16(fp)
 400af0c:	10800a17 	ldw	r2,40(r2)
 400af10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400af14:	e0bffc17 	ldw	r2,-16(fp)
 400af18:	10800b17 	ldw	r2,44(r2)
 400af1c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400af20:	e0fff717 	ldw	r3,-36(fp)
 400af24:	e0bff817 	ldw	r2,-32(fp)
 400af28:	18800536 	bltu	r3,r2,400af40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400af2c:	e0fff717 	ldw	r3,-36(fp)
 400af30:	e0bff817 	ldw	r2,-32(fp)
 400af34:	1885c83a 	sub	r2,r3,r2
 400af38:	e0bff615 	stw	r2,-40(fp)
 400af3c:	00000406 	br	400af50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400af40:	00c20004 	movi	r3,2048
 400af44:	e0bff817 	ldw	r2,-32(fp)
 400af48:	1885c83a 	sub	r2,r3,r2
 400af4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400af50:	e0bff617 	ldw	r2,-40(fp)
 400af54:	10001e26 	beq	r2,zero,400afd0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400af58:	e0fffe17 	ldw	r3,-8(fp)
 400af5c:	e0bff617 	ldw	r2,-40(fp)
 400af60:	1880022e 	bgeu	r3,r2,400af6c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400af64:	e0bffe17 	ldw	r2,-8(fp)
 400af68:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400af6c:	e0bff817 	ldw	r2,-32(fp)
 400af70:	10800e04 	addi	r2,r2,56
 400af74:	e0fffc17 	ldw	r3,-16(fp)
 400af78:	1885883a 	add	r2,r3,r2
 400af7c:	e13ff517 	ldw	r4,-44(fp)
 400af80:	100b883a 	mov	r5,r2
 400af84:	e1bff617 	ldw	r6,-40(fp)
 400af88:	40059b40 	call	40059b4 <memcpy>
      ptr   += n;
 400af8c:	e0fff517 	ldw	r3,-44(fp)
 400af90:	e0bff617 	ldw	r2,-40(fp)
 400af94:	1885883a 	add	r2,r3,r2
 400af98:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400af9c:	e0fffe17 	ldw	r3,-8(fp)
 400afa0:	e0bff617 	ldw	r2,-40(fp)
 400afa4:	1885c83a 	sub	r2,r3,r2
 400afa8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400afac:	e0fff817 	ldw	r3,-32(fp)
 400afb0:	e0bff617 	ldw	r2,-40(fp)
 400afb4:	1885883a 	add	r2,r3,r2
 400afb8:	10c1ffcc 	andi	r3,r2,2047
 400afbc:	e0bffc17 	ldw	r2,-16(fp)
 400afc0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400afc4:	e0bffe17 	ldw	r2,-8(fp)
 400afc8:	00bfcf16 	blt	zero,r2,400af08 <__alt_data_end+0xfe00af08>
 400afcc:	00000106 	br	400afd4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400afd0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400afd4:	e0fff517 	ldw	r3,-44(fp)
 400afd8:	e0bffd17 	ldw	r2,-12(fp)
 400afdc:	1880141e 	bne	r3,r2,400b030 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400afe0:	e0bfff17 	ldw	r2,-4(fp)
 400afe4:	1090000c 	andi	r2,r2,16384
 400afe8:	1000131e 	bne	r2,zero,400b038 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400afec:	0001883a 	nop
 400aff0:	e0bffc17 	ldw	r2,-16(fp)
 400aff4:	10c00a17 	ldw	r3,40(r2)
 400aff8:	e0bff717 	ldw	r2,-36(fp)
 400affc:	1880051e 	bne	r3,r2,400b014 <altera_avalon_jtag_uart_read+0x138>
 400b000:	e0bffc17 	ldw	r2,-16(fp)
 400b004:	10c00917 	ldw	r3,36(r2)
 400b008:	e0bffc17 	ldw	r2,-16(fp)
 400b00c:	10800117 	ldw	r2,4(r2)
 400b010:	18bff736 	bltu	r3,r2,400aff0 <__alt_data_end+0xfe00aff0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400b014:	e0bffc17 	ldw	r2,-16(fp)
 400b018:	10c00a17 	ldw	r3,40(r2)
 400b01c:	e0bff717 	ldw	r2,-36(fp)
 400b020:	18800726 	beq	r3,r2,400b040 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400b024:	e0bffe17 	ldw	r2,-8(fp)
 400b028:	00bfb716 	blt	zero,r2,400af08 <__alt_data_end+0xfe00af08>
 400b02c:	00000506 	br	400b044 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400b030:	0001883a 	nop
 400b034:	00000306 	br	400b044 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400b038:	0001883a 	nop
 400b03c:	00000106 	br	400b044 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400b040:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400b044:	e0fff517 	ldw	r3,-44(fp)
 400b048:	e0bffd17 	ldw	r2,-12(fp)
 400b04c:	18801726 	beq	r3,r2,400b0ac <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b050:	0005303a 	rdctl	r2,status
 400b054:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b058:	e0fffa17 	ldw	r3,-24(fp)
 400b05c:	00bfff84 	movi	r2,-2
 400b060:	1884703a 	and	r2,r3,r2
 400b064:	1001703a 	wrctl	status,r2
  
  return context;
 400b068:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400b06c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400b070:	e0bffc17 	ldw	r2,-16(fp)
 400b074:	10800817 	ldw	r2,32(r2)
 400b078:	10c00054 	ori	r3,r2,1
 400b07c:	e0bffc17 	ldw	r2,-16(fp)
 400b080:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400b084:	e0bffc17 	ldw	r2,-16(fp)
 400b088:	10800017 	ldw	r2,0(r2)
 400b08c:	10800104 	addi	r2,r2,4
 400b090:	e0fffc17 	ldw	r3,-16(fp)
 400b094:	18c00817 	ldw	r3,32(r3)
 400b098:	10c00035 	stwio	r3,0(r2)
 400b09c:	e0bff917 	ldw	r2,-28(fp)
 400b0a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b0a4:	e0bffb17 	ldw	r2,-20(fp)
 400b0a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400b0ac:	e0fff517 	ldw	r3,-44(fp)
 400b0b0:	e0bffd17 	ldw	r2,-12(fp)
 400b0b4:	18800426 	beq	r3,r2,400b0c8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 400b0b8:	e0fff517 	ldw	r3,-44(fp)
 400b0bc:	e0bffd17 	ldw	r2,-12(fp)
 400b0c0:	1885c83a 	sub	r2,r3,r2
 400b0c4:	00000606 	br	400b0e0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 400b0c8:	e0bfff17 	ldw	r2,-4(fp)
 400b0cc:	1090000c 	andi	r2,r2,16384
 400b0d0:	10000226 	beq	r2,zero,400b0dc <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 400b0d4:	00bffd44 	movi	r2,-11
 400b0d8:	00000106 	br	400b0e0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 400b0dc:	00bffec4 	movi	r2,-5
}
 400b0e0:	e037883a 	mov	sp,fp
 400b0e4:	dfc00117 	ldw	ra,4(sp)
 400b0e8:	df000017 	ldw	fp,0(sp)
 400b0ec:	dec00204 	addi	sp,sp,8
 400b0f0:	f800283a 	ret

0400b0f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400b0f4:	defff304 	addi	sp,sp,-52
 400b0f8:	dfc00c15 	stw	ra,48(sp)
 400b0fc:	df000b15 	stw	fp,44(sp)
 400b100:	df000b04 	addi	fp,sp,44
 400b104:	e13ffc15 	stw	r4,-16(fp)
 400b108:	e17ffd15 	stw	r5,-12(fp)
 400b10c:	e1bffe15 	stw	r6,-8(fp)
 400b110:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400b114:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400b118:	e0bffd17 	ldw	r2,-12(fp)
 400b11c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400b120:	00003706 	br	400b200 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400b124:	e0bffc17 	ldw	r2,-16(fp)
 400b128:	10800c17 	ldw	r2,48(r2)
 400b12c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 400b130:	e0bffc17 	ldw	r2,-16(fp)
 400b134:	10800d17 	ldw	r2,52(r2)
 400b138:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400b13c:	e0fff817 	ldw	r3,-32(fp)
 400b140:	e0bff517 	ldw	r2,-44(fp)
 400b144:	1880062e 	bgeu	r3,r2,400b160 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400b148:	e0fff517 	ldw	r3,-44(fp)
 400b14c:	e0bff817 	ldw	r2,-32(fp)
 400b150:	1885c83a 	sub	r2,r3,r2
 400b154:	10bfffc4 	addi	r2,r2,-1
 400b158:	e0bff615 	stw	r2,-40(fp)
 400b15c:	00000b06 	br	400b18c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400b160:	e0bff517 	ldw	r2,-44(fp)
 400b164:	10000526 	beq	r2,zero,400b17c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400b168:	00c20004 	movi	r3,2048
 400b16c:	e0bff817 	ldw	r2,-32(fp)
 400b170:	1885c83a 	sub	r2,r3,r2
 400b174:	e0bff615 	stw	r2,-40(fp)
 400b178:	00000406 	br	400b18c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400b17c:	00c1ffc4 	movi	r3,2047
 400b180:	e0bff817 	ldw	r2,-32(fp)
 400b184:	1885c83a 	sub	r2,r3,r2
 400b188:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400b18c:	e0bff617 	ldw	r2,-40(fp)
 400b190:	10001e26 	beq	r2,zero,400b20c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400b194:	e0fffe17 	ldw	r3,-8(fp)
 400b198:	e0bff617 	ldw	r2,-40(fp)
 400b19c:	1880022e 	bgeu	r3,r2,400b1a8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400b1a0:	e0bffe17 	ldw	r2,-8(fp)
 400b1a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400b1a8:	e0bff817 	ldw	r2,-32(fp)
 400b1ac:	10820e04 	addi	r2,r2,2104
 400b1b0:	e0fffc17 	ldw	r3,-16(fp)
 400b1b4:	1885883a 	add	r2,r3,r2
 400b1b8:	1009883a 	mov	r4,r2
 400b1bc:	e17ffd17 	ldw	r5,-12(fp)
 400b1c0:	e1bff617 	ldw	r6,-40(fp)
 400b1c4:	40059b40 	call	40059b4 <memcpy>
      ptr   += n;
 400b1c8:	e0fffd17 	ldw	r3,-12(fp)
 400b1cc:	e0bff617 	ldw	r2,-40(fp)
 400b1d0:	1885883a 	add	r2,r3,r2
 400b1d4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400b1d8:	e0fffe17 	ldw	r3,-8(fp)
 400b1dc:	e0bff617 	ldw	r2,-40(fp)
 400b1e0:	1885c83a 	sub	r2,r3,r2
 400b1e4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b1e8:	e0fff817 	ldw	r3,-32(fp)
 400b1ec:	e0bff617 	ldw	r2,-40(fp)
 400b1f0:	1885883a 	add	r2,r3,r2
 400b1f4:	10c1ffcc 	andi	r3,r2,2047
 400b1f8:	e0bffc17 	ldw	r2,-16(fp)
 400b1fc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400b200:	e0bffe17 	ldw	r2,-8(fp)
 400b204:	00bfc716 	blt	zero,r2,400b124 <__alt_data_end+0xfe00b124>
 400b208:	00000106 	br	400b210 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400b20c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b210:	0005303a 	rdctl	r2,status
 400b214:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b218:	e0fffa17 	ldw	r3,-24(fp)
 400b21c:	00bfff84 	movi	r2,-2
 400b220:	1884703a 	and	r2,r3,r2
 400b224:	1001703a 	wrctl	status,r2
  
  return context;
 400b228:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400b22c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400b230:	e0bffc17 	ldw	r2,-16(fp)
 400b234:	10800817 	ldw	r2,32(r2)
 400b238:	10c00094 	ori	r3,r2,2
 400b23c:	e0bffc17 	ldw	r2,-16(fp)
 400b240:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400b244:	e0bffc17 	ldw	r2,-16(fp)
 400b248:	10800017 	ldw	r2,0(r2)
 400b24c:	10800104 	addi	r2,r2,4
 400b250:	e0fffc17 	ldw	r3,-16(fp)
 400b254:	18c00817 	ldw	r3,32(r3)
 400b258:	10c00035 	stwio	r3,0(r2)
 400b25c:	e0bff917 	ldw	r2,-28(fp)
 400b260:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b264:	e0bffb17 	ldw	r2,-20(fp)
 400b268:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400b26c:	e0bffe17 	ldw	r2,-8(fp)
 400b270:	0080100e 	bge	zero,r2,400b2b4 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
 400b274:	e0bfff17 	ldw	r2,-4(fp)
 400b278:	1090000c 	andi	r2,r2,16384
 400b27c:	1000101e 	bne	r2,zero,400b2c0 <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400b280:	0001883a 	nop
 400b284:	e0bffc17 	ldw	r2,-16(fp)
 400b288:	10c00d17 	ldw	r3,52(r2)
 400b28c:	e0bff517 	ldw	r2,-44(fp)
 400b290:	1880051e 	bne	r3,r2,400b2a8 <altera_avalon_jtag_uart_write+0x1b4>
 400b294:	e0bffc17 	ldw	r2,-16(fp)
 400b298:	10c00917 	ldw	r3,36(r2)
 400b29c:	e0bffc17 	ldw	r2,-16(fp)
 400b2a0:	10800117 	ldw	r2,4(r2)
 400b2a4:	18bff736 	bltu	r3,r2,400b284 <__alt_data_end+0xfe00b284>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400b2a8:	e0bffc17 	ldw	r2,-16(fp)
 400b2ac:	10800917 	ldw	r2,36(r2)
 400b2b0:	1000051e 	bne	r2,zero,400b2c8 <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
 400b2b4:	e0bffe17 	ldw	r2,-8(fp)
 400b2b8:	00bfd116 	blt	zero,r2,400b200 <__alt_data_end+0xfe00b200>
 400b2bc:	00000306 	br	400b2cc <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400b2c0:	0001883a 	nop
 400b2c4:	00000106 	br	400b2cc <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400b2c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400b2cc:	e0fffd17 	ldw	r3,-12(fp)
 400b2d0:	e0bff717 	ldw	r2,-36(fp)
 400b2d4:	18800426 	beq	r3,r2,400b2e8 <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
 400b2d8:	e0fffd17 	ldw	r3,-12(fp)
 400b2dc:	e0bff717 	ldw	r2,-36(fp)
 400b2e0:	1885c83a 	sub	r2,r3,r2
 400b2e4:	00000606 	br	400b300 <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
 400b2e8:	e0bfff17 	ldw	r2,-4(fp)
 400b2ec:	1090000c 	andi	r2,r2,16384
 400b2f0:	10000226 	beq	r2,zero,400b2fc <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
 400b2f4:	00bffd44 	movi	r2,-11
 400b2f8:	00000106 	br	400b300 <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400b2fc:	00bffec4 	movi	r2,-5
}
 400b300:	e037883a 	mov	sp,fp
 400b304:	dfc00117 	ldw	ra,4(sp)
 400b308:	df000017 	ldw	fp,0(sp)
 400b30c:	dec00204 	addi	sp,sp,8
 400b310:	f800283a 	ret

0400b314 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400b314:	defff504 	addi	sp,sp,-44
 400b318:	df000a15 	stw	fp,40(sp)
 400b31c:	df000a04 	addi	fp,sp,40
 400b320:	e13ffc15 	stw	r4,-16(fp)
 400b324:	e17ffd15 	stw	r5,-12(fp)
 400b328:	e1bffe15 	stw	r6,-8(fp)
 400b32c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400b330:	e03ff615 	stw	zero,-40(fp)
 400b334:	00810074 	movhi	r2,1025
 400b338:	10bf6604 	addi	r2,r2,-616
 400b33c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 400b340:	10003f26 	beq	r2,zero,400b440 <alt_alarm_start+0x12c>
  {
    if (alarm)
 400b344:	e0bffc17 	ldw	r2,-16(fp)
 400b348:	10003b26 	beq	r2,zero,400b438 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 400b34c:	e0bffc17 	ldw	r2,-16(fp)
 400b350:	e0fffe17 	ldw	r3,-8(fp)
 400b354:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400b358:	e0bffc17 	ldw	r2,-16(fp)
 400b35c:	e0ffff17 	ldw	r3,-4(fp)
 400b360:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b364:	0005303a 	rdctl	r2,status
 400b368:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b36c:	e0fff817 	ldw	r3,-32(fp)
 400b370:	00bfff84 	movi	r2,-2
 400b374:	1884703a 	and	r2,r3,r2
 400b378:	1001703a 	wrctl	status,r2
  
  return context;
 400b37c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 400b380:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400b384:	00810074 	movhi	r2,1025
 400b388:	10bf6704 	addi	r2,r2,-612
 400b38c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 400b390:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400b394:	e0fffd17 	ldw	r3,-12(fp)
 400b398:	e0bff617 	ldw	r2,-40(fp)
 400b39c:	1885883a 	add	r2,r3,r2
 400b3a0:	10c00044 	addi	r3,r2,1
 400b3a4:	e0bffc17 	ldw	r2,-16(fp)
 400b3a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400b3ac:	e0bffc17 	ldw	r2,-16(fp)
 400b3b0:	10c00217 	ldw	r3,8(r2)
 400b3b4:	e0bff617 	ldw	r2,-40(fp)
 400b3b8:	1880042e 	bgeu	r3,r2,400b3cc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 400b3bc:	e0bffc17 	ldw	r2,-16(fp)
 400b3c0:	00c00044 	movi	r3,1
 400b3c4:	10c00405 	stb	r3,16(r2)
 400b3c8:	00000206 	br	400b3d4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 400b3cc:	e0bffc17 	ldw	r2,-16(fp)
 400b3d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400b3d4:	e0bffc17 	ldw	r2,-16(fp)
 400b3d8:	00c10074 	movhi	r3,1025
 400b3dc:	18f8c304 	addi	r3,r3,-7412
 400b3e0:	e0fff915 	stw	r3,-28(fp)
 400b3e4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400b3e8:	e0bffa17 	ldw	r2,-24(fp)
 400b3ec:	e0fff917 	ldw	r3,-28(fp)
 400b3f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400b3f4:	e0bff917 	ldw	r2,-28(fp)
 400b3f8:	10c00017 	ldw	r3,0(r2)
 400b3fc:	e0bffa17 	ldw	r2,-24(fp)
 400b400:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400b404:	e0bff917 	ldw	r2,-28(fp)
 400b408:	10800017 	ldw	r2,0(r2)
 400b40c:	e0fffa17 	ldw	r3,-24(fp)
 400b410:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400b414:	e0bff917 	ldw	r2,-28(fp)
 400b418:	e0fffa17 	ldw	r3,-24(fp)
 400b41c:	10c00015 	stw	r3,0(r2)
 400b420:	e0bff717 	ldw	r2,-36(fp)
 400b424:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b428:	e0bffb17 	ldw	r2,-20(fp)
 400b42c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400b430:	0005883a 	mov	r2,zero
 400b434:	00000306 	br	400b444 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 400b438:	00bffa84 	movi	r2,-22
 400b43c:	00000106 	br	400b444 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 400b440:	00bfde84 	movi	r2,-134
  }
}
 400b444:	e037883a 	mov	sp,fp
 400b448:	df000017 	ldw	fp,0(sp)
 400b44c:	dec00104 	addi	sp,sp,4
 400b450:	f800283a 	ret

0400b454 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400b454:	deffff04 	addi	sp,sp,-4
 400b458:	df000015 	stw	fp,0(sp)
 400b45c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400b460:	e037883a 	mov	sp,fp
 400b464:	df000017 	ldw	fp,0(sp)
 400b468:	dec00104 	addi	sp,sp,4
 400b46c:	f800283a 	ret

0400b470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b470:	defffe04 	addi	sp,sp,-8
 400b474:	dfc00115 	stw	ra,4(sp)
 400b478:	df000015 	stw	fp,0(sp)
 400b47c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b480:	00810074 	movhi	r2,1025
 400b484:	10b8c004 	addi	r2,r2,-7424
 400b488:	10800017 	ldw	r2,0(r2)
 400b48c:	10000526 	beq	r2,zero,400b4a4 <alt_get_errno+0x34>
 400b490:	00810074 	movhi	r2,1025
 400b494:	10b8c004 	addi	r2,r2,-7424
 400b498:	10800017 	ldw	r2,0(r2)
 400b49c:	103ee83a 	callr	r2
 400b4a0:	00000206 	br	400b4ac <alt_get_errno+0x3c>
 400b4a4:	00810074 	movhi	r2,1025
 400b4a8:	10bf6104 	addi	r2,r2,-636
}
 400b4ac:	e037883a 	mov	sp,fp
 400b4b0:	dfc00117 	ldw	ra,4(sp)
 400b4b4:	df000017 	ldw	fp,0(sp)
 400b4b8:	dec00204 	addi	sp,sp,8
 400b4bc:	f800283a 	ret

0400b4c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400b4c0:	defffa04 	addi	sp,sp,-24
 400b4c4:	dfc00515 	stw	ra,20(sp)
 400b4c8:	df000415 	stw	fp,16(sp)
 400b4cc:	df000404 	addi	fp,sp,16
 400b4d0:	e13ffe15 	stw	r4,-8(fp)
 400b4d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400b4d8:	e0bffe17 	ldw	r2,-8(fp)
 400b4dc:	10000326 	beq	r2,zero,400b4ec <alt_dev_llist_insert+0x2c>
 400b4e0:	e0bffe17 	ldw	r2,-8(fp)
 400b4e4:	10800217 	ldw	r2,8(r2)
 400b4e8:	1000051e 	bne	r2,zero,400b500 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 400b4ec:	400b4700 	call	400b470 <alt_get_errno>
 400b4f0:	00c00584 	movi	r3,22
 400b4f4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 400b4f8:	00bffa84 	movi	r2,-22
 400b4fc:	00001306 	br	400b54c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400b500:	e0bffe17 	ldw	r2,-8(fp)
 400b504:	e0ffff17 	ldw	r3,-4(fp)
 400b508:	e0fffc15 	stw	r3,-16(fp)
 400b50c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400b510:	e0bffd17 	ldw	r2,-12(fp)
 400b514:	e0fffc17 	ldw	r3,-16(fp)
 400b518:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400b51c:	e0bffc17 	ldw	r2,-16(fp)
 400b520:	10c00017 	ldw	r3,0(r2)
 400b524:	e0bffd17 	ldw	r2,-12(fp)
 400b528:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400b52c:	e0bffc17 	ldw	r2,-16(fp)
 400b530:	10800017 	ldw	r2,0(r2)
 400b534:	e0fffd17 	ldw	r3,-12(fp)
 400b538:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400b53c:	e0bffc17 	ldw	r2,-16(fp)
 400b540:	e0fffd17 	ldw	r3,-12(fp)
 400b544:	10c00015 	stw	r3,0(r2)

  return 0;  
 400b548:	0005883a 	mov	r2,zero
}
 400b54c:	e037883a 	mov	sp,fp
 400b550:	dfc00117 	ldw	ra,4(sp)
 400b554:	df000017 	ldw	fp,0(sp)
 400b558:	dec00204 	addi	sp,sp,8
 400b55c:	f800283a 	ret

0400b560 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400b560:	defffd04 	addi	sp,sp,-12
 400b564:	dfc00215 	stw	ra,8(sp)
 400b568:	df000115 	stw	fp,4(sp)
 400b56c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400b570:	00810074 	movhi	r2,1025
 400b574:	10b13c04 	addi	r2,r2,-15120
 400b578:	e0bfff15 	stw	r2,-4(fp)
 400b57c:	00000606 	br	400b598 <_do_ctors+0x38>
        (*ctor) (); 
 400b580:	e0bfff17 	ldw	r2,-4(fp)
 400b584:	10800017 	ldw	r2,0(r2)
 400b588:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400b58c:	e0bfff17 	ldw	r2,-4(fp)
 400b590:	10bfff04 	addi	r2,r2,-4
 400b594:	e0bfff15 	stw	r2,-4(fp)
 400b598:	e0ffff17 	ldw	r3,-4(fp)
 400b59c:	00810074 	movhi	r2,1025
 400b5a0:	10b13d04 	addi	r2,r2,-15116
 400b5a4:	18bff62e 	bgeu	r3,r2,400b580 <__alt_data_end+0xfe00b580>
        (*ctor) (); 
}
 400b5a8:	e037883a 	mov	sp,fp
 400b5ac:	dfc00117 	ldw	ra,4(sp)
 400b5b0:	df000017 	ldw	fp,0(sp)
 400b5b4:	dec00204 	addi	sp,sp,8
 400b5b8:	f800283a 	ret

0400b5bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400b5bc:	defffd04 	addi	sp,sp,-12
 400b5c0:	dfc00215 	stw	ra,8(sp)
 400b5c4:	df000115 	stw	fp,4(sp)
 400b5c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400b5cc:	00810074 	movhi	r2,1025
 400b5d0:	10b13c04 	addi	r2,r2,-15120
 400b5d4:	e0bfff15 	stw	r2,-4(fp)
 400b5d8:	00000606 	br	400b5f4 <_do_dtors+0x38>
        (*dtor) (); 
 400b5dc:	e0bfff17 	ldw	r2,-4(fp)
 400b5e0:	10800017 	ldw	r2,0(r2)
 400b5e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400b5e8:	e0bfff17 	ldw	r2,-4(fp)
 400b5ec:	10bfff04 	addi	r2,r2,-4
 400b5f0:	e0bfff15 	stw	r2,-4(fp)
 400b5f4:	e0ffff17 	ldw	r3,-4(fp)
 400b5f8:	00810074 	movhi	r2,1025
 400b5fc:	10b13d04 	addi	r2,r2,-15116
 400b600:	18bff62e 	bgeu	r3,r2,400b5dc <__alt_data_end+0xfe00b5dc>
        (*dtor) (); 
}
 400b604:	e037883a 	mov	sp,fp
 400b608:	dfc00117 	ldw	ra,4(sp)
 400b60c:	df000017 	ldw	fp,0(sp)
 400b610:	dec00204 	addi	sp,sp,8
 400b614:	f800283a 	ret

0400b618 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400b618:	deffff04 	addi	sp,sp,-4
 400b61c:	df000015 	stw	fp,0(sp)
 400b620:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 400b624:	e037883a 	mov	sp,fp
 400b628:	df000017 	ldw	fp,0(sp)
 400b62c:	dec00104 	addi	sp,sp,4
 400b630:	f800283a 	ret

0400b634 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400b634:	defff904 	addi	sp,sp,-28
 400b638:	dfc00615 	stw	ra,24(sp)
 400b63c:	df000515 	stw	fp,20(sp)
 400b640:	df000504 	addi	fp,sp,20
 400b644:	e13ffc15 	stw	r4,-16(fp)
 400b648:	e17ffd15 	stw	r5,-12(fp)
 400b64c:	e1bffe15 	stw	r6,-8(fp)
 400b650:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400b654:	e0800217 	ldw	r2,8(fp)
 400b658:	d8800015 	stw	r2,0(sp)
 400b65c:	e13ffc17 	ldw	r4,-16(fp)
 400b660:	e17ffd17 	ldw	r5,-12(fp)
 400b664:	e1bffe17 	ldw	r6,-8(fp)
 400b668:	e1ffff17 	ldw	r7,-4(fp)
 400b66c:	400b80c0 	call	400b80c <alt_iic_isr_register>
}  
 400b670:	e037883a 	mov	sp,fp
 400b674:	dfc00117 	ldw	ra,4(sp)
 400b678:	df000017 	ldw	fp,0(sp)
 400b67c:	dec00204 	addi	sp,sp,8
 400b680:	f800283a 	ret

0400b684 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400b684:	defff904 	addi	sp,sp,-28
 400b688:	df000615 	stw	fp,24(sp)
 400b68c:	df000604 	addi	fp,sp,24
 400b690:	e13ffe15 	stw	r4,-8(fp)
 400b694:	e17fff15 	stw	r5,-4(fp)
 400b698:	e0bfff17 	ldw	r2,-4(fp)
 400b69c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b6a0:	0005303a 	rdctl	r2,status
 400b6a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b6a8:	e0fffb17 	ldw	r3,-20(fp)
 400b6ac:	00bfff84 	movi	r2,-2
 400b6b0:	1884703a 	and	r2,r3,r2
 400b6b4:	1001703a 	wrctl	status,r2
  
  return context;
 400b6b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400b6bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400b6c0:	e0bffa17 	ldw	r2,-24(fp)
 400b6c4:	00c00044 	movi	r3,1
 400b6c8:	1884983a 	sll	r2,r3,r2
 400b6cc:	1007883a 	mov	r3,r2
 400b6d0:	00810074 	movhi	r2,1025
 400b6d4:	10bf6504 	addi	r2,r2,-620
 400b6d8:	10800017 	ldw	r2,0(r2)
 400b6dc:	1886b03a 	or	r3,r3,r2
 400b6e0:	00810074 	movhi	r2,1025
 400b6e4:	10bf6504 	addi	r2,r2,-620
 400b6e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400b6ec:	00810074 	movhi	r2,1025
 400b6f0:	10bf6504 	addi	r2,r2,-620
 400b6f4:	10800017 	ldw	r2,0(r2)
 400b6f8:	100170fa 	wrctl	ienable,r2
 400b6fc:	e0bffc17 	ldw	r2,-16(fp)
 400b700:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b704:	e0bffd17 	ldw	r2,-12(fp)
 400b708:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400b70c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 400b710:	e037883a 	mov	sp,fp
 400b714:	df000017 	ldw	fp,0(sp)
 400b718:	dec00104 	addi	sp,sp,4
 400b71c:	f800283a 	ret

0400b720 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400b720:	defff904 	addi	sp,sp,-28
 400b724:	df000615 	stw	fp,24(sp)
 400b728:	df000604 	addi	fp,sp,24
 400b72c:	e13ffe15 	stw	r4,-8(fp)
 400b730:	e17fff15 	stw	r5,-4(fp)
 400b734:	e0bfff17 	ldw	r2,-4(fp)
 400b738:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b73c:	0005303a 	rdctl	r2,status
 400b740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b744:	e0fffb17 	ldw	r3,-20(fp)
 400b748:	00bfff84 	movi	r2,-2
 400b74c:	1884703a 	and	r2,r3,r2
 400b750:	1001703a 	wrctl	status,r2
  
  return context;
 400b754:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400b758:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400b75c:	e0bffa17 	ldw	r2,-24(fp)
 400b760:	00c00044 	movi	r3,1
 400b764:	1884983a 	sll	r2,r3,r2
 400b768:	0084303a 	nor	r2,zero,r2
 400b76c:	1007883a 	mov	r3,r2
 400b770:	00810074 	movhi	r2,1025
 400b774:	10bf6504 	addi	r2,r2,-620
 400b778:	10800017 	ldw	r2,0(r2)
 400b77c:	1886703a 	and	r3,r3,r2
 400b780:	00810074 	movhi	r2,1025
 400b784:	10bf6504 	addi	r2,r2,-620
 400b788:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400b78c:	00810074 	movhi	r2,1025
 400b790:	10bf6504 	addi	r2,r2,-620
 400b794:	10800017 	ldw	r2,0(r2)
 400b798:	100170fa 	wrctl	ienable,r2
 400b79c:	e0bffc17 	ldw	r2,-16(fp)
 400b7a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b7a4:	e0bffd17 	ldw	r2,-12(fp)
 400b7a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400b7ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 400b7b0:	e037883a 	mov	sp,fp
 400b7b4:	df000017 	ldw	fp,0(sp)
 400b7b8:	dec00104 	addi	sp,sp,4
 400b7bc:	f800283a 	ret

0400b7c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400b7c0:	defffc04 	addi	sp,sp,-16
 400b7c4:	df000315 	stw	fp,12(sp)
 400b7c8:	df000304 	addi	fp,sp,12
 400b7cc:	e13ffe15 	stw	r4,-8(fp)
 400b7d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400b7d4:	000530fa 	rdctl	r2,ienable
 400b7d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400b7dc:	e0bfff17 	ldw	r2,-4(fp)
 400b7e0:	00c00044 	movi	r3,1
 400b7e4:	1884983a 	sll	r2,r3,r2
 400b7e8:	1007883a 	mov	r3,r2
 400b7ec:	e0bffd17 	ldw	r2,-12(fp)
 400b7f0:	1884703a 	and	r2,r3,r2
 400b7f4:	1004c03a 	cmpne	r2,r2,zero
 400b7f8:	10803fcc 	andi	r2,r2,255
}
 400b7fc:	e037883a 	mov	sp,fp
 400b800:	df000017 	ldw	fp,0(sp)
 400b804:	dec00104 	addi	sp,sp,4
 400b808:	f800283a 	ret

0400b80c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400b80c:	defff504 	addi	sp,sp,-44
 400b810:	dfc00a15 	stw	ra,40(sp)
 400b814:	df000915 	stw	fp,36(sp)
 400b818:	df000904 	addi	fp,sp,36
 400b81c:	e13ffc15 	stw	r4,-16(fp)
 400b820:	e17ffd15 	stw	r5,-12(fp)
 400b824:	e1bffe15 	stw	r6,-8(fp)
 400b828:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400b82c:	00bffa84 	movi	r2,-22
 400b830:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400b834:	e0bffd17 	ldw	r2,-12(fp)
 400b838:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400b83c:	e0bff817 	ldw	r2,-32(fp)
 400b840:	10800808 	cmpgei	r2,r2,32
 400b844:	1000271e 	bne	r2,zero,400b8e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b848:	0005303a 	rdctl	r2,status
 400b84c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b850:	e0fffa17 	ldw	r3,-24(fp)
 400b854:	00bfff84 	movi	r2,-2
 400b858:	1884703a 	and	r2,r3,r2
 400b85c:	1001703a 	wrctl	status,r2
  
  return context;
 400b860:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400b864:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 400b868:	00c10074 	movhi	r3,1025
 400b86c:	18ff7204 	addi	r3,r3,-568
 400b870:	e0bff817 	ldw	r2,-32(fp)
 400b874:	100490fa 	slli	r2,r2,3
 400b878:	1885883a 	add	r2,r3,r2
 400b87c:	e0fffe17 	ldw	r3,-8(fp)
 400b880:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400b884:	00c10074 	movhi	r3,1025
 400b888:	18ff7204 	addi	r3,r3,-568
 400b88c:	e0bff817 	ldw	r2,-32(fp)
 400b890:	100490fa 	slli	r2,r2,3
 400b894:	1885883a 	add	r2,r3,r2
 400b898:	10800104 	addi	r2,r2,4
 400b89c:	e0ffff17 	ldw	r3,-4(fp)
 400b8a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400b8a4:	e0bffe17 	ldw	r2,-8(fp)
 400b8a8:	10000526 	beq	r2,zero,400b8c0 <alt_iic_isr_register+0xb4>
 400b8ac:	e0bff817 	ldw	r2,-32(fp)
 400b8b0:	e13ffc17 	ldw	r4,-16(fp)
 400b8b4:	100b883a 	mov	r5,r2
 400b8b8:	400b6840 	call	400b684 <alt_ic_irq_enable>
 400b8bc:	00000406 	br	400b8d0 <alt_iic_isr_register+0xc4>
 400b8c0:	e0bff817 	ldw	r2,-32(fp)
 400b8c4:	e13ffc17 	ldw	r4,-16(fp)
 400b8c8:	100b883a 	mov	r5,r2
 400b8cc:	400b7200 	call	400b720 <alt_ic_irq_disable>
 400b8d0:	e0bff715 	stw	r2,-36(fp)
 400b8d4:	e0bff917 	ldw	r2,-28(fp)
 400b8d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b8dc:	e0bffb17 	ldw	r2,-20(fp)
 400b8e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400b8e4:	e0bff717 	ldw	r2,-36(fp)
}
 400b8e8:	e037883a 	mov	sp,fp
 400b8ec:	dfc00117 	ldw	ra,4(sp)
 400b8f0:	df000017 	ldw	fp,0(sp)
 400b8f4:	dec00204 	addi	sp,sp,8
 400b8f8:	f800283a 	ret

0400b8fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400b8fc:	defff804 	addi	sp,sp,-32
 400b900:	dfc00715 	stw	ra,28(sp)
 400b904:	df000615 	stw	fp,24(sp)
 400b908:	dc000515 	stw	r16,20(sp)
 400b90c:	df000504 	addi	fp,sp,20
 400b910:	e13ffc15 	stw	r4,-16(fp)
 400b914:	e17ffd15 	stw	r5,-12(fp)
 400b918:	e1bffe15 	stw	r6,-8(fp)
 400b91c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400b920:	e13ffd17 	ldw	r4,-12(fp)
 400b924:	e17ffe17 	ldw	r5,-8(fp)
 400b928:	e1bfff17 	ldw	r6,-4(fp)
 400b92c:	400bb940 	call	400bb94 <open>
 400b930:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400b934:	e0bffb17 	ldw	r2,-20(fp)
 400b938:	10002216 	blt	r2,zero,400b9c4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 400b93c:	04010074 	movhi	r16,1025
 400b940:	84343e04 	addi	r16,r16,-12040
 400b944:	e0bffb17 	ldw	r2,-20(fp)
 400b948:	1009883a 	mov	r4,r2
 400b94c:	01400304 	movi	r5,12
 400b950:	40097e40 	call	40097e4 <__mulsi3>
 400b954:	8085883a 	add	r2,r16,r2
 400b958:	10c00017 	ldw	r3,0(r2)
 400b95c:	e0bffc17 	ldw	r2,-16(fp)
 400b960:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400b964:	04010074 	movhi	r16,1025
 400b968:	84343e04 	addi	r16,r16,-12040
 400b96c:	e0bffb17 	ldw	r2,-20(fp)
 400b970:	1009883a 	mov	r4,r2
 400b974:	01400304 	movi	r5,12
 400b978:	40097e40 	call	40097e4 <__mulsi3>
 400b97c:	8085883a 	add	r2,r16,r2
 400b980:	10800104 	addi	r2,r2,4
 400b984:	10c00017 	ldw	r3,0(r2)
 400b988:	e0bffc17 	ldw	r2,-16(fp)
 400b98c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400b990:	04010074 	movhi	r16,1025
 400b994:	84343e04 	addi	r16,r16,-12040
 400b998:	e0bffb17 	ldw	r2,-20(fp)
 400b99c:	1009883a 	mov	r4,r2
 400b9a0:	01400304 	movi	r5,12
 400b9a4:	40097e40 	call	40097e4 <__mulsi3>
 400b9a8:	8085883a 	add	r2,r16,r2
 400b9ac:	10800204 	addi	r2,r2,8
 400b9b0:	10c00017 	ldw	r3,0(r2)
 400b9b4:	e0bffc17 	ldw	r2,-16(fp)
 400b9b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400b9bc:	e13ffb17 	ldw	r4,-20(fp)
 400b9c0:	400a5900 	call	400a590 <alt_release_fd>
  }
} 
 400b9c4:	e037883a 	mov	sp,fp
 400b9c8:	dfc00217 	ldw	ra,8(sp)
 400b9cc:	df000117 	ldw	fp,4(sp)
 400b9d0:	dc000017 	ldw	r16,0(sp)
 400b9d4:	dec00304 	addi	sp,sp,12
 400b9d8:	f800283a 	ret

0400b9dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400b9dc:	defffb04 	addi	sp,sp,-20
 400b9e0:	dfc00415 	stw	ra,16(sp)
 400b9e4:	df000315 	stw	fp,12(sp)
 400b9e8:	df000304 	addi	fp,sp,12
 400b9ec:	e13ffd15 	stw	r4,-12(fp)
 400b9f0:	e17ffe15 	stw	r5,-8(fp)
 400b9f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400b9f8:	01010074 	movhi	r4,1025
 400b9fc:	21344104 	addi	r4,r4,-12028
 400ba00:	e17ffd17 	ldw	r5,-12(fp)
 400ba04:	01800044 	movi	r6,1
 400ba08:	01c07fc4 	movi	r7,511
 400ba0c:	400b8fc0 	call	400b8fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400ba10:	01010074 	movhi	r4,1025
 400ba14:	21343e04 	addi	r4,r4,-12040
 400ba18:	e17ffe17 	ldw	r5,-8(fp)
 400ba1c:	000d883a 	mov	r6,zero
 400ba20:	01c07fc4 	movi	r7,511
 400ba24:	400b8fc0 	call	400b8fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400ba28:	01010074 	movhi	r4,1025
 400ba2c:	21344404 	addi	r4,r4,-12016
 400ba30:	e17fff17 	ldw	r5,-4(fp)
 400ba34:	01800044 	movi	r6,1
 400ba38:	01c07fc4 	movi	r7,511
 400ba3c:	400b8fc0 	call	400b8fc <alt_open_fd>
}  
 400ba40:	e037883a 	mov	sp,fp
 400ba44:	dfc00117 	ldw	ra,4(sp)
 400ba48:	df000017 	ldw	fp,0(sp)
 400ba4c:	dec00204 	addi	sp,sp,8
 400ba50:	f800283a 	ret

0400ba54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ba54:	defffe04 	addi	sp,sp,-8
 400ba58:	dfc00115 	stw	ra,4(sp)
 400ba5c:	df000015 	stw	fp,0(sp)
 400ba60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ba64:	00810074 	movhi	r2,1025
 400ba68:	10b8c004 	addi	r2,r2,-7424
 400ba6c:	10800017 	ldw	r2,0(r2)
 400ba70:	10000526 	beq	r2,zero,400ba88 <alt_get_errno+0x34>
 400ba74:	00810074 	movhi	r2,1025
 400ba78:	10b8c004 	addi	r2,r2,-7424
 400ba7c:	10800017 	ldw	r2,0(r2)
 400ba80:	103ee83a 	callr	r2
 400ba84:	00000206 	br	400ba90 <alt_get_errno+0x3c>
 400ba88:	00810074 	movhi	r2,1025
 400ba8c:	10bf6104 	addi	r2,r2,-636
}
 400ba90:	e037883a 	mov	sp,fp
 400ba94:	dfc00117 	ldw	ra,4(sp)
 400ba98:	df000017 	ldw	fp,0(sp)
 400ba9c:	dec00204 	addi	sp,sp,8
 400baa0:	f800283a 	ret

0400baa4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400baa4:	defffb04 	addi	sp,sp,-20
 400baa8:	dfc00415 	stw	ra,16(sp)
 400baac:	df000315 	stw	fp,12(sp)
 400bab0:	dc000215 	stw	r16,8(sp)
 400bab4:	df000204 	addi	fp,sp,8
 400bab8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400babc:	e0bfff17 	ldw	r2,-4(fp)
 400bac0:	10800217 	ldw	r2,8(r2)
 400bac4:	10d00034 	orhi	r3,r2,16384
 400bac8:	e0bfff17 	ldw	r2,-4(fp)
 400bacc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400bad0:	e03ffe15 	stw	zero,-8(fp)
 400bad4:	00002206 	br	400bb60 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400bad8:	04010074 	movhi	r16,1025
 400badc:	84343e04 	addi	r16,r16,-12040
 400bae0:	e0bffe17 	ldw	r2,-8(fp)
 400bae4:	1009883a 	mov	r4,r2
 400bae8:	01400304 	movi	r5,12
 400baec:	40097e40 	call	40097e4 <__mulsi3>
 400baf0:	8085883a 	add	r2,r16,r2
 400baf4:	10c00017 	ldw	r3,0(r2)
 400baf8:	e0bfff17 	ldw	r2,-4(fp)
 400bafc:	10800017 	ldw	r2,0(r2)
 400bb00:	1880141e 	bne	r3,r2,400bb54 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400bb04:	04010074 	movhi	r16,1025
 400bb08:	84343e04 	addi	r16,r16,-12040
 400bb0c:	e0bffe17 	ldw	r2,-8(fp)
 400bb10:	1009883a 	mov	r4,r2
 400bb14:	01400304 	movi	r5,12
 400bb18:	40097e40 	call	40097e4 <__mulsi3>
 400bb1c:	8085883a 	add	r2,r16,r2
 400bb20:	10800204 	addi	r2,r2,8
 400bb24:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400bb28:	10000a0e 	bge	r2,zero,400bb54 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400bb2c:	e13ffe17 	ldw	r4,-8(fp)
 400bb30:	01400304 	movi	r5,12
 400bb34:	40097e40 	call	40097e4 <__mulsi3>
 400bb38:	00c10074 	movhi	r3,1025
 400bb3c:	18f43e04 	addi	r3,r3,-12040
 400bb40:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400bb44:	e0bfff17 	ldw	r2,-4(fp)
 400bb48:	18800226 	beq	r3,r2,400bb54 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400bb4c:	00bffcc4 	movi	r2,-13
 400bb50:	00000a06 	br	400bb7c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400bb54:	e0bffe17 	ldw	r2,-8(fp)
 400bb58:	10800044 	addi	r2,r2,1
 400bb5c:	e0bffe15 	stw	r2,-8(fp)
 400bb60:	00810074 	movhi	r2,1025
 400bb64:	10b8bf04 	addi	r2,r2,-7428
 400bb68:	10800017 	ldw	r2,0(r2)
 400bb6c:	1007883a 	mov	r3,r2
 400bb70:	e0bffe17 	ldw	r2,-8(fp)
 400bb74:	18bfd82e 	bgeu	r3,r2,400bad8 <__alt_data_end+0xfe00bad8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400bb78:	0005883a 	mov	r2,zero
}
 400bb7c:	e037883a 	mov	sp,fp
 400bb80:	dfc00217 	ldw	ra,8(sp)
 400bb84:	df000117 	ldw	fp,4(sp)
 400bb88:	dc000017 	ldw	r16,0(sp)
 400bb8c:	dec00304 	addi	sp,sp,12
 400bb90:	f800283a 	ret

0400bb94 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400bb94:	defff604 	addi	sp,sp,-40
 400bb98:	dfc00915 	stw	ra,36(sp)
 400bb9c:	df000815 	stw	fp,32(sp)
 400bba0:	df000804 	addi	fp,sp,32
 400bba4:	e13ffd15 	stw	r4,-12(fp)
 400bba8:	e17ffe15 	stw	r5,-8(fp)
 400bbac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400bbb0:	00bfffc4 	movi	r2,-1
 400bbb4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400bbb8:	00bffb44 	movi	r2,-19
 400bbbc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400bbc0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400bbc4:	e13ffd17 	ldw	r4,-12(fp)
 400bbc8:	01410074 	movhi	r5,1025
 400bbcc:	2978bd04 	addi	r5,r5,-7436
 400bbd0:	400bea80 	call	400bea8 <alt_find_dev>
 400bbd4:	e0bff815 	stw	r2,-32(fp)
 400bbd8:	e0bff817 	ldw	r2,-32(fp)
 400bbdc:	1000051e 	bne	r2,zero,400bbf4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400bbe0:	e13ffd17 	ldw	r4,-12(fp)
 400bbe4:	400bf380 	call	400bf38 <alt_find_file>
 400bbe8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400bbec:	00800044 	movi	r2,1
 400bbf0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400bbf4:	e0bff817 	ldw	r2,-32(fp)
 400bbf8:	10002a26 	beq	r2,zero,400bca4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400bbfc:	e13ff817 	ldw	r4,-32(fp)
 400bc00:	400c04c0 	call	400c04c <alt_get_fd>
 400bc04:	e0bff915 	stw	r2,-28(fp)
 400bc08:	e0bff917 	ldw	r2,-28(fp)
 400bc0c:	1000030e 	bge	r2,zero,400bc1c <open+0x88>
    {
      status = index;
 400bc10:	e0bff917 	ldw	r2,-28(fp)
 400bc14:	e0bffa15 	stw	r2,-24(fp)
 400bc18:	00002406 	br	400bcac <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 400bc1c:	e13ff917 	ldw	r4,-28(fp)
 400bc20:	01400304 	movi	r5,12
 400bc24:	40097e40 	call	40097e4 <__mulsi3>
 400bc28:	00c10074 	movhi	r3,1025
 400bc2c:	18f43e04 	addi	r3,r3,-12040
 400bc30:	10c5883a 	add	r2,r2,r3
 400bc34:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400bc38:	e0fffe17 	ldw	r3,-8(fp)
 400bc3c:	00900034 	movhi	r2,16384
 400bc40:	10bfffc4 	addi	r2,r2,-1
 400bc44:	1886703a 	and	r3,r3,r2
 400bc48:	e0bffc17 	ldw	r2,-16(fp)
 400bc4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400bc50:	e0bffb17 	ldw	r2,-20(fp)
 400bc54:	1000051e 	bne	r2,zero,400bc6c <open+0xd8>
 400bc58:	e13ffc17 	ldw	r4,-16(fp)
 400bc5c:	400baa40 	call	400baa4 <alt_file_locked>
 400bc60:	e0bffa15 	stw	r2,-24(fp)
 400bc64:	e0bffa17 	ldw	r2,-24(fp)
 400bc68:	10001016 	blt	r2,zero,400bcac <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400bc6c:	e0bff817 	ldw	r2,-32(fp)
 400bc70:	10800317 	ldw	r2,12(r2)
 400bc74:	10000826 	beq	r2,zero,400bc98 <open+0x104>
 400bc78:	e0bff817 	ldw	r2,-32(fp)
 400bc7c:	10800317 	ldw	r2,12(r2)
 400bc80:	e13ffc17 	ldw	r4,-16(fp)
 400bc84:	e17ffd17 	ldw	r5,-12(fp)
 400bc88:	e1bffe17 	ldw	r6,-8(fp)
 400bc8c:	e1ffff17 	ldw	r7,-4(fp)
 400bc90:	103ee83a 	callr	r2
 400bc94:	00000106 	br	400bc9c <open+0x108>
 400bc98:	0005883a 	mov	r2,zero
 400bc9c:	e0bffa15 	stw	r2,-24(fp)
 400bca0:	00000206 	br	400bcac <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400bca4:	00bffb44 	movi	r2,-19
 400bca8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400bcac:	e0bffa17 	ldw	r2,-24(fp)
 400bcb0:	1000080e 	bge	r2,zero,400bcd4 <open+0x140>
  {
    alt_release_fd (index);  
 400bcb4:	e13ff917 	ldw	r4,-28(fp)
 400bcb8:	400a5900 	call	400a590 <alt_release_fd>
    ALT_ERRNO = -status;
 400bcbc:	400ba540 	call	400ba54 <alt_get_errno>
 400bcc0:	e0fffa17 	ldw	r3,-24(fp)
 400bcc4:	00c7c83a 	sub	r3,zero,r3
 400bcc8:	10c00015 	stw	r3,0(r2)
    return -1;
 400bccc:	00bfffc4 	movi	r2,-1
 400bcd0:	00000106 	br	400bcd8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 400bcd4:	e0bff917 	ldw	r2,-28(fp)
}
 400bcd8:	e037883a 	mov	sp,fp
 400bcdc:	dfc00117 	ldw	ra,4(sp)
 400bce0:	df000017 	ldw	fp,0(sp)
 400bce4:	dec00204 	addi	sp,sp,8
 400bce8:	f800283a 	ret

0400bcec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400bcec:	defffa04 	addi	sp,sp,-24
 400bcf0:	df000515 	stw	fp,20(sp)
 400bcf4:	df000504 	addi	fp,sp,20
 400bcf8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400bcfc:	0005303a 	rdctl	r2,status
 400bd00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400bd04:	e0fffc17 	ldw	r3,-16(fp)
 400bd08:	00bfff84 	movi	r2,-2
 400bd0c:	1884703a 	and	r2,r3,r2
 400bd10:	1001703a 	wrctl	status,r2
  
  return context;
 400bd14:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400bd18:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400bd1c:	e0bfff17 	ldw	r2,-4(fp)
 400bd20:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400bd24:	e0bffd17 	ldw	r2,-12(fp)
 400bd28:	10800017 	ldw	r2,0(r2)
 400bd2c:	e0fffd17 	ldw	r3,-12(fp)
 400bd30:	18c00117 	ldw	r3,4(r3)
 400bd34:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400bd38:	e0bffd17 	ldw	r2,-12(fp)
 400bd3c:	10800117 	ldw	r2,4(r2)
 400bd40:	e0fffd17 	ldw	r3,-12(fp)
 400bd44:	18c00017 	ldw	r3,0(r3)
 400bd48:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400bd4c:	e0bffd17 	ldw	r2,-12(fp)
 400bd50:	e0fffd17 	ldw	r3,-12(fp)
 400bd54:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400bd58:	e0bffd17 	ldw	r2,-12(fp)
 400bd5c:	e0fffd17 	ldw	r3,-12(fp)
 400bd60:	10c00015 	stw	r3,0(r2)
 400bd64:	e0bffb17 	ldw	r2,-20(fp)
 400bd68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bd6c:	e0bffe17 	ldw	r2,-8(fp)
 400bd70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400bd74:	e037883a 	mov	sp,fp
 400bd78:	df000017 	ldw	fp,0(sp)
 400bd7c:	dec00104 	addi	sp,sp,4
 400bd80:	f800283a 	ret

0400bd84 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400bd84:	defffb04 	addi	sp,sp,-20
 400bd88:	dfc00415 	stw	ra,16(sp)
 400bd8c:	df000315 	stw	fp,12(sp)
 400bd90:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400bd94:	d0a00d17 	ldw	r2,-32716(gp)
 400bd98:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400bd9c:	d0a6b117 	ldw	r2,-25916(gp)
 400bda0:	10800044 	addi	r2,r2,1
 400bda4:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400bda8:	00002e06 	br	400be64 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400bdac:	e0bffd17 	ldw	r2,-12(fp)
 400bdb0:	10800017 	ldw	r2,0(r2)
 400bdb4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400bdb8:	e0bffd17 	ldw	r2,-12(fp)
 400bdbc:	10800403 	ldbu	r2,16(r2)
 400bdc0:	10803fcc 	andi	r2,r2,255
 400bdc4:	10000426 	beq	r2,zero,400bdd8 <alt_tick+0x54>
 400bdc8:	d0a6b117 	ldw	r2,-25916(gp)
 400bdcc:	1000021e 	bne	r2,zero,400bdd8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400bdd0:	e0bffd17 	ldw	r2,-12(fp)
 400bdd4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400bdd8:	e0bffd17 	ldw	r2,-12(fp)
 400bddc:	10800217 	ldw	r2,8(r2)
 400bde0:	d0e6b117 	ldw	r3,-25916(gp)
 400bde4:	18801d36 	bltu	r3,r2,400be5c <alt_tick+0xd8>
 400bde8:	e0bffd17 	ldw	r2,-12(fp)
 400bdec:	10800403 	ldbu	r2,16(r2)
 400bdf0:	10803fcc 	andi	r2,r2,255
 400bdf4:	1000191e 	bne	r2,zero,400be5c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400bdf8:	e0bffd17 	ldw	r2,-12(fp)
 400bdfc:	10c00317 	ldw	r3,12(r2)
 400be00:	e0bffd17 	ldw	r2,-12(fp)
 400be04:	10800517 	ldw	r2,20(r2)
 400be08:	1009883a 	mov	r4,r2
 400be0c:	183ee83a 	callr	r3
 400be10:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400be14:	e0bfff17 	ldw	r2,-4(fp)
 400be18:	1000031e 	bne	r2,zero,400be28 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400be1c:	e13ffd17 	ldw	r4,-12(fp)
 400be20:	400bcec0 	call	400bcec <alt_alarm_stop>
 400be24:	00000d06 	br	400be5c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400be28:	e0bffd17 	ldw	r2,-12(fp)
 400be2c:	10c00217 	ldw	r3,8(r2)
 400be30:	e0bfff17 	ldw	r2,-4(fp)
 400be34:	1887883a 	add	r3,r3,r2
 400be38:	e0bffd17 	ldw	r2,-12(fp)
 400be3c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400be40:	e0bffd17 	ldw	r2,-12(fp)
 400be44:	10c00217 	ldw	r3,8(r2)
 400be48:	d0a6b117 	ldw	r2,-25916(gp)
 400be4c:	1880032e 	bgeu	r3,r2,400be5c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400be50:	e0bffd17 	ldw	r2,-12(fp)
 400be54:	00c00044 	movi	r3,1
 400be58:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400be5c:	e0bffe17 	ldw	r2,-8(fp)
 400be60:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400be64:	e0fffd17 	ldw	r3,-12(fp)
 400be68:	d0a00d04 	addi	r2,gp,-32716
 400be6c:	18bfcf1e 	bne	r3,r2,400bdac <__alt_data_end+0xfe00bdac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400be70:	0001883a 	nop
}
 400be74:	e037883a 	mov	sp,fp
 400be78:	dfc00117 	ldw	ra,4(sp)
 400be7c:	df000017 	ldw	fp,0(sp)
 400be80:	dec00204 	addi	sp,sp,8
 400be84:	f800283a 	ret

0400be88 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 400be88:	deffff04 	addi	sp,sp,-4
 400be8c:	df000015 	stw	fp,0(sp)
 400be90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400be94:	000170fa 	wrctl	ienable,zero
}
 400be98:	e037883a 	mov	sp,fp
 400be9c:	df000017 	ldw	fp,0(sp)
 400bea0:	dec00104 	addi	sp,sp,4
 400bea4:	f800283a 	ret

0400bea8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400bea8:	defffa04 	addi	sp,sp,-24
 400beac:	dfc00515 	stw	ra,20(sp)
 400beb0:	df000415 	stw	fp,16(sp)
 400beb4:	df000404 	addi	fp,sp,16
 400beb8:	e13ffe15 	stw	r4,-8(fp)
 400bebc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400bec0:	e0bfff17 	ldw	r2,-4(fp)
 400bec4:	10800017 	ldw	r2,0(r2)
 400bec8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400becc:	e13ffe17 	ldw	r4,-8(fp)
 400bed0:	40006340 	call	4000634 <strlen>
 400bed4:	10800044 	addi	r2,r2,1
 400bed8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400bedc:	00000d06 	br	400bf14 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400bee0:	e0bffc17 	ldw	r2,-16(fp)
 400bee4:	10c00217 	ldw	r3,8(r2)
 400bee8:	e0bffd17 	ldw	r2,-12(fp)
 400beec:	1809883a 	mov	r4,r3
 400bef0:	e17ffe17 	ldw	r5,-8(fp)
 400bef4:	100d883a 	mov	r6,r2
 400bef8:	400c16c0 	call	400c16c <memcmp>
 400befc:	1000021e 	bne	r2,zero,400bf08 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400bf00:	e0bffc17 	ldw	r2,-16(fp)
 400bf04:	00000706 	br	400bf24 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400bf08:	e0bffc17 	ldw	r2,-16(fp)
 400bf0c:	10800017 	ldw	r2,0(r2)
 400bf10:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400bf14:	e0fffc17 	ldw	r3,-16(fp)
 400bf18:	e0bfff17 	ldw	r2,-4(fp)
 400bf1c:	18bff01e 	bne	r3,r2,400bee0 <__alt_data_end+0xfe00bee0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400bf20:	0005883a 	mov	r2,zero
}
 400bf24:	e037883a 	mov	sp,fp
 400bf28:	dfc00117 	ldw	ra,4(sp)
 400bf2c:	df000017 	ldw	fp,0(sp)
 400bf30:	dec00204 	addi	sp,sp,8
 400bf34:	f800283a 	ret

0400bf38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400bf38:	defffb04 	addi	sp,sp,-20
 400bf3c:	dfc00415 	stw	ra,16(sp)
 400bf40:	df000315 	stw	fp,12(sp)
 400bf44:	df000304 	addi	fp,sp,12
 400bf48:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400bf4c:	00810074 	movhi	r2,1025
 400bf50:	10b8bb04 	addi	r2,r2,-7444
 400bf54:	10800017 	ldw	r2,0(r2)
 400bf58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400bf5c:	00003106 	br	400c024 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 400bf60:	e0bffd17 	ldw	r2,-12(fp)
 400bf64:	10800217 	ldw	r2,8(r2)
 400bf68:	1009883a 	mov	r4,r2
 400bf6c:	40006340 	call	4000634 <strlen>
 400bf70:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400bf74:	e0bffd17 	ldw	r2,-12(fp)
 400bf78:	10c00217 	ldw	r3,8(r2)
 400bf7c:	e0bffe17 	ldw	r2,-8(fp)
 400bf80:	10bfffc4 	addi	r2,r2,-1
 400bf84:	1885883a 	add	r2,r3,r2
 400bf88:	10800003 	ldbu	r2,0(r2)
 400bf8c:	10803fcc 	andi	r2,r2,255
 400bf90:	1080201c 	xori	r2,r2,128
 400bf94:	10bfe004 	addi	r2,r2,-128
 400bf98:	10800bd8 	cmpnei	r2,r2,47
 400bf9c:	1000031e 	bne	r2,zero,400bfac <alt_find_file+0x74>
    {
      len -= 1;
 400bfa0:	e0bffe17 	ldw	r2,-8(fp)
 400bfa4:	10bfffc4 	addi	r2,r2,-1
 400bfa8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400bfac:	e0bffe17 	ldw	r2,-8(fp)
 400bfb0:	e0ffff17 	ldw	r3,-4(fp)
 400bfb4:	1885883a 	add	r2,r3,r2
 400bfb8:	10800003 	ldbu	r2,0(r2)
 400bfbc:	10803fcc 	andi	r2,r2,255
 400bfc0:	1080201c 	xori	r2,r2,128
 400bfc4:	10bfe004 	addi	r2,r2,-128
 400bfc8:	10800be0 	cmpeqi	r2,r2,47
 400bfcc:	1000081e 	bne	r2,zero,400bff0 <alt_find_file+0xb8>
 400bfd0:	e0bffe17 	ldw	r2,-8(fp)
 400bfd4:	e0ffff17 	ldw	r3,-4(fp)
 400bfd8:	1885883a 	add	r2,r3,r2
 400bfdc:	10800003 	ldbu	r2,0(r2)
 400bfe0:	10803fcc 	andi	r2,r2,255
 400bfe4:	1080201c 	xori	r2,r2,128
 400bfe8:	10bfe004 	addi	r2,r2,-128
 400bfec:	10000a1e 	bne	r2,zero,400c018 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 400bff0:	e0bffd17 	ldw	r2,-12(fp)
 400bff4:	10c00217 	ldw	r3,8(r2)
 400bff8:	e0bffe17 	ldw	r2,-8(fp)
 400bffc:	1809883a 	mov	r4,r3
 400c000:	e17fff17 	ldw	r5,-4(fp)
 400c004:	100d883a 	mov	r6,r2
 400c008:	400c16c0 	call	400c16c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400c00c:	1000021e 	bne	r2,zero,400c018 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400c010:	e0bffd17 	ldw	r2,-12(fp)
 400c014:	00000806 	br	400c038 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 400c018:	e0bffd17 	ldw	r2,-12(fp)
 400c01c:	10800017 	ldw	r2,0(r2)
 400c020:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400c024:	e0fffd17 	ldw	r3,-12(fp)
 400c028:	00810074 	movhi	r2,1025
 400c02c:	10b8bb04 	addi	r2,r2,-7444
 400c030:	18bfcb1e 	bne	r3,r2,400bf60 <__alt_data_end+0xfe00bf60>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400c034:	0005883a 	mov	r2,zero
}
 400c038:	e037883a 	mov	sp,fp
 400c03c:	dfc00117 	ldw	ra,4(sp)
 400c040:	df000017 	ldw	fp,0(sp)
 400c044:	dec00204 	addi	sp,sp,8
 400c048:	f800283a 	ret

0400c04c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400c04c:	defffa04 	addi	sp,sp,-24
 400c050:	dfc00515 	stw	ra,20(sp)
 400c054:	df000415 	stw	fp,16(sp)
 400c058:	dc000315 	stw	r16,12(sp)
 400c05c:	df000304 	addi	fp,sp,12
 400c060:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400c064:	00bffa04 	movi	r2,-24
 400c068:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400c06c:	e03ffd15 	stw	zero,-12(fp)
 400c070:	00002106 	br	400c0f8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 400c074:	04010074 	movhi	r16,1025
 400c078:	84343e04 	addi	r16,r16,-12040
 400c07c:	e0bffd17 	ldw	r2,-12(fp)
 400c080:	1009883a 	mov	r4,r2
 400c084:	01400304 	movi	r5,12
 400c088:	40097e40 	call	40097e4 <__mulsi3>
 400c08c:	8085883a 	add	r2,r16,r2
 400c090:	10800017 	ldw	r2,0(r2)
 400c094:	1000151e 	bne	r2,zero,400c0ec <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 400c098:	04010074 	movhi	r16,1025
 400c09c:	84343e04 	addi	r16,r16,-12040
 400c0a0:	e0bffd17 	ldw	r2,-12(fp)
 400c0a4:	1009883a 	mov	r4,r2
 400c0a8:	01400304 	movi	r5,12
 400c0ac:	40097e40 	call	40097e4 <__mulsi3>
 400c0b0:	8085883a 	add	r2,r16,r2
 400c0b4:	e0ffff17 	ldw	r3,-4(fp)
 400c0b8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400c0bc:	00810074 	movhi	r2,1025
 400c0c0:	10b8bf04 	addi	r2,r2,-7428
 400c0c4:	10c00017 	ldw	r3,0(r2)
 400c0c8:	e0bffd17 	ldw	r2,-12(fp)
 400c0cc:	1880040e 	bge	r3,r2,400c0e0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 400c0d0:	00810074 	movhi	r2,1025
 400c0d4:	10b8bf04 	addi	r2,r2,-7428
 400c0d8:	e0fffd17 	ldw	r3,-12(fp)
 400c0dc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 400c0e0:	e0bffd17 	ldw	r2,-12(fp)
 400c0e4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400c0e8:	00000606 	br	400c104 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400c0ec:	e0bffd17 	ldw	r2,-12(fp)
 400c0f0:	10800044 	addi	r2,r2,1
 400c0f4:	e0bffd15 	stw	r2,-12(fp)
 400c0f8:	e0bffd17 	ldw	r2,-12(fp)
 400c0fc:	10800810 	cmplti	r2,r2,32
 400c100:	103fdc1e 	bne	r2,zero,400c074 <__alt_data_end+0xfe00c074>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400c104:	e0bffe17 	ldw	r2,-8(fp)
}
 400c108:	e037883a 	mov	sp,fp
 400c10c:	dfc00217 	ldw	ra,8(sp)
 400c110:	df000117 	ldw	fp,4(sp)
 400c114:	dc000017 	ldw	r16,0(sp)
 400c118:	dec00304 	addi	sp,sp,12
 400c11c:	f800283a 	ret

0400c120 <atexit>:
 400c120:	200b883a 	mov	r5,r4
 400c124:	000d883a 	mov	r6,zero
 400c128:	0009883a 	mov	r4,zero
 400c12c:	000f883a 	mov	r7,zero
 400c130:	400c1e81 	jmpi	400c1e8 <__register_exitproc>

0400c134 <exit>:
 400c134:	defffe04 	addi	sp,sp,-8
 400c138:	000b883a 	mov	r5,zero
 400c13c:	dc000015 	stw	r16,0(sp)
 400c140:	dfc00115 	stw	ra,4(sp)
 400c144:	2021883a 	mov	r16,r4
 400c148:	400c3180 	call	400c318 <__call_exitprocs>
 400c14c:	00810074 	movhi	r2,1025
 400c150:	10b8b604 	addi	r2,r2,-7464
 400c154:	11000017 	ldw	r4,0(r2)
 400c158:	20800f17 	ldw	r2,60(r4)
 400c15c:	10000126 	beq	r2,zero,400c164 <exit+0x30>
 400c160:	103ee83a 	callr	r2
 400c164:	8009883a 	mov	r4,r16
 400c168:	400c4b80 	call	400c4b8 <_exit>

0400c16c <memcmp>:
 400c16c:	01c000c4 	movi	r7,3
 400c170:	3980192e 	bgeu	r7,r6,400c1d8 <memcmp+0x6c>
 400c174:	2904b03a 	or	r2,r5,r4
 400c178:	11c4703a 	and	r2,r2,r7
 400c17c:	10000f26 	beq	r2,zero,400c1bc <memcmp+0x50>
 400c180:	20c00003 	ldbu	r3,0(r4)
 400c184:	28800003 	ldbu	r2,0(r5)
 400c188:	1880151e 	bne	r3,r2,400c1e0 <memcmp+0x74>
 400c18c:	31bfff84 	addi	r6,r6,-2
 400c190:	01ffffc4 	movi	r7,-1
 400c194:	00000406 	br	400c1a8 <memcmp+0x3c>
 400c198:	20c00003 	ldbu	r3,0(r4)
 400c19c:	28800003 	ldbu	r2,0(r5)
 400c1a0:	31bfffc4 	addi	r6,r6,-1
 400c1a4:	18800e1e 	bne	r3,r2,400c1e0 <memcmp+0x74>
 400c1a8:	21000044 	addi	r4,r4,1
 400c1ac:	29400044 	addi	r5,r5,1
 400c1b0:	31fff91e 	bne	r6,r7,400c198 <__alt_data_end+0xfe00c198>
 400c1b4:	0005883a 	mov	r2,zero
 400c1b8:	f800283a 	ret
 400c1bc:	20c00017 	ldw	r3,0(r4)
 400c1c0:	28800017 	ldw	r2,0(r5)
 400c1c4:	1880041e 	bne	r3,r2,400c1d8 <memcmp+0x6c>
 400c1c8:	31bfff04 	addi	r6,r6,-4
 400c1cc:	21000104 	addi	r4,r4,4
 400c1d0:	29400104 	addi	r5,r5,4
 400c1d4:	39bff936 	bltu	r7,r6,400c1bc <__alt_data_end+0xfe00c1bc>
 400c1d8:	303fe91e 	bne	r6,zero,400c180 <__alt_data_end+0xfe00c180>
 400c1dc:	003ff506 	br	400c1b4 <__alt_data_end+0xfe00c1b4>
 400c1e0:	1885c83a 	sub	r2,r3,r2
 400c1e4:	f800283a 	ret

0400c1e8 <__register_exitproc>:
 400c1e8:	defffa04 	addi	sp,sp,-24
 400c1ec:	00810074 	movhi	r2,1025
 400c1f0:	10b8b604 	addi	r2,r2,-7464
 400c1f4:	dc000315 	stw	r16,12(sp)
 400c1f8:	14000017 	ldw	r16,0(r2)
 400c1fc:	dc400415 	stw	r17,16(sp)
 400c200:	dfc00515 	stw	ra,20(sp)
 400c204:	80805217 	ldw	r2,328(r16)
 400c208:	2023883a 	mov	r17,r4
 400c20c:	10003e26 	beq	r2,zero,400c308 <__register_exitproc+0x120>
 400c210:	10c00117 	ldw	r3,4(r2)
 400c214:	020007c4 	movi	r8,31
 400c218:	40c0180e 	bge	r8,r3,400c27c <__register_exitproc+0x94>
 400c21c:	00800034 	movhi	r2,0
 400c220:	10800004 	addi	r2,r2,0
 400c224:	1000061e 	bne	r2,zero,400c240 <__register_exitproc+0x58>
 400c228:	00bfffc4 	movi	r2,-1
 400c22c:	dfc00517 	ldw	ra,20(sp)
 400c230:	dc400417 	ldw	r17,16(sp)
 400c234:	dc000317 	ldw	r16,12(sp)
 400c238:	dec00604 	addi	sp,sp,24
 400c23c:	f800283a 	ret
 400c240:	01006404 	movi	r4,400
 400c244:	d9400015 	stw	r5,0(sp)
 400c248:	d9800115 	stw	r6,4(sp)
 400c24c:	d9c00215 	stw	r7,8(sp)
 400c250:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 400c254:	d9400017 	ldw	r5,0(sp)
 400c258:	d9800117 	ldw	r6,4(sp)
 400c25c:	d9c00217 	ldw	r7,8(sp)
 400c260:	103ff126 	beq	r2,zero,400c228 <__alt_data_end+0xfe00c228>
 400c264:	80c05217 	ldw	r3,328(r16)
 400c268:	10000115 	stw	zero,4(r2)
 400c26c:	10c00015 	stw	r3,0(r2)
 400c270:	80805215 	stw	r2,328(r16)
 400c274:	10006215 	stw	zero,392(r2)
 400c278:	10006315 	stw	zero,396(r2)
 400c27c:	10c00117 	ldw	r3,4(r2)
 400c280:	88000d1e 	bne	r17,zero,400c2b8 <__register_exitproc+0xd0>
 400c284:	19000084 	addi	r4,r3,2
 400c288:	2109883a 	add	r4,r4,r4
 400c28c:	18c00044 	addi	r3,r3,1
 400c290:	2109883a 	add	r4,r4,r4
 400c294:	1109883a 	add	r4,r2,r4
 400c298:	10c00115 	stw	r3,4(r2)
 400c29c:	0005883a 	mov	r2,zero
 400c2a0:	21400015 	stw	r5,0(r4)
 400c2a4:	dfc00517 	ldw	ra,20(sp)
 400c2a8:	dc400417 	ldw	r17,16(sp)
 400c2ac:	dc000317 	ldw	r16,12(sp)
 400c2b0:	dec00604 	addi	sp,sp,24
 400c2b4:	f800283a 	ret
 400c2b8:	02400044 	movi	r9,1
 400c2bc:	12806217 	ldw	r10,392(r2)
 400c2c0:	48d2983a 	sll	r9,r9,r3
 400c2c4:	19000804 	addi	r4,r3,32
 400c2c8:	18d1883a 	add	r8,r3,r3
 400c2cc:	2109883a 	add	r4,r4,r4
 400c2d0:	4211883a 	add	r8,r8,r8
 400c2d4:	2109883a 	add	r4,r4,r4
 400c2d8:	1109883a 	add	r4,r2,r4
 400c2dc:	1211883a 	add	r8,r2,r8
 400c2e0:	5254b03a 	or	r10,r10,r9
 400c2e4:	21c02215 	stw	r7,136(r4)
 400c2e8:	41802215 	stw	r6,136(r8)
 400c2ec:	12806215 	stw	r10,392(r2)
 400c2f0:	01000084 	movi	r4,2
 400c2f4:	893fe31e 	bne	r17,r4,400c284 <__alt_data_end+0xfe00c284>
 400c2f8:	11006317 	ldw	r4,396(r2)
 400c2fc:	2252b03a 	or	r9,r4,r9
 400c300:	12406315 	stw	r9,396(r2)
 400c304:	003fdf06 	br	400c284 <__alt_data_end+0xfe00c284>
 400c308:	00810074 	movhi	r2,1025
 400c30c:	10bfb204 	addi	r2,r2,-312
 400c310:	80805215 	stw	r2,328(r16)
 400c314:	003fbe06 	br	400c210 <__alt_data_end+0xfe00c210>

0400c318 <__call_exitprocs>:
 400c318:	00810074 	movhi	r2,1025
 400c31c:	10b8b604 	addi	r2,r2,-7464
 400c320:	10800017 	ldw	r2,0(r2)
 400c324:	defff304 	addi	sp,sp,-52
 400c328:	df000b15 	stw	fp,44(sp)
 400c32c:	d8800015 	stw	r2,0(sp)
 400c330:	10805204 	addi	r2,r2,328
 400c334:	dd400815 	stw	r21,32(sp)
 400c338:	dfc00c15 	stw	ra,48(sp)
 400c33c:	ddc00a15 	stw	r23,40(sp)
 400c340:	dd800915 	stw	r22,36(sp)
 400c344:	dd000715 	stw	r20,28(sp)
 400c348:	dcc00615 	stw	r19,24(sp)
 400c34c:	dc800515 	stw	r18,20(sp)
 400c350:	dc400415 	stw	r17,16(sp)
 400c354:	dc000315 	stw	r16,12(sp)
 400c358:	d9000115 	stw	r4,4(sp)
 400c35c:	2839883a 	mov	fp,r5
 400c360:	d8800215 	stw	r2,8(sp)
 400c364:	057fffc4 	movi	r21,-1
 400c368:	d8800017 	ldw	r2,0(sp)
 400c36c:	ddc00217 	ldw	r23,8(sp)
 400c370:	14805217 	ldw	r18,328(r2)
 400c374:	90001726 	beq	r18,zero,400c3d4 <__call_exitprocs+0xbc>
 400c378:	94400117 	ldw	r17,4(r18)
 400c37c:	8c3fffc4 	addi	r16,r17,-1
 400c380:	80001116 	blt	r16,zero,400c3c8 <__call_exitprocs+0xb0>
 400c384:	8c400044 	addi	r17,r17,1
 400c388:	8427883a 	add	r19,r16,r16
 400c38c:	8c63883a 	add	r17,r17,r17
 400c390:	95802204 	addi	r22,r18,136
 400c394:	9ce7883a 	add	r19,r19,r19
 400c398:	8c63883a 	add	r17,r17,r17
 400c39c:	b4e7883a 	add	r19,r22,r19
 400c3a0:	9463883a 	add	r17,r18,r17
 400c3a4:	e0001726 	beq	fp,zero,400c404 <__call_exitprocs+0xec>
 400c3a8:	8c87c83a 	sub	r3,r17,r18
 400c3ac:	b0c7883a 	add	r3,r22,r3
 400c3b0:	18c01e17 	ldw	r3,120(r3)
 400c3b4:	1f001326 	beq	r3,fp,400c404 <__call_exitprocs+0xec>
 400c3b8:	843fffc4 	addi	r16,r16,-1
 400c3bc:	9cffff04 	addi	r19,r19,-4
 400c3c0:	8c7fff04 	addi	r17,r17,-4
 400c3c4:	857ff71e 	bne	r16,r21,400c3a4 <__alt_data_end+0xfe00c3a4>
 400c3c8:	00800034 	movhi	r2,0
 400c3cc:	10800004 	addi	r2,r2,0
 400c3d0:	10002a1e 	bne	r2,zero,400c47c <__call_exitprocs+0x164>
 400c3d4:	dfc00c17 	ldw	ra,48(sp)
 400c3d8:	df000b17 	ldw	fp,44(sp)
 400c3dc:	ddc00a17 	ldw	r23,40(sp)
 400c3e0:	dd800917 	ldw	r22,36(sp)
 400c3e4:	dd400817 	ldw	r21,32(sp)
 400c3e8:	dd000717 	ldw	r20,28(sp)
 400c3ec:	dcc00617 	ldw	r19,24(sp)
 400c3f0:	dc800517 	ldw	r18,20(sp)
 400c3f4:	dc400417 	ldw	r17,16(sp)
 400c3f8:	dc000317 	ldw	r16,12(sp)
 400c3fc:	dec00d04 	addi	sp,sp,52
 400c400:	f800283a 	ret
 400c404:	91000117 	ldw	r4,4(r18)
 400c408:	88c00017 	ldw	r3,0(r17)
 400c40c:	213fffc4 	addi	r4,r4,-1
 400c410:	24001526 	beq	r4,r16,400c468 <__call_exitprocs+0x150>
 400c414:	88000015 	stw	zero,0(r17)
 400c418:	183fe726 	beq	r3,zero,400c3b8 <__alt_data_end+0xfe00c3b8>
 400c41c:	00800044 	movi	r2,1
 400c420:	1408983a 	sll	r4,r2,r16
 400c424:	91406217 	ldw	r5,392(r18)
 400c428:	95000117 	ldw	r20,4(r18)
 400c42c:	214a703a 	and	r5,r4,r5
 400c430:	28000b26 	beq	r5,zero,400c460 <__call_exitprocs+0x148>
 400c434:	91406317 	ldw	r5,396(r18)
 400c438:	2148703a 	and	r4,r4,r5
 400c43c:	20000c1e 	bne	r4,zero,400c470 <__call_exitprocs+0x158>
 400c440:	99400017 	ldw	r5,0(r19)
 400c444:	d9000117 	ldw	r4,4(sp)
 400c448:	183ee83a 	callr	r3
 400c44c:	90c00117 	ldw	r3,4(r18)
 400c450:	1d3fc51e 	bne	r3,r20,400c368 <__alt_data_end+0xfe00c368>
 400c454:	b8c00017 	ldw	r3,0(r23)
 400c458:	1cbfd726 	beq	r3,r18,400c3b8 <__alt_data_end+0xfe00c3b8>
 400c45c:	003fc206 	br	400c368 <__alt_data_end+0xfe00c368>
 400c460:	183ee83a 	callr	r3
 400c464:	003ff906 	br	400c44c <__alt_data_end+0xfe00c44c>
 400c468:	94000115 	stw	r16,4(r18)
 400c46c:	003fea06 	br	400c418 <__alt_data_end+0xfe00c418>
 400c470:	99000017 	ldw	r4,0(r19)
 400c474:	183ee83a 	callr	r3
 400c478:	003ff406 	br	400c44c <__alt_data_end+0xfe00c44c>
 400c47c:	90c00117 	ldw	r3,4(r18)
 400c480:	1800071e 	bne	r3,zero,400c4a0 <__call_exitprocs+0x188>
 400c484:	90c00017 	ldw	r3,0(r18)
 400c488:	18000926 	beq	r3,zero,400c4b0 <__call_exitprocs+0x198>
 400c48c:	9009883a 	mov	r4,r18
 400c490:	b8c00015 	stw	r3,0(r23)
 400c494:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 400c498:	bc800017 	ldw	r18,0(r23)
 400c49c:	003fb506 	br	400c374 <__alt_data_end+0xfe00c374>
 400c4a0:	90c00017 	ldw	r3,0(r18)
 400c4a4:	902f883a 	mov	r23,r18
 400c4a8:	1825883a 	mov	r18,r3
 400c4ac:	003fb106 	br	400c374 <__alt_data_end+0xfe00c374>
 400c4b0:	0007883a 	mov	r3,zero
 400c4b4:	003ffb06 	br	400c4a4 <__alt_data_end+0xfe00c4a4>

0400c4b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400c4b8:	defffc04 	addi	sp,sp,-16
 400c4bc:	df000315 	stw	fp,12(sp)
 400c4c0:	df000304 	addi	fp,sp,12
 400c4c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400c4c8:	0001883a 	nop
 400c4cc:	e0bfff17 	ldw	r2,-4(fp)
 400c4d0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 400c4d4:	e0bffd17 	ldw	r2,-12(fp)
 400c4d8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400c4dc:	e0bffe17 	ldw	r2,-8(fp)
 400c4e0:	10000226 	beq	r2,zero,400c4ec <_exit+0x34>
    ALT_SIM_FAIL();
 400c4e4:	002af070 	cmpltui	zero,zero,43969
 400c4e8:	00000106 	br	400c4f0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 400c4ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400c4f0:	003fff06 	br	400c4f0 <__alt_data_end+0xfe00c4f0>
