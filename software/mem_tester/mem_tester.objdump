
mem_tester.elf:     file format elf32-littlenios2
mem_tester.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0000c57c memsz 0x0000c57c flags r-x
    LOAD off    0x0000d59c vaddr 0x0400c59c paddr 0x0400dff4 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x0000fa4c vaddr 0x0400fa4c paddr 0x0400fa4c align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c048  040001b8  040001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000039c  0400c200  0400c200  0000d200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0400c59c  0400dff4  0000d59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0400fa4c  0400fa4c  0000fa4c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000eff4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d20  00000000  00000000  0000f018  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002252e  00000000  00000000  0000fd38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008cd4  00000000  00000000  00032266  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00009ef3  00000000  00000000  0003af3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001794  00000000  00000000  00044e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002cbc  00000000  00000000  000465c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010bd4  00000000  00000000  00049280  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00059e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00059e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005d788  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0005d78b  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005d797  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005d798  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005d799  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005d79d  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005d7a1  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0005d7a5  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0005d7b0  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0005d7bb  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0005d7c6  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002a  00000000  00000000  0005d7d1  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005c4fa  00000000  00000000  0005d7fb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b8 l    d  .text	00000000 .text
0400c200 l    d  .rodata	00000000 .rodata
0400c59c l    d  .rwdata	00000000 .rwdata
0400fa4c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mem_tester_bsp//obj/HAL/src/crt0.o
040001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
040005f4 l     F .text	00000034 __sprint_r
0400c2ba l     O .rodata	00000010 blanks.3546
0400c2ca l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400263c l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040040ac l     F .text	00000008 __fp_lock
040040b4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0400c59c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0400c300 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0400c448 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
04008690 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
040093c0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04009b54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04009c70 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04009c9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04009d9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04009e90 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04009f7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400a158 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400dfe4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400a3cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400a50c l     F .text	00000038 alt_dev_reg
0400cf58 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400a7e4 l     F .text	00000204 altera_avalon_jtag_uart_irq
0400a9e8 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400b17c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400b608 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400b760 l     F .text	00000050 alt_get_errno
0400b7b0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
04006b6c g     F .text	00000074 _mprec_log10
04006c5c g     F .text	00000084 __any_on
040078dc g     F .text	00000064 _isatty_r
0400c330 g     O .rodata	00000028 __mprec_tinytens
0400a0a0 g     F .text	00000078 alt_main
04009b10 g     F .text	00000044 __ashldi3
040004d0 g     F .text	00000084 _puts_r
0400faa8 g     O .bss	00000100 alt_irq
04007940 g     F .text	0000006c _lseek_r
0400dff4 g       *ABS*	00000000 __flash_rwdata_start
04008f30 g     F .text	0000005c __eqdf2
0400fd38 g       *ABS*	00000000 __alt_heap_start
04000494 g     F .text	0000003c printf
04007480 g     F .text	0000005c __sseek
04004150 g     F .text	0000010c __sinit
04004de8 g     F .text	0000009c _setlocale_r
040040c8 g     F .text	00000078 __sfmoreglue
0400a138 g     F .text	00000020 __malloc_unlock
04005a28 g     F .text	0000018c memmove
04004140 g     F .text	00000010 _cleanup
04005c90 g     F .text	000000a8 _Balloc
04008fe8 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04007874 g     F .text	00000068 _fstat_r
0400fa64 g     O .bss	00000004 errno
0400fa6c g     O .bss	00000004 alt_argv
04015fb8 g       *ABS*	00000000 _gp
0400cdd8 g     O .rwdata	00000180 alt_fd_list
0400bbb4 g     F .text	00000090 alt_find_dev
040058e8 g     F .text	00000140 memcpy
040040bc g     F .text	0000000c _cleanup_r
0400910c g     F .text	000000d4 __floatsidf
0400b6e8 g     F .text	00000078 alt_io_redirect
040090b0 g     F .text	0000005c __ltdf2
0400c200 g       *ABS*	00000000 __DTOR_END__
04000554 g     F .text	00000014 puts
04006ac8 g     F .text	000000a4 __ratio
0400abe8 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04000468 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
040094e0 g     F .text	00000008 __udivsi3
04009dec g     F .text	000000a4 isatty
0400c380 g     O .rodata	000000c8 __mprec_tens
04004e84 g     F .text	0000000c __locale_charset
0400fa60 g     O .bss	00000004 __malloc_top_pad
0400dfc0 g     O .rwdata	00000004 __mb_cur_max
04004e90 g     F .text	0000000c _localeconv_r
040060c0 g     F .text	0000003c __i2b
040047a4 g     F .text	000004e4 __sfvwrite_r
04007340 g     F .text	00000064 _sbrk_r
040079ac g     F .text	0000006c _read_r
0400c99c g     O .rwdata	0000000c __lc_ctype
0400dfdc g     O .rwdata	00000004 alt_max_fd
040098f8 g     F .text	00000104 __unpack_d
04007724 g     F .text	0000013c _fclose_r
0400407c g     F .text	00000030 fflush
0400fa5c g     O .bss	00000004 __malloc_max_sbrked_mem
040089e4 g     F .text	00000054 __adddf3
0400683c g     F .text	00000148 __b2d
04008068 g     F .text	00000628 __umoddi3
04009fcc g     F .text	000000d4 lseek
0400dfb8 g     O .rwdata	00000004 _global_impure_ptr
04006ce0 g     F .text	000005fc _realloc_r
0400fd38 g       *ABS*	00000000 __bss_end
0400b518 g     F .text	000000f0 alt_iic_isr_register
0400ba90 g     F .text	00000104 alt_tick
04007a18 g     F .text	00000650 __udivdi3
0400c358 g     O .rodata	00000028 __mprec_bigtens
04005ea4 g     F .text	00000104 __s2b
040092a4 g     F .text	0000011c __floatunsidf
040065dc g     F .text	00000058 __mcmp
04004368 g     F .text	00000018 __fp_lock_all
0400b4cc g     F .text	0000004c alt_ic_irq_enabled
0400b9f8 g     F .text	00000098 alt_alarm_stop
0400fa74 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000cc alt_irq_handler
0400cdb0 g     O .rwdata	00000028 alt_dev_null
0400b160 g     F .text	0000001c alt_dcache_flush_all
04005fa8 g     F .text	00000068 __hi0bits
040091e0 g     F .text	000000c4 __fixdfsi
0400dff4 g       *ABS*	00000000 __ram_rwdata_end
0400dfd4 g     O .rwdata	00000008 alt_dev_list
0400a41c g     F .text	000000f0 write
0400c59c g       *ABS*	00000000 __ram_rodata_end
04009cec g     F .text	000000b0 fstat
04009acc g     F .text	00000044 __lshrdi3
04006354 g     F .text	0000012c __pow5mult
0400fa54 g     O .bss	00000004 __nlocale_changed
040094e8 g     F .text	00000008 __umodsi3
0400fd38 g       *ABS*	00000000 end
0400a724 g     F .text	000000c0 altera_avalon_jtag_uart_init
0400c200 g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
04009628 g     F .text	000000ac __clzsi2
0400ae00 g     F .text	00000220 altera_avalon_jtag_uart_write
04004358 g     F .text	00000004 __sfp_lock_acquire
040057f0 g     F .text	000000f8 memchr
04000628 g     F .text	00001e7c ___vfprintf_internal_r
040044d4 g     F .text	000002d0 _free_r
0400c024 g     F .text	000001a0 __call_exitprocs
0400fa50 g     O .bss	00000004 __mlocale_changed
0400dfc4 g     O .rwdata	00000004 __malloc_sbrk_base
040001b8 g     F .text	0000003c _start
0400fa78 g     O .bss	00000004 _alt_tick_rate
04006480 g     F .text	0000015c __lshift
0400fa7c g     O .bss	00000004 _alt_nticks
0400a1a8 g     F .text	000000f4 read
0400a578 g     F .text	00000048 alt_sys_init
0400bef4 g     F .text	00000130 __register_exitproc
040060fc g     F .text	00000258 __multiply
0400aa8c g     F .text	00000068 altera_avalon_jtag_uart_close
040094f0 g     F .text	00000028 __mulsi3
0400c59c g       *ABS*	00000000 __ram_rwdata_start
0400c200 g       *ABS*	00000000 __ram_rodata_start
0400fa80 g     O .bss	00000028 __malloc_current_mallinfo
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
04006984 g     F .text	00000144 __d2b
0400a5c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400bd58 g     F .text	000000d4 alt_get_fd
040099fc g     F .text	000000d0 __fpcmp_parts_d
040076c0 g     F .text	00000064 _close_r
0400be78 g     F .text	0000007c memcmp
0400a680 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0400fd38 g       *ABS*	00000000 __alt_stack_base
0400a6d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040024c8 g     F .text	00000174 __swsetup_r
04008d7c g     F .text	000001b4 __divdf3
0400425c g     F .text	000000fc __sfp
04006be0 g     F .text	0000007c __copybits
0400c9a8 g     O .rwdata	00000408 __malloc_av_
04004364 g     F .text	00000004 __sinit_lock_release
04008a98 g     F .text	000002e4 __muldf3
040073a4 g     F .text	00000054 __sread
0400bc44 g     F .text	00000114 alt_find_file
0400b1cc g     F .text	000000a0 alt_dev_llist_insert
0400a118 g     F .text	00000020 __malloc_lock
0400a31c g     F .text	000000b0 sbrk
04003e94 g     F .text	000001e8 _fflush_r
040075f4 g     F .text	000000cc _calloc_r
0400fa4c g       *ABS*	00000000 __bss_start
04005bb4 g     F .text	000000dc memset
040001f4 g     F .text	00000274 main
0400fa70 g     O .bss	00000004 alt_envp
0400fa58 g     O .bss	00000004 __malloc_max_total_mem
0400a620 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040074dc g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
04007860 g     F .text	00000014 fclose
0400fba8 g     O .bss	00000190 _atexit0
04002878 g     F .text	0000161c _dtoa_r
0400506c g     F .text	00000784 _malloc_r
0400dfe0 g     O .rwdata	00000004 alt_errno
04004c88 g     F .text	000000a8 _fwalk
04009434 g     F .text	00000050 __divsi3
0400c454 g     O .rodata	00000014 __thenan_df
04004398 g     F .text	0000013c _malloc_trim_r
0400c200 g       *ABS*	00000000 __CTOR_END__
040074e4 g     F .text	000000a4 strcmp
0400c200 g       *ABS*	00000000 __flash_rodata_start
0400c200 g       *ABS*	00000000 __DTOR_LIST__
04008f8c g     F .text	0000005c __nedf2
0400a544 g     F .text	00000034 alt_irq_init
0400a29c g     F .text	00000080 alt_release_fd
0400c468 g     O .rodata	00000100 __clz_tab
0400fa4c g     O .bss	00000004 _PathLocale
0400be2c g     F .text	00000014 atexit
04007588 g     F .text	0000006c _write_r
04004e9c g     F .text	0000001c setlocale
0400dfbc g     O .rwdata	00000004 _impure_ptr
0400fa68 g     O .bss	00000004 alt_argc
0400b2c8 g     F .text	0000005c _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
040067dc g     F .text	00000060 __ulp
040072dc g     F .text	00000038 __isinfd
04004380 g     F .text	00000018 __fp_unlock_all
0400dfcc g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04004eb8 g     F .text	0000000c localeconv
0400b340 g     F .text	00000050 alt_ic_isr_register
0400dff4 g       *ABS*	00000000 _edata
0400fd38 g       *ABS*	00000000 _end
040001b8 g       *ABS*	00000000 __ram_exceptions_end
0400aaf4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0400b42c g     F .text	000000a0 alt_ic_irq_disable
040073f8 g     F .text	00000088 __swrite
0400dfc8 g     O .rwdata	00000004 __malloc_trim_threshold
0400bb94 g     F .text	00000020 altera_nios2_qsys_irq_init
0400be40 g     F .text	00000038 exit
04004d30 g     F .text	000000b8 _fwalk_reent
04006634 g     F .text	000001a8 __mdiff
04009484 g     F .text	0000005c __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400435c g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400c1c4 g     F .text	0000003c _exit
04007314 g     F .text	0000002c __isnand
0400b020 g     F .text	00000140 alt_alarm_start
04009518 g     F .text	00000110 __muldi3
04004ec4 g     F .text	000001a8 __smakebuf_r
04000568 g     F .text	0000008c strlen
0400b8a0 g     F .text	00000158 open
0400904c g     F .text	00000064 __gedf2
0400b324 g     F .text	0000001c alt_icache_flush_all
0400dfe8 g     O .rwdata	00000004 alt_priority_mask
0400b390 g     F .text	0000009c alt_ic_irq_enable
040024a4 g     F .text	00000024 __vfprintf_internal
04008a38 g     F .text	00000060 __subdf3
04006010 g     F .text	000000b0 __lo0bits
0400dfec g     O .rwdata	00000008 alt_alarm_list
0400b26c g     F .text	0000005c _do_ctors
04009ba4 g     F .text	000000cc close
04009efc g     F .text	00000080 alt_load
040096d4 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
04004360 g     F .text	00000004 __sinit_lock_acquire
04005d60 g     F .text	00000144 __multadd
04005d38 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08406e14 	ori	at,at,440
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001726 	beq	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00c10074 	movhi	r3,1025
 4000130:	18feaa04 	addi	r3,r3,-1368
 4000134:	e0bffd17 	ldw	r2,-12(fp)
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	1885883a 	add	r2,r3,r2
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	01010074 	movhi	r4,1025
 4000148:	213eaa04 	addi	r4,r4,-1368
 400014c:	e0bffd17 	ldw	r2,-12(fp)
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	2085883a 	add	r2,r4,r2
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400017c:	e0bffb17 	ldw	r2,-20(fp)
 4000180:	103fe31e 	bne	r2,zero,4000110 <__alt_data_end+0xfe000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffc17 	ldw	r2,-16(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <__alt_data_end+0xfe00011c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a4:	e037883a 	mov	sp,fp
 40001a8:	dfc00117 	ldw	ra,4(sp)
 40001ac:	df000017 	ldw	fp,0(sp)
 40001b0:	dec00204 	addi	sp,sp,8
 40001b4:	f800283a 	ret

Disassembly of section .text:

040001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001b8:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001c0:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 40001c4:	d697ee14 	ori	gp,gp,24504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001c8:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001cc:	10be9314 	ori	r2,r2,64076

    movhi r3, %hi(__bss_end)
 40001d0:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001d4:	18ff4e14 	ori	r3,r3,64824

    beq r2, r3, 1f
 40001d8:	10c00326 	beq	r2,r3,40001e8 <_start+0x30>

0:
    stw zero, (r2)
 40001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001e4:	10fffd36 	bltu	r2,r3,40001dc <__alt_data_end+0xfe0001dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001e8:	4009efc0 	call	4009efc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001ec:	400a0a00 	call	400a0a0 <alt_main>

040001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001f0:	003fff06 	br	40001f0 <__alt_data_end+0xfe0001f0>

040001f4 <main>:
#define pccm_ctl (volatile char*) 0x00004030
#define pccm_rsp (volatile char*) 0x00004020


int main()
{
 40001f4:	defffb04 	addi	sp,sp,-20
 40001f8:	dfc00415 	stw	ra,16(sp)
 40001fc:	df000315 	stw	fp,12(sp)
 4000200:	df000304 	addi	fp,sp,12
	*pccm_ctl = 0;
 4000204:	00900c04 	movi	r2,16432
 4000208:	10000005 	stb	zero,0(r2)
	volatile char* pcm_mem_base = 0x00002000;
 400020c:	00880004 	movi	r2,8192
 4000210:	e0bffe15 	stw	r2,-8(fp)
	volatile alt_u16* pcm_mem_base_w = 0x00002000;
 4000214:	00880004 	movi	r2,8192
 4000218:	e0bfff15 	stw	r2,-4(fp)

	int i;

	for(i = 0; i < 4096; i += 1)
 400021c:	e03ffd15 	stw	zero,-12(fp)
 4000220:	00000806 	br	4000244 <main+0x50>
	{
		*(pcm_mem_base + i) = 3;
 4000224:	e0bffd17 	ldw	r2,-12(fp)
 4000228:	e0fffe17 	ldw	r3,-8(fp)
 400022c:	1885883a 	add	r2,r3,r2
 4000230:	00c000c4 	movi	r3,3
 4000234:	10c00005 	stb	r3,0(r2)
	volatile char* pcm_mem_base = 0x00002000;
	volatile alt_u16* pcm_mem_base_w = 0x00002000;

	int i;

	for(i = 0; i < 4096; i += 1)
 4000238:	e0bffd17 	ldw	r2,-12(fp)
 400023c:	10800044 	addi	r2,r2,1
 4000240:	e0bffd15 	stw	r2,-12(fp)
 4000244:	e0bffd17 	ldw	r2,-12(fp)
 4000248:	10840010 	cmplti	r2,r2,4096
 400024c:	103ff51e 	bne	r2,zero,4000224 <__alt_data_end+0xfe000224>
	{
		*(pcm_mem_base + i) = 3;
	}

	for(i = 0; i < 4096; i += 1)
 4000250:	e03ffd15 	stw	zero,-12(fp)
 4000254:	00001306 	br	40002a4 <main+0xb0>
	{
		if( *(pcm_mem_base + i) != 3)
 4000258:	e0bffd17 	ldw	r2,-12(fp)
 400025c:	e0fffe17 	ldw	r3,-8(fp)
 4000260:	1885883a 	add	r2,r3,r2
 4000264:	10800003 	ldbu	r2,0(r2)
 4000268:	10803fcc 	andi	r2,r2,255
 400026c:	1080201c 	xori	r2,r2,128
 4000270:	10bfe004 	addi	r2,r2,-128
 4000274:	108000e0 	cmpeqi	r2,r2,3
 4000278:	1000071e 	bne	r2,zero,4000298 <main+0xa4>
			printf("address: %x not initialized\n", pcm_mem_base + i);
 400027c:	e0bffd17 	ldw	r2,-12(fp)
 4000280:	e0fffe17 	ldw	r3,-8(fp)
 4000284:	1885883a 	add	r2,r3,r2
 4000288:	01010074 	movhi	r4,1025
 400028c:	21308004 	addi	r4,r4,-15872
 4000290:	100b883a 	mov	r5,r2
 4000294:	40004940 	call	4000494 <printf>
	for(i = 0; i < 4096; i += 1)
	{
		*(pcm_mem_base + i) = 3;
	}

	for(i = 0; i < 4096; i += 1)
 4000298:	e0bffd17 	ldw	r2,-12(fp)
 400029c:	10800044 	addi	r2,r2,1
 40002a0:	e0bffd15 	stw	r2,-12(fp)
 40002a4:	e0bffd17 	ldw	r2,-12(fp)
 40002a8:	10840010 	cmplti	r2,r2,4096
 40002ac:	103fea1e 	bne	r2,zero,4000258 <__alt_data_end+0xfe000258>
	{
		if( *(pcm_mem_base + i) != 3)
			printf("address: %x not initialized\n", pcm_mem_base + i);
	}

	printf("Completed mem init\n");
 40002b0:	01010074 	movhi	r4,1025
 40002b4:	21308804 	addi	r4,r4,-15840
 40002b8:	40005540 	call	4000554 <puts>

	*pccm_ctl = 2;
 40002bc:	00900c04 	movi	r2,16432
 40002c0:	00c00084 	movi	r3,2
 40002c4:	10c00005 	stb	r3,0(r2)
	while(*pccm_rsp != 4 && *pccm_rsp != 8);
 40002c8:	0001883a 	nop
 40002cc:	00900804 	movi	r2,16416
 40002d0:	10800003 	ldbu	r2,0(r2)
 40002d4:	10803fcc 	andi	r2,r2,255
 40002d8:	1080201c 	xori	r2,r2,128
 40002dc:	10bfe004 	addi	r2,r2,-128
 40002e0:	10800120 	cmpeqi	r2,r2,4
 40002e4:	1000071e 	bne	r2,zero,4000304 <main+0x110>
 40002e8:	00900804 	movi	r2,16416
 40002ec:	10800003 	ldbu	r2,0(r2)
 40002f0:	10803fcc 	andi	r2,r2,255
 40002f4:	1080201c 	xori	r2,r2,128
 40002f8:	10bfe004 	addi	r2,r2,-128
 40002fc:	10800218 	cmpnei	r2,r2,8
 4000300:	103ff21e 	bne	r2,zero,40002cc <__alt_data_end+0xfe0002cc>
	if(*pccm_rsp == 8)
 4000304:	00900804 	movi	r2,16416
 4000308:	10800003 	ldbu	r2,0(r2)
 400030c:	10803fcc 	andi	r2,r2,255
 4000310:	1080201c 	xori	r2,r2,128
 4000314:	10bfe004 	addi	r2,r2,-128
 4000318:	10800218 	cmpnei	r2,r2,8
 400031c:	1000051e 	bne	r2,zero,4000334 <main+0x140>
	{
		printf("ERROR");
 4000320:	01010074 	movhi	r4,1025
 4000324:	21308d04 	addi	r4,r4,-15820
 4000328:	40004940 	call	4000494 <printf>
		return 0;
 400032c:	0005883a 	mov	r2,zero
 4000330:	00004806 	br	4000454 <main+0x260>
	}
	*pccm_ctl = 4;
 4000334:	00900c04 	movi	r2,16432
 4000338:	00c00104 	movi	r3,4
 400033c:	10c00005 	stb	r3,0(r2)
	while(*pccm_rsp != 0);
 4000340:	0001883a 	nop
 4000344:	00900804 	movi	r2,16416
 4000348:	10800003 	ldbu	r2,0(r2)
 400034c:	10803fcc 	andi	r2,r2,255
 4000350:	1080201c 	xori	r2,r2,128
 4000354:	10bfe004 	addi	r2,r2,-128
 4000358:	103ffa1e 	bne	r2,zero,4000344 <__alt_data_end+0xfe000344>

	printf("Completed mem change\n");
 400035c:	01010074 	movhi	r4,1025
 4000360:	21308f04 	addi	r4,r4,-15812
 4000364:	40005540 	call	4000554 <puts>


	for(i = 0; i < 4096/2; i += 1)
 4000368:	e03ffd15 	stw	zero,-12(fp)
 400036c:	00001b06 	br	40003dc <main+0x1e8>
	{
		if( *(pcm_mem_base + i) != 1)
 4000370:	e0bffd17 	ldw	r2,-12(fp)
 4000374:	e0fffe17 	ldw	r3,-8(fp)
 4000378:	1885883a 	add	r2,r3,r2
 400037c:	10800003 	ldbu	r2,0(r2)
 4000380:	10803fcc 	andi	r2,r2,255
 4000384:	1080201c 	xori	r2,r2,128
 4000388:	10bfe004 	addi	r2,r2,-128
 400038c:	10800060 	cmpeqi	r2,r2,1
 4000390:	10000f1e 	bne	r2,zero,40003d0 <main+0x1dc>
			printf("address: %x : %x\n", pcm_mem_base + i, *(pcm_mem_base + i));
 4000394:	e0bffd17 	ldw	r2,-12(fp)
 4000398:	e0fffe17 	ldw	r3,-8(fp)
 400039c:	1887883a 	add	r3,r3,r2
 40003a0:	e0bffd17 	ldw	r2,-12(fp)
 40003a4:	e13ffe17 	ldw	r4,-8(fp)
 40003a8:	2085883a 	add	r2,r4,r2
 40003ac:	10800003 	ldbu	r2,0(r2)
 40003b0:	10803fcc 	andi	r2,r2,255
 40003b4:	1080201c 	xori	r2,r2,128
 40003b8:	10bfe004 	addi	r2,r2,-128
 40003bc:	01010074 	movhi	r4,1025
 40003c0:	21309504 	addi	r4,r4,-15788
 40003c4:	180b883a 	mov	r5,r3
 40003c8:	100d883a 	mov	r6,r2
 40003cc:	40004940 	call	4000494 <printf>
	while(*pccm_rsp != 0);

	printf("Completed mem change\n");


	for(i = 0; i < 4096/2; i += 1)
 40003d0:	e0bffd17 	ldw	r2,-12(fp)
 40003d4:	10800044 	addi	r2,r2,1
 40003d8:	e0bffd15 	stw	r2,-12(fp)
 40003dc:	e0bffd17 	ldw	r2,-12(fp)
 40003e0:	10820010 	cmplti	r2,r2,2048
 40003e4:	103fe21e 	bne	r2,zero,4000370 <__alt_data_end+0xfe000370>
		//else
		//	printf("address: %x changed, %i\n", pcm_mem_base + i, *(pcm_mem_base + i));
	}


	for(i = 0; i < 4096/2; i += 1)
 40003e8:	e03ffd15 	stw	zero,-12(fp)
 40003ec:	00001206 	br	4000438 <main+0x244>
	{

		printf("address: %x : %x\n", pcm_mem_base_w + i, *(pcm_mem_base_w + i));
 40003f0:	e0bffd17 	ldw	r2,-12(fp)
 40003f4:	1085883a 	add	r2,r2,r2
 40003f8:	e0ffff17 	ldw	r3,-4(fp)
 40003fc:	1887883a 	add	r3,r3,r2
 4000400:	e0bffd17 	ldw	r2,-12(fp)
 4000404:	1085883a 	add	r2,r2,r2
 4000408:	e13fff17 	ldw	r4,-4(fp)
 400040c:	2085883a 	add	r2,r4,r2
 4000410:	1080000b 	ldhu	r2,0(r2)
 4000414:	10bfffcc 	andi	r2,r2,65535
 4000418:	01010074 	movhi	r4,1025
 400041c:	21309504 	addi	r4,r4,-15788
 4000420:	180b883a 	mov	r5,r3
 4000424:	100d883a 	mov	r6,r2
 4000428:	40004940 	call	4000494 <printf>
		//else
		//	printf("address: %x changed, %i\n", pcm_mem_base + i, *(pcm_mem_base + i));
	}


	for(i = 0; i < 4096/2; i += 1)
 400042c:	e0bffd17 	ldw	r2,-12(fp)
 4000430:	10800044 	addi	r2,r2,1
 4000434:	e0bffd15 	stw	r2,-12(fp)
 4000438:	e0bffd17 	ldw	r2,-12(fp)
 400043c:	10820010 	cmplti	r2,r2,2048
 4000440:	103feb1e 	bne	r2,zero,40003f0 <__alt_data_end+0xfe0003f0>
		printf("address: %x : %x\n", pcm_mem_base_w + i, *(pcm_mem_base_w + i));
		//else
		//	printf("address: %x changed, %i\n", pcm_mem_base + i, *(pcm_mem_base + i));
	}

	printf("PROGRAM END\n");
 4000444:	01010074 	movhi	r4,1025
 4000448:	21309a04 	addi	r4,r4,-15768
 400044c:	40005540 	call	4000554 <puts>





  return 0;
 4000450:	0005883a 	mov	r2,zero
}
 4000454:	e037883a 	mov	sp,fp
 4000458:	dfc00117 	ldw	ra,4(sp)
 400045c:	df000017 	ldw	fp,0(sp)
 4000460:	dec00204 	addi	sp,sp,8
 4000464:	f800283a 	ret

04000468 <_printf_r>:
 4000468:	defffd04 	addi	sp,sp,-12
 400046c:	dfc00015 	stw	ra,0(sp)
 4000470:	d9800115 	stw	r6,4(sp)
 4000474:	d9c00215 	stw	r7,8(sp)
 4000478:	280d883a 	mov	r6,r5
 400047c:	21400217 	ldw	r5,8(r4)
 4000480:	d9c00104 	addi	r7,sp,4
 4000484:	40006280 	call	4000628 <___vfprintf_internal_r>
 4000488:	dfc00017 	ldw	ra,0(sp)
 400048c:	dec00304 	addi	sp,sp,12
 4000490:	f800283a 	ret

04000494 <printf>:
 4000494:	defffc04 	addi	sp,sp,-16
 4000498:	dfc00015 	stw	ra,0(sp)
 400049c:	d9400115 	stw	r5,4(sp)
 40004a0:	d9800215 	stw	r6,8(sp)
 40004a4:	d9c00315 	stw	r7,12(sp)
 40004a8:	00810074 	movhi	r2,1025
 40004ac:	10b7ef04 	addi	r2,r2,-8260
 40004b0:	10800017 	ldw	r2,0(r2)
 40004b4:	200b883a 	mov	r5,r4
 40004b8:	d9800104 	addi	r6,sp,4
 40004bc:	11000217 	ldw	r4,8(r2)
 40004c0:	40024a40 	call	40024a4 <__vfprintf_internal>
 40004c4:	dfc00017 	ldw	ra,0(sp)
 40004c8:	dec00404 	addi	sp,sp,16
 40004cc:	f800283a 	ret

040004d0 <_puts_r>:
 40004d0:	defff604 	addi	sp,sp,-40
 40004d4:	dc400815 	stw	r17,32(sp)
 40004d8:	2023883a 	mov	r17,r4
 40004dc:	2809883a 	mov	r4,r5
 40004e0:	dc000715 	stw	r16,28(sp)
 40004e4:	dfc00915 	stw	ra,36(sp)
 40004e8:	2821883a 	mov	r16,r5
 40004ec:	40005680 	call	4000568 <strlen>
 40004f0:	10c00044 	addi	r3,r2,1
 40004f4:	d8800115 	stw	r2,4(sp)
 40004f8:	89400217 	ldw	r5,8(r17)
 40004fc:	00810074 	movhi	r2,1025
 4000500:	10b09d04 	addi	r2,r2,-15756
 4000504:	d8800215 	stw	r2,8(sp)
 4000508:	00800044 	movi	r2,1
 400050c:	d8800315 	stw	r2,12(sp)
 4000510:	8809883a 	mov	r4,r17
 4000514:	00800084 	movi	r2,2
 4000518:	d9800404 	addi	r6,sp,16
 400051c:	dc000015 	stw	r16,0(sp)
 4000520:	d8c00615 	stw	r3,24(sp)
 4000524:	dec00415 	stw	sp,16(sp)
 4000528:	d8800515 	stw	r2,20(sp)
 400052c:	40047a40 	call	40047a4 <__sfvwrite_r>
 4000530:	1000061e 	bne	r2,zero,400054c <_puts_r+0x7c>
 4000534:	00800284 	movi	r2,10
 4000538:	dfc00917 	ldw	ra,36(sp)
 400053c:	dc400817 	ldw	r17,32(sp)
 4000540:	dc000717 	ldw	r16,28(sp)
 4000544:	dec00a04 	addi	sp,sp,40
 4000548:	f800283a 	ret
 400054c:	00bfffc4 	movi	r2,-1
 4000550:	003ff906 	br	4000538 <__alt_data_end+0xfe000538>

04000554 <puts>:
 4000554:	00810074 	movhi	r2,1025
 4000558:	10b7ef04 	addi	r2,r2,-8260
 400055c:	200b883a 	mov	r5,r4
 4000560:	11000017 	ldw	r4,0(r2)
 4000564:	40004d01 	jmpi	40004d0 <_puts_r>

04000568 <strlen>:
 4000568:	208000cc 	andi	r2,r4,3
 400056c:	10001f1e 	bne	r2,zero,40005ec <strlen+0x84>
 4000570:	20800017 	ldw	r2,0(r4)
 4000574:	01ffbff4 	movhi	r7,65279
 4000578:	39ffbfc4 	addi	r7,r7,-257
 400057c:	01a02074 	movhi	r6,32897
 4000580:	31a02004 	addi	r6,r6,-32640
 4000584:	11c7883a 	add	r3,r2,r7
 4000588:	0084303a 	nor	r2,zero,r2
 400058c:	1886703a 	and	r3,r3,r2
 4000590:	1986703a 	and	r3,r3,r6
 4000594:	2005883a 	mov	r2,r4
 4000598:	1800101e 	bne	r3,zero,40005dc <strlen+0x74>
 400059c:	10800104 	addi	r2,r2,4
 40005a0:	10c00017 	ldw	r3,0(r2)
 40005a4:	19cb883a 	add	r5,r3,r7
 40005a8:	00c6303a 	nor	r3,zero,r3
 40005ac:	28c6703a 	and	r3,r5,r3
 40005b0:	1986703a 	and	r3,r3,r6
 40005b4:	1800091e 	bne	r3,zero,40005dc <strlen+0x74>
 40005b8:	10800104 	addi	r2,r2,4
 40005bc:	10c00017 	ldw	r3,0(r2)
 40005c0:	19cb883a 	add	r5,r3,r7
 40005c4:	00c6303a 	nor	r3,zero,r3
 40005c8:	28c6703a 	and	r3,r5,r3
 40005cc:	1986703a 	and	r3,r3,r6
 40005d0:	183ff226 	beq	r3,zero,400059c <__alt_data_end+0xfe00059c>
 40005d4:	00000106 	br	40005dc <strlen+0x74>
 40005d8:	10800044 	addi	r2,r2,1
 40005dc:	10c00007 	ldb	r3,0(r2)
 40005e0:	183ffd1e 	bne	r3,zero,40005d8 <__alt_data_end+0xfe0005d8>
 40005e4:	1105c83a 	sub	r2,r2,r4
 40005e8:	f800283a 	ret
 40005ec:	2005883a 	mov	r2,r4
 40005f0:	003ffa06 	br	40005dc <__alt_data_end+0xfe0005dc>

040005f4 <__sprint_r>:
 40005f4:	30800217 	ldw	r2,8(r6)
 40005f8:	defffe04 	addi	sp,sp,-8
 40005fc:	dc000015 	stw	r16,0(sp)
 4000600:	dfc00115 	stw	ra,4(sp)
 4000604:	3021883a 	mov	r16,r6
 4000608:	10000226 	beq	r2,zero,4000614 <__sprint_r+0x20>
 400060c:	40047a40 	call	40047a4 <__sfvwrite_r>
 4000610:	80000215 	stw	zero,8(r16)
 4000614:	80000115 	stw	zero,4(r16)
 4000618:	dfc00117 	ldw	ra,4(sp)
 400061c:	dc000017 	ldw	r16,0(sp)
 4000620:	dec00204 	addi	sp,sp,8
 4000624:	f800283a 	ret

04000628 <___vfprintf_internal_r>:
 4000628:	defeb904 	addi	sp,sp,-1308
 400062c:	dc013d15 	stw	r16,1268(sp)
 4000630:	d9013015 	stw	r4,1216(sp)
 4000634:	dfc14615 	stw	ra,1304(sp)
 4000638:	df014515 	stw	fp,1300(sp)
 400063c:	ddc14415 	stw	r23,1296(sp)
 4000640:	dd814315 	stw	r22,1292(sp)
 4000644:	dd414215 	stw	r21,1288(sp)
 4000648:	dd014115 	stw	r20,1284(sp)
 400064c:	dcc14015 	stw	r19,1280(sp)
 4000650:	dc813f15 	stw	r18,1276(sp)
 4000654:	dc413e15 	stw	r17,1272(sp)
 4000658:	d9412915 	stw	r5,1188(sp)
 400065c:	3021883a 	mov	r16,r6
 4000660:	d9c12d15 	stw	r7,1204(sp)
 4000664:	4004e900 	call	4004e90 <_localeconv_r>
 4000668:	10800017 	ldw	r2,0(r2)
 400066c:	d9013017 	ldw	r4,1216(sp)
 4000670:	d8013315 	stw	zero,1228(sp)
 4000674:	d8813715 	stw	r2,1244(sp)
 4000678:	d8013415 	stw	zero,1232(sp)
 400067c:	20000226 	beq	r4,zero,4000688 <___vfprintf_internal_r+0x60>
 4000680:	20800e17 	ldw	r2,56(r4)
 4000684:	10014b26 	beq	r2,zero,4000bb4 <___vfprintf_internal_r+0x58c>
 4000688:	d8c12917 	ldw	r3,1188(sp)
 400068c:	1880030b 	ldhu	r2,12(r3)
 4000690:	10c0020c 	andi	r3,r2,8
 4000694:	18ffffcc 	andi	r3,r3,65535
 4000698:	18e0001c 	xori	r3,r3,32768
 400069c:	18e00004 	addi	r3,r3,-32768
 40006a0:	1800ed26 	beq	r3,zero,4000a58 <___vfprintf_internal_r+0x430>
 40006a4:	d9012917 	ldw	r4,1188(sp)
 40006a8:	20c00417 	ldw	r3,16(r4)
 40006ac:	1800ea26 	beq	r3,zero,4000a58 <___vfprintf_internal_r+0x430>
 40006b0:	1100068c 	andi	r4,r2,26
 40006b4:	00c00284 	movi	r3,10
 40006b8:	20c0f026 	beq	r4,r3,4000a7c <___vfprintf_internal_r+0x454>
 40006bc:	d9010dc4 	addi	r4,sp,1079
 40006c0:	d8810e04 	addi	r2,sp,1080
 40006c4:	dc413017 	ldw	r17,1216(sp)
 40006c8:	d8c00404 	addi	r3,sp,16
 40006cc:	d9012615 	stw	r4,1176(sp)
 40006d0:	1109c83a 	sub	r4,r2,r4
 40006d4:	d8812715 	stw	r2,1180(sp)
 40006d8:	d8c11b15 	stw	r3,1132(sp)
 40006dc:	d8011d15 	stw	zero,1140(sp)
 40006e0:	d8011c15 	stw	zero,1136(sp)
 40006e4:	802b883a 	mov	r21,r16
 40006e8:	d8013215 	stw	zero,1224(sp)
 40006ec:	d8013615 	stw	zero,1240(sp)
 40006f0:	d8013515 	stw	zero,1236(sp)
 40006f4:	d8012c15 	stw	zero,1200(sp)
 40006f8:	1813883a 	mov	r9,r3
 40006fc:	d9013915 	stw	r4,1252(sp)
 4000700:	a8800007 	ldb	r2,0(r21)
 4000704:	1002f326 	beq	r2,zero,40012d4 <___vfprintf_internal_r+0xcac>
 4000708:	00c00944 	movi	r3,37
 400070c:	a825883a 	mov	r18,r21
 4000710:	10c0021e 	bne	r2,r3,400071c <___vfprintf_internal_r+0xf4>
 4000714:	00001406 	br	4000768 <___vfprintf_internal_r+0x140>
 4000718:	10c00326 	beq	r2,r3,4000728 <___vfprintf_internal_r+0x100>
 400071c:	94800044 	addi	r18,r18,1
 4000720:	90800007 	ldb	r2,0(r18)
 4000724:	103ffc1e 	bne	r2,zero,4000718 <__alt_data_end+0xfe000718>
 4000728:	9561c83a 	sub	r16,r18,r21
 400072c:	80000e26 	beq	r16,zero,4000768 <___vfprintf_internal_r+0x140>
 4000730:	da011d17 	ldw	r8,1140(sp)
 4000734:	d8c11c17 	ldw	r3,1136(sp)
 4000738:	4d400015 	stw	r21,0(r9)
 400073c:	4c000115 	stw	r16,4(r9)
 4000740:	4411883a 	add	r8,r8,r16
 4000744:	18c00044 	addi	r3,r3,1
 4000748:	da011d15 	stw	r8,1140(sp)
 400074c:	d8c11c15 	stw	r3,1136(sp)
 4000750:	008001c4 	movi	r2,7
 4000754:	10c11016 	blt	r2,r3,4000b98 <___vfprintf_internal_r+0x570>
 4000758:	4a400204 	addi	r9,r9,8
 400075c:	d8812c17 	ldw	r2,1200(sp)
 4000760:	1405883a 	add	r2,r2,r16
 4000764:	d8812c15 	stw	r2,1200(sp)
 4000768:	90800007 	ldb	r2,0(r18)
 400076c:	1000ee26 	beq	r2,zero,4000b28 <___vfprintf_internal_r+0x500>
 4000770:	95400044 	addi	r21,r18,1
 4000774:	94800047 	ldb	r18,1(r18)
 4000778:	073fffc4 	movi	fp,-1
 400077c:	e007883a 	mov	r3,fp
 4000780:	d8012585 	stb	zero,1174(sp)
 4000784:	d8012e15 	stw	zero,1208(sp)
 4000788:	0021883a 	mov	r16,zero
 400078c:	05001604 	movi	r20,88
 4000790:	04c00244 	movi	r19,9
 4000794:	4839883a 	mov	fp,r9
 4000798:	ad400044 	addi	r21,r21,1
 400079c:	90bff804 	addi	r2,r18,-32
 40007a0:	a080462e 	bgeu	r20,r2,40008bc <___vfprintf_internal_r+0x294>
 40007a4:	e013883a 	mov	r9,fp
 40007a8:	9000df26 	beq	r18,zero,4000b28 <___vfprintf_internal_r+0x500>
 40007ac:	00c00044 	movi	r3,1
 40007b0:	d8c12815 	stw	r3,1184(sp)
 40007b4:	dc810405 	stb	r18,1040(sp)
 40007b8:	d8012585 	stb	zero,1174(sp)
 40007bc:	d8c12b15 	stw	r3,1196(sp)
 40007c0:	dcc10404 	addi	r19,sp,1040
 40007c4:	d8013115 	stw	zero,1220(sp)
 40007c8:	80c0008c 	andi	r3,r16,2
 40007cc:	d8c12a15 	stw	r3,1192(sp)
 40007d0:	18000326 	beq	r3,zero,40007e0 <___vfprintf_internal_r+0x1b8>
 40007d4:	d8c12817 	ldw	r3,1184(sp)
 40007d8:	18c00084 	addi	r3,r3,2
 40007dc:	d8c12815 	stw	r3,1184(sp)
 40007e0:	80c0210c 	andi	r3,r16,132
 40007e4:	d8c12f15 	stw	r3,1212(sp)
 40007e8:	1802251e 	bne	r3,zero,4001080 <___vfprintf_internal_r+0xa58>
 40007ec:	d9012e17 	ldw	r4,1208(sp)
 40007f0:	d8c12817 	ldw	r3,1184(sp)
 40007f4:	20edc83a 	sub	r22,r4,r3
 40007f8:	0582210e 	bge	zero,r22,4001080 <___vfprintf_internal_r+0xa58>
 40007fc:	02800404 	movi	r10,16
 4000800:	da011d17 	ldw	r8,1140(sp)
 4000804:	d8c11c17 	ldw	r3,1136(sp)
 4000808:	05c10074 	movhi	r23,1025
 400080c:	bdf0ae84 	addi	r23,r23,-15686
 4000810:	5580200e 	bge	r10,r22,4000894 <___vfprintf_internal_r+0x26c>
 4000814:	dc813815 	stw	r18,1248(sp)
 4000818:	5039883a 	mov	fp,r10
 400081c:	b825883a 	mov	r18,r23
 4000820:	050001c4 	movi	r20,7
 4000824:	b02f883a 	mov	r23,r22
 4000828:	802d883a 	mov	r22,r16
 400082c:	dc012917 	ldw	r16,1188(sp)
 4000830:	00000306 	br	4000840 <___vfprintf_internal_r+0x218>
 4000834:	bdfffc04 	addi	r23,r23,-16
 4000838:	4a400204 	addi	r9,r9,8
 400083c:	e5c0110e 	bge	fp,r23,4000884 <___vfprintf_internal_r+0x25c>
 4000840:	4c800015 	stw	r18,0(r9)
 4000844:	4f000115 	stw	fp,4(r9)
 4000848:	42000404 	addi	r8,r8,16
 400084c:	18c00044 	addi	r3,r3,1
 4000850:	da011d15 	stw	r8,1140(sp)
 4000854:	d8c11c15 	stw	r3,1136(sp)
 4000858:	a0fff60e 	bge	r20,r3,4000834 <__alt_data_end+0xfe000834>
 400085c:	8809883a 	mov	r4,r17
 4000860:	800b883a 	mov	r5,r16
 4000864:	d9811b04 	addi	r6,sp,1132
 4000868:	40005f40 	call	40005f4 <__sprint_r>
 400086c:	1000b41e 	bne	r2,zero,4000b40 <___vfprintf_internal_r+0x518>
 4000870:	bdfffc04 	addi	r23,r23,-16
 4000874:	da011d17 	ldw	r8,1140(sp)
 4000878:	d8c11c17 	ldw	r3,1136(sp)
 400087c:	da400404 	addi	r9,sp,16
 4000880:	e5ffef16 	blt	fp,r23,4000840 <__alt_data_end+0xfe000840>
 4000884:	b021883a 	mov	r16,r22
 4000888:	b82d883a 	mov	r22,r23
 400088c:	902f883a 	mov	r23,r18
 4000890:	dc813817 	ldw	r18,1248(sp)
 4000894:	4dc00015 	stw	r23,0(r9)
 4000898:	4d800115 	stw	r22,4(r9)
 400089c:	4591883a 	add	r8,r8,r22
 40008a0:	18c00044 	addi	r3,r3,1
 40008a4:	da011d15 	stw	r8,1140(sp)
 40008a8:	d8c11c15 	stw	r3,1136(sp)
 40008ac:	008001c4 	movi	r2,7
 40008b0:	10c3fe16 	blt	r2,r3,40018ac <___vfprintf_internal_r+0x1284>
 40008b4:	4a400204 	addi	r9,r9,8
 40008b8:	0001f306 	br	4001088 <___vfprintf_internal_r+0xa60>
 40008bc:	1085883a 	add	r2,r2,r2
 40008c0:	1085883a 	add	r2,r2,r2
 40008c4:	01010034 	movhi	r4,1024
 40008c8:	21023604 	addi	r4,r4,2264
 40008cc:	1105883a 	add	r2,r2,r4
 40008d0:	10800017 	ldw	r2,0(r2)
 40008d4:	1000683a 	jmp	r2
 40008d8:	04000fb4 	movhi	r16,62
 40008dc:	040007a4 	muli	r16,zero,30
 40008e0:	040007a4 	muli	r16,zero,30
 40008e4:	04000fcc 	andi	r16,zero,63
 40008e8:	040007a4 	muli	r16,zero,30
 40008ec:	040007a4 	muli	r16,zero,30
 40008f0:	040007a4 	muli	r16,zero,30
 40008f4:	040007a4 	muli	r16,zero,30
 40008f8:	040007a4 	muli	r16,zero,30
 40008fc:	040007a4 	muli	r16,zero,30
 4000900:	04000e84 	movi	r16,58
 4000904:	04001018 	cmpnei	r16,zero,64
 4000908:	040007a4 	muli	r16,zero,30
 400090c:	04000a4c 	andi	r16,zero,41
 4000910:	04000dec 	andhi	r16,zero,55
 4000914:	040007a4 	muli	r16,zero,30
 4000918:	04000fd8 	cmpnei	r16,zero,63
 400091c:	04000fe4 	muli	r16,zero,63
 4000920:	04000fe4 	muli	r16,zero,63
 4000924:	04000fe4 	muli	r16,zero,63
 4000928:	04000fe4 	muli	r16,zero,63
 400092c:	04000fe4 	muli	r16,zero,63
 4000930:	04000fe4 	muli	r16,zero,63
 4000934:	04000fe4 	muli	r16,zero,63
 4000938:	04000fe4 	muli	r16,zero,63
 400093c:	04000fe4 	muli	r16,zero,63
 4000940:	040007a4 	muli	r16,zero,30
 4000944:	040007a4 	muli	r16,zero,30
 4000948:	040007a4 	muli	r16,zero,30
 400094c:	040007a4 	muli	r16,zero,30
 4000950:	040007a4 	muli	r16,zero,30
 4000954:	040007a4 	muli	r16,zero,30
 4000958:	040007a4 	muli	r16,zero,30
 400095c:	040007a4 	muli	r16,zero,30
 4000960:	040007a4 	muli	r16,zero,30
 4000964:	040007a4 	muli	r16,zero,30
 4000968:	04000bbc 	xorhi	r16,zero,46
 400096c:	04000c7c 	xorhi	r16,zero,49
 4000970:	040007a4 	muli	r16,zero,30
 4000974:	04000c7c 	xorhi	r16,zero,49
 4000978:	040007a4 	muli	r16,zero,30
 400097c:	040007a4 	muli	r16,zero,30
 4000980:	040007a4 	muli	r16,zero,30
 4000984:	040007a4 	muli	r16,zero,30
 4000988:	04000d10 	cmplti	r16,zero,52
 400098c:	040007a4 	muli	r16,zero,30
 4000990:	040007a4 	muli	r16,zero,30
 4000994:	04000d1c 	xori	r16,zero,52
 4000998:	040007a4 	muli	r16,zero,30
 400099c:	040007a4 	muli	r16,zero,30
 40009a0:	040007a4 	muli	r16,zero,30
 40009a4:	040007a4 	muli	r16,zero,30
 40009a8:	040007a4 	muli	r16,zero,30
 40009ac:	04000d54 	movui	r16,53
 40009b0:	040007a4 	muli	r16,zero,30
 40009b4:	040007a4 	muli	r16,zero,30
 40009b8:	04000d90 	cmplti	r16,zero,54
 40009bc:	040007a4 	muli	r16,zero,30
 40009c0:	040007a4 	muli	r16,zero,30
 40009c4:	040007a4 	muli	r16,zero,30
 40009c8:	040007a4 	muli	r16,zero,30
 40009cc:	040007a4 	muli	r16,zero,30
 40009d0:	040007a4 	muli	r16,zero,30
 40009d4:	040007a4 	muli	r16,zero,30
 40009d8:	040007a4 	muli	r16,zero,30
 40009dc:	040007a4 	muli	r16,zero,30
 40009e0:	040007a4 	muli	r16,zero,30
 40009e4:	04001028 	cmpgeui	r16,zero,64
 40009e8:	0400105c 	xori	r16,zero,65
 40009ec:	04000c7c 	xorhi	r16,zero,49
 40009f0:	04000c7c 	xorhi	r16,zero,49
 40009f4:	04000c7c 	xorhi	r16,zero,49
 40009f8:	04000fa8 	cmpgeui	r16,zero,62
 40009fc:	0400105c 	xori	r16,zero,65
 4000a00:	040007a4 	muli	r16,zero,30
 4000a04:	040007a4 	muli	r16,zero,30
 4000a08:	04000e34 	movhi	r16,56
 4000a0c:	040007a4 	muli	r16,zero,30
 4000a10:	04000e4c 	andi	r16,zero,57
 4000a14:	04001068 	cmpgeui	r16,zero,65
 4000a18:	04000eac 	andhi	r16,zero,58
 4000a1c:	04000efc 	xorhi	r16,zero,59
 4000a20:	040007a4 	muli	r16,zero,30
 4000a24:	04000f08 	cmpgei	r16,zero,60
 4000a28:	040007a4 	muli	r16,zero,30
 4000a2c:	04001074 	movhi	r16,65
 4000a30:	040007a4 	muli	r16,zero,30
 4000a34:	040007a4 	muli	r16,zero,30
 4000a38:	04000f6c 	andhi	r16,zero,61
 4000a3c:	d9012e17 	ldw	r4,1208(sp)
 4000a40:	d8812d15 	stw	r2,1204(sp)
 4000a44:	0109c83a 	sub	r4,zero,r4
 4000a48:	d9012e15 	stw	r4,1208(sp)
 4000a4c:	84000114 	ori	r16,r16,4
 4000a50:	ac800007 	ldb	r18,0(r21)
 4000a54:	003f5006 	br	4000798 <__alt_data_end+0xfe000798>
 4000a58:	d9013017 	ldw	r4,1216(sp)
 4000a5c:	d9412917 	ldw	r5,1188(sp)
 4000a60:	40024c80 	call	40024c8 <__swsetup_r>
 4000a64:	10003d1e 	bne	r2,zero,4000b5c <___vfprintf_internal_r+0x534>
 4000a68:	d8c12917 	ldw	r3,1188(sp)
 4000a6c:	1880030b 	ldhu	r2,12(r3)
 4000a70:	00c00284 	movi	r3,10
 4000a74:	1100068c 	andi	r4,r2,26
 4000a78:	20ff101e 	bne	r4,r3,40006bc <__alt_data_end+0xfe0006bc>
 4000a7c:	d9012917 	ldw	r4,1188(sp)
 4000a80:	20c0038b 	ldhu	r3,14(r4)
 4000a84:	193fffcc 	andi	r4,r3,65535
 4000a88:	2120001c 	xori	r4,r4,32768
 4000a8c:	21200004 	addi	r4,r4,-32768
 4000a90:	203f0a16 	blt	r4,zero,40006bc <__alt_data_end+0xfe0006bc>
 4000a94:	d9012917 	ldw	r4,1188(sp)
 4000a98:	d9c12d17 	ldw	r7,1204(sp)
 4000a9c:	10bfff4c 	andi	r2,r2,65533
 4000aa0:	22800717 	ldw	r10,28(r4)
 4000aa4:	22400917 	ldw	r9,36(r4)
 4000aa8:	d9013017 	ldw	r4,1216(sp)
 4000aac:	02010004 	movi	r8,1024
 4000ab0:	d881070d 	sth	r2,1052(sp)
 4000ab4:	d9410404 	addi	r5,sp,1040
 4000ab8:	d8800404 	addi	r2,sp,16
 4000abc:	800d883a 	mov	r6,r16
 4000ac0:	d8c1078d 	sth	r3,1054(sp)
 4000ac4:	da810b15 	stw	r10,1068(sp)
 4000ac8:	da410d15 	stw	r9,1076(sp)
 4000acc:	d8810415 	stw	r2,1040(sp)
 4000ad0:	d8810815 	stw	r2,1056(sp)
 4000ad4:	da010615 	stw	r8,1048(sp)
 4000ad8:	da010915 	stw	r8,1060(sp)
 4000adc:	d8010a15 	stw	zero,1064(sp)
 4000ae0:	40006280 	call	4000628 <___vfprintf_internal_r>
 4000ae4:	d8812c15 	stw	r2,1200(sp)
 4000ae8:	10000416 	blt	r2,zero,4000afc <___vfprintf_internal_r+0x4d4>
 4000aec:	d9013017 	ldw	r4,1216(sp)
 4000af0:	d9410404 	addi	r5,sp,1040
 4000af4:	4003e940 	call	4003e94 <_fflush_r>
 4000af8:	1006501e 	bne	r2,zero,400243c <___vfprintf_internal_r+0x1e14>
 4000afc:	d881070b 	ldhu	r2,1052(sp)
 4000b00:	1080100c 	andi	r2,r2,64
 4000b04:	10bfffcc 	andi	r2,r2,65535
 4000b08:	10a0001c 	xori	r2,r2,32768
 4000b0c:	10a00004 	addi	r2,r2,-32768
 4000b10:	10001426 	beq	r2,zero,4000b64 <___vfprintf_internal_r+0x53c>
 4000b14:	d8c12917 	ldw	r3,1188(sp)
 4000b18:	1880030b 	ldhu	r2,12(r3)
 4000b1c:	10801014 	ori	r2,r2,64
 4000b20:	1880030d 	sth	r2,12(r3)
 4000b24:	00000f06 	br	4000b64 <___vfprintf_internal_r+0x53c>
 4000b28:	d8811d17 	ldw	r2,1140(sp)
 4000b2c:	10000426 	beq	r2,zero,4000b40 <___vfprintf_internal_r+0x518>
 4000b30:	d9013017 	ldw	r4,1216(sp)
 4000b34:	d9412917 	ldw	r5,1188(sp)
 4000b38:	d9811b04 	addi	r6,sp,1132
 4000b3c:	40005f40 	call	40005f4 <__sprint_r>
 4000b40:	d8c12917 	ldw	r3,1188(sp)
 4000b44:	1880030b 	ldhu	r2,12(r3)
 4000b48:	1080100c 	andi	r2,r2,64
 4000b4c:	10bfffcc 	andi	r2,r2,65535
 4000b50:	10a0001c 	xori	r2,r2,32768
 4000b54:	10a00004 	addi	r2,r2,-32768
 4000b58:	10000226 	beq	r2,zero,4000b64 <___vfprintf_internal_r+0x53c>
 4000b5c:	00bfffc4 	movi	r2,-1
 4000b60:	d8812c15 	stw	r2,1200(sp)
 4000b64:	d8812c17 	ldw	r2,1200(sp)
 4000b68:	dfc14617 	ldw	ra,1304(sp)
 4000b6c:	df014517 	ldw	fp,1300(sp)
 4000b70:	ddc14417 	ldw	r23,1296(sp)
 4000b74:	dd814317 	ldw	r22,1292(sp)
 4000b78:	dd414217 	ldw	r21,1288(sp)
 4000b7c:	dd014117 	ldw	r20,1284(sp)
 4000b80:	dcc14017 	ldw	r19,1280(sp)
 4000b84:	dc813f17 	ldw	r18,1276(sp)
 4000b88:	dc413e17 	ldw	r17,1272(sp)
 4000b8c:	dc013d17 	ldw	r16,1268(sp)
 4000b90:	dec14704 	addi	sp,sp,1308
 4000b94:	f800283a 	ret
 4000b98:	d9412917 	ldw	r5,1188(sp)
 4000b9c:	8809883a 	mov	r4,r17
 4000ba0:	d9811b04 	addi	r6,sp,1132
 4000ba4:	40005f40 	call	40005f4 <__sprint_r>
 4000ba8:	103fe51e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4000bac:	da400404 	addi	r9,sp,16
 4000bb0:	003eea06 	br	400075c <__alt_data_end+0xfe00075c>
 4000bb4:	40041500 	call	4004150 <__sinit>
 4000bb8:	003eb306 	br	4000688 <__alt_data_end+0xfe000688>
 4000bbc:	e013883a 	mov	r9,fp
 4000bc0:	84000414 	ori	r16,r16,16
 4000bc4:	1839883a 	mov	fp,r3
 4000bc8:	8080080c 	andi	r2,r16,32
 4000bcc:	10034426 	beq	r2,zero,40018e0 <___vfprintf_internal_r+0x12b8>
 4000bd0:	d8c12d17 	ldw	r3,1204(sp)
 4000bd4:	18800117 	ldw	r2,4(r3)
 4000bd8:	1dc00017 	ldw	r23,0(r3)
 4000bdc:	18c00204 	addi	r3,r3,8
 4000be0:	d8c12d15 	stw	r3,1204(sp)
 4000be4:	102d883a 	mov	r22,r2
 4000be8:	1003020e 	bge	r2,zero,40017f4 <___vfprintf_internal_r+0x11cc>
 4000bec:	05efc83a 	sub	r23,zero,r23
 4000bf0:	b804c03a 	cmpne	r2,r23,zero
 4000bf4:	05adc83a 	sub	r22,zero,r22
 4000bf8:	b0adc83a 	sub	r22,r22,r2
 4000bfc:	00800b44 	movi	r2,45
 4000c00:	d8812585 	stb	r2,1174(sp)
 4000c04:	00c00044 	movi	r3,1
 4000c08:	bd84b03a 	or	r2,r23,r22
 4000c0c:	e0000216 	blt	fp,zero,4000c18 <___vfprintf_internal_r+0x5f0>
 4000c10:	013fdfc4 	movi	r4,-129
 4000c14:	8120703a 	and	r16,r16,r4
 4000c18:	1001cc1e 	bne	r2,zero,400134c <___vfprintf_internal_r+0xd24>
 4000c1c:	e001cb1e 	bne	fp,zero,400134c <___vfprintf_internal_r+0xd24>
 4000c20:	18c03fcc 	andi	r3,r3,255
 4000c24:	1802ca1e 	bne	r3,zero,4001750 <___vfprintf_internal_r+0x1128>
 4000c28:	8080004c 	andi	r2,r16,1
 4000c2c:	1002c826 	beq	r2,zero,4001750 <___vfprintf_internal_r+0x1128>
 4000c30:	d8c13917 	ldw	r3,1252(sp)
 4000c34:	00800c04 	movi	r2,48
 4000c38:	d8810dc5 	stb	r2,1079(sp)
 4000c3c:	d8c12b15 	stw	r3,1196(sp)
 4000c40:	dcc10dc4 	addi	r19,sp,1079
 4000c44:	d8812b17 	ldw	r2,1196(sp)
 4000c48:	d8812815 	stw	r2,1184(sp)
 4000c4c:	1700010e 	bge	r2,fp,4000c54 <___vfprintf_internal_r+0x62c>
 4000c50:	df012815 	stw	fp,1184(sp)
 4000c54:	d8812583 	ldbu	r2,1174(sp)
 4000c58:	df013115 	stw	fp,1220(sp)
 4000c5c:	10803fcc 	andi	r2,r2,255
 4000c60:	1080201c 	xori	r2,r2,128
 4000c64:	10bfe004 	addi	r2,r2,-128
 4000c68:	103ed726 	beq	r2,zero,40007c8 <__alt_data_end+0xfe0007c8>
 4000c6c:	d8c12817 	ldw	r3,1184(sp)
 4000c70:	18c00044 	addi	r3,r3,1
 4000c74:	d8c12815 	stw	r3,1184(sp)
 4000c78:	003ed306 	br	40007c8 <__alt_data_end+0xfe0007c8>
 4000c7c:	8080020c 	andi	r2,r16,8
 4000c80:	e013883a 	mov	r9,fp
 4000c84:	1839883a 	mov	fp,r3
 4000c88:	1003a626 	beq	r2,zero,4001b24 <___vfprintf_internal_r+0x14fc>
 4000c8c:	d9012d17 	ldw	r4,1204(sp)
 4000c90:	25800017 	ldw	r22,0(r4)
 4000c94:	25000117 	ldw	r20,4(r4)
 4000c98:	21000204 	addi	r4,r4,8
 4000c9c:	d9012d15 	stw	r4,1204(sp)
 4000ca0:	dd813315 	stw	r22,1228(sp)
 4000ca4:	dd013415 	stw	r20,1232(sp)
 4000ca8:	b009883a 	mov	r4,r22
 4000cac:	a00b883a 	mov	r5,r20
 4000cb0:	da413c15 	stw	r9,1264(sp)
 4000cb4:	40072dc0 	call	40072dc <__isinfd>
 4000cb8:	da413c17 	ldw	r9,1264(sp)
 4000cbc:	b009883a 	mov	r4,r22
 4000cc0:	a00b883a 	mov	r5,r20
 4000cc4:	10041d26 	beq	r2,zero,4001d3c <___vfprintf_internal_r+0x1714>
 4000cc8:	000d883a 	mov	r6,zero
 4000ccc:	000f883a 	mov	r7,zero
 4000cd0:	40090b00 	call	40090b0 <__ltdf2>
 4000cd4:	da413c17 	ldw	r9,1264(sp)
 4000cd8:	1004da16 	blt	r2,zero,4002044 <___vfprintf_internal_r+0x1a1c>
 4000cdc:	d8812583 	ldbu	r2,1174(sp)
 4000ce0:	00c011c4 	movi	r3,71
 4000ce4:	1c83d116 	blt	r3,r18,4001c2c <___vfprintf_internal_r+0x1604>
 4000ce8:	04c10074 	movhi	r19,1025
 4000cec:	9cf09e04 	addi	r19,r19,-15752
 4000cf0:	00c000c4 	movi	r3,3
 4000cf4:	d8c12815 	stw	r3,1184(sp)
 4000cf8:	00ffdfc4 	movi	r3,-129
 4000cfc:	80e0703a 	and	r16,r16,r3
 4000d00:	d8c12817 	ldw	r3,1184(sp)
 4000d04:	d8013115 	stw	zero,1220(sp)
 4000d08:	d8c12b15 	stw	r3,1196(sp)
 4000d0c:	003fd306 	br	4000c5c <__alt_data_end+0xfe000c5c>
 4000d10:	84000214 	ori	r16,r16,8
 4000d14:	ac800007 	ldb	r18,0(r21)
 4000d18:	003e9f06 	br	4000798 <__alt_data_end+0xfe000798>
 4000d1c:	e013883a 	mov	r9,fp
 4000d20:	84000414 	ori	r16,r16,16
 4000d24:	1839883a 	mov	fp,r3
 4000d28:	8080080c 	andi	r2,r16,32
 4000d2c:	10031d26 	beq	r2,zero,40019a4 <___vfprintf_internal_r+0x137c>
 4000d30:	d8812d17 	ldw	r2,1204(sp)
 4000d34:	0007883a 	mov	r3,zero
 4000d38:	15c00017 	ldw	r23,0(r2)
 4000d3c:	15800117 	ldw	r22,4(r2)
 4000d40:	10800204 	addi	r2,r2,8
 4000d44:	d8812d15 	stw	r2,1204(sp)
 4000d48:	d8012585 	stb	zero,1174(sp)
 4000d4c:	bd84b03a 	or	r2,r23,r22
 4000d50:	003fae06 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4000d54:	e013883a 	mov	r9,fp
 4000d58:	84000414 	ori	r16,r16,16
 4000d5c:	1839883a 	mov	fp,r3
 4000d60:	8080080c 	andi	r2,r16,32
 4000d64:	1002e726 	beq	r2,zero,4001904 <___vfprintf_internal_r+0x12dc>
 4000d68:	d8c12d17 	ldw	r3,1204(sp)
 4000d6c:	d9012d17 	ldw	r4,1204(sp)
 4000d70:	1dc00017 	ldw	r23,0(r3)
 4000d74:	1d800117 	ldw	r22,4(r3)
 4000d78:	21000204 	addi	r4,r4,8
 4000d7c:	00c00044 	movi	r3,1
 4000d80:	d9012d15 	stw	r4,1204(sp)
 4000d84:	bd84b03a 	or	r2,r23,r22
 4000d88:	d8012585 	stb	zero,1174(sp)
 4000d8c:	003f9f06 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4000d90:	e013883a 	mov	r9,fp
 4000d94:	1839883a 	mov	fp,r3
 4000d98:	00c10074 	movhi	r3,1025
 4000d9c:	18f0a204 	addi	r3,r3,-15736
 4000da0:	d8c13615 	stw	r3,1240(sp)
 4000da4:	8080080c 	andi	r2,r16,32
 4000da8:	10007726 	beq	r2,zero,4000f88 <___vfprintf_internal_r+0x960>
 4000dac:	d9012d17 	ldw	r4,1204(sp)
 4000db0:	25c00017 	ldw	r23,0(r4)
 4000db4:	25800117 	ldw	r22,4(r4)
 4000db8:	21000204 	addi	r4,r4,8
 4000dbc:	d9012d15 	stw	r4,1204(sp)
 4000dc0:	8080004c 	andi	r2,r16,1
 4000dc4:	1002c226 	beq	r2,zero,40018d0 <___vfprintf_internal_r+0x12a8>
 4000dc8:	bd84b03a 	or	r2,r23,r22
 4000dcc:	10035d26 	beq	r2,zero,4001b44 <___vfprintf_internal_r+0x151c>
 4000dd0:	00c00c04 	movi	r3,48
 4000dd4:	d8c12505 	stb	r3,1172(sp)
 4000dd8:	dc812545 	stb	r18,1173(sp)
 4000ddc:	84000094 	ori	r16,r16,2
 4000de0:	00c00084 	movi	r3,2
 4000de4:	d8012585 	stb	zero,1174(sp)
 4000de8:	003f8806 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4000dec:	ac800007 	ldb	r18,0(r21)
 4000df0:	00c00a84 	movi	r3,42
 4000df4:	adc00044 	addi	r23,r21,1
 4000df8:	90c57526 	beq	r18,r3,40023d0 <___vfprintf_internal_r+0x1da8>
 4000dfc:	95bff404 	addi	r22,r18,-48
 4000e00:	0009883a 	mov	r4,zero
 4000e04:	9d84ff36 	bltu	r19,r22,4002204 <___vfprintf_internal_r+0x1bdc>
 4000e08:	01400284 	movi	r5,10
 4000e0c:	40094f00 	call	40094f0 <__mulsi3>
 4000e10:	bc800007 	ldb	r18,0(r23)
 4000e14:	b089883a 	add	r4,r22,r2
 4000e18:	bdc00044 	addi	r23,r23,1
 4000e1c:	95bff404 	addi	r22,r18,-48
 4000e20:	9dbff92e 	bgeu	r19,r22,4000e08 <__alt_data_end+0xfe000e08>
 4000e24:	2007883a 	mov	r3,r4
 4000e28:	20044316 	blt	r4,zero,4001f38 <___vfprintf_internal_r+0x1910>
 4000e2c:	b82b883a 	mov	r21,r23
 4000e30:	003e5a06 	br	400079c <__alt_data_end+0xfe00079c>
 4000e34:	ac800007 	ldb	r18,0(r21)
 4000e38:	01001b04 	movi	r4,108
 4000e3c:	a805883a 	mov	r2,r21
 4000e40:	91045526 	beq	r18,r4,4001f98 <___vfprintf_internal_r+0x1970>
 4000e44:	84000414 	ori	r16,r16,16
 4000e48:	003e5306 	br	4000798 <__alt_data_end+0xfe000798>
 4000e4c:	8080080c 	andi	r2,r16,32
 4000e50:	e013883a 	mov	r9,fp
 4000e54:	10034026 	beq	r2,zero,4001b58 <___vfprintf_internal_r+0x1530>
 4000e58:	d9012d17 	ldw	r4,1204(sp)
 4000e5c:	20800017 	ldw	r2,0(r4)
 4000e60:	d9012c17 	ldw	r4,1200(sp)
 4000e64:	2007d7fa 	srai	r3,r4,31
 4000e68:	d9012d17 	ldw	r4,1204(sp)
 4000e6c:	10c00115 	stw	r3,4(r2)
 4000e70:	21000104 	addi	r4,r4,4
 4000e74:	d9012d15 	stw	r4,1204(sp)
 4000e78:	d9012c17 	ldw	r4,1200(sp)
 4000e7c:	11000015 	stw	r4,0(r2)
 4000e80:	003e1f06 	br	4000700 <__alt_data_end+0xfe000700>
 4000e84:	d9012d17 	ldw	r4,1204(sp)
 4000e88:	21000017 	ldw	r4,0(r4)
 4000e8c:	d9012e15 	stw	r4,1208(sp)
 4000e90:	d9012d17 	ldw	r4,1204(sp)
 4000e94:	20800104 	addi	r2,r4,4
 4000e98:	d9012e17 	ldw	r4,1208(sp)
 4000e9c:	203ee716 	blt	r4,zero,4000a3c <__alt_data_end+0xfe000a3c>
 4000ea0:	d8812d15 	stw	r2,1204(sp)
 4000ea4:	ac800007 	ldb	r18,0(r21)
 4000ea8:	003e3b06 	br	4000798 <__alt_data_end+0xfe000798>
 4000eac:	e013883a 	mov	r9,fp
 4000eb0:	1839883a 	mov	fp,r3
 4000eb4:	d8c12d17 	ldw	r3,1204(sp)
 4000eb8:	00800c04 	movi	r2,48
 4000ebc:	01010074 	movhi	r4,1025
 4000ec0:	2130a704 	addi	r4,r4,-15716
 4000ec4:	1dc00017 	ldw	r23,0(r3)
 4000ec8:	18c00104 	addi	r3,r3,4
 4000ecc:	d8812505 	stb	r2,1172(sp)
 4000ed0:	00801e04 	movi	r2,120
 4000ed4:	d8812545 	stb	r2,1173(sp)
 4000ed8:	d8c12d15 	stw	r3,1204(sp)
 4000edc:	002d883a 	mov	r22,zero
 4000ee0:	84000094 	ori	r16,r16,2
 4000ee4:	d9013615 	stw	r4,1240(sp)
 4000ee8:	00c00084 	movi	r3,2
 4000eec:	04801e04 	movi	r18,120
 4000ef0:	b805883a 	mov	r2,r23
 4000ef4:	d8012585 	stb	zero,1174(sp)
 4000ef8:	003f4406 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4000efc:	84000814 	ori	r16,r16,32
 4000f00:	ac800007 	ldb	r18,0(r21)
 4000f04:	003e2406 	br	4000798 <__alt_data_end+0xfe000798>
 4000f08:	d8812d17 	ldw	r2,1204(sp)
 4000f0c:	d8012585 	stb	zero,1174(sp)
 4000f10:	e013883a 	mov	r9,fp
 4000f14:	14c00017 	ldw	r19,0(r2)
 4000f18:	1839883a 	mov	fp,r3
 4000f1c:	15c00104 	addi	r23,r2,4
 4000f20:	98045526 	beq	r19,zero,4002078 <___vfprintf_internal_r+0x1a50>
 4000f24:	9809883a 	mov	r4,r19
 4000f28:	18043116 	blt	r3,zero,4001ff0 <___vfprintf_internal_r+0x19c8>
 4000f2c:	000b883a 	mov	r5,zero
 4000f30:	180d883a 	mov	r6,r3
 4000f34:	da413c15 	stw	r9,1264(sp)
 4000f38:	40057f00 	call	40057f0 <memchr>
 4000f3c:	da413c17 	ldw	r9,1264(sp)
 4000f40:	10047a26 	beq	r2,zero,400212c <___vfprintf_internal_r+0x1b04>
 4000f44:	14c5c83a 	sub	r2,r2,r19
 4000f48:	d8812b15 	stw	r2,1196(sp)
 4000f4c:	e083d40e 	bge	fp,r2,4001ea0 <___vfprintf_internal_r+0x1878>
 4000f50:	df012815 	stw	fp,1184(sp)
 4000f54:	e004e416 	blt	fp,zero,40022e8 <___vfprintf_internal_r+0x1cc0>
 4000f58:	d8812583 	ldbu	r2,1174(sp)
 4000f5c:	df012b15 	stw	fp,1196(sp)
 4000f60:	ddc12d15 	stw	r23,1204(sp)
 4000f64:	d8013115 	stw	zero,1220(sp)
 4000f68:	003f3c06 	br	4000c5c <__alt_data_end+0xfe000c5c>
 4000f6c:	00810074 	movhi	r2,1025
 4000f70:	10b0a704 	addi	r2,r2,-15716
 4000f74:	d8813615 	stw	r2,1240(sp)
 4000f78:	8080080c 	andi	r2,r16,32
 4000f7c:	e013883a 	mov	r9,fp
 4000f80:	1839883a 	mov	fp,r3
 4000f84:	103f891e 	bne	r2,zero,4000dac <__alt_data_end+0xfe000dac>
 4000f88:	8080040c 	andi	r2,r16,16
 4000f8c:	1002c326 	beq	r2,zero,4001a9c <___vfprintf_internal_r+0x1474>
 4000f90:	d8812d17 	ldw	r2,1204(sp)
 4000f94:	002d883a 	mov	r22,zero
 4000f98:	15c00017 	ldw	r23,0(r2)
 4000f9c:	10800104 	addi	r2,r2,4
 4000fa0:	d8812d15 	stw	r2,1204(sp)
 4000fa4:	003f8606 	br	4000dc0 <__alt_data_end+0xfe000dc0>
 4000fa8:	84001014 	ori	r16,r16,64
 4000fac:	ac800007 	ldb	r18,0(r21)
 4000fb0:	003df906 	br	4000798 <__alt_data_end+0xfe000798>
 4000fb4:	d8812587 	ldb	r2,1174(sp)
 4000fb8:	1002e51e 	bne	r2,zero,4001b50 <___vfprintf_internal_r+0x1528>
 4000fbc:	00800804 	movi	r2,32
 4000fc0:	d8812585 	stb	r2,1174(sp)
 4000fc4:	ac800007 	ldb	r18,0(r21)
 4000fc8:	003df306 	br	4000798 <__alt_data_end+0xfe000798>
 4000fcc:	84000054 	ori	r16,r16,1
 4000fd0:	ac800007 	ldb	r18,0(r21)
 4000fd4:	003df006 	br	4000798 <__alt_data_end+0xfe000798>
 4000fd8:	84002014 	ori	r16,r16,128
 4000fdc:	ac800007 	ldb	r18,0(r21)
 4000fe0:	003ded06 	br	4000798 <__alt_data_end+0xfe000798>
 4000fe4:	0009883a 	mov	r4,zero
 4000fe8:	95bff404 	addi	r22,r18,-48
 4000fec:	182f883a 	mov	r23,r3
 4000ff0:	01400284 	movi	r5,10
 4000ff4:	40094f00 	call	40094f0 <__mulsi3>
 4000ff8:	ac800007 	ldb	r18,0(r21)
 4000ffc:	1589883a 	add	r4,r2,r22
 4001000:	ad400044 	addi	r21,r21,1
 4001004:	95bff404 	addi	r22,r18,-48
 4001008:	9dbff92e 	bgeu	r19,r22,4000ff0 <__alt_data_end+0xfe000ff0>
 400100c:	b807883a 	mov	r3,r23
 4001010:	d9012e15 	stw	r4,1208(sp)
 4001014:	003de106 	br	400079c <__alt_data_end+0xfe00079c>
 4001018:	00800ac4 	movi	r2,43
 400101c:	d8812585 	stb	r2,1174(sp)
 4001020:	ac800007 	ldb	r18,0(r21)
 4001024:	003ddc06 	br	4000798 <__alt_data_end+0xfe000798>
 4001028:	d8c12d17 	ldw	r3,1204(sp)
 400102c:	d9012d17 	ldw	r4,1204(sp)
 4001030:	e013883a 	mov	r9,fp
 4001034:	18800017 	ldw	r2,0(r3)
 4001038:	21000104 	addi	r4,r4,4
 400103c:	00c00044 	movi	r3,1
 4001040:	d8c12815 	stw	r3,1184(sp)
 4001044:	d8012585 	stb	zero,1174(sp)
 4001048:	d8810405 	stb	r2,1040(sp)
 400104c:	d9012d15 	stw	r4,1204(sp)
 4001050:	d8c12b15 	stw	r3,1196(sp)
 4001054:	dcc10404 	addi	r19,sp,1040
 4001058:	003dda06 	br	40007c4 <__alt_data_end+0xfe0007c4>
 400105c:	e013883a 	mov	r9,fp
 4001060:	1839883a 	mov	fp,r3
 4001064:	003ed806 	br	4000bc8 <__alt_data_end+0xfe000bc8>
 4001068:	e013883a 	mov	r9,fp
 400106c:	1839883a 	mov	fp,r3
 4001070:	003f2d06 	br	4000d28 <__alt_data_end+0xfe000d28>
 4001074:	e013883a 	mov	r9,fp
 4001078:	1839883a 	mov	fp,r3
 400107c:	003f3806 	br	4000d60 <__alt_data_end+0xfe000d60>
 4001080:	da011d17 	ldw	r8,1140(sp)
 4001084:	d8c11c17 	ldw	r3,1136(sp)
 4001088:	d8812587 	ldb	r2,1174(sp)
 400108c:	10000b26 	beq	r2,zero,40010bc <___vfprintf_internal_r+0xa94>
 4001090:	d8812584 	addi	r2,sp,1174
 4001094:	48800015 	stw	r2,0(r9)
 4001098:	00800044 	movi	r2,1
 400109c:	48800115 	stw	r2,4(r9)
 40010a0:	4091883a 	add	r8,r8,r2
 40010a4:	1887883a 	add	r3,r3,r2
 40010a8:	da011d15 	stw	r8,1140(sp)
 40010ac:	d8c11c15 	stw	r3,1136(sp)
 40010b0:	008001c4 	movi	r2,7
 40010b4:	10c18e16 	blt	r2,r3,40016f0 <___vfprintf_internal_r+0x10c8>
 40010b8:	4a400204 	addi	r9,r9,8
 40010bc:	d9012a17 	ldw	r4,1192(sp)
 40010c0:	20000b26 	beq	r4,zero,40010f0 <___vfprintf_internal_r+0xac8>
 40010c4:	d8812504 	addi	r2,sp,1172
 40010c8:	48800015 	stw	r2,0(r9)
 40010cc:	00800084 	movi	r2,2
 40010d0:	48800115 	stw	r2,4(r9)
 40010d4:	4091883a 	add	r8,r8,r2
 40010d8:	18c00044 	addi	r3,r3,1
 40010dc:	da011d15 	stw	r8,1140(sp)
 40010e0:	d8c11c15 	stw	r3,1136(sp)
 40010e4:	008001c4 	movi	r2,7
 40010e8:	10c17816 	blt	r2,r3,40016cc <___vfprintf_internal_r+0x10a4>
 40010ec:	4a400204 	addi	r9,r9,8
 40010f0:	d9012f17 	ldw	r4,1212(sp)
 40010f4:	00802004 	movi	r2,128
 40010f8:	2080fc26 	beq	r4,r2,40014ec <___vfprintf_internal_r+0xec4>
 40010fc:	d8813117 	ldw	r2,1220(sp)
 4001100:	d9012b17 	ldw	r4,1196(sp)
 4001104:	112fc83a 	sub	r23,r2,r4
 4001108:	05c02a0e 	bge	zero,r23,40011b4 <___vfprintf_internal_r+0xb8c>
 400110c:	07000404 	movi	fp,16
 4001110:	05010074 	movhi	r20,1025
 4001114:	a530b284 	addi	r20,r20,-15670
 4001118:	e5c01d0e 	bge	fp,r23,4001190 <___vfprintf_internal_r+0xb68>
 400111c:	dc812a15 	stw	r18,1192(sp)
 4001120:	058001c4 	movi	r22,7
 4001124:	a025883a 	mov	r18,r20
 4001128:	8029883a 	mov	r20,r16
 400112c:	dc012917 	ldw	r16,1188(sp)
 4001130:	00000306 	br	4001140 <___vfprintf_internal_r+0xb18>
 4001134:	bdfffc04 	addi	r23,r23,-16
 4001138:	4a400204 	addi	r9,r9,8
 400113c:	e5c0110e 	bge	fp,r23,4001184 <___vfprintf_internal_r+0xb5c>
 4001140:	4c800015 	stw	r18,0(r9)
 4001144:	4f000115 	stw	fp,4(r9)
 4001148:	42000404 	addi	r8,r8,16
 400114c:	18c00044 	addi	r3,r3,1
 4001150:	da011d15 	stw	r8,1140(sp)
 4001154:	d8c11c15 	stw	r3,1136(sp)
 4001158:	b0fff60e 	bge	r22,r3,4001134 <__alt_data_end+0xfe001134>
 400115c:	8809883a 	mov	r4,r17
 4001160:	800b883a 	mov	r5,r16
 4001164:	d9811b04 	addi	r6,sp,1132
 4001168:	40005f40 	call	40005f4 <__sprint_r>
 400116c:	103e741e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001170:	bdfffc04 	addi	r23,r23,-16
 4001174:	da011d17 	ldw	r8,1140(sp)
 4001178:	d8c11c17 	ldw	r3,1136(sp)
 400117c:	da400404 	addi	r9,sp,16
 4001180:	e5ffef16 	blt	fp,r23,4001140 <__alt_data_end+0xfe001140>
 4001184:	a021883a 	mov	r16,r20
 4001188:	9029883a 	mov	r20,r18
 400118c:	dc812a17 	ldw	r18,1192(sp)
 4001190:	4d000015 	stw	r20,0(r9)
 4001194:	4dc00115 	stw	r23,4(r9)
 4001198:	45d1883a 	add	r8,r8,r23
 400119c:	18c00044 	addi	r3,r3,1
 40011a0:	da011d15 	stw	r8,1140(sp)
 40011a4:	d8c11c15 	stw	r3,1136(sp)
 40011a8:	008001c4 	movi	r2,7
 40011ac:	10c13e16 	blt	r2,r3,40016a8 <___vfprintf_internal_r+0x1080>
 40011b0:	4a400204 	addi	r9,r9,8
 40011b4:	8080400c 	andi	r2,r16,256
 40011b8:	1000831e 	bne	r2,zero,40013c8 <___vfprintf_internal_r+0xda0>
 40011bc:	d8812b17 	ldw	r2,1196(sp)
 40011c0:	4cc00015 	stw	r19,0(r9)
 40011c4:	48800115 	stw	r2,4(r9)
 40011c8:	4091883a 	add	r8,r8,r2
 40011cc:	18c00044 	addi	r3,r3,1
 40011d0:	da011d15 	stw	r8,1140(sp)
 40011d4:	d8c11c15 	stw	r3,1136(sp)
 40011d8:	008001c4 	movi	r2,7
 40011dc:	10c05316 	blt	r2,r3,400132c <___vfprintf_internal_r+0xd04>
 40011e0:	4a400204 	addi	r9,r9,8
 40011e4:	8400010c 	andi	r16,r16,4
 40011e8:	80002e26 	beq	r16,zero,40012a4 <___vfprintf_internal_r+0xc7c>
 40011ec:	d8812e17 	ldw	r2,1208(sp)
 40011f0:	d8c12817 	ldw	r3,1184(sp)
 40011f4:	10e1c83a 	sub	r16,r2,r3
 40011f8:	04002a0e 	bge	zero,r16,40012a4 <___vfprintf_internal_r+0xc7c>
 40011fc:	04800404 	movi	r18,16
 4001200:	d8c11c17 	ldw	r3,1136(sp)
 4001204:	05c10074 	movhi	r23,1025
 4001208:	bdf0ae84 	addi	r23,r23,-15686
 400120c:	9400170e 	bge	r18,r16,400126c <___vfprintf_internal_r+0xc44>
 4001210:	04c001c4 	movi	r19,7
 4001214:	dd012917 	ldw	r20,1188(sp)
 4001218:	00000306 	br	4001228 <___vfprintf_internal_r+0xc00>
 400121c:	843ffc04 	addi	r16,r16,-16
 4001220:	4a400204 	addi	r9,r9,8
 4001224:	9400110e 	bge	r18,r16,400126c <___vfprintf_internal_r+0xc44>
 4001228:	4dc00015 	stw	r23,0(r9)
 400122c:	4c800115 	stw	r18,4(r9)
 4001230:	42000404 	addi	r8,r8,16
 4001234:	18c00044 	addi	r3,r3,1
 4001238:	da011d15 	stw	r8,1140(sp)
 400123c:	d8c11c15 	stw	r3,1136(sp)
 4001240:	98fff60e 	bge	r19,r3,400121c <__alt_data_end+0xfe00121c>
 4001244:	8809883a 	mov	r4,r17
 4001248:	a00b883a 	mov	r5,r20
 400124c:	d9811b04 	addi	r6,sp,1132
 4001250:	40005f40 	call	40005f4 <__sprint_r>
 4001254:	103e3a1e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001258:	843ffc04 	addi	r16,r16,-16
 400125c:	da011d17 	ldw	r8,1140(sp)
 4001260:	d8c11c17 	ldw	r3,1136(sp)
 4001264:	da400404 	addi	r9,sp,16
 4001268:	943fef16 	blt	r18,r16,4001228 <__alt_data_end+0xfe001228>
 400126c:	4dc00015 	stw	r23,0(r9)
 4001270:	4c000115 	stw	r16,4(r9)
 4001274:	8211883a 	add	r8,r16,r8
 4001278:	18c00044 	addi	r3,r3,1
 400127c:	da011d15 	stw	r8,1140(sp)
 4001280:	d8c11c15 	stw	r3,1136(sp)
 4001284:	008001c4 	movi	r2,7
 4001288:	10c0060e 	bge	r2,r3,40012a4 <___vfprintf_internal_r+0xc7c>
 400128c:	d9412917 	ldw	r5,1188(sp)
 4001290:	8809883a 	mov	r4,r17
 4001294:	d9811b04 	addi	r6,sp,1132
 4001298:	40005f40 	call	40005f4 <__sprint_r>
 400129c:	103e281e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 40012a0:	da011d17 	ldw	r8,1140(sp)
 40012a4:	dd012817 	ldw	r20,1184(sp)
 40012a8:	d9012e17 	ldw	r4,1208(sp)
 40012ac:	a100010e 	bge	r20,r4,40012b4 <___vfprintf_internal_r+0xc8c>
 40012b0:	2029883a 	mov	r20,r4
 40012b4:	d8812c17 	ldw	r2,1200(sp)
 40012b8:	1505883a 	add	r2,r2,r20
 40012bc:	d8812c15 	stw	r2,1200(sp)
 40012c0:	4000b91e 	bne	r8,zero,40015a8 <___vfprintf_internal_r+0xf80>
 40012c4:	d8011c15 	stw	zero,1136(sp)
 40012c8:	a8800007 	ldb	r2,0(r21)
 40012cc:	da400404 	addi	r9,sp,16
 40012d0:	103d0d1e 	bne	r2,zero,4000708 <__alt_data_end+0xfe000708>
 40012d4:	a825883a 	mov	r18,r21
 40012d8:	003d2306 	br	4000768 <__alt_data_end+0xfe000768>
 40012dc:	d9412917 	ldw	r5,1188(sp)
 40012e0:	8809883a 	mov	r4,r17
 40012e4:	d9811b04 	addi	r6,sp,1132
 40012e8:	40005f40 	call	40005f4 <__sprint_r>
 40012ec:	103e141e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 40012f0:	da011d17 	ldw	r8,1140(sp)
 40012f4:	da400404 	addi	r9,sp,16
 40012f8:	8080004c 	andi	r2,r16,1
 40012fc:	103fb926 	beq	r2,zero,40011e4 <__alt_data_end+0xfe0011e4>
 4001300:	d8c11c17 	ldw	r3,1136(sp)
 4001304:	d9013717 	ldw	r4,1244(sp)
 4001308:	00800044 	movi	r2,1
 400130c:	48800115 	stw	r2,4(r9)
 4001310:	49000015 	stw	r4,0(r9)
 4001314:	4091883a 	add	r8,r8,r2
 4001318:	1887883a 	add	r3,r3,r2
 400131c:	da011d15 	stw	r8,1140(sp)
 4001320:	d8c11c15 	stw	r3,1136(sp)
 4001324:	008001c4 	movi	r2,7
 4001328:	10ffad0e 	bge	r2,r3,40011e0 <__alt_data_end+0xfe0011e0>
 400132c:	d9412917 	ldw	r5,1188(sp)
 4001330:	8809883a 	mov	r4,r17
 4001334:	d9811b04 	addi	r6,sp,1132
 4001338:	40005f40 	call	40005f4 <__sprint_r>
 400133c:	103e001e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001340:	da400404 	addi	r9,sp,16
 4001344:	da011d17 	ldw	r8,1140(sp)
 4001348:	003fa606 	br	40011e4 <__alt_data_end+0xfe0011e4>
 400134c:	18803fcc 	andi	r2,r3,255
 4001350:	00c00044 	movi	r3,1
 4001354:	10c10126 	beq	r2,r3,400175c <___vfprintf_internal_r+0x1134>
 4001358:	00c00084 	movi	r3,2
 400135c:	10c0ed26 	beq	r2,r3,4001714 <___vfprintf_internal_r+0x10ec>
 4001360:	d8c10dc4 	addi	r3,sp,1079
 4001364:	b808d0fa 	srli	r4,r23,3
 4001368:	b00a977a 	slli	r5,r22,29
 400136c:	b02cd0fa 	srli	r22,r22,3
 4001370:	bdc001cc 	andi	r23,r23,7
 4001374:	b8800c04 	addi	r2,r23,48
 4001378:	292eb03a 	or	r23,r5,r4
 400137c:	18800005 	stb	r2,0(r3)
 4001380:	bd88b03a 	or	r4,r23,r22
 4001384:	1827883a 	mov	r19,r3
 4001388:	18ffffc4 	addi	r3,r3,-1
 400138c:	203ff51e 	bne	r4,zero,4001364 <__alt_data_end+0xfe001364>
 4001390:	8100004c 	andi	r4,r16,1
 4001394:	980b883a 	mov	r5,r19
 4001398:	20000726 	beq	r4,zero,40013b8 <___vfprintf_internal_r+0xd90>
 400139c:	10803fcc 	andi	r2,r2,255
 40013a0:	1080201c 	xori	r2,r2,128
 40013a4:	10bfe004 	addi	r2,r2,-128
 40013a8:	01000c04 	movi	r4,48
 40013ac:	11000226 	beq	r2,r4,40013b8 <___vfprintf_internal_r+0xd90>
 40013b0:	1827883a 	mov	r19,r3
 40013b4:	293fffc5 	stb	r4,-1(r5)
 40013b8:	d8812717 	ldw	r2,1180(sp)
 40013bc:	14c5c83a 	sub	r2,r2,r19
 40013c0:	d8812b15 	stw	r2,1196(sp)
 40013c4:	003e1f06 	br	4000c44 <__alt_data_end+0xfe000c44>
 40013c8:	00801944 	movi	r2,101
 40013cc:	14807c0e 	bge	r2,r18,40015c0 <___vfprintf_internal_r+0xf98>
 40013d0:	d9013317 	ldw	r4,1228(sp)
 40013d4:	d9413417 	ldw	r5,1232(sp)
 40013d8:	000d883a 	mov	r6,zero
 40013dc:	000f883a 	mov	r7,zero
 40013e0:	d8c13b15 	stw	r3,1260(sp)
 40013e4:	da013a15 	stw	r8,1256(sp)
 40013e8:	da413c15 	stw	r9,1264(sp)
 40013ec:	4008f8c0 	call	4008f8c <__nedf2>
 40013f0:	d8c13b17 	ldw	r3,1260(sp)
 40013f4:	da013a17 	ldw	r8,1256(sp)
 40013f8:	da413c17 	ldw	r9,1264(sp)
 40013fc:	1001001e 	bne	r2,zero,4001800 <___vfprintf_internal_r+0x11d8>
 4001400:	00810074 	movhi	r2,1025
 4001404:	10b0ae04 	addi	r2,r2,-15688
 4001408:	48800015 	stw	r2,0(r9)
 400140c:	00800044 	movi	r2,1
 4001410:	48800115 	stw	r2,4(r9)
 4001414:	4091883a 	add	r8,r8,r2
 4001418:	1887883a 	add	r3,r3,r2
 400141c:	da011d15 	stw	r8,1140(sp)
 4001420:	d8c11c15 	stw	r3,1136(sp)
 4001424:	008001c4 	movi	r2,7
 4001428:	10c20316 	blt	r2,r3,4001c38 <___vfprintf_internal_r+0x1610>
 400142c:	4a400204 	addi	r9,r9,8
 4001430:	d8812417 	ldw	r2,1168(sp)
 4001434:	d8c13217 	ldw	r3,1224(sp)
 4001438:	10c00216 	blt	r2,r3,4001444 <___vfprintf_internal_r+0xe1c>
 400143c:	8080004c 	andi	r2,r16,1
 4001440:	103f6826 	beq	r2,zero,40011e4 <__alt_data_end+0xfe0011e4>
 4001444:	d8c11c17 	ldw	r3,1136(sp)
 4001448:	d9013717 	ldw	r4,1244(sp)
 400144c:	00800044 	movi	r2,1
 4001450:	48800115 	stw	r2,4(r9)
 4001454:	49000015 	stw	r4,0(r9)
 4001458:	4091883a 	add	r8,r8,r2
 400145c:	1887883a 	add	r3,r3,r2
 4001460:	da011d15 	stw	r8,1140(sp)
 4001464:	d8c11c15 	stw	r3,1136(sp)
 4001468:	008001c4 	movi	r2,7
 400146c:	10c2ce16 	blt	r2,r3,4001fa8 <___vfprintf_internal_r+0x1980>
 4001470:	4a400204 	addi	r9,r9,8
 4001474:	d8813217 	ldw	r2,1224(sp)
 4001478:	14bfffc4 	addi	r18,r2,-1
 400147c:	04bf590e 	bge	zero,r18,40011e4 <__alt_data_end+0xfe0011e4>
 4001480:	04c00404 	movi	r19,16
 4001484:	d8c11c17 	ldw	r3,1136(sp)
 4001488:	05010074 	movhi	r20,1025
 400148c:	a530b284 	addi	r20,r20,-15670
 4001490:	9c818a0e 	bge	r19,r18,4001abc <___vfprintf_internal_r+0x1494>
 4001494:	058001c4 	movi	r22,7
 4001498:	ddc12917 	ldw	r23,1188(sp)
 400149c:	00000306 	br	40014ac <___vfprintf_internal_r+0xe84>
 40014a0:	4a400204 	addi	r9,r9,8
 40014a4:	94bffc04 	addi	r18,r18,-16
 40014a8:	9c81840e 	bge	r19,r18,4001abc <___vfprintf_internal_r+0x1494>
 40014ac:	4d000015 	stw	r20,0(r9)
 40014b0:	4cc00115 	stw	r19,4(r9)
 40014b4:	42000404 	addi	r8,r8,16
 40014b8:	18c00044 	addi	r3,r3,1
 40014bc:	da011d15 	stw	r8,1140(sp)
 40014c0:	d8c11c15 	stw	r3,1136(sp)
 40014c4:	b0fff60e 	bge	r22,r3,40014a0 <__alt_data_end+0xfe0014a0>
 40014c8:	8809883a 	mov	r4,r17
 40014cc:	b80b883a 	mov	r5,r23
 40014d0:	d9811b04 	addi	r6,sp,1132
 40014d4:	40005f40 	call	40005f4 <__sprint_r>
 40014d8:	103d991e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 40014dc:	da011d17 	ldw	r8,1140(sp)
 40014e0:	d8c11c17 	ldw	r3,1136(sp)
 40014e4:	da400404 	addi	r9,sp,16
 40014e8:	003fee06 	br	40014a4 <__alt_data_end+0xfe0014a4>
 40014ec:	d8812e17 	ldw	r2,1208(sp)
 40014f0:	d9012817 	ldw	r4,1184(sp)
 40014f4:	112fc83a 	sub	r23,r2,r4
 40014f8:	05ff000e 	bge	zero,r23,40010fc <__alt_data_end+0xfe0010fc>
 40014fc:	07000404 	movi	fp,16
 4001500:	05010074 	movhi	r20,1025
 4001504:	a530b284 	addi	r20,r20,-15670
 4001508:	e5c01d0e 	bge	fp,r23,4001580 <___vfprintf_internal_r+0xf58>
 400150c:	dc812a15 	stw	r18,1192(sp)
 4001510:	058001c4 	movi	r22,7
 4001514:	a025883a 	mov	r18,r20
 4001518:	8029883a 	mov	r20,r16
 400151c:	dc012917 	ldw	r16,1188(sp)
 4001520:	00000306 	br	4001530 <___vfprintf_internal_r+0xf08>
 4001524:	bdfffc04 	addi	r23,r23,-16
 4001528:	4a400204 	addi	r9,r9,8
 400152c:	e5c0110e 	bge	fp,r23,4001574 <___vfprintf_internal_r+0xf4c>
 4001530:	4c800015 	stw	r18,0(r9)
 4001534:	4f000115 	stw	fp,4(r9)
 4001538:	42000404 	addi	r8,r8,16
 400153c:	18c00044 	addi	r3,r3,1
 4001540:	da011d15 	stw	r8,1140(sp)
 4001544:	d8c11c15 	stw	r3,1136(sp)
 4001548:	b0fff60e 	bge	r22,r3,4001524 <__alt_data_end+0xfe001524>
 400154c:	8809883a 	mov	r4,r17
 4001550:	800b883a 	mov	r5,r16
 4001554:	d9811b04 	addi	r6,sp,1132
 4001558:	40005f40 	call	40005f4 <__sprint_r>
 400155c:	103d781e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001560:	bdfffc04 	addi	r23,r23,-16
 4001564:	da011d17 	ldw	r8,1140(sp)
 4001568:	d8c11c17 	ldw	r3,1136(sp)
 400156c:	da400404 	addi	r9,sp,16
 4001570:	e5ffef16 	blt	fp,r23,4001530 <__alt_data_end+0xfe001530>
 4001574:	a021883a 	mov	r16,r20
 4001578:	9029883a 	mov	r20,r18
 400157c:	dc812a17 	ldw	r18,1192(sp)
 4001580:	4d000015 	stw	r20,0(r9)
 4001584:	4dc00115 	stw	r23,4(r9)
 4001588:	45d1883a 	add	r8,r8,r23
 400158c:	18c00044 	addi	r3,r3,1
 4001590:	da011d15 	stw	r8,1140(sp)
 4001594:	d8c11c15 	stw	r3,1136(sp)
 4001598:	008001c4 	movi	r2,7
 400159c:	10c13616 	blt	r2,r3,4001a78 <___vfprintf_internal_r+0x1450>
 40015a0:	4a400204 	addi	r9,r9,8
 40015a4:	003ed506 	br	40010fc <__alt_data_end+0xfe0010fc>
 40015a8:	d9412917 	ldw	r5,1188(sp)
 40015ac:	8809883a 	mov	r4,r17
 40015b0:	d9811b04 	addi	r6,sp,1132
 40015b4:	40005f40 	call	40005f4 <__sprint_r>
 40015b8:	103f4226 	beq	r2,zero,40012c4 <__alt_data_end+0xfe0012c4>
 40015bc:	003d6006 	br	4000b40 <__alt_data_end+0xfe000b40>
 40015c0:	d9013217 	ldw	r4,1224(sp)
 40015c4:	00800044 	movi	r2,1
 40015c8:	4cc00015 	stw	r19,0(r9)
 40015cc:	1101000e 	bge	r2,r4,40019d0 <___vfprintf_internal_r+0x13a8>
 40015d0:	00800044 	movi	r2,1
 40015d4:	48800115 	stw	r2,4(r9)
 40015d8:	4091883a 	add	r8,r8,r2
 40015dc:	1887883a 	add	r3,r3,r2
 40015e0:	da011d15 	stw	r8,1140(sp)
 40015e4:	d8c11c15 	stw	r3,1136(sp)
 40015e8:	008001c4 	movi	r2,7
 40015ec:	10c10c16 	blt	r2,r3,4001a20 <___vfprintf_internal_r+0x13f8>
 40015f0:	4a400204 	addi	r9,r9,8
 40015f4:	d8813717 	ldw	r2,1244(sp)
 40015f8:	48800015 	stw	r2,0(r9)
 40015fc:	00800044 	movi	r2,1
 4001600:	48800115 	stw	r2,4(r9)
 4001604:	4091883a 	add	r8,r8,r2
 4001608:	1887883a 	add	r3,r3,r2
 400160c:	da011d15 	stw	r8,1140(sp)
 4001610:	d8c11c15 	stw	r3,1136(sp)
 4001614:	008001c4 	movi	r2,7
 4001618:	10c10a16 	blt	r2,r3,4001a44 <___vfprintf_internal_r+0x141c>
 400161c:	4c800204 	addi	r18,r9,8
 4001620:	d9013317 	ldw	r4,1228(sp)
 4001624:	d9413417 	ldw	r5,1232(sp)
 4001628:	000d883a 	mov	r6,zero
 400162c:	000f883a 	mov	r7,zero
 4001630:	d8c13b15 	stw	r3,1260(sp)
 4001634:	da013a15 	stw	r8,1256(sp)
 4001638:	4008f300 	call	4008f30 <__eqdf2>
 400163c:	d8c13b17 	ldw	r3,1260(sp)
 4001640:	da013a17 	ldw	r8,1256(sp)
 4001644:	1000ba26 	beq	r2,zero,4001930 <___vfprintf_internal_r+0x1308>
 4001648:	d9013217 	ldw	r4,1224(sp)
 400164c:	9cc00044 	addi	r19,r19,1
 4001650:	94c00015 	stw	r19,0(r18)
 4001654:	20bfffc4 	addi	r2,r4,-1
 4001658:	90800115 	stw	r2,4(r18)
 400165c:	4091883a 	add	r8,r8,r2
 4001660:	18c00044 	addi	r3,r3,1
 4001664:	da011d15 	stw	r8,1140(sp)
 4001668:	d8c11c15 	stw	r3,1136(sp)
 400166c:	008001c4 	movi	r2,7
 4001670:	10c0e216 	blt	r2,r3,40019fc <___vfprintf_internal_r+0x13d4>
 4001674:	94800204 	addi	r18,r18,8
 4001678:	d9013517 	ldw	r4,1236(sp)
 400167c:	d8811fc4 	addi	r2,sp,1151
 4001680:	90800015 	stw	r2,0(r18)
 4001684:	91000115 	stw	r4,4(r18)
 4001688:	4111883a 	add	r8,r8,r4
 400168c:	18c00044 	addi	r3,r3,1
 4001690:	da011d15 	stw	r8,1140(sp)
 4001694:	d8c11c15 	stw	r3,1136(sp)
 4001698:	008001c4 	movi	r2,7
 400169c:	10ff2316 	blt	r2,r3,400132c <__alt_data_end+0xfe00132c>
 40016a0:	92400204 	addi	r9,r18,8
 40016a4:	003ecf06 	br	40011e4 <__alt_data_end+0xfe0011e4>
 40016a8:	d9412917 	ldw	r5,1188(sp)
 40016ac:	8809883a 	mov	r4,r17
 40016b0:	d9811b04 	addi	r6,sp,1132
 40016b4:	40005f40 	call	40005f4 <__sprint_r>
 40016b8:	103d211e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 40016bc:	da011d17 	ldw	r8,1140(sp)
 40016c0:	d8c11c17 	ldw	r3,1136(sp)
 40016c4:	da400404 	addi	r9,sp,16
 40016c8:	003eba06 	br	40011b4 <__alt_data_end+0xfe0011b4>
 40016cc:	d9412917 	ldw	r5,1188(sp)
 40016d0:	8809883a 	mov	r4,r17
 40016d4:	d9811b04 	addi	r6,sp,1132
 40016d8:	40005f40 	call	40005f4 <__sprint_r>
 40016dc:	103d181e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 40016e0:	da011d17 	ldw	r8,1140(sp)
 40016e4:	d8c11c17 	ldw	r3,1136(sp)
 40016e8:	da400404 	addi	r9,sp,16
 40016ec:	003e8006 	br	40010f0 <__alt_data_end+0xfe0010f0>
 40016f0:	d9412917 	ldw	r5,1188(sp)
 40016f4:	8809883a 	mov	r4,r17
 40016f8:	d9811b04 	addi	r6,sp,1132
 40016fc:	40005f40 	call	40005f4 <__sprint_r>
 4001700:	103d0f1e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001704:	da011d17 	ldw	r8,1140(sp)
 4001708:	d8c11c17 	ldw	r3,1136(sp)
 400170c:	da400404 	addi	r9,sp,16
 4001710:	003e6a06 	br	40010bc <__alt_data_end+0xfe0010bc>
 4001714:	d9413617 	ldw	r5,1240(sp)
 4001718:	d8810dc4 	addi	r2,sp,1079
 400171c:	b8c003cc 	andi	r3,r23,15
 4001720:	b008973a 	slli	r4,r22,28
 4001724:	28c7883a 	add	r3,r5,r3
 4001728:	b82ed13a 	srli	r23,r23,4
 400172c:	18c00003 	ldbu	r3,0(r3)
 4001730:	b02cd13a 	srli	r22,r22,4
 4001734:	25eeb03a 	or	r23,r4,r23
 4001738:	10c00005 	stb	r3,0(r2)
 400173c:	bd86b03a 	or	r3,r23,r22
 4001740:	1027883a 	mov	r19,r2
 4001744:	10bfffc4 	addi	r2,r2,-1
 4001748:	183ff41e 	bne	r3,zero,400171c <__alt_data_end+0xfe00171c>
 400174c:	003f1a06 	br	40013b8 <__alt_data_end+0xfe0013b8>
 4001750:	d8012b15 	stw	zero,1196(sp)
 4001754:	dcc10e04 	addi	r19,sp,1080
 4001758:	003d3a06 	br	4000c44 <__alt_data_end+0xfe000c44>
 400175c:	b0025426 	beq	r22,zero,40020b0 <___vfprintf_internal_r+0x1a88>
 4001760:	b807883a 	mov	r3,r23
 4001764:	d8810dc4 	addi	r2,sp,1079
 4001768:	882f883a 	mov	r23,r17
 400176c:	04c00244 	movi	r19,9
 4001770:	8023883a 	mov	r17,r16
 4001774:	da412815 	stw	r9,1184(sp)
 4001778:	1821883a 	mov	r16,r3
 400177c:	8009883a 	mov	r4,r16
 4001780:	b00b883a 	mov	r5,r22
 4001784:	01800284 	movi	r6,10
 4001788:	000f883a 	mov	r7,zero
 400178c:	1029883a 	mov	r20,r2
 4001790:	40080680 	call	4008068 <__umoddi3>
 4001794:	10800c04 	addi	r2,r2,48
 4001798:	8009883a 	mov	r4,r16
 400179c:	b00b883a 	mov	r5,r22
 40017a0:	a0800005 	stb	r2,0(r20)
 40017a4:	01800284 	movi	r6,10
 40017a8:	000f883a 	mov	r7,zero
 40017ac:	4007a180 	call	4007a18 <__udivdi3>
 40017b0:	1021883a 	mov	r16,r2
 40017b4:	182d883a 	mov	r22,r3
 40017b8:	a0bfffc4 	addi	r2,r20,-1
 40017bc:	183fef1e 	bne	r3,zero,400177c <__alt_data_end+0xfe00177c>
 40017c0:	9c3fee36 	bltu	r19,r16,400177c <__alt_data_end+0xfe00177c>
 40017c4:	da412817 	ldw	r9,1184(sp)
 40017c8:	8005883a 	mov	r2,r16
 40017cc:	8821883a 	mov	r16,r17
 40017d0:	b823883a 	mov	r17,r23
 40017d4:	102f883a 	mov	r23,r2
 40017d8:	d8812717 	ldw	r2,1180(sp)
 40017dc:	a4ffffc4 	addi	r19,r20,-1
 40017e0:	bdc00c04 	addi	r23,r23,48
 40017e4:	14c5c83a 	sub	r2,r2,r19
 40017e8:	a5ffffc5 	stb	r23,-1(r20)
 40017ec:	d8812b15 	stw	r2,1196(sp)
 40017f0:	003d1406 	br	4000c44 <__alt_data_end+0xfe000c44>
 40017f4:	00c00044 	movi	r3,1
 40017f8:	bd84b03a 	or	r2,r23,r22
 40017fc:	003d0306 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4001800:	dc812417 	ldw	r18,1168(sp)
 4001804:	0481140e 	bge	zero,r18,4001c58 <___vfprintf_internal_r+0x1630>
 4001808:	d9013217 	ldw	r4,1224(sp)
 400180c:	4cc00015 	stw	r19,0(r9)
 4001810:	9100ec16 	blt	r18,r4,4001bc4 <___vfprintf_internal_r+0x159c>
 4001814:	49000115 	stw	r4,4(r9)
 4001818:	4111883a 	add	r8,r8,r4
 400181c:	18c00044 	addi	r3,r3,1
 4001820:	da011d15 	stw	r8,1140(sp)
 4001824:	d8c11c15 	stw	r3,1136(sp)
 4001828:	008001c4 	movi	r2,7
 400182c:	10c23616 	blt	r2,r3,4002108 <___vfprintf_internal_r+0x1ae0>
 4001830:	4a400204 	addi	r9,r9,8
 4001834:	d8813217 	ldw	r2,1224(sp)
 4001838:	90a5c83a 	sub	r18,r18,r2
 400183c:	04beae0e 	bge	zero,r18,40012f8 <__alt_data_end+0xfe0012f8>
 4001840:	04c00404 	movi	r19,16
 4001844:	d8c11c17 	ldw	r3,1136(sp)
 4001848:	05010074 	movhi	r20,1025
 400184c:	a530b284 	addi	r20,r20,-15670
 4001850:	9c81dd0e 	bge	r19,r18,4001fc8 <___vfprintf_internal_r+0x19a0>
 4001854:	058001c4 	movi	r22,7
 4001858:	ddc12917 	ldw	r23,1188(sp)
 400185c:	00000306 	br	400186c <___vfprintf_internal_r+0x1244>
 4001860:	4a400204 	addi	r9,r9,8
 4001864:	94bffc04 	addi	r18,r18,-16
 4001868:	9c81d70e 	bge	r19,r18,4001fc8 <___vfprintf_internal_r+0x19a0>
 400186c:	4d000015 	stw	r20,0(r9)
 4001870:	4cc00115 	stw	r19,4(r9)
 4001874:	42000404 	addi	r8,r8,16
 4001878:	18c00044 	addi	r3,r3,1
 400187c:	da011d15 	stw	r8,1140(sp)
 4001880:	d8c11c15 	stw	r3,1136(sp)
 4001884:	b0fff60e 	bge	r22,r3,4001860 <__alt_data_end+0xfe001860>
 4001888:	8809883a 	mov	r4,r17
 400188c:	b80b883a 	mov	r5,r23
 4001890:	d9811b04 	addi	r6,sp,1132
 4001894:	40005f40 	call	40005f4 <__sprint_r>
 4001898:	103ca91e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 400189c:	da011d17 	ldw	r8,1140(sp)
 40018a0:	d8c11c17 	ldw	r3,1136(sp)
 40018a4:	da400404 	addi	r9,sp,16
 40018a8:	003fee06 	br	4001864 <__alt_data_end+0xfe001864>
 40018ac:	d9412917 	ldw	r5,1188(sp)
 40018b0:	8809883a 	mov	r4,r17
 40018b4:	d9811b04 	addi	r6,sp,1132
 40018b8:	40005f40 	call	40005f4 <__sprint_r>
 40018bc:	103ca01e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 40018c0:	da011d17 	ldw	r8,1140(sp)
 40018c4:	d8c11c17 	ldw	r3,1136(sp)
 40018c8:	da400404 	addi	r9,sp,16
 40018cc:	003dee06 	br	4001088 <__alt_data_end+0xfe001088>
 40018d0:	00c00084 	movi	r3,2
 40018d4:	bd84b03a 	or	r2,r23,r22
 40018d8:	d8012585 	stb	zero,1174(sp)
 40018dc:	003ccb06 	br	4000c0c <__alt_data_end+0xfe000c0c>
 40018e0:	8080040c 	andi	r2,r16,16
 40018e4:	1000ae26 	beq	r2,zero,4001ba0 <___vfprintf_internal_r+0x1578>
 40018e8:	d9012d17 	ldw	r4,1204(sp)
 40018ec:	25c00017 	ldw	r23,0(r4)
 40018f0:	21000104 	addi	r4,r4,4
 40018f4:	d9012d15 	stw	r4,1204(sp)
 40018f8:	b82dd7fa 	srai	r22,r23,31
 40018fc:	b005883a 	mov	r2,r22
 4001900:	003cb906 	br	4000be8 <__alt_data_end+0xfe000be8>
 4001904:	8080040c 	andi	r2,r16,16
 4001908:	10007026 	beq	r2,zero,4001acc <___vfprintf_internal_r+0x14a4>
 400190c:	d8812d17 	ldw	r2,1204(sp)
 4001910:	002d883a 	mov	r22,zero
 4001914:	00c00044 	movi	r3,1
 4001918:	15c00017 	ldw	r23,0(r2)
 400191c:	10800104 	addi	r2,r2,4
 4001920:	d8812d15 	stw	r2,1204(sp)
 4001924:	d8012585 	stb	zero,1174(sp)
 4001928:	b805883a 	mov	r2,r23
 400192c:	003cb706 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4001930:	d8813217 	ldw	r2,1224(sp)
 4001934:	14ffffc4 	addi	r19,r2,-1
 4001938:	04ff4f0e 	bge	zero,r19,4001678 <__alt_data_end+0xfe001678>
 400193c:	05800404 	movi	r22,16
 4001940:	05010074 	movhi	r20,1025
 4001944:	a530b284 	addi	r20,r20,-15670
 4001948:	b4c0470e 	bge	r22,r19,4001a68 <___vfprintf_internal_r+0x1440>
 400194c:	05c001c4 	movi	r23,7
 4001950:	df012917 	ldw	fp,1188(sp)
 4001954:	00000306 	br	4001964 <___vfprintf_internal_r+0x133c>
 4001958:	94800204 	addi	r18,r18,8
 400195c:	9cfffc04 	addi	r19,r19,-16
 4001960:	b4c0410e 	bge	r22,r19,4001a68 <___vfprintf_internal_r+0x1440>
 4001964:	95000015 	stw	r20,0(r18)
 4001968:	95800115 	stw	r22,4(r18)
 400196c:	42000404 	addi	r8,r8,16
 4001970:	18c00044 	addi	r3,r3,1
 4001974:	da011d15 	stw	r8,1140(sp)
 4001978:	d8c11c15 	stw	r3,1136(sp)
 400197c:	b8fff60e 	bge	r23,r3,4001958 <__alt_data_end+0xfe001958>
 4001980:	8809883a 	mov	r4,r17
 4001984:	e00b883a 	mov	r5,fp
 4001988:	d9811b04 	addi	r6,sp,1132
 400198c:	40005f40 	call	40005f4 <__sprint_r>
 4001990:	103c6b1e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001994:	da011d17 	ldw	r8,1140(sp)
 4001998:	d8c11c17 	ldw	r3,1136(sp)
 400199c:	dc800404 	addi	r18,sp,16
 40019a0:	003fee06 	br	400195c <__alt_data_end+0xfe00195c>
 40019a4:	8080040c 	andi	r2,r16,16
 40019a8:	10005326 	beq	r2,zero,4001af8 <___vfprintf_internal_r+0x14d0>
 40019ac:	d8c12d17 	ldw	r3,1204(sp)
 40019b0:	002d883a 	mov	r22,zero
 40019b4:	1dc00017 	ldw	r23,0(r3)
 40019b8:	18c00104 	addi	r3,r3,4
 40019bc:	d8c12d15 	stw	r3,1204(sp)
 40019c0:	b805883a 	mov	r2,r23
 40019c4:	0007883a 	mov	r3,zero
 40019c8:	d8012585 	stb	zero,1174(sp)
 40019cc:	003c8f06 	br	4000c0c <__alt_data_end+0xfe000c0c>
 40019d0:	8088703a 	and	r4,r16,r2
 40019d4:	203efe1e 	bne	r4,zero,40015d0 <__alt_data_end+0xfe0015d0>
 40019d8:	48800115 	stw	r2,4(r9)
 40019dc:	42000044 	addi	r8,r8,1
 40019e0:	18c00044 	addi	r3,r3,1
 40019e4:	da011d15 	stw	r8,1140(sp)
 40019e8:	d8c11c15 	stw	r3,1136(sp)
 40019ec:	008001c4 	movi	r2,7
 40019f0:	10c00216 	blt	r2,r3,40019fc <___vfprintf_internal_r+0x13d4>
 40019f4:	4c800204 	addi	r18,r9,8
 40019f8:	003f1f06 	br	4001678 <__alt_data_end+0xfe001678>
 40019fc:	d9412917 	ldw	r5,1188(sp)
 4001a00:	8809883a 	mov	r4,r17
 4001a04:	d9811b04 	addi	r6,sp,1132
 4001a08:	40005f40 	call	40005f4 <__sprint_r>
 4001a0c:	103c4c1e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001a10:	dc800404 	addi	r18,sp,16
 4001a14:	da011d17 	ldw	r8,1140(sp)
 4001a18:	d8c11c17 	ldw	r3,1136(sp)
 4001a1c:	003f1606 	br	4001678 <__alt_data_end+0xfe001678>
 4001a20:	d9412917 	ldw	r5,1188(sp)
 4001a24:	8809883a 	mov	r4,r17
 4001a28:	d9811b04 	addi	r6,sp,1132
 4001a2c:	40005f40 	call	40005f4 <__sprint_r>
 4001a30:	103c431e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001a34:	da011d17 	ldw	r8,1140(sp)
 4001a38:	d8c11c17 	ldw	r3,1136(sp)
 4001a3c:	da400404 	addi	r9,sp,16
 4001a40:	003eec06 	br	40015f4 <__alt_data_end+0xfe0015f4>
 4001a44:	d9412917 	ldw	r5,1188(sp)
 4001a48:	8809883a 	mov	r4,r17
 4001a4c:	d9811b04 	addi	r6,sp,1132
 4001a50:	40005f40 	call	40005f4 <__sprint_r>
 4001a54:	103c3a1e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001a58:	da011d17 	ldw	r8,1140(sp)
 4001a5c:	d8c11c17 	ldw	r3,1136(sp)
 4001a60:	dc800404 	addi	r18,sp,16
 4001a64:	003eee06 	br	4001620 <__alt_data_end+0xfe001620>
 4001a68:	95000015 	stw	r20,0(r18)
 4001a6c:	94c00115 	stw	r19,4(r18)
 4001a70:	44d1883a 	add	r8,r8,r19
 4001a74:	003efa06 	br	4001660 <__alt_data_end+0xfe001660>
 4001a78:	d9412917 	ldw	r5,1188(sp)
 4001a7c:	8809883a 	mov	r4,r17
 4001a80:	d9811b04 	addi	r6,sp,1132
 4001a84:	40005f40 	call	40005f4 <__sprint_r>
 4001a88:	103c2d1e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001a8c:	da011d17 	ldw	r8,1140(sp)
 4001a90:	d8c11c17 	ldw	r3,1136(sp)
 4001a94:	da400404 	addi	r9,sp,16
 4001a98:	003d9806 	br	40010fc <__alt_data_end+0xfe0010fc>
 4001a9c:	8080100c 	andi	r2,r16,64
 4001aa0:	10011626 	beq	r2,zero,4001efc <___vfprintf_internal_r+0x18d4>
 4001aa4:	d8c12d17 	ldw	r3,1204(sp)
 4001aa8:	002d883a 	mov	r22,zero
 4001aac:	1dc0000b 	ldhu	r23,0(r3)
 4001ab0:	18c00104 	addi	r3,r3,4
 4001ab4:	d8c12d15 	stw	r3,1204(sp)
 4001ab8:	003cc106 	br	4000dc0 <__alt_data_end+0xfe000dc0>
 4001abc:	4d000015 	stw	r20,0(r9)
 4001ac0:	4c800115 	stw	r18,4(r9)
 4001ac4:	4491883a 	add	r8,r8,r18
 4001ac8:	003dc006 	br	40011cc <__alt_data_end+0xfe0011cc>
 4001acc:	8080100c 	andi	r2,r16,64
 4001ad0:	10010126 	beq	r2,zero,4001ed8 <___vfprintf_internal_r+0x18b0>
 4001ad4:	d8c12d17 	ldw	r3,1204(sp)
 4001ad8:	002d883a 	mov	r22,zero
 4001adc:	1dc0000b 	ldhu	r23,0(r3)
 4001ae0:	18c00104 	addi	r3,r3,4
 4001ae4:	d8c12d15 	stw	r3,1204(sp)
 4001ae8:	b805883a 	mov	r2,r23
 4001aec:	00c00044 	movi	r3,1
 4001af0:	d8012585 	stb	zero,1174(sp)
 4001af4:	003c4506 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4001af8:	8080100c 	andi	r2,r16,64
 4001afc:	10010526 	beq	r2,zero,4001f14 <___vfprintf_internal_r+0x18ec>
 4001b00:	d9012d17 	ldw	r4,1204(sp)
 4001b04:	002d883a 	mov	r22,zero
 4001b08:	0007883a 	mov	r3,zero
 4001b0c:	25c0000b 	ldhu	r23,0(r4)
 4001b10:	21000104 	addi	r4,r4,4
 4001b14:	d9012d15 	stw	r4,1204(sp)
 4001b18:	b805883a 	mov	r2,r23
 4001b1c:	d8012585 	stb	zero,1174(sp)
 4001b20:	003c3a06 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4001b24:	d8812d17 	ldw	r2,1204(sp)
 4001b28:	15800017 	ldw	r22,0(r2)
 4001b2c:	15000117 	ldw	r20,4(r2)
 4001b30:	10800204 	addi	r2,r2,8
 4001b34:	d8812d15 	stw	r2,1204(sp)
 4001b38:	dd813315 	stw	r22,1228(sp)
 4001b3c:	dd013415 	stw	r20,1232(sp)
 4001b40:	003c5906 	br	4000ca8 <__alt_data_end+0xfe000ca8>
 4001b44:	00c00084 	movi	r3,2
 4001b48:	d8012585 	stb	zero,1174(sp)
 4001b4c:	003c2f06 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4001b50:	ac800007 	ldb	r18,0(r21)
 4001b54:	003b1006 	br	4000798 <__alt_data_end+0xfe000798>
 4001b58:	8080040c 	andi	r2,r16,16
 4001b5c:	1000091e 	bne	r2,zero,4001b84 <___vfprintf_internal_r+0x155c>
 4001b60:	8400100c 	andi	r16,r16,64
 4001b64:	80000726 	beq	r16,zero,4001b84 <___vfprintf_internal_r+0x155c>
 4001b68:	d8c12d17 	ldw	r3,1204(sp)
 4001b6c:	d9012c17 	ldw	r4,1200(sp)
 4001b70:	18800017 	ldw	r2,0(r3)
 4001b74:	18c00104 	addi	r3,r3,4
 4001b78:	d8c12d15 	stw	r3,1204(sp)
 4001b7c:	1100000d 	sth	r4,0(r2)
 4001b80:	003adf06 	br	4000700 <__alt_data_end+0xfe000700>
 4001b84:	d8c12d17 	ldw	r3,1204(sp)
 4001b88:	d9012c17 	ldw	r4,1200(sp)
 4001b8c:	18800017 	ldw	r2,0(r3)
 4001b90:	18c00104 	addi	r3,r3,4
 4001b94:	d8c12d15 	stw	r3,1204(sp)
 4001b98:	11000015 	stw	r4,0(r2)
 4001b9c:	003ad806 	br	4000700 <__alt_data_end+0xfe000700>
 4001ba0:	8080100c 	andi	r2,r16,64
 4001ba4:	1000c526 	beq	r2,zero,4001ebc <___vfprintf_internal_r+0x1894>
 4001ba8:	d8812d17 	ldw	r2,1204(sp)
 4001bac:	15c0000f 	ldh	r23,0(r2)
 4001bb0:	10800104 	addi	r2,r2,4
 4001bb4:	d8812d15 	stw	r2,1204(sp)
 4001bb8:	b82dd7fa 	srai	r22,r23,31
 4001bbc:	b005883a 	mov	r2,r22
 4001bc0:	003c0906 	br	4000be8 <__alt_data_end+0xfe000be8>
 4001bc4:	4c800115 	stw	r18,4(r9)
 4001bc8:	9211883a 	add	r8,r18,r8
 4001bcc:	18c00044 	addi	r3,r3,1
 4001bd0:	da011d15 	stw	r8,1140(sp)
 4001bd4:	d8c11c15 	stw	r3,1136(sp)
 4001bd8:	008001c4 	movi	r2,7
 4001bdc:	10c14016 	blt	r2,r3,40020e0 <___vfprintf_internal_r+0x1ab8>
 4001be0:	4a400204 	addi	r9,r9,8
 4001be4:	d8813717 	ldw	r2,1244(sp)
 4001be8:	9ca7883a 	add	r19,r19,r18
 4001bec:	48800015 	stw	r2,0(r9)
 4001bf0:	00800044 	movi	r2,1
 4001bf4:	48800115 	stw	r2,4(r9)
 4001bf8:	4091883a 	add	r8,r8,r2
 4001bfc:	1887883a 	add	r3,r3,r2
 4001c00:	da011d15 	stw	r8,1140(sp)
 4001c04:	d8c11c15 	stw	r3,1136(sp)
 4001c08:	008001c4 	movi	r2,7
 4001c0c:	10c12c16 	blt	r2,r3,40020c0 <___vfprintf_internal_r+0x1a98>
 4001c10:	4a400204 	addi	r9,r9,8
 4001c14:	d9013217 	ldw	r4,1224(sp)
 4001c18:	da011d17 	ldw	r8,1140(sp)
 4001c1c:	d8c11c17 	ldw	r3,1136(sp)
 4001c20:	24a5c83a 	sub	r18,r4,r18
 4001c24:	4cc00015 	stw	r19,0(r9)
 4001c28:	003fa506 	br	4001ac0 <__alt_data_end+0xfe001ac0>
 4001c2c:	04c10074 	movhi	r19,1025
 4001c30:	9cf09f04 	addi	r19,r19,-15748
 4001c34:	003c2e06 	br	4000cf0 <__alt_data_end+0xfe000cf0>
 4001c38:	d9412917 	ldw	r5,1188(sp)
 4001c3c:	8809883a 	mov	r4,r17
 4001c40:	d9811b04 	addi	r6,sp,1132
 4001c44:	40005f40 	call	40005f4 <__sprint_r>
 4001c48:	103bbd1e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001c4c:	da011d17 	ldw	r8,1140(sp)
 4001c50:	da400404 	addi	r9,sp,16
 4001c54:	003df606 	br	4001430 <__alt_data_end+0xfe001430>
 4001c58:	00810074 	movhi	r2,1025
 4001c5c:	10b0ae04 	addi	r2,r2,-15688
 4001c60:	48800015 	stw	r2,0(r9)
 4001c64:	00800044 	movi	r2,1
 4001c68:	48800115 	stw	r2,4(r9)
 4001c6c:	4091883a 	add	r8,r8,r2
 4001c70:	1887883a 	add	r3,r3,r2
 4001c74:	da011d15 	stw	r8,1140(sp)
 4001c78:	d8c11c15 	stw	r3,1136(sp)
 4001c7c:	008001c4 	movi	r2,7
 4001c80:	10c0bc16 	blt	r2,r3,4001f74 <___vfprintf_internal_r+0x194c>
 4001c84:	4a400204 	addi	r9,r9,8
 4001c88:	9000041e 	bne	r18,zero,4001c9c <___vfprintf_internal_r+0x1674>
 4001c8c:	d8c13217 	ldw	r3,1224(sp)
 4001c90:	1800021e 	bne	r3,zero,4001c9c <___vfprintf_internal_r+0x1674>
 4001c94:	8080004c 	andi	r2,r16,1
 4001c98:	103d5226 	beq	r2,zero,40011e4 <__alt_data_end+0xfe0011e4>
 4001c9c:	d8c11c17 	ldw	r3,1136(sp)
 4001ca0:	d9013717 	ldw	r4,1244(sp)
 4001ca4:	00800044 	movi	r2,1
 4001ca8:	48800115 	stw	r2,4(r9)
 4001cac:	49000015 	stw	r4,0(r9)
 4001cb0:	4091883a 	add	r8,r8,r2
 4001cb4:	1887883a 	add	r3,r3,r2
 4001cb8:	da011d15 	stw	r8,1140(sp)
 4001cbc:	d8c11c15 	stw	r3,1136(sp)
 4001cc0:	008001c4 	movi	r2,7
 4001cc4:	10c14516 	blt	r2,r3,40021dc <___vfprintf_internal_r+0x1bb4>
 4001cc8:	4a400204 	addi	r9,r9,8
 4001ccc:	04a5c83a 	sub	r18,zero,r18
 4001cd0:	0480d70e 	bge	zero,r18,4002030 <___vfprintf_internal_r+0x1a08>
 4001cd4:	05800404 	movi	r22,16
 4001cd8:	05010074 	movhi	r20,1025
 4001cdc:	a530b284 	addi	r20,r20,-15670
 4001ce0:	b480db0e 	bge	r22,r18,4002050 <___vfprintf_internal_r+0x1a28>
 4001ce4:	05c001c4 	movi	r23,7
 4001ce8:	df012917 	ldw	fp,1188(sp)
 4001cec:	00000306 	br	4001cfc <___vfprintf_internal_r+0x16d4>
 4001cf0:	4a400204 	addi	r9,r9,8
 4001cf4:	94bffc04 	addi	r18,r18,-16
 4001cf8:	b480d50e 	bge	r22,r18,4002050 <___vfprintf_internal_r+0x1a28>
 4001cfc:	4d000015 	stw	r20,0(r9)
 4001d00:	4d800115 	stw	r22,4(r9)
 4001d04:	42000404 	addi	r8,r8,16
 4001d08:	18c00044 	addi	r3,r3,1
 4001d0c:	da011d15 	stw	r8,1140(sp)
 4001d10:	d8c11c15 	stw	r3,1136(sp)
 4001d14:	b8fff60e 	bge	r23,r3,4001cf0 <__alt_data_end+0xfe001cf0>
 4001d18:	8809883a 	mov	r4,r17
 4001d1c:	e00b883a 	mov	r5,fp
 4001d20:	d9811b04 	addi	r6,sp,1132
 4001d24:	40005f40 	call	40005f4 <__sprint_r>
 4001d28:	103b851e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001d2c:	da011d17 	ldw	r8,1140(sp)
 4001d30:	d8c11c17 	ldw	r3,1136(sp)
 4001d34:	da400404 	addi	r9,sp,16
 4001d38:	003fee06 	br	4001cf4 <__alt_data_end+0xfe001cf4>
 4001d3c:	da413c15 	stw	r9,1264(sp)
 4001d40:	40073140 	call	4007314 <__isnand>
 4001d44:	da413c17 	ldw	r9,1264(sp)
 4001d48:	10007e1e 	bne	r2,zero,4001f44 <___vfprintf_internal_r+0x191c>
 4001d4c:	00bfffc4 	movi	r2,-1
 4001d50:	e0816a26 	beq	fp,r2,40022fc <___vfprintf_internal_r+0x1cd4>
 4001d54:	008019c4 	movi	r2,103
 4001d58:	90816526 	beq	r18,r2,40022f0 <___vfprintf_internal_r+0x1cc8>
 4001d5c:	008011c4 	movi	r2,71
 4001d60:	90816326 	beq	r18,r2,40022f0 <___vfprintf_internal_r+0x1cc8>
 4001d64:	80c04014 	ori	r3,r16,256
 4001d68:	d8c12a15 	stw	r3,1192(sp)
 4001d6c:	a0016516 	blt	r20,zero,4002304 <___vfprintf_internal_r+0x1cdc>
 4001d70:	d8012f05 	stb	zero,1212(sp)
 4001d74:	00801984 	movi	r2,102
 4001d78:	9080f226 	beq	r18,r2,4002144 <___vfprintf_internal_r+0x1b1c>
 4001d7c:	00801184 	movi	r2,70
 4001d80:	9080f026 	beq	r18,r2,4002144 <___vfprintf_internal_r+0x1b1c>
 4001d84:	00801944 	movi	r2,101
 4001d88:	90818d26 	beq	r18,r2,40023c0 <___vfprintf_internal_r+0x1d98>
 4001d8c:	00801144 	movi	r2,69
 4001d90:	90818b26 	beq	r18,r2,40023c0 <___vfprintf_internal_r+0x1d98>
 4001d94:	e02f883a 	mov	r23,fp
 4001d98:	d8812404 	addi	r2,sp,1168
 4001d9c:	d8800115 	stw	r2,4(sp)
 4001da0:	d8812304 	addi	r2,sp,1164
 4001da4:	d8800215 	stw	r2,8(sp)
 4001da8:	d8812204 	addi	r2,sp,1160
 4001dac:	ddc00015 	stw	r23,0(sp)
 4001db0:	d8800315 	stw	r2,12(sp)
 4001db4:	8809883a 	mov	r4,r17
 4001db8:	b00b883a 	mov	r5,r22
 4001dbc:	a00d883a 	mov	r6,r20
 4001dc0:	01c00084 	movi	r7,2
 4001dc4:	da413c15 	stw	r9,1264(sp)
 4001dc8:	40028780 	call	4002878 <_dtoa_r>
 4001dcc:	1027883a 	mov	r19,r2
 4001dd0:	008019c4 	movi	r2,103
 4001dd4:	da413c17 	ldw	r9,1264(sp)
 4001dd8:	9081951e 	bne	r18,r2,4002430 <___vfprintf_internal_r+0x1e08>
 4001ddc:	8080004c 	andi	r2,r16,1
 4001de0:	10017926 	beq	r2,zero,40023c8 <___vfprintf_internal_r+0x1da0>
 4001de4:	00801184 	movi	r2,70
 4001de8:	9dc7883a 	add	r3,r19,r23
 4001dec:	9080e626 	beq	r18,r2,4002188 <___vfprintf_internal_r+0x1b60>
 4001df0:	b009883a 	mov	r4,r22
 4001df4:	a00b883a 	mov	r5,r20
 4001df8:	000d883a 	mov	r6,zero
 4001dfc:	000f883a 	mov	r7,zero
 4001e00:	d8c13b15 	stw	r3,1260(sp)
 4001e04:	da413c15 	stw	r9,1264(sp)
 4001e08:	4008f300 	call	4008f30 <__eqdf2>
 4001e0c:	d8c13b17 	ldw	r3,1260(sp)
 4001e10:	da413c17 	ldw	r9,1264(sp)
 4001e14:	10000726 	beq	r2,zero,4001e34 <___vfprintf_internal_r+0x180c>
 4001e18:	d8812217 	ldw	r2,1160(sp)
 4001e1c:	10c18a2e 	bgeu	r2,r3,4002448 <___vfprintf_internal_r+0x1e20>
 4001e20:	01000c04 	movi	r4,48
 4001e24:	11000005 	stb	r4,0(r2)
 4001e28:	10800044 	addi	r2,r2,1
 4001e2c:	d8812215 	stw	r2,1160(sp)
 4001e30:	10fffc1e 	bne	r2,r3,4001e24 <__alt_data_end+0xfe001e24>
 4001e34:	1cc7c83a 	sub	r3,r3,r19
 4001e38:	d8c13215 	stw	r3,1224(sp)
 4001e3c:	008019c4 	movi	r2,103
 4001e40:	9080fa26 	beq	r18,r2,400222c <___vfprintf_internal_r+0x1c04>
 4001e44:	008011c4 	movi	r2,71
 4001e48:	9080f826 	beq	r18,r2,400222c <___vfprintf_internal_r+0x1c04>
 4001e4c:	00801984 	movi	r2,102
 4001e50:	90818e1e 	bne	r18,r2,400248c <___vfprintf_internal_r+0x1e64>
 4001e54:	d8812417 	ldw	r2,1168(sp)
 4001e58:	d8812b15 	stw	r2,1196(sp)
 4001e5c:	00817c0e 	bge	zero,r2,4002450 <___vfprintf_internal_r+0x1e28>
 4001e60:	e000021e 	bne	fp,zero,4001e6c <___vfprintf_internal_r+0x1844>
 4001e64:	8400004c 	andi	r16,r16,1
 4001e68:	80000426 	beq	r16,zero,4001e7c <___vfprintf_internal_r+0x1854>
 4001e6c:	d8812b17 	ldw	r2,1196(sp)
 4001e70:	e2000044 	addi	r8,fp,1
 4001e74:	1205883a 	add	r2,r2,r8
 4001e78:	d8812b15 	stw	r2,1196(sp)
 4001e7c:	d8812815 	stw	r2,1184(sp)
 4001e80:	10010b16 	blt	r2,zero,40022b0 <___vfprintf_internal_r+0x1c88>
 4001e84:	ddc12f07 	ldb	r23,1212(sp)
 4001e88:	b800e426 	beq	r23,zero,400221c <___vfprintf_internal_r+0x1bf4>
 4001e8c:	00800b44 	movi	r2,45
 4001e90:	d8812585 	stb	r2,1174(sp)
 4001e94:	dc012a17 	ldw	r16,1192(sp)
 4001e98:	d8013115 	stw	zero,1220(sp)
 4001e9c:	003b7306 	br	4000c6c <__alt_data_end+0xfe000c6c>
 4001ea0:	d8812b17 	ldw	r2,1196(sp)
 4001ea4:	d8812815 	stw	r2,1184(sp)
 4001ea8:	10005716 	blt	r2,zero,4002008 <___vfprintf_internal_r+0x19e0>
 4001eac:	d8812583 	ldbu	r2,1174(sp)
 4001eb0:	ddc12d15 	stw	r23,1204(sp)
 4001eb4:	d8013115 	stw	zero,1220(sp)
 4001eb8:	003b6806 	br	4000c5c <__alt_data_end+0xfe000c5c>
 4001ebc:	d8c12d17 	ldw	r3,1204(sp)
 4001ec0:	1dc00017 	ldw	r23,0(r3)
 4001ec4:	18c00104 	addi	r3,r3,4
 4001ec8:	d8c12d15 	stw	r3,1204(sp)
 4001ecc:	b82dd7fa 	srai	r22,r23,31
 4001ed0:	b005883a 	mov	r2,r22
 4001ed4:	003b4406 	br	4000be8 <__alt_data_end+0xfe000be8>
 4001ed8:	d9012d17 	ldw	r4,1204(sp)
 4001edc:	002d883a 	mov	r22,zero
 4001ee0:	00c00044 	movi	r3,1
 4001ee4:	25c00017 	ldw	r23,0(r4)
 4001ee8:	21000104 	addi	r4,r4,4
 4001eec:	d9012d15 	stw	r4,1204(sp)
 4001ef0:	b805883a 	mov	r2,r23
 4001ef4:	d8012585 	stb	zero,1174(sp)
 4001ef8:	003b4406 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4001efc:	d9012d17 	ldw	r4,1204(sp)
 4001f00:	002d883a 	mov	r22,zero
 4001f04:	25c00017 	ldw	r23,0(r4)
 4001f08:	21000104 	addi	r4,r4,4
 4001f0c:	d9012d15 	stw	r4,1204(sp)
 4001f10:	003bab06 	br	4000dc0 <__alt_data_end+0xfe000dc0>
 4001f14:	d8812d17 	ldw	r2,1204(sp)
 4001f18:	002d883a 	mov	r22,zero
 4001f1c:	0007883a 	mov	r3,zero
 4001f20:	15c00017 	ldw	r23,0(r2)
 4001f24:	10800104 	addi	r2,r2,4
 4001f28:	d8812d15 	stw	r2,1204(sp)
 4001f2c:	d8012585 	stb	zero,1174(sp)
 4001f30:	b805883a 	mov	r2,r23
 4001f34:	003b3506 	br	4000c0c <__alt_data_end+0xfe000c0c>
 4001f38:	00ffffc4 	movi	r3,-1
 4001f3c:	b82b883a 	mov	r21,r23
 4001f40:	003a1606 	br	400079c <__alt_data_end+0xfe00079c>
 4001f44:	008011c4 	movi	r2,71
 4001f48:	1480b116 	blt	r2,r18,4002210 <___vfprintf_internal_r+0x1be8>
 4001f4c:	04c10074 	movhi	r19,1025
 4001f50:	9cf0a004 	addi	r19,r19,-15744
 4001f54:	00c000c4 	movi	r3,3
 4001f58:	00bfdfc4 	movi	r2,-129
 4001f5c:	80a0703a 	and	r16,r16,r2
 4001f60:	d8c12815 	stw	r3,1184(sp)
 4001f64:	d8812583 	ldbu	r2,1174(sp)
 4001f68:	d8c12b15 	stw	r3,1196(sp)
 4001f6c:	d8013115 	stw	zero,1220(sp)
 4001f70:	003b3a06 	br	4000c5c <__alt_data_end+0xfe000c5c>
 4001f74:	d9412917 	ldw	r5,1188(sp)
 4001f78:	8809883a 	mov	r4,r17
 4001f7c:	d9811b04 	addi	r6,sp,1132
 4001f80:	40005f40 	call	40005f4 <__sprint_r>
 4001f84:	103aee1e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001f88:	dc812417 	ldw	r18,1168(sp)
 4001f8c:	da011d17 	ldw	r8,1140(sp)
 4001f90:	da400404 	addi	r9,sp,16
 4001f94:	003f3c06 	br	4001c88 <__alt_data_end+0xfe001c88>
 4001f98:	ad400044 	addi	r21,r21,1
 4001f9c:	84000814 	ori	r16,r16,32
 4001fa0:	14800047 	ldb	r18,1(r2)
 4001fa4:	0039fc06 	br	4000798 <__alt_data_end+0xfe000798>
 4001fa8:	d9412917 	ldw	r5,1188(sp)
 4001fac:	8809883a 	mov	r4,r17
 4001fb0:	d9811b04 	addi	r6,sp,1132
 4001fb4:	40005f40 	call	40005f4 <__sprint_r>
 4001fb8:	103ae11e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4001fbc:	da011d17 	ldw	r8,1140(sp)
 4001fc0:	da400404 	addi	r9,sp,16
 4001fc4:	003d2b06 	br	4001474 <__alt_data_end+0xfe001474>
 4001fc8:	4d000015 	stw	r20,0(r9)
 4001fcc:	4c800115 	stw	r18,4(r9)
 4001fd0:	4491883a 	add	r8,r8,r18
 4001fd4:	18c00044 	addi	r3,r3,1
 4001fd8:	da011d15 	stw	r8,1140(sp)
 4001fdc:	d8c11c15 	stw	r3,1136(sp)
 4001fe0:	008001c4 	movi	r2,7
 4001fe4:	10fcbd16 	blt	r2,r3,40012dc <__alt_data_end+0xfe0012dc>
 4001fe8:	4a400204 	addi	r9,r9,8
 4001fec:	003cc206 	br	40012f8 <__alt_data_end+0xfe0012f8>
 4001ff0:	da413c15 	stw	r9,1264(sp)
 4001ff4:	40005680 	call	4000568 <strlen>
 4001ff8:	d8812b15 	stw	r2,1196(sp)
 4001ffc:	d8812815 	stw	r2,1184(sp)
 4002000:	da413c17 	ldw	r9,1264(sp)
 4002004:	103fa90e 	bge	r2,zero,4001eac <__alt_data_end+0xfe001eac>
 4002008:	d8012815 	stw	zero,1184(sp)
 400200c:	003fa706 	br	4001eac <__alt_data_end+0xfe001eac>
 4002010:	d9412917 	ldw	r5,1188(sp)
 4002014:	8809883a 	mov	r4,r17
 4002018:	d9811b04 	addi	r6,sp,1132
 400201c:	40005f40 	call	40005f4 <__sprint_r>
 4002020:	103ac71e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 4002024:	da011d17 	ldw	r8,1140(sp)
 4002028:	d8c11c17 	ldw	r3,1136(sp)
 400202c:	da400404 	addi	r9,sp,16
 4002030:	d8813217 	ldw	r2,1224(sp)
 4002034:	4cc00015 	stw	r19,0(r9)
 4002038:	48800115 	stw	r2,4(r9)
 400203c:	4091883a 	add	r8,r8,r2
 4002040:	003c6206 	br	40011cc <__alt_data_end+0xfe0011cc>
 4002044:	00800b44 	movi	r2,45
 4002048:	d8812585 	stb	r2,1174(sp)
 400204c:	003b2406 	br	4000ce0 <__alt_data_end+0xfe000ce0>
 4002050:	4d000015 	stw	r20,0(r9)
 4002054:	4c800115 	stw	r18,4(r9)
 4002058:	4491883a 	add	r8,r8,r18
 400205c:	18c00044 	addi	r3,r3,1
 4002060:	da011d15 	stw	r8,1140(sp)
 4002064:	d8c11c15 	stw	r3,1136(sp)
 4002068:	008001c4 	movi	r2,7
 400206c:	10ffe816 	blt	r2,r3,4002010 <__alt_data_end+0xfe002010>
 4002070:	4a400204 	addi	r9,r9,8
 4002074:	003fee06 	br	4002030 <__alt_data_end+0xfe002030>
 4002078:	d8c12b15 	stw	r3,1196(sp)
 400207c:	00800184 	movi	r2,6
 4002080:	10c0062e 	bgeu	r2,r3,400209c <___vfprintf_internal_r+0x1a74>
 4002084:	d8812b15 	stw	r2,1196(sp)
 4002088:	d8812815 	stw	r2,1184(sp)
 400208c:	ddc12d15 	stw	r23,1204(sp)
 4002090:	04c10074 	movhi	r19,1025
 4002094:	9cf0ac04 	addi	r19,r19,-15696
 4002098:	0039ca06 	br	40007c4 <__alt_data_end+0xfe0007c4>
 400209c:	d8812b17 	ldw	r2,1196(sp)
 40020a0:	d8812815 	stw	r2,1184(sp)
 40020a4:	103ff90e 	bge	r2,zero,400208c <__alt_data_end+0xfe00208c>
 40020a8:	d8012815 	stw	zero,1184(sp)
 40020ac:	003ff706 	br	400208c <__alt_data_end+0xfe00208c>
 40020b0:	00800244 	movi	r2,9
 40020b4:	15fdaa36 	bltu	r2,r23,4001760 <__alt_data_end+0xfe001760>
 40020b8:	dd010e04 	addi	r20,sp,1080
 40020bc:	003dc606 	br	40017d8 <__alt_data_end+0xfe0017d8>
 40020c0:	d9412917 	ldw	r5,1188(sp)
 40020c4:	8809883a 	mov	r4,r17
 40020c8:	d9811b04 	addi	r6,sp,1132
 40020cc:	40005f40 	call	40005f4 <__sprint_r>
 40020d0:	103a9b1e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 40020d4:	dc812417 	ldw	r18,1168(sp)
 40020d8:	da400404 	addi	r9,sp,16
 40020dc:	003ecd06 	br	4001c14 <__alt_data_end+0xfe001c14>
 40020e0:	d9412917 	ldw	r5,1188(sp)
 40020e4:	8809883a 	mov	r4,r17
 40020e8:	d9811b04 	addi	r6,sp,1132
 40020ec:	40005f40 	call	40005f4 <__sprint_r>
 40020f0:	103a931e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 40020f4:	dc812417 	ldw	r18,1168(sp)
 40020f8:	da011d17 	ldw	r8,1140(sp)
 40020fc:	d8c11c17 	ldw	r3,1136(sp)
 4002100:	da400404 	addi	r9,sp,16
 4002104:	003eb706 	br	4001be4 <__alt_data_end+0xfe001be4>
 4002108:	d9412917 	ldw	r5,1188(sp)
 400210c:	8809883a 	mov	r4,r17
 4002110:	d9811b04 	addi	r6,sp,1132
 4002114:	40005f40 	call	40005f4 <__sprint_r>
 4002118:	103a891e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 400211c:	dc812417 	ldw	r18,1168(sp)
 4002120:	da011d17 	ldw	r8,1140(sp)
 4002124:	da400404 	addi	r9,sp,16
 4002128:	003dc206 	br	4001834 <__alt_data_end+0xfe001834>
 400212c:	df012815 	stw	fp,1184(sp)
 4002130:	d8812583 	ldbu	r2,1174(sp)
 4002134:	df012b15 	stw	fp,1196(sp)
 4002138:	ddc12d15 	stw	r23,1204(sp)
 400213c:	d8013115 	stw	zero,1220(sp)
 4002140:	003ac606 	br	4000c5c <__alt_data_end+0xfe000c5c>
 4002144:	d8812404 	addi	r2,sp,1168
 4002148:	d8800115 	stw	r2,4(sp)
 400214c:	d8812304 	addi	r2,sp,1164
 4002150:	d8800215 	stw	r2,8(sp)
 4002154:	d8812204 	addi	r2,sp,1160
 4002158:	df000015 	stw	fp,0(sp)
 400215c:	d8800315 	stw	r2,12(sp)
 4002160:	8809883a 	mov	r4,r17
 4002164:	b00b883a 	mov	r5,r22
 4002168:	a00d883a 	mov	r6,r20
 400216c:	01c000c4 	movi	r7,3
 4002170:	da413c15 	stw	r9,1264(sp)
 4002174:	40028780 	call	4002878 <_dtoa_r>
 4002178:	da413c17 	ldw	r9,1264(sp)
 400217c:	1027883a 	mov	r19,r2
 4002180:	1707883a 	add	r3,r2,fp
 4002184:	e02f883a 	mov	r23,fp
 4002188:	99000007 	ldb	r4,0(r19)
 400218c:	00800c04 	movi	r2,48
 4002190:	20800326 	beq	r4,r2,40021a0 <___vfprintf_internal_r+0x1b78>
 4002194:	da812417 	ldw	r10,1168(sp)
 4002198:	1a87883a 	add	r3,r3,r10
 400219c:	003f1406 	br	4001df0 <__alt_data_end+0xfe001df0>
 40021a0:	b009883a 	mov	r4,r22
 40021a4:	a00b883a 	mov	r5,r20
 40021a8:	000d883a 	mov	r6,zero
 40021ac:	000f883a 	mov	r7,zero
 40021b0:	d8c13b15 	stw	r3,1260(sp)
 40021b4:	da413c15 	stw	r9,1264(sp)
 40021b8:	4008f8c0 	call	4008f8c <__nedf2>
 40021bc:	d8c13b17 	ldw	r3,1260(sp)
 40021c0:	da413c17 	ldw	r9,1264(sp)
 40021c4:	103ff326 	beq	r2,zero,4002194 <__alt_data_end+0xfe002194>
 40021c8:	00800044 	movi	r2,1
 40021cc:	15d5c83a 	sub	r10,r2,r23
 40021d0:	da812415 	stw	r10,1168(sp)
 40021d4:	1a87883a 	add	r3,r3,r10
 40021d8:	003f0506 	br	4001df0 <__alt_data_end+0xfe001df0>
 40021dc:	d9412917 	ldw	r5,1188(sp)
 40021e0:	8809883a 	mov	r4,r17
 40021e4:	d9811b04 	addi	r6,sp,1132
 40021e8:	40005f40 	call	40005f4 <__sprint_r>
 40021ec:	103a541e 	bne	r2,zero,4000b40 <__alt_data_end+0xfe000b40>
 40021f0:	dc812417 	ldw	r18,1168(sp)
 40021f4:	da011d17 	ldw	r8,1140(sp)
 40021f8:	d8c11c17 	ldw	r3,1136(sp)
 40021fc:	da400404 	addi	r9,sp,16
 4002200:	003eb206 	br	4001ccc <__alt_data_end+0xfe001ccc>
 4002204:	b82b883a 	mov	r21,r23
 4002208:	0007883a 	mov	r3,zero
 400220c:	00396306 	br	400079c <__alt_data_end+0xfe00079c>
 4002210:	04c10074 	movhi	r19,1025
 4002214:	9cf0a104 	addi	r19,r19,-15740
 4002218:	003f4e06 	br	4001f54 <__alt_data_end+0xfe001f54>
 400221c:	d8812583 	ldbu	r2,1174(sp)
 4002220:	dc012a17 	ldw	r16,1192(sp)
 4002224:	d8013115 	stw	zero,1220(sp)
 4002228:	003a8c06 	br	4000c5c <__alt_data_end+0xfe000c5c>
 400222c:	d8812417 	ldw	r2,1168(sp)
 4002230:	d8812b15 	stw	r2,1196(sp)
 4002234:	1029883a 	mov	r20,r2
 4002238:	00bfff44 	movi	r2,-3
 400223c:	a0800116 	blt	r20,r2,4002244 <___vfprintf_internal_r+0x1c1c>
 4002240:	e5001d0e 	bge	fp,r20,40022b8 <___vfprintf_internal_r+0x1c90>
 4002244:	94bfff84 	addi	r18,r18,-2
 4002248:	a53fffc4 	addi	r20,r20,-1
 400224c:	dd012415 	stw	r20,1168(sp)
 4002250:	dc811fc5 	stb	r18,1151(sp)
 4002254:	a0007216 	blt	r20,zero,4002420 <___vfprintf_internal_r+0x1df8>
 4002258:	00800ac4 	movi	r2,43
 400225c:	d8812005 	stb	r2,1152(sp)
 4002260:	00800244 	movi	r2,9
 4002264:	15003516 	blt	r2,r20,400233c <___vfprintf_internal_r+0x1d14>
 4002268:	00800c04 	movi	r2,48
 400226c:	a5000c04 	addi	r20,r20,48
 4002270:	d8812045 	stb	r2,1153(sp)
 4002274:	dd012085 	stb	r20,1154(sp)
 4002278:	d8c120c4 	addi	r3,sp,1155
 400227c:	d8811fc4 	addi	r2,sp,1151
 4002280:	1885c83a 	sub	r2,r3,r2
 4002284:	d8c13217 	ldw	r3,1224(sp)
 4002288:	d8813515 	stw	r2,1236(sp)
 400228c:	1885883a 	add	r2,r3,r2
 4002290:	d8812b15 	stw	r2,1196(sp)
 4002294:	00800044 	movi	r2,1
 4002298:	10c0580e 	bge	r2,r3,40023fc <___vfprintf_internal_r+0x1dd4>
 400229c:	d8812b17 	ldw	r2,1196(sp)
 40022a0:	10800044 	addi	r2,r2,1
 40022a4:	d8812b15 	stw	r2,1196(sp)
 40022a8:	d8812815 	stw	r2,1184(sp)
 40022ac:	103ef50e 	bge	r2,zero,4001e84 <__alt_data_end+0xfe001e84>
 40022b0:	d8012815 	stw	zero,1184(sp)
 40022b4:	003ef306 	br	4001e84 <__alt_data_end+0xfe001e84>
 40022b8:	d8812b17 	ldw	r2,1196(sp)
 40022bc:	d8c13217 	ldw	r3,1224(sp)
 40022c0:	10c01416 	blt	r2,r3,4002314 <___vfprintf_internal_r+0x1cec>
 40022c4:	8400004c 	andi	r16,r16,1
 40022c8:	80000326 	beq	r16,zero,40022d8 <___vfprintf_internal_r+0x1cb0>
 40022cc:	d8812b17 	ldw	r2,1196(sp)
 40022d0:	10800044 	addi	r2,r2,1
 40022d4:	d8812b15 	stw	r2,1196(sp)
 40022d8:	d8812815 	stw	r2,1184(sp)
 40022dc:	10001416 	blt	r2,zero,4002330 <___vfprintf_internal_r+0x1d08>
 40022e0:	048019c4 	movi	r18,103
 40022e4:	003ee706 	br	4001e84 <__alt_data_end+0xfe001e84>
 40022e8:	d8012815 	stw	zero,1184(sp)
 40022ec:	003b1a06 	br	4000f58 <__alt_data_end+0xfe000f58>
 40022f0:	e03e9c1e 	bne	fp,zero,4001d64 <__alt_data_end+0xfe001d64>
 40022f4:	07000044 	movi	fp,1
 40022f8:	003e9a06 	br	4001d64 <__alt_data_end+0xfe001d64>
 40022fc:	07000184 	movi	fp,6
 4002300:	003e9806 	br	4001d64 <__alt_data_end+0xfe001d64>
 4002304:	00c00b44 	movi	r3,45
 4002308:	a520003c 	xorhi	r20,r20,32768
 400230c:	d8c12f05 	stb	r3,1212(sp)
 4002310:	003e9806 	br	4001d74 <__alt_data_end+0xfe001d74>
 4002314:	05003f0e 	bge	zero,r20,4002414 <___vfprintf_internal_r+0x1dec>
 4002318:	05000044 	movi	r20,1
 400231c:	d8c13217 	ldw	r3,1224(sp)
 4002320:	a0e9883a 	add	r20,r20,r3
 4002324:	dd012b15 	stw	r20,1196(sp)
 4002328:	dd012815 	stw	r20,1184(sp)
 400232c:	a03fec0e 	bge	r20,zero,40022e0 <__alt_data_end+0xfe0022e0>
 4002330:	d8012815 	stw	zero,1184(sp)
 4002334:	048019c4 	movi	r18,103
 4002338:	003ed206 	br	4001e84 <__alt_data_end+0xfe001e84>
 400233c:	d8c11f84 	addi	r3,sp,1150
 4002340:	102f883a 	mov	r23,r2
 4002344:	4839883a 	mov	fp,r9
 4002348:	a009883a 	mov	r4,r20
 400234c:	01400284 	movi	r5,10
 4002350:	182d883a 	mov	r22,r3
 4002354:	40094840 	call	4009484 <__modsi3>
 4002358:	10800c04 	addi	r2,r2,48
 400235c:	a009883a 	mov	r4,r20
 4002360:	b0800005 	stb	r2,0(r22)
 4002364:	01400284 	movi	r5,10
 4002368:	40094340 	call	4009434 <__divsi3>
 400236c:	1029883a 	mov	r20,r2
 4002370:	b0ffffc4 	addi	r3,r22,-1
 4002374:	b8bff416 	blt	r23,r2,4002348 <__alt_data_end+0xfe002348>
 4002378:	11400c04 	addi	r5,r2,48
 400237c:	b17fffc5 	stb	r5,-1(r22)
 4002380:	d8811fc4 	addi	r2,sp,1151
 4002384:	e013883a 	mov	r9,fp
 4002388:	18803e2e 	bgeu	r3,r2,4002484 <___vfprintf_internal_r+0x1e5c>
 400238c:	b007883a 	mov	r3,r22
 4002390:	d9012044 	addi	r4,sp,1153
 4002394:	00000206 	br	40023a0 <___vfprintf_internal_r+0x1d78>
 4002398:	19400003 	ldbu	r5,0(r3)
 400239c:	18c00044 	addi	r3,r3,1
 40023a0:	21400005 	stb	r5,0(r4)
 40023a4:	21000044 	addi	r4,r4,1
 40023a8:	10fffb1e 	bne	r2,r3,4002398 <__alt_data_end+0xfe002398>
 40023ac:	d8c12004 	addi	r3,sp,1152
 40023b0:	1d87c83a 	sub	r3,r3,r22
 40023b4:	d9012044 	addi	r4,sp,1153
 40023b8:	20c7883a 	add	r3,r4,r3
 40023bc:	003fb006 	br	4002280 <__alt_data_end+0xfe002280>
 40023c0:	e5c00044 	addi	r23,fp,1
 40023c4:	003e7406 	br	4001d98 <__alt_data_end+0xfe001d98>
 40023c8:	d8c12217 	ldw	r3,1160(sp)
 40023cc:	003e9906 	br	4001e34 <__alt_data_end+0xfe001e34>
 40023d0:	d9012d17 	ldw	r4,1204(sp)
 40023d4:	ac800043 	ldbu	r18,1(r21)
 40023d8:	b82b883a 	mov	r21,r23
 40023dc:	20c00017 	ldw	r3,0(r4)
 40023e0:	20800104 	addi	r2,r4,4
 40023e4:	d8812d15 	stw	r2,1204(sp)
 40023e8:	18002116 	blt	r3,zero,4002470 <___vfprintf_internal_r+0x1e48>
 40023ec:	94803fcc 	andi	r18,r18,255
 40023f0:	9480201c 	xori	r18,r18,128
 40023f4:	94bfe004 	addi	r18,r18,-128
 40023f8:	0038e706 	br	4000798 <__alt_data_end+0xfe000798>
 40023fc:	80a0703a 	and	r16,r16,r2
 4002400:	803fa61e 	bne	r16,zero,400229c <__alt_data_end+0xfe00229c>
 4002404:	d8812b17 	ldw	r2,1196(sp)
 4002408:	d8812815 	stw	r2,1184(sp)
 400240c:	103e9d0e 	bge	r2,zero,4001e84 <__alt_data_end+0xfe001e84>
 4002410:	003fa706 	br	40022b0 <__alt_data_end+0xfe0022b0>
 4002414:	00800084 	movi	r2,2
 4002418:	1529c83a 	sub	r20,r2,r20
 400241c:	003fbf06 	br	400231c <__alt_data_end+0xfe00231c>
 4002420:	00800b44 	movi	r2,45
 4002424:	0529c83a 	sub	r20,zero,r20
 4002428:	d8812005 	stb	r2,1152(sp)
 400242c:	003f8c06 	br	4002260 <__alt_data_end+0xfe002260>
 4002430:	008011c4 	movi	r2,71
 4002434:	90be6926 	beq	r18,r2,4001ddc <__alt_data_end+0xfe001ddc>
 4002438:	003e6a06 	br	4001de4 <__alt_data_end+0xfe001de4>
 400243c:	00bfffc4 	movi	r2,-1
 4002440:	d8812c15 	stw	r2,1200(sp)
 4002444:	0039ad06 	br	4000afc <__alt_data_end+0xfe000afc>
 4002448:	1007883a 	mov	r3,r2
 400244c:	003e7906 	br	4001e34 <__alt_data_end+0xfe001e34>
 4002450:	e000021e 	bne	fp,zero,400245c <___vfprintf_internal_r+0x1e34>
 4002454:	8400004c 	andi	r16,r16,1
 4002458:	80000e26 	beq	r16,zero,4002494 <___vfprintf_internal_r+0x1e6c>
 400245c:	e7000084 	addi	fp,fp,2
 4002460:	df012b15 	stw	fp,1196(sp)
 4002464:	df012815 	stw	fp,1184(sp)
 4002468:	e03e860e 	bge	fp,zero,4001e84 <__alt_data_end+0xfe001e84>
 400246c:	003f9006 	br	40022b0 <__alt_data_end+0xfe0022b0>
 4002470:	94803fcc 	andi	r18,r18,255
 4002474:	9480201c 	xori	r18,r18,128
 4002478:	00ffffc4 	movi	r3,-1
 400247c:	94bfe004 	addi	r18,r18,-128
 4002480:	0038c506 	br	4000798 <__alt_data_end+0xfe000798>
 4002484:	d8c12044 	addi	r3,sp,1153
 4002488:	003f7d06 	br	4002280 <__alt_data_end+0xfe002280>
 400248c:	dd012417 	ldw	r20,1168(sp)
 4002490:	003f6d06 	br	4002248 <__alt_data_end+0xfe002248>
 4002494:	00c00044 	movi	r3,1
 4002498:	d8c12815 	stw	r3,1184(sp)
 400249c:	d8c12b15 	stw	r3,1196(sp)
 40024a0:	003e7806 	br	4001e84 <__alt_data_end+0xfe001e84>

040024a4 <__vfprintf_internal>:
 40024a4:	00810074 	movhi	r2,1025
 40024a8:	10b7ef04 	addi	r2,r2,-8260
 40024ac:	2007883a 	mov	r3,r4
 40024b0:	11000017 	ldw	r4,0(r2)
 40024b4:	2805883a 	mov	r2,r5
 40024b8:	300f883a 	mov	r7,r6
 40024bc:	180b883a 	mov	r5,r3
 40024c0:	100d883a 	mov	r6,r2
 40024c4:	40006281 	jmpi	4000628 <___vfprintf_internal_r>

040024c8 <__swsetup_r>:
 40024c8:	00810074 	movhi	r2,1025
 40024cc:	10b7ef04 	addi	r2,r2,-8260
 40024d0:	10800017 	ldw	r2,0(r2)
 40024d4:	defffd04 	addi	sp,sp,-12
 40024d8:	dc400115 	stw	r17,4(sp)
 40024dc:	dc000015 	stw	r16,0(sp)
 40024e0:	dfc00215 	stw	ra,8(sp)
 40024e4:	2023883a 	mov	r17,r4
 40024e8:	2821883a 	mov	r16,r5
 40024ec:	10000226 	beq	r2,zero,40024f8 <__swsetup_r+0x30>
 40024f0:	10c00e17 	ldw	r3,56(r2)
 40024f4:	18003d26 	beq	r3,zero,40025ec <__swsetup_r+0x124>
 40024f8:	8080030b 	ldhu	r2,12(r16)
 40024fc:	10c0020c 	andi	r3,r2,8
 4002500:	18ffffcc 	andi	r3,r3,65535
 4002504:	18e0001c 	xori	r3,r3,32768
 4002508:	18e00004 	addi	r3,r3,-32768
 400250c:	18001226 	beq	r3,zero,4002558 <__swsetup_r+0x90>
 4002510:	80c00417 	ldw	r3,16(r16)
 4002514:	18001f26 	beq	r3,zero,4002594 <__swsetup_r+0xcc>
 4002518:	1100004c 	andi	r4,r2,1
 400251c:	2000261e 	bne	r4,zero,40025b8 <__swsetup_r+0xf0>
 4002520:	1080008c 	andi	r2,r2,2
 4002524:	10bfffcc 	andi	r2,r2,65535
 4002528:	10a0001c 	xori	r2,r2,32768
 400252c:	10a00004 	addi	r2,r2,-32768
 4002530:	1000311e 	bne	r2,zero,40025f8 <__swsetup_r+0x130>
 4002534:	80800517 	ldw	r2,20(r16)
 4002538:	80800215 	stw	r2,8(r16)
 400253c:	18002326 	beq	r3,zero,40025cc <__swsetup_r+0x104>
 4002540:	0005883a 	mov	r2,zero
 4002544:	dfc00217 	ldw	ra,8(sp)
 4002548:	dc400117 	ldw	r17,4(sp)
 400254c:	dc000017 	ldw	r16,0(sp)
 4002550:	dec00304 	addi	sp,sp,12
 4002554:	f800283a 	ret
 4002558:	10c0040c 	andi	r3,r2,16
 400255c:	18ffffcc 	andi	r3,r3,65535
 4002560:	18e0001c 	xori	r3,r3,32768
 4002564:	18e00004 	addi	r3,r3,-32768
 4002568:	18001e26 	beq	r3,zero,40025e4 <__swsetup_r+0x11c>
 400256c:	10c0010c 	andi	r3,r2,4
 4002570:	18ffffcc 	andi	r3,r3,65535
 4002574:	18e0001c 	xori	r3,r3,32768
 4002578:	18e00004 	addi	r3,r3,-32768
 400257c:	1800211e 	bne	r3,zero,4002604 <__swsetup_r+0x13c>
 4002580:	80c00417 	ldw	r3,16(r16)
 4002584:	11400214 	ori	r5,r2,8
 4002588:	8140030d 	sth	r5,12(r16)
 400258c:	2805883a 	mov	r2,r5
 4002590:	183fe11e 	bne	r3,zero,4002518 <__alt_data_end+0xfe002518>
 4002594:	1140a00c 	andi	r5,r2,640
 4002598:	01008004 	movi	r4,512
 400259c:	293fde26 	beq	r5,r4,4002518 <__alt_data_end+0xfe002518>
 40025a0:	8809883a 	mov	r4,r17
 40025a4:	800b883a 	mov	r5,r16
 40025a8:	4004ec40 	call	4004ec4 <__smakebuf_r>
 40025ac:	8080030b 	ldhu	r2,12(r16)
 40025b0:	80c00417 	ldw	r3,16(r16)
 40025b4:	003fd806 	br	4002518 <__alt_data_end+0xfe002518>
 40025b8:	80800517 	ldw	r2,20(r16)
 40025bc:	80000215 	stw	zero,8(r16)
 40025c0:	0085c83a 	sub	r2,zero,r2
 40025c4:	80800615 	stw	r2,24(r16)
 40025c8:	183fdd1e 	bne	r3,zero,4002540 <__alt_data_end+0xfe002540>
 40025cc:	8080030b 	ldhu	r2,12(r16)
 40025d0:	1080200c 	andi	r2,r2,128
 40025d4:	10bfffcc 	andi	r2,r2,65535
 40025d8:	10a0001c 	xori	r2,r2,32768
 40025dc:	10a00004 	addi	r2,r2,-32768
 40025e0:	103fd826 	beq	r2,zero,4002544 <__alt_data_end+0xfe002544>
 40025e4:	00bfffc4 	movi	r2,-1
 40025e8:	003fd606 	br	4002544 <__alt_data_end+0xfe002544>
 40025ec:	1009883a 	mov	r4,r2
 40025f0:	40041500 	call	4004150 <__sinit>
 40025f4:	003fc006 	br	40024f8 <__alt_data_end+0xfe0024f8>
 40025f8:	0005883a 	mov	r2,zero
 40025fc:	80800215 	stw	r2,8(r16)
 4002600:	003fce06 	br	400253c <__alt_data_end+0xfe00253c>
 4002604:	81400c17 	ldw	r5,48(r16)
 4002608:	28000626 	beq	r5,zero,4002624 <__swsetup_r+0x15c>
 400260c:	80c01004 	addi	r3,r16,64
 4002610:	28c00326 	beq	r5,r3,4002620 <__swsetup_r+0x158>
 4002614:	8809883a 	mov	r4,r17
 4002618:	40044d40 	call	40044d4 <_free_r>
 400261c:	8080030b 	ldhu	r2,12(r16)
 4002620:	80000c15 	stw	zero,48(r16)
 4002624:	80c00417 	ldw	r3,16(r16)
 4002628:	013ff6c4 	movi	r4,-37
 400262c:	2084703a 	and	r2,r4,r2
 4002630:	80000115 	stw	zero,4(r16)
 4002634:	80c00015 	stw	r3,0(r16)
 4002638:	003fd206 	br	4002584 <__alt_data_end+0xfe002584>

0400263c <quorem>:
 400263c:	defff204 	addi	sp,sp,-56
 4002640:	dd000815 	stw	r20,32(sp)
 4002644:	20800417 	ldw	r2,16(r4)
 4002648:	2d000417 	ldw	r20,16(r5)
 400264c:	dcc00715 	stw	r19,28(sp)
 4002650:	dfc00d15 	stw	ra,52(sp)
 4002654:	df000c15 	stw	fp,48(sp)
 4002658:	ddc00b15 	stw	r23,44(sp)
 400265c:	dd800a15 	stw	r22,40(sp)
 4002660:	dd400915 	stw	r21,36(sp)
 4002664:	dc800615 	stw	r18,24(sp)
 4002668:	dc400515 	stw	r17,20(sp)
 400266c:	dc000415 	stw	r16,16(sp)
 4002670:	d9400015 	stw	r5,0(sp)
 4002674:	2027883a 	mov	r19,r4
 4002678:	15007d16 	blt	r2,r20,4002870 <quorem+0x234>
 400267c:	a0800104 	addi	r2,r20,4
 4002680:	1085883a 	add	r2,r2,r2
 4002684:	1085883a 	add	r2,r2,r2
 4002688:	28ad883a 	add	r22,r5,r2
 400268c:	2085883a 	add	r2,r4,r2
 4002690:	10800017 	ldw	r2,0(r2)
 4002694:	b1400017 	ldw	r5,0(r22)
 4002698:	a53fffc4 	addi	r20,r20,-1
 400269c:	1009883a 	mov	r4,r2
 40026a0:	29400044 	addi	r5,r5,1
 40026a4:	d8800115 	stw	r2,4(sp)
 40026a8:	40094e00 	call	40094e0 <__udivsi3>
 40026ac:	1025883a 	mov	r18,r2
 40026b0:	d8800017 	ldw	r2,0(sp)
 40026b4:	9f000504 	addi	fp,r19,20
 40026b8:	14000504 	addi	r16,r2,20
 40026bc:	90003626 	beq	r18,zero,4002798 <quorem+0x15c>
 40026c0:	802b883a 	mov	r21,r16
 40026c4:	e023883a 	mov	r17,fp
 40026c8:	0007883a 	mov	r3,zero
 40026cc:	002f883a 	mov	r23,zero
 40026d0:	a9800017 	ldw	r6,0(r21)
 40026d4:	900b883a 	mov	r5,r18
 40026d8:	d8c00315 	stw	r3,12(sp)
 40026dc:	313fffcc 	andi	r4,r6,65535
 40026e0:	d9800215 	stw	r6,8(sp)
 40026e4:	40094f00 	call	40094f0 <__mulsi3>
 40026e8:	d9800217 	ldw	r6,8(sp)
 40026ec:	d8c00317 	ldw	r3,12(sp)
 40026f0:	900b883a 	mov	r5,r18
 40026f4:	3008d43a 	srli	r4,r6,16
 40026f8:	1887883a 	add	r3,r3,r2
 40026fc:	d8c00315 	stw	r3,12(sp)
 4002700:	40094f00 	call	40094f0 <__mulsi3>
 4002704:	89400017 	ldw	r5,0(r17)
 4002708:	d8c00317 	ldw	r3,12(sp)
 400270c:	ad400104 	addi	r21,r21,4
 4002710:	293fffcc 	andi	r4,r5,65535
 4002714:	1810d43a 	srli	r8,r3,16
 4002718:	25c9883a 	add	r4,r4,r23
 400271c:	18ffffcc 	andi	r3,r3,65535
 4002720:	20c9c83a 	sub	r4,r4,r3
 4002724:	280cd43a 	srli	r6,r5,16
 4002728:	4085883a 	add	r2,r8,r2
 400272c:	2007d43a 	srai	r3,r4,16
 4002730:	117fffcc 	andi	r5,r2,65535
 4002734:	314bc83a 	sub	r5,r6,r5
 4002738:	28cb883a 	add	r5,r5,r3
 400273c:	8940008d 	sth	r5,2(r17)
 4002740:	8900000d 	sth	r4,0(r17)
 4002744:	1006d43a 	srli	r3,r2,16
 4002748:	282fd43a 	srai	r23,r5,16
 400274c:	8c400104 	addi	r17,r17,4
 4002750:	b57fdf2e 	bgeu	r22,r21,40026d0 <__alt_data_end+0xfe0026d0>
 4002754:	d8c00117 	ldw	r3,4(sp)
 4002758:	18000f1e 	bne	r3,zero,4002798 <quorem+0x15c>
 400275c:	a0800144 	addi	r2,r20,5
 4002760:	1085883a 	add	r2,r2,r2
 4002764:	1085883a 	add	r2,r2,r2
 4002768:	9887883a 	add	r3,r19,r2
 400276c:	18bfff04 	addi	r2,r3,-4
 4002770:	e080082e 	bgeu	fp,r2,4002794 <quorem+0x158>
 4002774:	18ffff17 	ldw	r3,-4(r3)
 4002778:	18000326 	beq	r3,zero,4002788 <quorem+0x14c>
 400277c:	00000506 	br	4002794 <quorem+0x158>
 4002780:	10c00017 	ldw	r3,0(r2)
 4002784:	1800031e 	bne	r3,zero,4002794 <quorem+0x158>
 4002788:	10bfff04 	addi	r2,r2,-4
 400278c:	a53fffc4 	addi	r20,r20,-1
 4002790:	e0bffb36 	bltu	fp,r2,4002780 <__alt_data_end+0xfe002780>
 4002794:	9d000415 	stw	r20,16(r19)
 4002798:	d9400017 	ldw	r5,0(sp)
 400279c:	9809883a 	mov	r4,r19
 40027a0:	40065dc0 	call	40065dc <__mcmp>
 40027a4:	10002516 	blt	r2,zero,400283c <quorem+0x200>
 40027a8:	94800044 	addi	r18,r18,1
 40027ac:	e007883a 	mov	r3,fp
 40027b0:	000d883a 	mov	r6,zero
 40027b4:	18800017 	ldw	r2,0(r3)
 40027b8:	82000017 	ldw	r8,0(r16)
 40027bc:	84000104 	addi	r16,r16,4
 40027c0:	11ffffcc 	andi	r7,r2,65535
 40027c4:	413fffcc 	andi	r4,r8,65535
 40027c8:	398d883a 	add	r6,r7,r6
 40027cc:	310fc83a 	sub	r7,r6,r4
 40027d0:	4010d43a 	srli	r8,r8,16
 40027d4:	100cd43a 	srli	r6,r2,16
 40027d8:	3809d43a 	srai	r4,r7,16
 40027dc:	19c0000d 	sth	r7,0(r3)
 40027e0:	320dc83a 	sub	r6,r6,r8
 40027e4:	310d883a 	add	r6,r6,r4
 40027e8:	1980008d 	sth	r6,2(r3)
 40027ec:	300dd43a 	srai	r6,r6,16
 40027f0:	18c00104 	addi	r3,r3,4
 40027f4:	b43fef2e 	bgeu	r22,r16,40027b4 <__alt_data_end+0xfe0027b4>
 40027f8:	a0800144 	addi	r2,r20,5
 40027fc:	1085883a 	add	r2,r2,r2
 4002800:	1085883a 	add	r2,r2,r2
 4002804:	9885883a 	add	r2,r19,r2
 4002808:	10c00017 	ldw	r3,0(r2)
 400280c:	18000b1e 	bne	r3,zero,400283c <quorem+0x200>
 4002810:	10ffff04 	addi	r3,r2,-4
 4002814:	e0c0082e 	bgeu	fp,r3,4002838 <quorem+0x1fc>
 4002818:	10bfff17 	ldw	r2,-4(r2)
 400281c:	10000326 	beq	r2,zero,400282c <quorem+0x1f0>
 4002820:	00000506 	br	4002838 <quorem+0x1fc>
 4002824:	18800017 	ldw	r2,0(r3)
 4002828:	1000031e 	bne	r2,zero,4002838 <quorem+0x1fc>
 400282c:	18ffff04 	addi	r3,r3,-4
 4002830:	a53fffc4 	addi	r20,r20,-1
 4002834:	e0fffb36 	bltu	fp,r3,4002824 <__alt_data_end+0xfe002824>
 4002838:	9d000415 	stw	r20,16(r19)
 400283c:	9005883a 	mov	r2,r18
 4002840:	dfc00d17 	ldw	ra,52(sp)
 4002844:	df000c17 	ldw	fp,48(sp)
 4002848:	ddc00b17 	ldw	r23,44(sp)
 400284c:	dd800a17 	ldw	r22,40(sp)
 4002850:	dd400917 	ldw	r21,36(sp)
 4002854:	dd000817 	ldw	r20,32(sp)
 4002858:	dcc00717 	ldw	r19,28(sp)
 400285c:	dc800617 	ldw	r18,24(sp)
 4002860:	dc400517 	ldw	r17,20(sp)
 4002864:	dc000417 	ldw	r16,16(sp)
 4002868:	dec00e04 	addi	sp,sp,56
 400286c:	f800283a 	ret
 4002870:	0005883a 	mov	r2,zero
 4002874:	003ff206 	br	4002840 <__alt_data_end+0xfe002840>

04002878 <_dtoa_r>:
 4002878:	20801017 	ldw	r2,64(r4)
 400287c:	deffdf04 	addi	sp,sp,-132
 4002880:	dcc01a15 	stw	r19,104(sp)
 4002884:	dc801915 	stw	r18,100(sp)
 4002888:	dc401815 	stw	r17,96(sp)
 400288c:	dc001715 	stw	r16,92(sp)
 4002890:	dfc02015 	stw	ra,128(sp)
 4002894:	df001f15 	stw	fp,124(sp)
 4002898:	ddc01e15 	stw	r23,120(sp)
 400289c:	dd801d15 	stw	r22,116(sp)
 40028a0:	dd401c15 	stw	r21,112(sp)
 40028a4:	dd001b15 	stw	r20,108(sp)
 40028a8:	d9400315 	stw	r5,12(sp)
 40028ac:	d9c00415 	stw	r7,16(sp)
 40028b0:	2021883a 	mov	r16,r4
 40028b4:	3025883a 	mov	r18,r6
 40028b8:	dcc02317 	ldw	r19,140(sp)
 40028bc:	3023883a 	mov	r17,r6
 40028c0:	10000826 	beq	r2,zero,40028e4 <_dtoa_r+0x6c>
 40028c4:	20c01117 	ldw	r3,68(r4)
 40028c8:	01800044 	movi	r6,1
 40028cc:	100b883a 	mov	r5,r2
 40028d0:	30cc983a 	sll	r6,r6,r3
 40028d4:	10c00115 	stw	r3,4(r2)
 40028d8:	11800215 	stw	r6,8(r2)
 40028dc:	4005d380 	call	4005d38 <_Bfree>
 40028e0:	80001015 	stw	zero,64(r16)
 40028e4:	90002f16 	blt	r18,zero,40029a4 <_dtoa_r+0x12c>
 40028e8:	98000015 	stw	zero,0(r19)
 40028ec:	90dffc2c 	andhi	r3,r18,32752
 40028f0:	009ffc34 	movhi	r2,32752
 40028f4:	18801c26 	beq	r3,r2,4002968 <_dtoa_r+0xf0>
 40028f8:	d9000317 	ldw	r4,12(sp)
 40028fc:	880b883a 	mov	r5,r17
 4002900:	000d883a 	mov	r6,zero
 4002904:	000f883a 	mov	r7,zero
 4002908:	4008f8c0 	call	4008f8c <__nedf2>
 400290c:	10002c1e 	bne	r2,zero,40029c0 <_dtoa_r+0x148>
 4002910:	d9002217 	ldw	r4,136(sp)
 4002914:	d9c02417 	ldw	r7,144(sp)
 4002918:	00800044 	movi	r2,1
 400291c:	20800015 	stw	r2,0(r4)
 4002920:	38019426 	beq	r7,zero,4002f74 <_dtoa_r+0x6fc>
 4002924:	00810074 	movhi	r2,1025
 4002928:	10b0ae44 	addi	r2,r2,-15687
 400292c:	38800015 	stw	r2,0(r7)
 4002930:	15ffffc4 	addi	r23,r2,-1
 4002934:	b805883a 	mov	r2,r23
 4002938:	dfc02017 	ldw	ra,128(sp)
 400293c:	df001f17 	ldw	fp,124(sp)
 4002940:	ddc01e17 	ldw	r23,120(sp)
 4002944:	dd801d17 	ldw	r22,116(sp)
 4002948:	dd401c17 	ldw	r21,112(sp)
 400294c:	dd001b17 	ldw	r20,108(sp)
 4002950:	dcc01a17 	ldw	r19,104(sp)
 4002954:	dc801917 	ldw	r18,100(sp)
 4002958:	dc401817 	ldw	r17,96(sp)
 400295c:	dc001717 	ldw	r16,92(sp)
 4002960:	dec02104 	addi	sp,sp,132
 4002964:	f800283a 	ret
 4002968:	d8c02217 	ldw	r3,136(sp)
 400296c:	d9000317 	ldw	r4,12(sp)
 4002970:	0089c3c4 	movi	r2,9999
 4002974:	18800015 	stw	r2,0(r3)
 4002978:	20016c26 	beq	r4,zero,4002f2c <_dtoa_r+0x6b4>
 400297c:	05c10074 	movhi	r23,1025
 4002980:	bdf0ba04 	addi	r23,r23,-15640
 4002984:	d9c02417 	ldw	r7,144(sp)
 4002988:	383fea26 	beq	r7,zero,4002934 <__alt_data_end+0xfe002934>
 400298c:	b88000c7 	ldb	r2,3(r23)
 4002990:	10016d1e 	bne	r2,zero,4002f48 <_dtoa_r+0x6d0>
 4002994:	b88000c4 	addi	r2,r23,3
 4002998:	d8c02417 	ldw	r3,144(sp)
 400299c:	18800015 	stw	r2,0(r3)
 40029a0:	003fe406 	br	4002934 <__alt_data_end+0xfe002934>
 40029a4:	04600034 	movhi	r17,32768
 40029a8:	8c7fffc4 	addi	r17,r17,-1
 40029ac:	9462703a 	and	r17,r18,r17
 40029b0:	00800044 	movi	r2,1
 40029b4:	98800015 	stw	r2,0(r19)
 40029b8:	8825883a 	mov	r18,r17
 40029bc:	003fcb06 	br	40028ec <__alt_data_end+0xfe0028ec>
 40029c0:	d9400317 	ldw	r5,12(sp)
 40029c4:	9028d53a 	srli	r20,r18,20
 40029c8:	d8800204 	addi	r2,sp,8
 40029cc:	d8800015 	stw	r2,0(sp)
 40029d0:	8009883a 	mov	r4,r16
 40029d4:	880d883a 	mov	r6,r17
 40029d8:	d9c00104 	addi	r7,sp,4
 40029dc:	40069840 	call	4006984 <__d2b>
 40029e0:	a501ffcc 	andi	r20,r20,2047
 40029e4:	1039883a 	mov	fp,r2
 40029e8:	a001591e 	bne	r20,zero,4002f50 <_dtoa_r+0x6d8>
 40029ec:	dd400217 	ldw	r21,8(sp)
 40029f0:	dd000117 	ldw	r20,4(sp)
 40029f4:	00befbc4 	movi	r2,-1041
 40029f8:	ad29883a 	add	r20,r21,r20
 40029fc:	a082d216 	blt	r20,r2,4003548 <_dtoa_r+0xcd0>
 4002a00:	d8c00317 	ldw	r3,12(sp)
 4002a04:	013f0384 	movi	r4,-1010
 4002a08:	2509c83a 	sub	r4,r4,r20
 4002a0c:	a0810484 	addi	r2,r20,1042
 4002a10:	9124983a 	sll	r18,r18,r4
 4002a14:	1884d83a 	srl	r2,r3,r2
 4002a18:	9088b03a 	or	r4,r18,r2
 4002a1c:	40092a40 	call	40092a4 <__floatunsidf>
 4002a20:	1009883a 	mov	r4,r2
 4002a24:	017f8434 	movhi	r5,65040
 4002a28:	00800044 	movi	r2,1
 4002a2c:	194b883a 	add	r5,r3,r5
 4002a30:	a53fffc4 	addi	r20,r20,-1
 4002a34:	d8800f15 	stw	r2,60(sp)
 4002a38:	000d883a 	mov	r6,zero
 4002a3c:	01cffe34 	movhi	r7,16376
 4002a40:	4008a380 	call	4008a38 <__subdf3>
 4002a44:	1009883a 	mov	r4,r2
 4002a48:	180b883a 	mov	r5,r3
 4002a4c:	0198dbf4 	movhi	r6,25455
 4002a50:	3190d844 	addi	r6,r6,17249
 4002a54:	01cff4f4 	movhi	r7,16339
 4002a58:	39e1e9c4 	addi	r7,r7,-30809
 4002a5c:	4008a980 	call	4008a98 <__muldf3>
 4002a60:	180b883a 	mov	r5,r3
 4002a64:	01a2d874 	movhi	r6,35681
 4002a68:	31b22cc4 	addi	r6,r6,-14157
 4002a6c:	01cff1f4 	movhi	r7,16327
 4002a70:	39e28a04 	addi	r7,r7,-30168
 4002a74:	1009883a 	mov	r4,r2
 4002a78:	40089e40 	call	40089e4 <__adddf3>
 4002a7c:	a009883a 	mov	r4,r20
 4002a80:	1027883a 	mov	r19,r2
 4002a84:	1825883a 	mov	r18,r3
 4002a88:	400910c0 	call	400910c <__floatsidf>
 4002a8c:	1009883a 	mov	r4,r2
 4002a90:	180b883a 	mov	r5,r3
 4002a94:	019427f4 	movhi	r6,20639
 4002a98:	319e7ec4 	addi	r6,r6,31227
 4002a9c:	01cff4f4 	movhi	r7,16339
 4002aa0:	39d104c4 	addi	r7,r7,17427
 4002aa4:	4008a980 	call	4008a98 <__muldf3>
 4002aa8:	9809883a 	mov	r4,r19
 4002aac:	900b883a 	mov	r5,r18
 4002ab0:	100d883a 	mov	r6,r2
 4002ab4:	180f883a 	mov	r7,r3
 4002ab8:	40089e40 	call	40089e4 <__adddf3>
 4002abc:	1009883a 	mov	r4,r2
 4002ac0:	180b883a 	mov	r5,r3
 4002ac4:	1027883a 	mov	r19,r2
 4002ac8:	1825883a 	mov	r18,r3
 4002acc:	40091e00 	call	40091e0 <__fixdfsi>
 4002ad0:	9809883a 	mov	r4,r19
 4002ad4:	900b883a 	mov	r5,r18
 4002ad8:	000d883a 	mov	r6,zero
 4002adc:	000f883a 	mov	r7,zero
 4002ae0:	d8800615 	stw	r2,24(sp)
 4002ae4:	40090b00 	call	40090b0 <__ltdf2>
 4002ae8:	10027e16 	blt	r2,zero,40034e4 <_dtoa_r+0xc6c>
 4002aec:	d8c00617 	ldw	r3,24(sp)
 4002af0:	00800584 	movi	r2,22
 4002af4:	10c26c36 	bltu	r2,r3,40034a8 <_dtoa_r+0xc30>
 4002af8:	180490fa 	slli	r2,r3,3
 4002afc:	00c10074 	movhi	r3,1025
 4002b00:	18f0e004 	addi	r3,r3,-15488
 4002b04:	d9800317 	ldw	r6,12(sp)
 4002b08:	1885883a 	add	r2,r3,r2
 4002b0c:	11000017 	ldw	r4,0(r2)
 4002b10:	11400117 	ldw	r5,4(r2)
 4002b14:	880f883a 	mov	r7,r17
 4002b18:	4008fe80 	call	4008fe8 <__gtdf2>
 4002b1c:	00828f0e 	bge	zero,r2,400355c <_dtoa_r+0xce4>
 4002b20:	d8800617 	ldw	r2,24(sp)
 4002b24:	d8000d15 	stw	zero,52(sp)
 4002b28:	10bfffc4 	addi	r2,r2,-1
 4002b2c:	d8800615 	stw	r2,24(sp)
 4002b30:	ad29c83a 	sub	r20,r21,r20
 4002b34:	a53fffc4 	addi	r20,r20,-1
 4002b38:	a0026616 	blt	r20,zero,40034d4 <_dtoa_r+0xc5c>
 4002b3c:	dd000715 	stw	r20,28(sp)
 4002b40:	d8000815 	stw	zero,32(sp)
 4002b44:	d8800617 	ldw	r2,24(sp)
 4002b48:	10025a16 	blt	r2,zero,40034b4 <_dtoa_r+0xc3c>
 4002b4c:	d8c00717 	ldw	r3,28(sp)
 4002b50:	d8800b15 	stw	r2,44(sp)
 4002b54:	d8000a15 	stw	zero,40(sp)
 4002b58:	1887883a 	add	r3,r3,r2
 4002b5c:	d8c00715 	stw	r3,28(sp)
 4002b60:	d9c00417 	ldw	r7,16(sp)
 4002b64:	00800244 	movi	r2,9
 4002b68:	11c10536 	bltu	r2,r7,4002f80 <_dtoa_r+0x708>
 4002b6c:	00800144 	movi	r2,5
 4002b70:	11c4c60e 	bge	r2,r7,4003e8c <_dtoa_r+0x1614>
 4002b74:	39ffff04 	addi	r7,r7,-4
 4002b78:	d9c00415 	stw	r7,16(sp)
 4002b7c:	0027883a 	mov	r19,zero
 4002b80:	d9c00417 	ldw	r7,16(sp)
 4002b84:	008000c4 	movi	r2,3
 4002b88:	3883a226 	beq	r7,r2,4003a14 <_dtoa_r+0x119c>
 4002b8c:	11c2bc16 	blt	r2,r7,4003680 <_dtoa_r+0xe08>
 4002b90:	00800084 	movi	r2,2
 4002b94:	3880fb1e 	bne	r7,r2,4002f84 <_dtoa_r+0x70c>
 4002b98:	d8000c15 	stw	zero,48(sp)
 4002b9c:	d9002117 	ldw	r4,132(sp)
 4002ba0:	0103ae0e 	bge	zero,r4,4003a5c <_dtoa_r+0x11e4>
 4002ba4:	2025883a 	mov	r18,r4
 4002ba8:	d9000e15 	stw	r4,56(sp)
 4002bac:	d9000915 	stw	r4,36(sp)
 4002bb0:	80001115 	stw	zero,68(r16)
 4002bb4:	008005c4 	movi	r2,23
 4002bb8:	1484b22e 	bgeu	r2,r18,4003e84 <_dtoa_r+0x160c>
 4002bbc:	00c00044 	movi	r3,1
 4002bc0:	00800104 	movi	r2,4
 4002bc4:	1085883a 	add	r2,r2,r2
 4002bc8:	11000504 	addi	r4,r2,20
 4002bcc:	180b883a 	mov	r5,r3
 4002bd0:	18c00044 	addi	r3,r3,1
 4002bd4:	913ffb2e 	bgeu	r18,r4,4002bc4 <__alt_data_end+0xfe002bc4>
 4002bd8:	81401115 	stw	r5,68(r16)
 4002bdc:	8009883a 	mov	r4,r16
 4002be0:	4005c900 	call	4005c90 <_Balloc>
 4002be4:	102f883a 	mov	r23,r2
 4002be8:	80801015 	stw	r2,64(r16)
 4002bec:	00800384 	movi	r2,14
 4002bf0:	1480f036 	bltu	r2,r18,4002fb4 <_dtoa_r+0x73c>
 4002bf4:	9800ef26 	beq	r19,zero,4002fb4 <_dtoa_r+0x73c>
 4002bf8:	d8800617 	ldw	r2,24(sp)
 4002bfc:	00839c0e 	bge	zero,r2,4003a70 <_dtoa_r+0x11f8>
 4002c00:	d8c00617 	ldw	r3,24(sp)
 4002c04:	108003cc 	andi	r2,r2,15
 4002c08:	100490fa 	slli	r2,r2,3
 4002c0c:	182bd13a 	srai	r21,r3,4
 4002c10:	00c10074 	movhi	r3,1025
 4002c14:	18f0e004 	addi	r3,r3,-15488
 4002c18:	1885883a 	add	r2,r3,r2
 4002c1c:	a8c0040c 	andi	r3,r21,16
 4002c20:	12800017 	ldw	r10,0(r2)
 4002c24:	15800117 	ldw	r22,4(r2)
 4002c28:	18038726 	beq	r3,zero,4003a48 <_dtoa_r+0x11d0>
 4002c2c:	00810074 	movhi	r2,1025
 4002c30:	10b0d604 	addi	r2,r2,-15528
 4002c34:	11800817 	ldw	r6,32(r2)
 4002c38:	11c00917 	ldw	r7,36(r2)
 4002c3c:	d9000317 	ldw	r4,12(sp)
 4002c40:	880b883a 	mov	r5,r17
 4002c44:	da801515 	stw	r10,84(sp)
 4002c48:	4008d7c0 	call	4008d7c <__divdf3>
 4002c4c:	da801517 	ldw	r10,84(sp)
 4002c50:	d8801015 	stw	r2,64(sp)
 4002c54:	1829883a 	mov	r20,r3
 4002c58:	ad4003cc 	andi	r21,r21,15
 4002c5c:	048000c4 	movi	r18,3
 4002c60:	a8001126 	beq	r21,zero,4002ca8 <_dtoa_r+0x430>
 4002c64:	04c10074 	movhi	r19,1025
 4002c68:	9cf0d604 	addi	r19,r19,-15528
 4002c6c:	5005883a 	mov	r2,r10
 4002c70:	b007883a 	mov	r3,r22
 4002c74:	a980004c 	andi	r6,r21,1
 4002c78:	1009883a 	mov	r4,r2
 4002c7c:	a82bd07a 	srai	r21,r21,1
 4002c80:	180b883a 	mov	r5,r3
 4002c84:	30000426 	beq	r6,zero,4002c98 <_dtoa_r+0x420>
 4002c88:	99800017 	ldw	r6,0(r19)
 4002c8c:	99c00117 	ldw	r7,4(r19)
 4002c90:	94800044 	addi	r18,r18,1
 4002c94:	4008a980 	call	4008a98 <__muldf3>
 4002c98:	9cc00204 	addi	r19,r19,8
 4002c9c:	a83ff51e 	bne	r21,zero,4002c74 <__alt_data_end+0xfe002c74>
 4002ca0:	1015883a 	mov	r10,r2
 4002ca4:	182d883a 	mov	r22,r3
 4002ca8:	d9001017 	ldw	r4,64(sp)
 4002cac:	a00b883a 	mov	r5,r20
 4002cb0:	500d883a 	mov	r6,r10
 4002cb4:	b00f883a 	mov	r7,r22
 4002cb8:	4008d7c0 	call	4008d7c <__divdf3>
 4002cbc:	1027883a 	mov	r19,r2
 4002cc0:	1829883a 	mov	r20,r3
 4002cc4:	d8c00d17 	ldw	r3,52(sp)
 4002cc8:	18000626 	beq	r3,zero,4002ce4 <_dtoa_r+0x46c>
 4002ccc:	9809883a 	mov	r4,r19
 4002cd0:	a00b883a 	mov	r5,r20
 4002cd4:	000d883a 	mov	r6,zero
 4002cd8:	01cffc34 	movhi	r7,16368
 4002cdc:	40090b00 	call	40090b0 <__ltdf2>
 4002ce0:	10040e16 	blt	r2,zero,4003d1c <_dtoa_r+0x14a4>
 4002ce4:	9009883a 	mov	r4,r18
 4002ce8:	400910c0 	call	400910c <__floatsidf>
 4002cec:	1009883a 	mov	r4,r2
 4002cf0:	180b883a 	mov	r5,r3
 4002cf4:	980d883a 	mov	r6,r19
 4002cf8:	a00f883a 	mov	r7,r20
 4002cfc:	4008a980 	call	4008a98 <__muldf3>
 4002d00:	1009883a 	mov	r4,r2
 4002d04:	180b883a 	mov	r5,r3
 4002d08:	000d883a 	mov	r6,zero
 4002d0c:	01d00734 	movhi	r7,16412
 4002d10:	40089e40 	call	40089e4 <__adddf3>
 4002d14:	057f3034 	movhi	r21,64704
 4002d18:	1d6b883a 	add	r21,r3,r21
 4002d1c:	d8c00917 	ldw	r3,36(sp)
 4002d20:	1025883a 	mov	r18,r2
 4002d24:	18031f26 	beq	r3,zero,40039a4 <_dtoa_r+0x112c>
 4002d28:	d8800617 	ldw	r2,24(sp)
 4002d2c:	dac00917 	ldw	r11,36(sp)
 4002d30:	d8801315 	stw	r2,76(sp)
 4002d34:	d8c00c17 	ldw	r3,48(sp)
 4002d38:	18039026 	beq	r3,zero,4003b7c <_dtoa_r+0x1304>
 4002d3c:	58bfffc4 	addi	r2,r11,-1
 4002d40:	100490fa 	slli	r2,r2,3
 4002d44:	00c10074 	movhi	r3,1025
 4002d48:	18f0e004 	addi	r3,r3,-15488
 4002d4c:	0009883a 	mov	r4,zero
 4002d50:	1885883a 	add	r2,r3,r2
 4002d54:	11800017 	ldw	r6,0(r2)
 4002d58:	11c00117 	ldw	r7,4(r2)
 4002d5c:	014ff834 	movhi	r5,16352
 4002d60:	dac01615 	stw	r11,88(sp)
 4002d64:	4008d7c0 	call	4008d7c <__divdf3>
 4002d68:	900d883a 	mov	r6,r18
 4002d6c:	a80f883a 	mov	r7,r21
 4002d70:	1009883a 	mov	r4,r2
 4002d74:	180b883a 	mov	r5,r3
 4002d78:	4008a380 	call	4008a38 <__subdf3>
 4002d7c:	a00b883a 	mov	r5,r20
 4002d80:	9809883a 	mov	r4,r19
 4002d84:	182b883a 	mov	r21,r3
 4002d88:	d8801015 	stw	r2,64(sp)
 4002d8c:	40091e00 	call	40091e0 <__fixdfsi>
 4002d90:	1009883a 	mov	r4,r2
 4002d94:	d8801515 	stw	r2,84(sp)
 4002d98:	400910c0 	call	400910c <__floatsidf>
 4002d9c:	9809883a 	mov	r4,r19
 4002da0:	a00b883a 	mov	r5,r20
 4002da4:	100d883a 	mov	r6,r2
 4002da8:	180f883a 	mov	r7,r3
 4002dac:	4008a380 	call	4008a38 <__subdf3>
 4002db0:	da401517 	ldw	r9,84(sp)
 4002db4:	d9001017 	ldw	r4,64(sp)
 4002db8:	a80b883a 	mov	r5,r21
 4002dbc:	4d000c04 	addi	r20,r9,48
 4002dc0:	bd000005 	stb	r20,0(r23)
 4002dc4:	100d883a 	mov	r6,r2
 4002dc8:	180f883a 	mov	r7,r3
 4002dcc:	bd800044 	addi	r22,r23,1
 4002dd0:	1025883a 	mov	r18,r2
 4002dd4:	1827883a 	mov	r19,r3
 4002dd8:	4008fe80 	call	4008fe8 <__gtdf2>
 4002ddc:	00842216 	blt	zero,r2,4003e68 <_dtoa_r+0x15f0>
 4002de0:	0009883a 	mov	r4,zero
 4002de4:	014ffc34 	movhi	r5,16368
 4002de8:	900d883a 	mov	r6,r18
 4002dec:	980f883a 	mov	r7,r19
 4002df0:	4008a380 	call	4008a38 <__subdf3>
 4002df4:	d9001017 	ldw	r4,64(sp)
 4002df8:	a80b883a 	mov	r5,r21
 4002dfc:	100d883a 	mov	r6,r2
 4002e00:	180f883a 	mov	r7,r3
 4002e04:	4008fe80 	call	4008fe8 <__gtdf2>
 4002e08:	dac01617 	ldw	r11,88(sp)
 4002e0c:	00841316 	blt	zero,r2,4003e5c <_dtoa_r+0x15e4>
 4002e10:	00800044 	movi	r2,1
 4002e14:	12c0670e 	bge	r2,r11,4002fb4 <_dtoa_r+0x73c>
 4002e18:	bad7883a 	add	r11,r23,r11
 4002e1c:	df001115 	stw	fp,68(sp)
 4002e20:	dc401215 	stw	r17,72(sp)
 4002e24:	5839883a 	mov	fp,r11
 4002e28:	dc401017 	ldw	r17,64(sp)
 4002e2c:	00000806 	br	4002e50 <_dtoa_r+0x5d8>
 4002e30:	4008a380 	call	4008a38 <__subdf3>
 4002e34:	1009883a 	mov	r4,r2
 4002e38:	180b883a 	mov	r5,r3
 4002e3c:	880d883a 	mov	r6,r17
 4002e40:	a80f883a 	mov	r7,r21
 4002e44:	40090b00 	call	40090b0 <__ltdf2>
 4002e48:	1003ee16 	blt	r2,zero,4003e04 <_dtoa_r+0x158c>
 4002e4c:	b703f126 	beq	r22,fp,4003e14 <_dtoa_r+0x159c>
 4002e50:	8809883a 	mov	r4,r17
 4002e54:	a80b883a 	mov	r5,r21
 4002e58:	000d883a 	mov	r6,zero
 4002e5c:	01d00934 	movhi	r7,16420
 4002e60:	4008a980 	call	4008a98 <__muldf3>
 4002e64:	000d883a 	mov	r6,zero
 4002e68:	01d00934 	movhi	r7,16420
 4002e6c:	9009883a 	mov	r4,r18
 4002e70:	980b883a 	mov	r5,r19
 4002e74:	1023883a 	mov	r17,r2
 4002e78:	182b883a 	mov	r21,r3
 4002e7c:	4008a980 	call	4008a98 <__muldf3>
 4002e80:	180b883a 	mov	r5,r3
 4002e84:	1009883a 	mov	r4,r2
 4002e88:	1825883a 	mov	r18,r3
 4002e8c:	1027883a 	mov	r19,r2
 4002e90:	40091e00 	call	40091e0 <__fixdfsi>
 4002e94:	1009883a 	mov	r4,r2
 4002e98:	1029883a 	mov	r20,r2
 4002e9c:	400910c0 	call	400910c <__floatsidf>
 4002ea0:	9809883a 	mov	r4,r19
 4002ea4:	900b883a 	mov	r5,r18
 4002ea8:	100d883a 	mov	r6,r2
 4002eac:	180f883a 	mov	r7,r3
 4002eb0:	4008a380 	call	4008a38 <__subdf3>
 4002eb4:	a5000c04 	addi	r20,r20,48
 4002eb8:	b5000005 	stb	r20,0(r22)
 4002ebc:	1009883a 	mov	r4,r2
 4002ec0:	180b883a 	mov	r5,r3
 4002ec4:	880d883a 	mov	r6,r17
 4002ec8:	a80f883a 	mov	r7,r21
 4002ecc:	1025883a 	mov	r18,r2
 4002ed0:	1827883a 	mov	r19,r3
 4002ed4:	40090b00 	call	40090b0 <__ltdf2>
 4002ed8:	b5800044 	addi	r22,r22,1
 4002edc:	0009883a 	mov	r4,zero
 4002ee0:	014ffc34 	movhi	r5,16368
 4002ee4:	900d883a 	mov	r6,r18
 4002ee8:	980f883a 	mov	r7,r19
 4002eec:	103fd00e 	bge	r2,zero,4002e30 <__alt_data_end+0xfe002e30>
 4002ef0:	d9001317 	ldw	r4,76(sp)
 4002ef4:	df001117 	ldw	fp,68(sp)
 4002ef8:	d9000615 	stw	r4,24(sp)
 4002efc:	8009883a 	mov	r4,r16
 4002f00:	e00b883a 	mov	r5,fp
 4002f04:	4005d380 	call	4005d38 <_Bfree>
 4002f08:	d9c00617 	ldw	r7,24(sp)
 4002f0c:	d8c02217 	ldw	r3,136(sp)
 4002f10:	d9002417 	ldw	r4,144(sp)
 4002f14:	b0000005 	stb	zero,0(r22)
 4002f18:	38800044 	addi	r2,r7,1
 4002f1c:	18800015 	stw	r2,0(r3)
 4002f20:	203e8426 	beq	r4,zero,4002934 <__alt_data_end+0xfe002934>
 4002f24:	25800015 	stw	r22,0(r4)
 4002f28:	003e8206 	br	4002934 <__alt_data_end+0xfe002934>
 4002f2c:	00800434 	movhi	r2,16
 4002f30:	10bfffc4 	addi	r2,r2,-1
 4002f34:	90a4703a 	and	r18,r18,r2
 4002f38:	903e901e 	bne	r18,zero,400297c <__alt_data_end+0xfe00297c>
 4002f3c:	05c10074 	movhi	r23,1025
 4002f40:	bdf0b704 	addi	r23,r23,-15652
 4002f44:	003e8f06 	br	4002984 <__alt_data_end+0xfe002984>
 4002f48:	b8800204 	addi	r2,r23,8
 4002f4c:	003e9206 	br	4002998 <__alt_data_end+0xfe002998>
 4002f50:	01400434 	movhi	r5,16
 4002f54:	297fffc4 	addi	r5,r5,-1
 4002f58:	894a703a 	and	r5,r17,r5
 4002f5c:	d9000317 	ldw	r4,12(sp)
 4002f60:	294ffc34 	orhi	r5,r5,16368
 4002f64:	a53f0044 	addi	r20,r20,-1023
 4002f68:	dd400217 	ldw	r21,8(sp)
 4002f6c:	d8000f15 	stw	zero,60(sp)
 4002f70:	003eb106 	br	4002a38 <__alt_data_end+0xfe002a38>
 4002f74:	05c10074 	movhi	r23,1025
 4002f78:	bdf0ae04 	addi	r23,r23,-15688
 4002f7c:	003e6d06 	br	4002934 <__alt_data_end+0xfe002934>
 4002f80:	d8000415 	stw	zero,16(sp)
 4002f84:	80001115 	stw	zero,68(r16)
 4002f88:	8009883a 	mov	r4,r16
 4002f8c:	000b883a 	mov	r5,zero
 4002f90:	4005c900 	call	4005c90 <_Balloc>
 4002f94:	01ffffc4 	movi	r7,-1
 4002f98:	102f883a 	mov	r23,r2
 4002f9c:	80801015 	stw	r2,64(r16)
 4002fa0:	00800044 	movi	r2,1
 4002fa4:	d9c00915 	stw	r7,36(sp)
 4002fa8:	d8002115 	stw	zero,132(sp)
 4002fac:	d9c00e15 	stw	r7,56(sp)
 4002fb0:	d8800c15 	stw	r2,48(sp)
 4002fb4:	d8800117 	ldw	r2,4(sp)
 4002fb8:	10008b16 	blt	r2,zero,40031e8 <_dtoa_r+0x970>
 4002fbc:	d9000617 	ldw	r4,24(sp)
 4002fc0:	00c00384 	movi	r3,14
 4002fc4:	19008816 	blt	r3,r4,40031e8 <_dtoa_r+0x970>
 4002fc8:	200490fa 	slli	r2,r4,3
 4002fcc:	d9c02117 	ldw	r7,132(sp)
 4002fd0:	00c10074 	movhi	r3,1025
 4002fd4:	18f0e004 	addi	r3,r3,-15488
 4002fd8:	1885883a 	add	r2,r3,r2
 4002fdc:	14800017 	ldw	r18,0(r2)
 4002fe0:	14c00117 	ldw	r19,4(r2)
 4002fe4:	3801c916 	blt	r7,zero,400370c <_dtoa_r+0xe94>
 4002fe8:	d9000317 	ldw	r4,12(sp)
 4002fec:	900d883a 	mov	r6,r18
 4002ff0:	980f883a 	mov	r7,r19
 4002ff4:	880b883a 	mov	r5,r17
 4002ff8:	4008d7c0 	call	4008d7c <__divdf3>
 4002ffc:	180b883a 	mov	r5,r3
 4003000:	1009883a 	mov	r4,r2
 4003004:	40091e00 	call	40091e0 <__fixdfsi>
 4003008:	1009883a 	mov	r4,r2
 400300c:	102b883a 	mov	r21,r2
 4003010:	400910c0 	call	400910c <__floatsidf>
 4003014:	1009883a 	mov	r4,r2
 4003018:	180b883a 	mov	r5,r3
 400301c:	900d883a 	mov	r6,r18
 4003020:	980f883a 	mov	r7,r19
 4003024:	4008a980 	call	4008a98 <__muldf3>
 4003028:	d9000317 	ldw	r4,12(sp)
 400302c:	880b883a 	mov	r5,r17
 4003030:	100d883a 	mov	r6,r2
 4003034:	180f883a 	mov	r7,r3
 4003038:	4008a380 	call	4008a38 <__subdf3>
 400303c:	d9c00917 	ldw	r7,36(sp)
 4003040:	1009883a 	mov	r4,r2
 4003044:	a8800c04 	addi	r2,r21,48
 4003048:	b8800005 	stb	r2,0(r23)
 400304c:	01800044 	movi	r6,1
 4003050:	180b883a 	mov	r5,r3
 4003054:	2005883a 	mov	r2,r4
 4003058:	bd800044 	addi	r22,r23,1
 400305c:	39803726 	beq	r7,r6,400313c <_dtoa_r+0x8c4>
 4003060:	000d883a 	mov	r6,zero
 4003064:	01d00934 	movhi	r7,16420
 4003068:	4008a980 	call	4008a98 <__muldf3>
 400306c:	1009883a 	mov	r4,r2
 4003070:	180b883a 	mov	r5,r3
 4003074:	000d883a 	mov	r6,zero
 4003078:	000f883a 	mov	r7,zero
 400307c:	1029883a 	mov	r20,r2
 4003080:	1823883a 	mov	r17,r3
 4003084:	4008f300 	call	4008f30 <__eqdf2>
 4003088:	103f9c26 	beq	r2,zero,4002efc <__alt_data_end+0xfe002efc>
 400308c:	dd400917 	ldw	r21,36(sp)
 4003090:	dc000415 	stw	r16,16(sp)
 4003094:	00000906 	br	40030bc <_dtoa_r+0x844>
 4003098:	4008a980 	call	4008a98 <__muldf3>
 400309c:	1009883a 	mov	r4,r2
 40030a0:	180b883a 	mov	r5,r3
 40030a4:	000d883a 	mov	r6,zero
 40030a8:	000f883a 	mov	r7,zero
 40030ac:	1029883a 	mov	r20,r2
 40030b0:	1823883a 	mov	r17,r3
 40030b4:	4008f300 	call	4008f30 <__eqdf2>
 40030b8:	10022926 	beq	r2,zero,4003960 <_dtoa_r+0x10e8>
 40030bc:	900d883a 	mov	r6,r18
 40030c0:	980f883a 	mov	r7,r19
 40030c4:	a009883a 	mov	r4,r20
 40030c8:	880b883a 	mov	r5,r17
 40030cc:	4008d7c0 	call	4008d7c <__divdf3>
 40030d0:	180b883a 	mov	r5,r3
 40030d4:	1009883a 	mov	r4,r2
 40030d8:	40091e00 	call	40091e0 <__fixdfsi>
 40030dc:	1009883a 	mov	r4,r2
 40030e0:	1021883a 	mov	r16,r2
 40030e4:	400910c0 	call	400910c <__floatsidf>
 40030e8:	1009883a 	mov	r4,r2
 40030ec:	180b883a 	mov	r5,r3
 40030f0:	900d883a 	mov	r6,r18
 40030f4:	980f883a 	mov	r7,r19
 40030f8:	4008a980 	call	4008a98 <__muldf3>
 40030fc:	a009883a 	mov	r4,r20
 4003100:	880b883a 	mov	r5,r17
 4003104:	100d883a 	mov	r6,r2
 4003108:	180f883a 	mov	r7,r3
 400310c:	4008a380 	call	4008a38 <__subdf3>
 4003110:	82400c04 	addi	r9,r16,48
 4003114:	b2400005 	stb	r9,0(r22)
 4003118:	b5800044 	addi	r22,r22,1
 400311c:	b5d3c83a 	sub	r9,r22,r23
 4003120:	000d883a 	mov	r6,zero
 4003124:	01d00934 	movhi	r7,16420
 4003128:	1009883a 	mov	r4,r2
 400312c:	180b883a 	mov	r5,r3
 4003130:	aa7fd91e 	bne	r21,r9,4003098 <__alt_data_end+0xfe003098>
 4003134:	802b883a 	mov	r21,r16
 4003138:	dc000417 	ldw	r16,16(sp)
 400313c:	1009883a 	mov	r4,r2
 4003140:	180b883a 	mov	r5,r3
 4003144:	100d883a 	mov	r6,r2
 4003148:	180f883a 	mov	r7,r3
 400314c:	40089e40 	call	40089e4 <__adddf3>
 4003150:	9009883a 	mov	r4,r18
 4003154:	980b883a 	mov	r5,r19
 4003158:	100d883a 	mov	r6,r2
 400315c:	180f883a 	mov	r7,r3
 4003160:	1023883a 	mov	r17,r2
 4003164:	1829883a 	mov	r20,r3
 4003168:	40090b00 	call	40090b0 <__ltdf2>
 400316c:	10000816 	blt	r2,zero,4003190 <_dtoa_r+0x918>
 4003170:	9009883a 	mov	r4,r18
 4003174:	980b883a 	mov	r5,r19
 4003178:	880d883a 	mov	r6,r17
 400317c:	a00f883a 	mov	r7,r20
 4003180:	4008f8c0 	call	4008f8c <__nedf2>
 4003184:	103f5d1e 	bne	r2,zero,4002efc <__alt_data_end+0xfe002efc>
 4003188:	ad40004c 	andi	r21,r21,1
 400318c:	a83f5b26 	beq	r21,zero,4002efc <__alt_data_end+0xfe002efc>
 4003190:	b53fffc3 	ldbu	r20,-1(r22)
 4003194:	b0ffff84 	addi	r3,r22,-2
 4003198:	01400e44 	movi	r5,57
 400319c:	00000306 	br	40031ac <_dtoa_r+0x934>
 40031a0:	1d000003 	ldbu	r20,0(r3)
 40031a4:	102d883a 	mov	r22,r2
 40031a8:	18ffffc4 	addi	r3,r3,-1
 40031ac:	a1003fcc 	andi	r4,r20,255
 40031b0:	2100201c 	xori	r4,r4,128
 40031b4:	213fe004 	addi	r4,r4,-128
 40031b8:	b0bfffc4 	addi	r2,r22,-1
 40031bc:	2142ca1e 	bne	r4,r5,4003ce8 <_dtoa_r+0x1470>
 40031c0:	b8bff71e 	bne	r23,r2,40031a0 <__alt_data_end+0xfe0031a0>
 40031c4:	d8800617 	ldw	r2,24(sp)
 40031c8:	05000c44 	movi	r20,49
 40031cc:	10800044 	addi	r2,r2,1
 40031d0:	d8800615 	stw	r2,24(sp)
 40031d4:	00800c04 	movi	r2,48
 40031d8:	b8800005 	stb	r2,0(r23)
 40031dc:	b805883a 	mov	r2,r23
 40031e0:	15000005 	stb	r20,0(r2)
 40031e4:	003f4506 	br	4002efc <__alt_data_end+0xfe002efc>
 40031e8:	d9c00c17 	ldw	r7,48(sp)
 40031ec:	3800c926 	beq	r7,zero,4003514 <_dtoa_r+0xc9c>
 40031f0:	d9c00417 	ldw	r7,16(sp)
 40031f4:	00c00044 	movi	r3,1
 40031f8:	19c16c0e 	bge	r3,r7,40037ac <_dtoa_r+0xf34>
 40031fc:	d9000917 	ldw	r4,36(sp)
 4003200:	d9c00a17 	ldw	r7,40(sp)
 4003204:	24ffffc4 	addi	r19,r4,-1
 4003208:	3cc20716 	blt	r7,r19,4003a28 <_dtoa_r+0x11b0>
 400320c:	3ce7c83a 	sub	r19,r7,r19
 4003210:	d9c00917 	ldw	r7,36(sp)
 4003214:	3802ae16 	blt	r7,zero,4003cd0 <_dtoa_r+0x1458>
 4003218:	dc800817 	ldw	r18,32(sp)
 400321c:	d8800917 	ldw	r2,36(sp)
 4003220:	d8c00817 	ldw	r3,32(sp)
 4003224:	d9c00717 	ldw	r7,28(sp)
 4003228:	8009883a 	mov	r4,r16
 400322c:	1887883a 	add	r3,r3,r2
 4003230:	388f883a 	add	r7,r7,r2
 4003234:	01400044 	movi	r5,1
 4003238:	d8c00815 	stw	r3,32(sp)
 400323c:	d9c00715 	stw	r7,28(sp)
 4003240:	40060c00 	call	40060c0 <__i2b>
 4003244:	102b883a 	mov	r21,r2
 4003248:	90000a26 	beq	r18,zero,4003274 <_dtoa_r+0x9fc>
 400324c:	d8800717 	ldw	r2,28(sp)
 4003250:	0080080e 	bge	zero,r2,4003274 <_dtoa_r+0x9fc>
 4003254:	90812b16 	blt	r18,r2,4003704 <_dtoa_r+0xe8c>
 4003258:	d8c00817 	ldw	r3,32(sp)
 400325c:	d9000717 	ldw	r4,28(sp)
 4003260:	90a5c83a 	sub	r18,r18,r2
 4003264:	1887c83a 	sub	r3,r3,r2
 4003268:	2089c83a 	sub	r4,r4,r2
 400326c:	d8c00815 	stw	r3,32(sp)
 4003270:	d9000715 	stw	r4,28(sp)
 4003274:	d9c00a17 	ldw	r7,40(sp)
 4003278:	01c0140e 	bge	zero,r7,40032cc <_dtoa_r+0xa54>
 400327c:	d8800c17 	ldw	r2,48(sp)
 4003280:	1001de26 	beq	r2,zero,40039fc <_dtoa_r+0x1184>
 4003284:	04c00e0e 	bge	zero,r19,40032c0 <_dtoa_r+0xa48>
 4003288:	a80b883a 	mov	r5,r21
 400328c:	8009883a 	mov	r4,r16
 4003290:	980d883a 	mov	r6,r19
 4003294:	40063540 	call	4006354 <__pow5mult>
 4003298:	e00d883a 	mov	r6,fp
 400329c:	8009883a 	mov	r4,r16
 40032a0:	100b883a 	mov	r5,r2
 40032a4:	102b883a 	mov	r21,r2
 40032a8:	40060fc0 	call	40060fc <__multiply>
 40032ac:	1029883a 	mov	r20,r2
 40032b0:	e00b883a 	mov	r5,fp
 40032b4:	8009883a 	mov	r4,r16
 40032b8:	4005d380 	call	4005d38 <_Bfree>
 40032bc:	a039883a 	mov	fp,r20
 40032c0:	d8c00a17 	ldw	r3,40(sp)
 40032c4:	1ccdc83a 	sub	r6,r3,r19
 40032c8:	3001291e 	bne	r6,zero,4003770 <_dtoa_r+0xef8>
 40032cc:	8009883a 	mov	r4,r16
 40032d0:	01400044 	movi	r5,1
 40032d4:	40060c00 	call	40060c0 <__i2b>
 40032d8:	d9000b17 	ldw	r4,44(sp)
 40032dc:	1029883a 	mov	r20,r2
 40032e0:	0100050e 	bge	zero,r4,40032f8 <_dtoa_r+0xa80>
 40032e4:	d9800b17 	ldw	r6,44(sp)
 40032e8:	8009883a 	mov	r4,r16
 40032ec:	100b883a 	mov	r5,r2
 40032f0:	40063540 	call	4006354 <__pow5mult>
 40032f4:	1029883a 	mov	r20,r2
 40032f8:	d9c00417 	ldw	r7,16(sp)
 40032fc:	00800044 	movi	r2,1
 4003300:	11c0f00e 	bge	r2,r7,40036c4 <_dtoa_r+0xe4c>
 4003304:	0023883a 	mov	r17,zero
 4003308:	d8800b17 	ldw	r2,44(sp)
 400330c:	1001741e 	bne	r2,zero,40038e0 <_dtoa_r+0x1068>
 4003310:	00800044 	movi	r2,1
 4003314:	d8c00717 	ldw	r3,28(sp)
 4003318:	10c5883a 	add	r2,r2,r3
 400331c:	108007cc 	andi	r2,r2,31
 4003320:	10008026 	beq	r2,zero,4003524 <_dtoa_r+0xcac>
 4003324:	01000804 	movi	r4,32
 4003328:	2089c83a 	sub	r4,r4,r2
 400332c:	00c00104 	movi	r3,4
 4003330:	1902d00e 	bge	r3,r4,4003e74 <_dtoa_r+0x15fc>
 4003334:	d9000817 	ldw	r4,32(sp)
 4003338:	d9c00717 	ldw	r7,28(sp)
 400333c:	00c00704 	movi	r3,28
 4003340:	1885c83a 	sub	r2,r3,r2
 4003344:	2089883a 	add	r4,r4,r2
 4003348:	388f883a 	add	r7,r7,r2
 400334c:	d9000815 	stw	r4,32(sp)
 4003350:	90a5883a 	add	r18,r18,r2
 4003354:	d9c00715 	stw	r7,28(sp)
 4003358:	d9c00817 	ldw	r7,32(sp)
 400335c:	01c0050e 	bge	zero,r7,4003374 <_dtoa_r+0xafc>
 4003360:	e00b883a 	mov	r5,fp
 4003364:	8009883a 	mov	r4,r16
 4003368:	380d883a 	mov	r6,r7
 400336c:	40064800 	call	4006480 <__lshift>
 4003370:	1039883a 	mov	fp,r2
 4003374:	d8800717 	ldw	r2,28(sp)
 4003378:	0080050e 	bge	zero,r2,4003390 <_dtoa_r+0xb18>
 400337c:	a00b883a 	mov	r5,r20
 4003380:	8009883a 	mov	r4,r16
 4003384:	100d883a 	mov	r6,r2
 4003388:	40064800 	call	4006480 <__lshift>
 400338c:	1029883a 	mov	r20,r2
 4003390:	d8c00d17 	ldw	r3,52(sp)
 4003394:	1801401e 	bne	r3,zero,4003898 <_dtoa_r+0x1020>
 4003398:	d8800917 	ldw	r2,36(sp)
 400339c:	00815a0e 	bge	zero,r2,4003908 <_dtoa_r+0x1090>
 40033a0:	d8c00c17 	ldw	r3,48(sp)
 40033a4:	18006f1e 	bne	r3,zero,4003564 <_dtoa_r+0xcec>
 40033a8:	b823883a 	mov	r17,r23
 40033ac:	dc800917 	ldw	r18,36(sp)
 40033b0:	00000206 	br	40033bc <_dtoa_r+0xb44>
 40033b4:	4005d600 	call	4005d60 <__multadd>
 40033b8:	1039883a 	mov	fp,r2
 40033bc:	e009883a 	mov	r4,fp
 40033c0:	a00b883a 	mov	r5,r20
 40033c4:	400263c0 	call	400263c <quorem>
 40033c8:	10800c04 	addi	r2,r2,48
 40033cc:	88800005 	stb	r2,0(r17)
 40033d0:	8c400044 	addi	r17,r17,1
 40033d4:	8dc7c83a 	sub	r3,r17,r23
 40033d8:	8009883a 	mov	r4,r16
 40033dc:	e00b883a 	mov	r5,fp
 40033e0:	01800284 	movi	r6,10
 40033e4:	000f883a 	mov	r7,zero
 40033e8:	1cbff216 	blt	r3,r18,40033b4 <__alt_data_end+0xfe0033b4>
 40033ec:	dd800917 	ldw	r22,36(sp)
 40033f0:	1007883a 	mov	r3,r2
 40033f4:	05823a0e 	bge	zero,r22,4003ce0 <_dtoa_r+0x1468>
 40033f8:	bdad883a 	add	r22,r23,r22
 40033fc:	0023883a 	mov	r17,zero
 4003400:	e00b883a 	mov	r5,fp
 4003404:	01800044 	movi	r6,1
 4003408:	8009883a 	mov	r4,r16
 400340c:	d8c01515 	stw	r3,84(sp)
 4003410:	40064800 	call	4006480 <__lshift>
 4003414:	1009883a 	mov	r4,r2
 4003418:	a00b883a 	mov	r5,r20
 400341c:	1039883a 	mov	fp,r2
 4003420:	40065dc0 	call	40065dc <__mcmp>
 4003424:	d8c01517 	ldw	r3,84(sp)
 4003428:	0080d60e 	bge	zero,r2,4003784 <_dtoa_r+0xf0c>
 400342c:	b13fffc3 	ldbu	r4,-1(r22)
 4003430:	b0ffff84 	addi	r3,r22,-2
 4003434:	01800e44 	movi	r6,57
 4003438:	00000306 	br	4003448 <_dtoa_r+0xbd0>
 400343c:	19000003 	ldbu	r4,0(r3)
 4003440:	102d883a 	mov	r22,r2
 4003444:	18ffffc4 	addi	r3,r3,-1
 4003448:	21403fcc 	andi	r5,r4,255
 400344c:	2940201c 	xori	r5,r5,128
 4003450:	297fe004 	addi	r5,r5,-128
 4003454:	b0bfffc4 	addi	r2,r22,-1
 4003458:	2981a71e 	bne	r5,r6,4003af8 <_dtoa_r+0x1280>
 400345c:	b8bff71e 	bne	r23,r2,400343c <__alt_data_end+0xfe00343c>
 4003460:	d8800617 	ldw	r2,24(sp)
 4003464:	10800044 	addi	r2,r2,1
 4003468:	d8800615 	stw	r2,24(sp)
 400346c:	00800c44 	movi	r2,49
 4003470:	b8800005 	stb	r2,0(r23)
 4003474:	8009883a 	mov	r4,r16
 4003478:	a00b883a 	mov	r5,r20
 400347c:	4005d380 	call	4005d38 <_Bfree>
 4003480:	a83e9e26 	beq	r21,zero,4002efc <__alt_data_end+0xfe002efc>
 4003484:	88000426 	beq	r17,zero,4003498 <_dtoa_r+0xc20>
 4003488:	8d400326 	beq	r17,r21,4003498 <_dtoa_r+0xc20>
 400348c:	8009883a 	mov	r4,r16
 4003490:	880b883a 	mov	r5,r17
 4003494:	4005d380 	call	4005d38 <_Bfree>
 4003498:	8009883a 	mov	r4,r16
 400349c:	a80b883a 	mov	r5,r21
 40034a0:	4005d380 	call	4005d38 <_Bfree>
 40034a4:	003e9506 	br	4002efc <__alt_data_end+0xfe002efc>
 40034a8:	00c00044 	movi	r3,1
 40034ac:	d8c00d15 	stw	r3,52(sp)
 40034b0:	003d9f06 	br	4002b30 <__alt_data_end+0xfe002b30>
 40034b4:	d9000817 	ldw	r4,32(sp)
 40034b8:	d8800617 	ldw	r2,24(sp)
 40034bc:	d8000b15 	stw	zero,44(sp)
 40034c0:	2089c83a 	sub	r4,r4,r2
 40034c4:	0087c83a 	sub	r3,zero,r2
 40034c8:	d9000815 	stw	r4,32(sp)
 40034cc:	d8c00a15 	stw	r3,40(sp)
 40034d0:	003da306 	br	4002b60 <__alt_data_end+0xfe002b60>
 40034d4:	0529c83a 	sub	r20,zero,r20
 40034d8:	dd000815 	stw	r20,32(sp)
 40034dc:	d8000715 	stw	zero,28(sp)
 40034e0:	003d9806 	br	4002b44 <__alt_data_end+0xfe002b44>
 40034e4:	d9000617 	ldw	r4,24(sp)
 40034e8:	400910c0 	call	400910c <__floatsidf>
 40034ec:	1009883a 	mov	r4,r2
 40034f0:	180b883a 	mov	r5,r3
 40034f4:	980d883a 	mov	r6,r19
 40034f8:	900f883a 	mov	r7,r18
 40034fc:	4008f300 	call	4008f30 <__eqdf2>
 4003500:	103d7a26 	beq	r2,zero,4002aec <__alt_data_end+0xfe002aec>
 4003504:	d8800617 	ldw	r2,24(sp)
 4003508:	10bfffc4 	addi	r2,r2,-1
 400350c:	d8800615 	stw	r2,24(sp)
 4003510:	003d7606 	br	4002aec <__alt_data_end+0xfe002aec>
 4003514:	dcc00a17 	ldw	r19,40(sp)
 4003518:	dc800817 	ldw	r18,32(sp)
 400351c:	002b883a 	mov	r21,zero
 4003520:	003f4906 	br	4003248 <__alt_data_end+0xfe003248>
 4003524:	00800704 	movi	r2,28
 4003528:	d8c00817 	ldw	r3,32(sp)
 400352c:	d9000717 	ldw	r4,28(sp)
 4003530:	90a5883a 	add	r18,r18,r2
 4003534:	1887883a 	add	r3,r3,r2
 4003538:	2089883a 	add	r4,r4,r2
 400353c:	d8c00815 	stw	r3,32(sp)
 4003540:	d9000715 	stw	r4,28(sp)
 4003544:	003f8406 	br	4003358 <__alt_data_end+0xfe003358>
 4003548:	d9c00317 	ldw	r7,12(sp)
 400354c:	013efb84 	movi	r4,-1042
 4003550:	2509c83a 	sub	r4,r4,r20
 4003554:	3908983a 	sll	r4,r7,r4
 4003558:	003d3006 	br	4002a1c <__alt_data_end+0xfe002a1c>
 400355c:	d8000d15 	stw	zero,52(sp)
 4003560:	003d7306 	br	4002b30 <__alt_data_end+0xfe002b30>
 4003564:	0480050e 	bge	zero,r18,400357c <_dtoa_r+0xd04>
 4003568:	a80b883a 	mov	r5,r21
 400356c:	8009883a 	mov	r4,r16
 4003570:	900d883a 	mov	r6,r18
 4003574:	40064800 	call	4006480 <__lshift>
 4003578:	102b883a 	mov	r21,r2
 400357c:	8801611e 	bne	r17,zero,4003b04 <_dtoa_r+0x128c>
 4003580:	a827883a 	mov	r19,r21
 4003584:	d8c00317 	ldw	r3,12(sp)
 4003588:	d9000917 	ldw	r4,36(sp)
 400358c:	b8bfffc4 	addi	r2,r23,-1
 4003590:	18c0004c 	andi	r3,r3,1
 4003594:	1105883a 	add	r2,r2,r4
 4003598:	b825883a 	mov	r18,r23
 400359c:	d8800515 	stw	r2,20(sp)
 40035a0:	a823883a 	mov	r17,r21
 40035a4:	d8c00315 	stw	r3,12(sp)
 40035a8:	ddc00715 	stw	r23,28(sp)
 40035ac:	e009883a 	mov	r4,fp
 40035b0:	a00b883a 	mov	r5,r20
 40035b4:	400263c0 	call	400263c <quorem>
 40035b8:	e009883a 	mov	r4,fp
 40035bc:	880b883a 	mov	r5,r17
 40035c0:	102d883a 	mov	r22,r2
 40035c4:	40065dc0 	call	40065dc <__mcmp>
 40035c8:	980d883a 	mov	r6,r19
 40035cc:	8009883a 	mov	r4,r16
 40035d0:	a00b883a 	mov	r5,r20
 40035d4:	102b883a 	mov	r21,r2
 40035d8:	40066340 	call	4006634 <__mdiff>
 40035dc:	100d883a 	mov	r6,r2
 40035e0:	10800317 	ldw	r2,12(r2)
 40035e4:	b5c00c04 	addi	r23,r22,48
 40035e8:	10008c26 	beq	r2,zero,400381c <_dtoa_r+0xfa4>
 40035ec:	8009883a 	mov	r4,r16
 40035f0:	300b883a 	mov	r5,r6
 40035f4:	4005d380 	call	4005d38 <_Bfree>
 40035f8:	00800044 	movi	r2,1
 40035fc:	a8007116 	blt	r21,zero,40037c4 <_dtoa_r+0xf4c>
 4003600:	a800041e 	bne	r21,zero,4003614 <_dtoa_r+0xd9c>
 4003604:	d9c00417 	ldw	r7,16(sp)
 4003608:	3800021e 	bne	r7,zero,4003614 <_dtoa_r+0xd9c>
 400360c:	d8c00317 	ldw	r3,12(sp)
 4003610:	18006c26 	beq	r3,zero,40037c4 <_dtoa_r+0xf4c>
 4003614:	00814c16 	blt	zero,r2,4003b48 <_dtoa_r+0x12d0>
 4003618:	d8c00517 	ldw	r3,20(sp)
 400361c:	95400044 	addi	r21,r18,1
 4003620:	95c00005 	stb	r23,0(r18)
 4003624:	a82d883a 	mov	r22,r21
 4003628:	90c14d26 	beq	r18,r3,4003b60 <_dtoa_r+0x12e8>
 400362c:	e00b883a 	mov	r5,fp
 4003630:	8009883a 	mov	r4,r16
 4003634:	01800284 	movi	r6,10
 4003638:	000f883a 	mov	r7,zero
 400363c:	4005d600 	call	4005d60 <__multadd>
 4003640:	1039883a 	mov	fp,r2
 4003644:	8cc08b26 	beq	r17,r19,4003874 <_dtoa_r+0xffc>
 4003648:	880b883a 	mov	r5,r17
 400364c:	01800284 	movi	r6,10
 4003650:	000f883a 	mov	r7,zero
 4003654:	8009883a 	mov	r4,r16
 4003658:	4005d600 	call	4005d60 <__multadd>
 400365c:	980b883a 	mov	r5,r19
 4003660:	8009883a 	mov	r4,r16
 4003664:	01800284 	movi	r6,10
 4003668:	000f883a 	mov	r7,zero
 400366c:	1023883a 	mov	r17,r2
 4003670:	4005d600 	call	4005d60 <__multadd>
 4003674:	1027883a 	mov	r19,r2
 4003678:	a825883a 	mov	r18,r21
 400367c:	003fcb06 	br	40035ac <__alt_data_end+0xfe0035ac>
 4003680:	d9c00417 	ldw	r7,16(sp)
 4003684:	00800104 	movi	r2,4
 4003688:	3880e426 	beq	r7,r2,4003a1c <_dtoa_r+0x11a4>
 400368c:	00800144 	movi	r2,5
 4003690:	38be3c1e 	bne	r7,r2,4002f84 <__alt_data_end+0xfe002f84>
 4003694:	00c00044 	movi	r3,1
 4003698:	d8c00c15 	stw	r3,48(sp)
 400369c:	d9c02117 	ldw	r7,132(sp)
 40036a0:	d8800617 	ldw	r2,24(sp)
 40036a4:	388f883a 	add	r7,r7,r2
 40036a8:	3c800044 	addi	r18,r7,1
 40036ac:	d9c00e15 	stw	r7,56(sp)
 40036b0:	dc800915 	stw	r18,36(sp)
 40036b4:	04bd3e16 	blt	zero,r18,4002bb0 <__alt_data_end+0xfe002bb0>
 40036b8:	80001115 	stw	zero,68(r16)
 40036bc:	000b883a 	mov	r5,zero
 40036c0:	003d4606 	br	4002bdc <__alt_data_end+0xfe002bdc>
 40036c4:	d8c00317 	ldw	r3,12(sp)
 40036c8:	183f0e1e 	bne	r3,zero,4003304 <__alt_data_end+0xfe003304>
 40036cc:	00c00434 	movhi	r3,16
 40036d0:	18ffffc4 	addi	r3,r3,-1
 40036d4:	88c6703a 	and	r3,r17,r3
 40036d8:	183f0a1e 	bne	r3,zero,4003304 <__alt_data_end+0xfe003304>
 40036dc:	8c5ffc2c 	andhi	r17,r17,32752
 40036e0:	883f0826 	beq	r17,zero,4003304 <__alt_data_end+0xfe003304>
 40036e4:	d9000817 	ldw	r4,32(sp)
 40036e8:	d9c00717 	ldw	r7,28(sp)
 40036ec:	1023883a 	mov	r17,r2
 40036f0:	2089883a 	add	r4,r4,r2
 40036f4:	388f883a 	add	r7,r7,r2
 40036f8:	d9000815 	stw	r4,32(sp)
 40036fc:	d9c00715 	stw	r7,28(sp)
 4003700:	003f0106 	br	4003308 <__alt_data_end+0xfe003308>
 4003704:	9005883a 	mov	r2,r18
 4003708:	003ed306 	br	4003258 <__alt_data_end+0xfe003258>
 400370c:	d8800917 	ldw	r2,36(sp)
 4003710:	00be3516 	blt	zero,r2,4002fe8 <__alt_data_end+0xfe002fe8>
 4003714:	1000b61e 	bne	r2,zero,40039f0 <_dtoa_r+0x1178>
 4003718:	9009883a 	mov	r4,r18
 400371c:	980b883a 	mov	r5,r19
 4003720:	000d883a 	mov	r6,zero
 4003724:	01d00534 	movhi	r7,16404
 4003728:	4008a980 	call	4008a98 <__muldf3>
 400372c:	d9800317 	ldw	r6,12(sp)
 4003730:	1009883a 	mov	r4,r2
 4003734:	180b883a 	mov	r5,r3
 4003738:	880f883a 	mov	r7,r17
 400373c:	400904c0 	call	400904c <__gedf2>
 4003740:	0029883a 	mov	r20,zero
 4003744:	002b883a 	mov	r21,zero
 4003748:	10007e16 	blt	r2,zero,4003944 <_dtoa_r+0x10cc>
 400374c:	d8802117 	ldw	r2,132(sp)
 4003750:	b82d883a 	mov	r22,r23
 4003754:	0084303a 	nor	r2,zero,r2
 4003758:	d8800615 	stw	r2,24(sp)
 400375c:	8009883a 	mov	r4,r16
 4003760:	a00b883a 	mov	r5,r20
 4003764:	4005d380 	call	4005d38 <_Bfree>
 4003768:	a83f4b1e 	bne	r21,zero,4003498 <__alt_data_end+0xfe003498>
 400376c:	003de306 	br	4002efc <__alt_data_end+0xfe002efc>
 4003770:	e00b883a 	mov	r5,fp
 4003774:	8009883a 	mov	r4,r16
 4003778:	40063540 	call	4006354 <__pow5mult>
 400377c:	1039883a 	mov	fp,r2
 4003780:	003ed206 	br	40032cc <__alt_data_end+0xfe0032cc>
 4003784:	1000021e 	bne	r2,zero,4003790 <_dtoa_r+0xf18>
 4003788:	18c0004c 	andi	r3,r3,1
 400378c:	183f271e 	bne	r3,zero,400342c <__alt_data_end+0xfe00342c>
 4003790:	01000c04 	movi	r4,48
 4003794:	00000106 	br	400379c <_dtoa_r+0xf24>
 4003798:	102d883a 	mov	r22,r2
 400379c:	b0bfffc4 	addi	r2,r22,-1
 40037a0:	10c00007 	ldb	r3,0(r2)
 40037a4:	193ffc26 	beq	r3,r4,4003798 <__alt_data_end+0xfe003798>
 40037a8:	003f3206 	br	4003474 <__alt_data_end+0xfe003474>
 40037ac:	d8c00f17 	ldw	r3,60(sp)
 40037b0:	18015026 	beq	r3,zero,4003cf4 <_dtoa_r+0x147c>
 40037b4:	10810cc4 	addi	r2,r2,1075
 40037b8:	dcc00a17 	ldw	r19,40(sp)
 40037bc:	dc800817 	ldw	r18,32(sp)
 40037c0:	003e9706 	br	4003220 <__alt_data_end+0xfe003220>
 40037c4:	b807883a 	mov	r3,r23
 40037c8:	182b883a 	mov	r21,r3
 40037cc:	ddc00717 	ldw	r23,28(sp)
 40037d0:	00800e0e 	bge	zero,r2,400380c <_dtoa_r+0xf94>
 40037d4:	e00b883a 	mov	r5,fp
 40037d8:	01800044 	movi	r6,1
 40037dc:	8009883a 	mov	r4,r16
 40037e0:	d8c01515 	stw	r3,84(sp)
 40037e4:	40064800 	call	4006480 <__lshift>
 40037e8:	1009883a 	mov	r4,r2
 40037ec:	a00b883a 	mov	r5,r20
 40037f0:	1039883a 	mov	fp,r2
 40037f4:	40065dc0 	call	40065dc <__mcmp>
 40037f8:	d8c01517 	ldw	r3,84(sp)
 40037fc:	0081880e 	bge	zero,r2,4003e20 <_dtoa_r+0x15a8>
 4003800:	00800e44 	movi	r2,57
 4003804:	b0c00c44 	addi	r3,r22,49
 4003808:	a8816326 	beq	r21,r2,4003d98 <_dtoa_r+0x1520>
 400380c:	90c00005 	stb	r3,0(r18)
 4003810:	95800044 	addi	r22,r18,1
 4003814:	982b883a 	mov	r21,r19
 4003818:	003f1606 	br	4003474 <__alt_data_end+0xfe003474>
 400381c:	300b883a 	mov	r5,r6
 4003820:	e009883a 	mov	r4,fp
 4003824:	d9801515 	stw	r6,84(sp)
 4003828:	40065dc0 	call	40065dc <__mcmp>
 400382c:	d9801517 	ldw	r6,84(sp)
 4003830:	8009883a 	mov	r4,r16
 4003834:	d8801515 	stw	r2,84(sp)
 4003838:	300b883a 	mov	r5,r6
 400383c:	4005d380 	call	4005d38 <_Bfree>
 4003840:	d8801517 	ldw	r2,84(sp)
 4003844:	103f6d1e 	bne	r2,zero,40035fc <__alt_data_end+0xfe0035fc>
 4003848:	d9c00417 	ldw	r7,16(sp)
 400384c:	383f6b1e 	bne	r7,zero,40035fc <__alt_data_end+0xfe0035fc>
 4003850:	d8c00317 	ldw	r3,12(sp)
 4003854:	183f691e 	bne	r3,zero,40035fc <__alt_data_end+0xfe0035fc>
 4003858:	b807883a 	mov	r3,r23
 400385c:	00800e44 	movi	r2,57
 4003860:	ddc00717 	ldw	r23,28(sp)
 4003864:	18814c26 	beq	r3,r2,4003d98 <_dtoa_r+0x1520>
 4003868:	057fe80e 	bge	zero,r21,400380c <__alt_data_end+0xfe00380c>
 400386c:	b0c00c44 	addi	r3,r22,49
 4003870:	003fe606 	br	400380c <__alt_data_end+0xfe00380c>
 4003874:	880b883a 	mov	r5,r17
 4003878:	8009883a 	mov	r4,r16
 400387c:	01800284 	movi	r6,10
 4003880:	000f883a 	mov	r7,zero
 4003884:	4005d600 	call	4005d60 <__multadd>
 4003888:	1023883a 	mov	r17,r2
 400388c:	1027883a 	mov	r19,r2
 4003890:	a825883a 	mov	r18,r21
 4003894:	003f4506 	br	40035ac <__alt_data_end+0xfe0035ac>
 4003898:	e009883a 	mov	r4,fp
 400389c:	a00b883a 	mov	r5,r20
 40038a0:	40065dc0 	call	40065dc <__mcmp>
 40038a4:	103ebc0e 	bge	r2,zero,4003398 <__alt_data_end+0xfe003398>
 40038a8:	e00b883a 	mov	r5,fp
 40038ac:	8009883a 	mov	r4,r16
 40038b0:	01800284 	movi	r6,10
 40038b4:	000f883a 	mov	r7,zero
 40038b8:	4005d600 	call	4005d60 <__multadd>
 40038bc:	1039883a 	mov	fp,r2
 40038c0:	d8800617 	ldw	r2,24(sp)
 40038c4:	d8c00c17 	ldw	r3,48(sp)
 40038c8:	10bfffc4 	addi	r2,r2,-1
 40038cc:	d8800615 	stw	r2,24(sp)
 40038d0:	1801571e 	bne	r3,zero,4003e30 <_dtoa_r+0x15b8>
 40038d4:	d9c00e17 	ldw	r7,56(sp)
 40038d8:	d9c00915 	stw	r7,36(sp)
 40038dc:	003eae06 	br	4003398 <__alt_data_end+0xfe003398>
 40038e0:	a0800417 	ldw	r2,16(r20)
 40038e4:	10800104 	addi	r2,r2,4
 40038e8:	1085883a 	add	r2,r2,r2
 40038ec:	1085883a 	add	r2,r2,r2
 40038f0:	a085883a 	add	r2,r20,r2
 40038f4:	11000017 	ldw	r4,0(r2)
 40038f8:	4005fa80 	call	4005fa8 <__hi0bits>
 40038fc:	00c00804 	movi	r3,32
 4003900:	1885c83a 	sub	r2,r3,r2
 4003904:	003e8306 	br	4003314 <__alt_data_end+0xfe003314>
 4003908:	d9c00417 	ldw	r7,16(sp)
 400390c:	00800084 	movi	r2,2
 4003910:	11fea30e 	bge	r2,r7,40033a0 <__alt_data_end+0xfe0033a0>
 4003914:	d8800917 	ldw	r2,36(sp)
 4003918:	103f8c1e 	bne	r2,zero,400374c <__alt_data_end+0xfe00374c>
 400391c:	a00b883a 	mov	r5,r20
 4003920:	8009883a 	mov	r4,r16
 4003924:	01800144 	movi	r6,5
 4003928:	000f883a 	mov	r7,zero
 400392c:	4005d600 	call	4005d60 <__multadd>
 4003930:	e009883a 	mov	r4,fp
 4003934:	100b883a 	mov	r5,r2
 4003938:	1029883a 	mov	r20,r2
 400393c:	40065dc0 	call	40065dc <__mcmp>
 4003940:	00bf820e 	bge	zero,r2,400374c <__alt_data_end+0xfe00374c>
 4003944:	00800c44 	movi	r2,49
 4003948:	b8800005 	stb	r2,0(r23)
 400394c:	d8800617 	ldw	r2,24(sp)
 4003950:	bd800044 	addi	r22,r23,1
 4003954:	10800044 	addi	r2,r2,1
 4003958:	d8800615 	stw	r2,24(sp)
 400395c:	003f7f06 	br	400375c <__alt_data_end+0xfe00375c>
 4003960:	dc000417 	ldw	r16,16(sp)
 4003964:	003d6506 	br	4002efc <__alt_data_end+0xfe002efc>
 4003968:	9009883a 	mov	r4,r18
 400396c:	400910c0 	call	400910c <__floatsidf>
 4003970:	1009883a 	mov	r4,r2
 4003974:	180b883a 	mov	r5,r3
 4003978:	980d883a 	mov	r6,r19
 400397c:	a00f883a 	mov	r7,r20
 4003980:	4008a980 	call	4008a98 <__muldf3>
 4003984:	1009883a 	mov	r4,r2
 4003988:	180b883a 	mov	r5,r3
 400398c:	000d883a 	mov	r6,zero
 4003990:	01d00734 	movhi	r7,16412
 4003994:	40089e40 	call	40089e4 <__adddf3>
 4003998:	057f3034 	movhi	r21,64704
 400399c:	1025883a 	mov	r18,r2
 40039a0:	1d6b883a 	add	r21,r3,r21
 40039a4:	9809883a 	mov	r4,r19
 40039a8:	a00b883a 	mov	r5,r20
 40039ac:	000d883a 	mov	r6,zero
 40039b0:	01d00534 	movhi	r7,16404
 40039b4:	4008a380 	call	4008a38 <__subdf3>
 40039b8:	1009883a 	mov	r4,r2
 40039bc:	180b883a 	mov	r5,r3
 40039c0:	900d883a 	mov	r6,r18
 40039c4:	a80f883a 	mov	r7,r21
 40039c8:	1027883a 	mov	r19,r2
 40039cc:	1829883a 	mov	r20,r3
 40039d0:	4008fe80 	call	4008fe8 <__gtdf2>
 40039d4:	00806616 	blt	zero,r2,4003b70 <_dtoa_r+0x12f8>
 40039d8:	a9e0003c 	xorhi	r7,r21,32768
 40039dc:	9809883a 	mov	r4,r19
 40039e0:	a00b883a 	mov	r5,r20
 40039e4:	900d883a 	mov	r6,r18
 40039e8:	40090b00 	call	40090b0 <__ltdf2>
 40039ec:	103d710e 	bge	r2,zero,4002fb4 <__alt_data_end+0xfe002fb4>
 40039f0:	0029883a 	mov	r20,zero
 40039f4:	002b883a 	mov	r21,zero
 40039f8:	003f5406 	br	400374c <__alt_data_end+0xfe00374c>
 40039fc:	d9800a17 	ldw	r6,40(sp)
 4003a00:	e00b883a 	mov	r5,fp
 4003a04:	8009883a 	mov	r4,r16
 4003a08:	40063540 	call	4006354 <__pow5mult>
 4003a0c:	1039883a 	mov	fp,r2
 4003a10:	003e2e06 	br	40032cc <__alt_data_end+0xfe0032cc>
 4003a14:	d8000c15 	stw	zero,48(sp)
 4003a18:	003f2006 	br	400369c <__alt_data_end+0xfe00369c>
 4003a1c:	00800044 	movi	r2,1
 4003a20:	d8800c15 	stw	r2,48(sp)
 4003a24:	003c5d06 	br	4002b9c <__alt_data_end+0xfe002b9c>
 4003a28:	d8c00a17 	ldw	r3,40(sp)
 4003a2c:	d9000b17 	ldw	r4,44(sp)
 4003a30:	dcc00a15 	stw	r19,40(sp)
 4003a34:	98c5c83a 	sub	r2,r19,r3
 4003a38:	2089883a 	add	r4,r4,r2
 4003a3c:	d9000b15 	stw	r4,44(sp)
 4003a40:	0027883a 	mov	r19,zero
 4003a44:	003df206 	br	4003210 <__alt_data_end+0xfe003210>
 4003a48:	d9000317 	ldw	r4,12(sp)
 4003a4c:	8829883a 	mov	r20,r17
 4003a50:	04800084 	movi	r18,2
 4003a54:	d9001015 	stw	r4,64(sp)
 4003a58:	003c8106 	br	4002c60 <__alt_data_end+0xfe002c60>
 4003a5c:	04800044 	movi	r18,1
 4003a60:	dc800e15 	stw	r18,56(sp)
 4003a64:	dc800915 	stw	r18,36(sp)
 4003a68:	dc802115 	stw	r18,132(sp)
 4003a6c:	003f1206 	br	40036b8 <__alt_data_end+0xfe0036b8>
 4003a70:	d8800617 	ldw	r2,24(sp)
 4003a74:	00abc83a 	sub	r21,zero,r2
 4003a78:	a800a426 	beq	r21,zero,4003d0c <_dtoa_r+0x1494>
 4003a7c:	a88003cc 	andi	r2,r21,15
 4003a80:	100490fa 	slli	r2,r2,3
 4003a84:	00c10074 	movhi	r3,1025
 4003a88:	18f0e004 	addi	r3,r3,-15488
 4003a8c:	d9000317 	ldw	r4,12(sp)
 4003a90:	1885883a 	add	r2,r3,r2
 4003a94:	11800017 	ldw	r6,0(r2)
 4003a98:	11c00117 	ldw	r7,4(r2)
 4003a9c:	a82bd13a 	srai	r21,r21,4
 4003aa0:	880b883a 	mov	r5,r17
 4003aa4:	4008a980 	call	4008a98 <__muldf3>
 4003aa8:	1027883a 	mov	r19,r2
 4003aac:	1829883a 	mov	r20,r3
 4003ab0:	a800e826 	beq	r21,zero,4003e54 <_dtoa_r+0x15dc>
 4003ab4:	05810074 	movhi	r22,1025
 4003ab8:	b5b0d604 	addi	r22,r22,-15528
 4003abc:	04800084 	movi	r18,2
 4003ac0:	a980004c 	andi	r6,r21,1
 4003ac4:	1009883a 	mov	r4,r2
 4003ac8:	a82bd07a 	srai	r21,r21,1
 4003acc:	180b883a 	mov	r5,r3
 4003ad0:	30000426 	beq	r6,zero,4003ae4 <_dtoa_r+0x126c>
 4003ad4:	b1800017 	ldw	r6,0(r22)
 4003ad8:	b1c00117 	ldw	r7,4(r22)
 4003adc:	94800044 	addi	r18,r18,1
 4003ae0:	4008a980 	call	4008a98 <__muldf3>
 4003ae4:	b5800204 	addi	r22,r22,8
 4003ae8:	a83ff51e 	bne	r21,zero,4003ac0 <__alt_data_end+0xfe003ac0>
 4003aec:	1027883a 	mov	r19,r2
 4003af0:	1829883a 	mov	r20,r3
 4003af4:	003c7306 	br	4002cc4 <__alt_data_end+0xfe002cc4>
 4003af8:	21000044 	addi	r4,r4,1
 4003afc:	11000005 	stb	r4,0(r2)
 4003b00:	003e5c06 	br	4003474 <__alt_data_end+0xfe003474>
 4003b04:	a9400117 	ldw	r5,4(r21)
 4003b08:	8009883a 	mov	r4,r16
 4003b0c:	4005c900 	call	4005c90 <_Balloc>
 4003b10:	a9800417 	ldw	r6,16(r21)
 4003b14:	11000304 	addi	r4,r2,12
 4003b18:	a9400304 	addi	r5,r21,12
 4003b1c:	31800084 	addi	r6,r6,2
 4003b20:	318d883a 	add	r6,r6,r6
 4003b24:	318d883a 	add	r6,r6,r6
 4003b28:	1023883a 	mov	r17,r2
 4003b2c:	40058e80 	call	40058e8 <memcpy>
 4003b30:	8009883a 	mov	r4,r16
 4003b34:	880b883a 	mov	r5,r17
 4003b38:	01800044 	movi	r6,1
 4003b3c:	40064800 	call	4006480 <__lshift>
 4003b40:	1027883a 	mov	r19,r2
 4003b44:	003e8f06 	br	4003584 <__alt_data_end+0xfe003584>
 4003b48:	b807883a 	mov	r3,r23
 4003b4c:	00800e44 	movi	r2,57
 4003b50:	ddc00717 	ldw	r23,28(sp)
 4003b54:	18809026 	beq	r3,r2,4003d98 <_dtoa_r+0x1520>
 4003b58:	18c00044 	addi	r3,r3,1
 4003b5c:	003f2b06 	br	400380c <__alt_data_end+0xfe00380c>
 4003b60:	b807883a 	mov	r3,r23
 4003b64:	982b883a 	mov	r21,r19
 4003b68:	ddc00717 	ldw	r23,28(sp)
 4003b6c:	003e2406 	br	4003400 <__alt_data_end+0xfe003400>
 4003b70:	0029883a 	mov	r20,zero
 4003b74:	002b883a 	mov	r21,zero
 4003b78:	003f7206 	br	4003944 <__alt_data_end+0xfe003944>
 4003b7c:	593fffc4 	addi	r4,r11,-1
 4003b80:	200490fa 	slli	r2,r4,3
 4003b84:	00c10074 	movhi	r3,1025
 4003b88:	18f0e004 	addi	r3,r3,-15488
 4003b8c:	d9001015 	stw	r4,64(sp)
 4003b90:	1885883a 	add	r2,r3,r2
 4003b94:	11000017 	ldw	r4,0(r2)
 4003b98:	11400117 	ldw	r5,4(r2)
 4003b9c:	900d883a 	mov	r6,r18
 4003ba0:	a80f883a 	mov	r7,r21
 4003ba4:	dac01615 	stw	r11,88(sp)
 4003ba8:	4008a980 	call	4008a98 <__muldf3>
 4003bac:	a00b883a 	mov	r5,r20
 4003bb0:	9809883a 	mov	r4,r19
 4003bb4:	d8c01215 	stw	r3,72(sp)
 4003bb8:	d8801115 	stw	r2,68(sp)
 4003bbc:	40091e00 	call	40091e0 <__fixdfsi>
 4003bc0:	1009883a 	mov	r4,r2
 4003bc4:	1025883a 	mov	r18,r2
 4003bc8:	400910c0 	call	400910c <__floatsidf>
 4003bcc:	9809883a 	mov	r4,r19
 4003bd0:	a00b883a 	mov	r5,r20
 4003bd4:	100d883a 	mov	r6,r2
 4003bd8:	180f883a 	mov	r7,r3
 4003bdc:	94800c04 	addi	r18,r18,48
 4003be0:	4008a380 	call	4008a38 <__subdf3>
 4003be4:	bc800005 	stb	r18,0(r23)
 4003be8:	dac01617 	ldw	r11,88(sp)
 4003bec:	102b883a 	mov	r21,r2
 4003bf0:	00800044 	movi	r2,1
 4003bf4:	bd800044 	addi	r22,r23,1
 4003bf8:	1815883a 	mov	r10,r3
 4003bfc:	58802226 	beq	r11,r2,4003c88 <_dtoa_r+0x1410>
 4003c00:	bad7883a 	add	r11,r23,r11
 4003c04:	dc001415 	stw	r16,80(sp)
 4003c08:	a805883a 	mov	r2,r21
 4003c0c:	b027883a 	mov	r19,r22
 4003c10:	5821883a 	mov	r16,r11
 4003c14:	882b883a 	mov	r21,r17
 4003c18:	000d883a 	mov	r6,zero
 4003c1c:	01d00934 	movhi	r7,16420
 4003c20:	1009883a 	mov	r4,r2
 4003c24:	180b883a 	mov	r5,r3
 4003c28:	4008a980 	call	4008a98 <__muldf3>
 4003c2c:	180b883a 	mov	r5,r3
 4003c30:	1009883a 	mov	r4,r2
 4003c34:	1829883a 	mov	r20,r3
 4003c38:	1023883a 	mov	r17,r2
 4003c3c:	40091e00 	call	40091e0 <__fixdfsi>
 4003c40:	1009883a 	mov	r4,r2
 4003c44:	1025883a 	mov	r18,r2
 4003c48:	400910c0 	call	400910c <__floatsidf>
 4003c4c:	8809883a 	mov	r4,r17
 4003c50:	a00b883a 	mov	r5,r20
 4003c54:	100d883a 	mov	r6,r2
 4003c58:	180f883a 	mov	r7,r3
 4003c5c:	94800c04 	addi	r18,r18,48
 4003c60:	4008a380 	call	4008a38 <__subdf3>
 4003c64:	9cc00044 	addi	r19,r19,1
 4003c68:	9cbfffc5 	stb	r18,-1(r19)
 4003c6c:	9c3fea1e 	bne	r19,r16,4003c18 <__alt_data_end+0xfe003c18>
 4003c70:	1815883a 	mov	r10,r3
 4003c74:	d8c01017 	ldw	r3,64(sp)
 4003c78:	dc001417 	ldw	r16,80(sp)
 4003c7c:	a823883a 	mov	r17,r21
 4003c80:	b0ed883a 	add	r22,r22,r3
 4003c84:	102b883a 	mov	r21,r2
 4003c88:	d9001117 	ldw	r4,68(sp)
 4003c8c:	d9401217 	ldw	r5,72(sp)
 4003c90:	000d883a 	mov	r6,zero
 4003c94:	01cff834 	movhi	r7,16352
 4003c98:	da801515 	stw	r10,84(sp)
 4003c9c:	40089e40 	call	40089e4 <__adddf3>
 4003ca0:	da801517 	ldw	r10,84(sp)
 4003ca4:	1009883a 	mov	r4,r2
 4003ca8:	180b883a 	mov	r5,r3
 4003cac:	500f883a 	mov	r7,r10
 4003cb0:	a80d883a 	mov	r6,r21
 4003cb4:	40090b00 	call	40090b0 <__ltdf2>
 4003cb8:	da801517 	ldw	r10,84(sp)
 4003cbc:	10003b0e 	bge	r2,zero,4003dac <_dtoa_r+0x1534>
 4003cc0:	d9c01317 	ldw	r7,76(sp)
 4003cc4:	b53fffc3 	ldbu	r20,-1(r22)
 4003cc8:	d9c00615 	stw	r7,24(sp)
 4003ccc:	003d3106 	br	4003194 <__alt_data_end+0xfe003194>
 4003cd0:	d8800817 	ldw	r2,32(sp)
 4003cd4:	11e5c83a 	sub	r18,r2,r7
 4003cd8:	0005883a 	mov	r2,zero
 4003cdc:	003d5006 	br	4003220 <__alt_data_end+0xfe003220>
 4003ce0:	05800044 	movi	r22,1
 4003ce4:	003dc406 	br	40033f8 <__alt_data_end+0xfe0033f8>
 4003ce8:	a5000044 	addi	r20,r20,1
 4003cec:	15000005 	stb	r20,0(r2)
 4003cf0:	003c8206 	br	4002efc <__alt_data_end+0xfe002efc>
 4003cf4:	d8800217 	ldw	r2,8(sp)
 4003cf8:	00c00d84 	movi	r3,54
 4003cfc:	dcc00a17 	ldw	r19,40(sp)
 4003d00:	1885c83a 	sub	r2,r3,r2
 4003d04:	dc800817 	ldw	r18,32(sp)
 4003d08:	003d4506 	br	4003220 <__alt_data_end+0xfe003220>
 4003d0c:	dcc00317 	ldw	r19,12(sp)
 4003d10:	8829883a 	mov	r20,r17
 4003d14:	04800084 	movi	r18,2
 4003d18:	003bea06 	br	4002cc4 <__alt_data_end+0xfe002cc4>
 4003d1c:	d9000917 	ldw	r4,36(sp)
 4003d20:	203f1126 	beq	r4,zero,4003968 <__alt_data_end+0xfe003968>
 4003d24:	d9c00e17 	ldw	r7,56(sp)
 4003d28:	01fca20e 	bge	zero,r7,4002fb4 <__alt_data_end+0xfe002fb4>
 4003d2c:	a00b883a 	mov	r5,r20
 4003d30:	9809883a 	mov	r4,r19
 4003d34:	000d883a 	mov	r6,zero
 4003d38:	01d00934 	movhi	r7,16420
 4003d3c:	4008a980 	call	4008a98 <__muldf3>
 4003d40:	91000044 	addi	r4,r18,1
 4003d44:	1027883a 	mov	r19,r2
 4003d48:	1829883a 	mov	r20,r3
 4003d4c:	400910c0 	call	400910c <__floatsidf>
 4003d50:	9809883a 	mov	r4,r19
 4003d54:	a00b883a 	mov	r5,r20
 4003d58:	100d883a 	mov	r6,r2
 4003d5c:	180f883a 	mov	r7,r3
 4003d60:	4008a980 	call	4008a98 <__muldf3>
 4003d64:	1009883a 	mov	r4,r2
 4003d68:	180b883a 	mov	r5,r3
 4003d6c:	000d883a 	mov	r6,zero
 4003d70:	01d00734 	movhi	r7,16412
 4003d74:	40089e40 	call	40089e4 <__adddf3>
 4003d78:	1025883a 	mov	r18,r2
 4003d7c:	d8800617 	ldw	r2,24(sp)
 4003d80:	057f3034 	movhi	r21,64704
 4003d84:	1d6b883a 	add	r21,r3,r21
 4003d88:	10bfffc4 	addi	r2,r2,-1
 4003d8c:	d8801315 	stw	r2,76(sp)
 4003d90:	dac00e17 	ldw	r11,56(sp)
 4003d94:	003be706 	br	4002d34 <__alt_data_end+0xfe002d34>
 4003d98:	01000e44 	movi	r4,57
 4003d9c:	91000005 	stb	r4,0(r18)
 4003da0:	95800044 	addi	r22,r18,1
 4003da4:	982b883a 	mov	r21,r19
 4003da8:	003da106 	br	4003430 <__alt_data_end+0xfe003430>
 4003dac:	d9801117 	ldw	r6,68(sp)
 4003db0:	d9c01217 	ldw	r7,72(sp)
 4003db4:	0009883a 	mov	r4,zero
 4003db8:	014ff834 	movhi	r5,16352
 4003dbc:	da801515 	stw	r10,84(sp)
 4003dc0:	4008a380 	call	4008a38 <__subdf3>
 4003dc4:	da801517 	ldw	r10,84(sp)
 4003dc8:	1009883a 	mov	r4,r2
 4003dcc:	180b883a 	mov	r5,r3
 4003dd0:	a80d883a 	mov	r6,r21
 4003dd4:	500f883a 	mov	r7,r10
 4003dd8:	4008fe80 	call	4008fe8 <__gtdf2>
 4003ddc:	00bc750e 	bge	zero,r2,4002fb4 <__alt_data_end+0xfe002fb4>
 4003de0:	01000c04 	movi	r4,48
 4003de4:	00000106 	br	4003dec <_dtoa_r+0x1574>
 4003de8:	102d883a 	mov	r22,r2
 4003dec:	b0bfffc4 	addi	r2,r22,-1
 4003df0:	10c00007 	ldb	r3,0(r2)
 4003df4:	193ffc26 	beq	r3,r4,4003de8 <__alt_data_end+0xfe003de8>
 4003df8:	d8801317 	ldw	r2,76(sp)
 4003dfc:	d8800615 	stw	r2,24(sp)
 4003e00:	003c3e06 	br	4002efc <__alt_data_end+0xfe002efc>
 4003e04:	d9001317 	ldw	r4,76(sp)
 4003e08:	df001117 	ldw	fp,68(sp)
 4003e0c:	d9000615 	stw	r4,24(sp)
 4003e10:	003ce006 	br	4003194 <__alt_data_end+0xfe003194>
 4003e14:	df001117 	ldw	fp,68(sp)
 4003e18:	dc401217 	ldw	r17,72(sp)
 4003e1c:	003c6506 	br	4002fb4 <__alt_data_end+0xfe002fb4>
 4003e20:	103e7a1e 	bne	r2,zero,400380c <__alt_data_end+0xfe00380c>
 4003e24:	1880004c 	andi	r2,r3,1
 4003e28:	103e7826 	beq	r2,zero,400380c <__alt_data_end+0xfe00380c>
 4003e2c:	003e7406 	br	4003800 <__alt_data_end+0xfe003800>
 4003e30:	8009883a 	mov	r4,r16
 4003e34:	a80b883a 	mov	r5,r21
 4003e38:	01800284 	movi	r6,10
 4003e3c:	000f883a 	mov	r7,zero
 4003e40:	4005d600 	call	4005d60 <__multadd>
 4003e44:	d9000e17 	ldw	r4,56(sp)
 4003e48:	102b883a 	mov	r21,r2
 4003e4c:	d9000915 	stw	r4,36(sp)
 4003e50:	003d5106 	br	4003398 <__alt_data_end+0xfe003398>
 4003e54:	04800084 	movi	r18,2
 4003e58:	003b9a06 	br	4002cc4 <__alt_data_end+0xfe002cc4>
 4003e5c:	d8c01317 	ldw	r3,76(sp)
 4003e60:	d8c00615 	stw	r3,24(sp)
 4003e64:	003ccb06 	br	4003194 <__alt_data_end+0xfe003194>
 4003e68:	d8c01317 	ldw	r3,76(sp)
 4003e6c:	d8c00615 	stw	r3,24(sp)
 4003e70:	003c2206 	br	4002efc <__alt_data_end+0xfe002efc>
 4003e74:	20fd3826 	beq	r4,r3,4003358 <__alt_data_end+0xfe003358>
 4003e78:	00c00f04 	movi	r3,60
 4003e7c:	1885c83a 	sub	r2,r3,r2
 4003e80:	003da906 	br	4003528 <__alt_data_end+0xfe003528>
 4003e84:	000b883a 	mov	r5,zero
 4003e88:	003b5406 	br	4002bdc <__alt_data_end+0xfe002bdc>
 4003e8c:	04c00044 	movi	r19,1
 4003e90:	003b3b06 	br	4002b80 <__alt_data_end+0xfe002b80>

04003e94 <_fflush_r>:
 4003e94:	defffb04 	addi	sp,sp,-20
 4003e98:	dcc00315 	stw	r19,12(sp)
 4003e9c:	dc400115 	stw	r17,4(sp)
 4003ea0:	dfc00415 	stw	ra,16(sp)
 4003ea4:	dc800215 	stw	r18,8(sp)
 4003ea8:	dc000015 	stw	r16,0(sp)
 4003eac:	2027883a 	mov	r19,r4
 4003eb0:	2823883a 	mov	r17,r5
 4003eb4:	20000226 	beq	r4,zero,4003ec0 <_fflush_r+0x2c>
 4003eb8:	20800e17 	ldw	r2,56(r4)
 4003ebc:	10005726 	beq	r2,zero,400401c <_fflush_r+0x188>
 4003ec0:	8880030b 	ldhu	r2,12(r17)
 4003ec4:	10c0020c 	andi	r3,r2,8
 4003ec8:	18ffffcc 	andi	r3,r3,65535
 4003ecc:	18e0001c 	xori	r3,r3,32768
 4003ed0:	18e00004 	addi	r3,r3,-32768
 4003ed4:	1800311e 	bne	r3,zero,4003f9c <_fflush_r+0x108>
 4003ed8:	89000117 	ldw	r4,4(r17)
 4003edc:	10c20014 	ori	r3,r2,2048
 4003ee0:	88c0030d 	sth	r3,12(r17)
 4003ee4:	180b883a 	mov	r5,r3
 4003ee8:	0100520e 	bge	zero,r4,4004034 <_fflush_r+0x1a0>
 4003eec:	88c00a17 	ldw	r3,40(r17)
 4003ef0:	18002226 	beq	r3,zero,4003f7c <_fflush_r+0xe8>
 4003ef4:	1084000c 	andi	r2,r2,4096
 4003ef8:	10bfffcc 	andi	r2,r2,65535
 4003efc:	10a0001c 	xori	r2,r2,32768
 4003f00:	10a00004 	addi	r2,r2,-32768
 4003f04:	10004e26 	beq	r2,zero,4004040 <_fflush_r+0x1ac>
 4003f08:	8c001417 	ldw	r16,80(r17)
 4003f0c:	2940010c 	andi	r5,r5,4
 4003f10:	297fffcc 	andi	r5,r5,65535
 4003f14:	2960001c 	xori	r5,r5,32768
 4003f18:	29600004 	addi	r5,r5,-32768
 4003f1c:	28000626 	beq	r5,zero,4003f38 <_fflush_r+0xa4>
 4003f20:	89000117 	ldw	r4,4(r17)
 4003f24:	88800c17 	ldw	r2,48(r17)
 4003f28:	8121c83a 	sub	r16,r16,r4
 4003f2c:	10000226 	beq	r2,zero,4003f38 <_fflush_r+0xa4>
 4003f30:	88800f17 	ldw	r2,60(r17)
 4003f34:	80a1c83a 	sub	r16,r16,r2
 4003f38:	89400717 	ldw	r5,28(r17)
 4003f3c:	9809883a 	mov	r4,r19
 4003f40:	800d883a 	mov	r6,r16
 4003f44:	000f883a 	mov	r7,zero
 4003f48:	183ee83a 	callr	r3
 4003f4c:	8080281e 	bne	r16,r2,4003ff0 <_fflush_r+0x15c>
 4003f50:	8880030b 	ldhu	r2,12(r17)
 4003f54:	88c00417 	ldw	r3,16(r17)
 4003f58:	88000115 	stw	zero,4(r17)
 4003f5c:	113dffcc 	andi	r4,r2,63487
 4003f60:	1084000c 	andi	r2,r2,4096
 4003f64:	10bfffcc 	andi	r2,r2,65535
 4003f68:	10a0001c 	xori	r2,r2,32768
 4003f6c:	8900030d 	sth	r4,12(r17)
 4003f70:	88c00015 	stw	r3,0(r17)
 4003f74:	10a00004 	addi	r2,r2,-32768
 4003f78:	10002c1e 	bne	r2,zero,400402c <_fflush_r+0x198>
 4003f7c:	0005883a 	mov	r2,zero
 4003f80:	dfc00417 	ldw	ra,16(sp)
 4003f84:	dcc00317 	ldw	r19,12(sp)
 4003f88:	dc800217 	ldw	r18,8(sp)
 4003f8c:	dc400117 	ldw	r17,4(sp)
 4003f90:	dc000017 	ldw	r16,0(sp)
 4003f94:	dec00504 	addi	sp,sp,20
 4003f98:	f800283a 	ret
 4003f9c:	8c800417 	ldw	r18,16(r17)
 4003fa0:	903ff626 	beq	r18,zero,4003f7c <__alt_data_end+0xfe003f7c>
 4003fa4:	8c000017 	ldw	r16,0(r17)
 4003fa8:	108000cc 	andi	r2,r2,3
 4003fac:	8c800015 	stw	r18,0(r17)
 4003fb0:	84a1c83a 	sub	r16,r16,r18
 4003fb4:	10001b1e 	bne	r2,zero,4004024 <_fflush_r+0x190>
 4003fb8:	88800517 	ldw	r2,20(r17)
 4003fbc:	88800215 	stw	r2,8(r17)
 4003fc0:	04000316 	blt	zero,r16,4003fd0 <_fflush_r+0x13c>
 4003fc4:	003fed06 	br	4003f7c <__alt_data_end+0xfe003f7c>
 4003fc8:	90a5883a 	add	r18,r18,r2
 4003fcc:	043feb0e 	bge	zero,r16,4003f7c <__alt_data_end+0xfe003f7c>
 4003fd0:	88800917 	ldw	r2,36(r17)
 4003fd4:	89400717 	ldw	r5,28(r17)
 4003fd8:	800f883a 	mov	r7,r16
 4003fdc:	900d883a 	mov	r6,r18
 4003fe0:	9809883a 	mov	r4,r19
 4003fe4:	103ee83a 	callr	r2
 4003fe8:	80a1c83a 	sub	r16,r16,r2
 4003fec:	00bff616 	blt	zero,r2,4003fc8 <__alt_data_end+0xfe003fc8>
 4003ff0:	88c0030b 	ldhu	r3,12(r17)
 4003ff4:	00bfffc4 	movi	r2,-1
 4003ff8:	18c01014 	ori	r3,r3,64
 4003ffc:	88c0030d 	sth	r3,12(r17)
 4004000:	dfc00417 	ldw	ra,16(sp)
 4004004:	dcc00317 	ldw	r19,12(sp)
 4004008:	dc800217 	ldw	r18,8(sp)
 400400c:	dc400117 	ldw	r17,4(sp)
 4004010:	dc000017 	ldw	r16,0(sp)
 4004014:	dec00504 	addi	sp,sp,20
 4004018:	f800283a 	ret
 400401c:	40041500 	call	4004150 <__sinit>
 4004020:	003fa706 	br	4003ec0 <__alt_data_end+0xfe003ec0>
 4004024:	0005883a 	mov	r2,zero
 4004028:	003fe406 	br	4003fbc <__alt_data_end+0xfe003fbc>
 400402c:	8c001415 	stw	r16,80(r17)
 4004030:	003fd206 	br	4003f7c <__alt_data_end+0xfe003f7c>
 4004034:	88c00f17 	ldw	r3,60(r17)
 4004038:	00ffac16 	blt	zero,r3,4003eec <__alt_data_end+0xfe003eec>
 400403c:	003fcf06 	br	4003f7c <__alt_data_end+0xfe003f7c>
 4004040:	89400717 	ldw	r5,28(r17)
 4004044:	9809883a 	mov	r4,r19
 4004048:	000d883a 	mov	r6,zero
 400404c:	01c00044 	movi	r7,1
 4004050:	183ee83a 	callr	r3
 4004054:	1021883a 	mov	r16,r2
 4004058:	00bfffc4 	movi	r2,-1
 400405c:	80800326 	beq	r16,r2,400406c <_fflush_r+0x1d8>
 4004060:	8940030b 	ldhu	r5,12(r17)
 4004064:	88c00a17 	ldw	r3,40(r17)
 4004068:	003fa806 	br	4003f0c <__alt_data_end+0xfe003f0c>
 400406c:	98c00017 	ldw	r3,0(r19)
 4004070:	00800744 	movi	r2,29
 4004074:	18bfde1e 	bne	r3,r2,4003ff0 <__alt_data_end+0xfe003ff0>
 4004078:	003fc006 	br	4003f7c <__alt_data_end+0xfe003f7c>

0400407c <fflush>:
 400407c:	200b883a 	mov	r5,r4
 4004080:	20000426 	beq	r4,zero,4004094 <fflush+0x18>
 4004084:	00810074 	movhi	r2,1025
 4004088:	10b7ef04 	addi	r2,r2,-8260
 400408c:	11000017 	ldw	r4,0(r2)
 4004090:	4003e941 	jmpi	4003e94 <_fflush_r>
 4004094:	00810074 	movhi	r2,1025
 4004098:	10b7ee04 	addi	r2,r2,-8264
 400409c:	11000017 	ldw	r4,0(r2)
 40040a0:	01410034 	movhi	r5,1024
 40040a4:	294fa504 	addi	r5,r5,16020
 40040a8:	4004d301 	jmpi	4004d30 <_fwalk_reent>

040040ac <__fp_lock>:
 40040ac:	0005883a 	mov	r2,zero
 40040b0:	f800283a 	ret

040040b4 <__fp_unlock>:
 40040b4:	0005883a 	mov	r2,zero
 40040b8:	f800283a 	ret

040040bc <_cleanup_r>:
 40040bc:	01410034 	movhi	r5,1024
 40040c0:	295e1804 	addi	r5,r5,30816
 40040c4:	4004c881 	jmpi	4004c88 <_fwalk>

040040c8 <__sfmoreglue>:
 40040c8:	defffc04 	addi	sp,sp,-16
 40040cc:	dc800215 	stw	r18,8(sp)
 40040d0:	2825883a 	mov	r18,r5
 40040d4:	dc000015 	stw	r16,0(sp)
 40040d8:	01401704 	movi	r5,92
 40040dc:	2021883a 	mov	r16,r4
 40040e0:	9009883a 	mov	r4,r18
 40040e4:	dfc00315 	stw	ra,12(sp)
 40040e8:	dc400115 	stw	r17,4(sp)
 40040ec:	40094f00 	call	40094f0 <__mulsi3>
 40040f0:	8009883a 	mov	r4,r16
 40040f4:	11400304 	addi	r5,r2,12
 40040f8:	1023883a 	mov	r17,r2
 40040fc:	400506c0 	call	400506c <_malloc_r>
 4004100:	1021883a 	mov	r16,r2
 4004104:	10000726 	beq	r2,zero,4004124 <__sfmoreglue+0x5c>
 4004108:	11000304 	addi	r4,r2,12
 400410c:	10000015 	stw	zero,0(r2)
 4004110:	14800115 	stw	r18,4(r2)
 4004114:	11000215 	stw	r4,8(r2)
 4004118:	000b883a 	mov	r5,zero
 400411c:	880d883a 	mov	r6,r17
 4004120:	4005bb40 	call	4005bb4 <memset>
 4004124:	8005883a 	mov	r2,r16
 4004128:	dfc00317 	ldw	ra,12(sp)
 400412c:	dc800217 	ldw	r18,8(sp)
 4004130:	dc400117 	ldw	r17,4(sp)
 4004134:	dc000017 	ldw	r16,0(sp)
 4004138:	dec00404 	addi	sp,sp,16
 400413c:	f800283a 	ret

04004140 <_cleanup>:
 4004140:	00810074 	movhi	r2,1025
 4004144:	10b7ee04 	addi	r2,r2,-8264
 4004148:	11000017 	ldw	r4,0(r2)
 400414c:	40040bc1 	jmpi	40040bc <_cleanup_r>

04004150 <__sinit>:
 4004150:	20800e17 	ldw	r2,56(r4)
 4004154:	1000401e 	bne	r2,zero,4004258 <__sinit+0x108>
 4004158:	21400117 	ldw	r5,4(r4)
 400415c:	01810034 	movhi	r6,1024
 4004160:	31902f04 	addi	r6,r6,16572
 4004164:	20c00217 	ldw	r3,8(r4)
 4004168:	21800f15 	stw	r6,60(r4)
 400416c:	2080bb04 	addi	r2,r4,748
 4004170:	02400044 	movi	r9,1
 4004174:	018000c4 	movi	r6,3
 4004178:	2180b915 	stw	r6,740(r4)
 400417c:	2080ba15 	stw	r2,744(r4)
 4004180:	22400e15 	stw	r9,56(r4)
 4004184:	20800317 	ldw	r2,12(r4)
 4004188:	2000b815 	stw	zero,736(r4)
 400418c:	02010034 	movhi	r8,1024
 4004190:	421ce904 	addi	r8,r8,29604
 4004194:	01c10034 	movhi	r7,1024
 4004198:	39dcfe04 	addi	r7,r7,29688
 400419c:	01810034 	movhi	r6,1024
 40041a0:	319d2004 	addi	r6,r6,29824
 40041a4:	01010034 	movhi	r4,1024
 40041a8:	211d3704 	addi	r4,r4,29916
 40041ac:	02800104 	movi	r10,4
 40041b0:	28000015 	stw	zero,0(r5)
 40041b4:	28000115 	stw	zero,4(r5)
 40041b8:	28000215 	stw	zero,8(r5)
 40041bc:	2a80030d 	sth	r10,12(r5)
 40041c0:	2800038d 	sth	zero,14(r5)
 40041c4:	28000415 	stw	zero,16(r5)
 40041c8:	28000515 	stw	zero,20(r5)
 40041cc:	28000615 	stw	zero,24(r5)
 40041d0:	29400715 	stw	r5,28(r5)
 40041d4:	2a000815 	stw	r8,32(r5)
 40041d8:	29c00915 	stw	r7,36(r5)
 40041dc:	29800a15 	stw	r6,40(r5)
 40041e0:	29000b15 	stw	r4,44(r5)
 40041e4:	01400284 	movi	r5,10
 40041e8:	18000015 	stw	zero,0(r3)
 40041ec:	18000115 	stw	zero,4(r3)
 40041f0:	18000215 	stw	zero,8(r3)
 40041f4:	1940030d 	sth	r5,12(r3)
 40041f8:	1a40038d 	sth	r9,14(r3)
 40041fc:	18000415 	stw	zero,16(r3)
 4004200:	18000515 	stw	zero,20(r3)
 4004204:	18000615 	stw	zero,24(r3)
 4004208:	18c00715 	stw	r3,28(r3)
 400420c:	1a000815 	stw	r8,32(r3)
 4004210:	19c00915 	stw	r7,36(r3)
 4004214:	19800a15 	stw	r6,40(r3)
 4004218:	19000b15 	stw	r4,44(r3)
 400421c:	00c00484 	movi	r3,18
 4004220:	10c0030d 	sth	r3,12(r2)
 4004224:	00c00084 	movi	r3,2
 4004228:	10000015 	stw	zero,0(r2)
 400422c:	10000115 	stw	zero,4(r2)
 4004230:	10000215 	stw	zero,8(r2)
 4004234:	10c0038d 	sth	r3,14(r2)
 4004238:	10000415 	stw	zero,16(r2)
 400423c:	10000515 	stw	zero,20(r2)
 4004240:	10000615 	stw	zero,24(r2)
 4004244:	10800715 	stw	r2,28(r2)
 4004248:	12000815 	stw	r8,32(r2)
 400424c:	11c00915 	stw	r7,36(r2)
 4004250:	11800a15 	stw	r6,40(r2)
 4004254:	11000b15 	stw	r4,44(r2)
 4004258:	f800283a 	ret

0400425c <__sfp>:
 400425c:	defffc04 	addi	sp,sp,-16
 4004260:	00810074 	movhi	r2,1025
 4004264:	10b7ee04 	addi	r2,r2,-8264
 4004268:	dc400115 	stw	r17,4(sp)
 400426c:	14400017 	ldw	r17,0(r2)
 4004270:	dc800215 	stw	r18,8(sp)
 4004274:	dfc00315 	stw	ra,12(sp)
 4004278:	88800e17 	ldw	r2,56(r17)
 400427c:	dc000015 	stw	r16,0(sp)
 4004280:	2025883a 	mov	r18,r4
 4004284:	10002826 	beq	r2,zero,4004328 <__sfp+0xcc>
 4004288:	8c40b804 	addi	r17,r17,736
 400428c:	043fffc4 	movi	r16,-1
 4004290:	89400117 	ldw	r5,4(r17)
 4004294:	88800217 	ldw	r2,8(r17)
 4004298:	297fffc4 	addi	r5,r5,-1
 400429c:	28000a16 	blt	r5,zero,40042c8 <__sfp+0x6c>
 40042a0:	10c0030f 	ldh	r3,12(r2)
 40042a4:	18000c26 	beq	r3,zero,40042d8 <__sfp+0x7c>
 40042a8:	10c01a04 	addi	r3,r2,104
 40042ac:	00000206 	br	40042b8 <__sfp+0x5c>
 40042b0:	19bfe90f 	ldh	r6,-92(r3)
 40042b4:	30000826 	beq	r6,zero,40042d8 <__sfp+0x7c>
 40042b8:	297fffc4 	addi	r5,r5,-1
 40042bc:	18bffd04 	addi	r2,r3,-12
 40042c0:	18c01704 	addi	r3,r3,92
 40042c4:	2c3ffa1e 	bne	r5,r16,40042b0 <__alt_data_end+0xfe0042b0>
 40042c8:	88800017 	ldw	r2,0(r17)
 40042cc:	10001926 	beq	r2,zero,4004334 <__sfp+0xd8>
 40042d0:	1023883a 	mov	r17,r2
 40042d4:	003fee06 	br	4004290 <__alt_data_end+0xfe004290>
 40042d8:	00ffffc4 	movi	r3,-1
 40042dc:	10c0038d 	sth	r3,14(r2)
 40042e0:	00c00044 	movi	r3,1
 40042e4:	10c0030d 	sth	r3,12(r2)
 40042e8:	10000015 	stw	zero,0(r2)
 40042ec:	10000215 	stw	zero,8(r2)
 40042f0:	10000115 	stw	zero,4(r2)
 40042f4:	10000415 	stw	zero,16(r2)
 40042f8:	10000515 	stw	zero,20(r2)
 40042fc:	10000615 	stw	zero,24(r2)
 4004300:	10000c15 	stw	zero,48(r2)
 4004304:	10000d15 	stw	zero,52(r2)
 4004308:	10001115 	stw	zero,68(r2)
 400430c:	10001215 	stw	zero,72(r2)
 4004310:	dfc00317 	ldw	ra,12(sp)
 4004314:	dc800217 	ldw	r18,8(sp)
 4004318:	dc400117 	ldw	r17,4(sp)
 400431c:	dc000017 	ldw	r16,0(sp)
 4004320:	dec00404 	addi	sp,sp,16
 4004324:	f800283a 	ret
 4004328:	8809883a 	mov	r4,r17
 400432c:	40041500 	call	4004150 <__sinit>
 4004330:	003fd506 	br	4004288 <__alt_data_end+0xfe004288>
 4004334:	9009883a 	mov	r4,r18
 4004338:	01400104 	movi	r5,4
 400433c:	40040c80 	call	40040c8 <__sfmoreglue>
 4004340:	88800015 	stw	r2,0(r17)
 4004344:	103fe21e 	bne	r2,zero,40042d0 <__alt_data_end+0xfe0042d0>
 4004348:	00800304 	movi	r2,12
 400434c:	90800015 	stw	r2,0(r18)
 4004350:	0005883a 	mov	r2,zero
 4004354:	003fee06 	br	4004310 <__alt_data_end+0xfe004310>

04004358 <__sfp_lock_acquire>:
 4004358:	f800283a 	ret

0400435c <__sfp_lock_release>:
 400435c:	f800283a 	ret

04004360 <__sinit_lock_acquire>:
 4004360:	f800283a 	ret

04004364 <__sinit_lock_release>:
 4004364:	f800283a 	ret

04004368 <__fp_lock_all>:
 4004368:	00810074 	movhi	r2,1025
 400436c:	10b7ef04 	addi	r2,r2,-8260
 4004370:	11000017 	ldw	r4,0(r2)
 4004374:	01410034 	movhi	r5,1024
 4004378:	29502b04 	addi	r5,r5,16556
 400437c:	4004c881 	jmpi	4004c88 <_fwalk>

04004380 <__fp_unlock_all>:
 4004380:	00810074 	movhi	r2,1025
 4004384:	10b7ef04 	addi	r2,r2,-8260
 4004388:	11000017 	ldw	r4,0(r2)
 400438c:	01410034 	movhi	r5,1024
 4004390:	29502d04 	addi	r5,r5,16564
 4004394:	4004c881 	jmpi	4004c88 <_fwalk>

04004398 <_malloc_trim_r>:
 4004398:	defffb04 	addi	sp,sp,-20
 400439c:	dcc00315 	stw	r19,12(sp)
 40043a0:	dc800215 	stw	r18,8(sp)
 40043a4:	dc400115 	stw	r17,4(sp)
 40043a8:	dc000015 	stw	r16,0(sp)
 40043ac:	2827883a 	mov	r19,r5
 40043b0:	dfc00415 	stw	ra,16(sp)
 40043b4:	04410074 	movhi	r17,1025
 40043b8:	8c726a04 	addi	r17,r17,-13912
 40043bc:	2021883a 	mov	r16,r4
 40043c0:	400a1180 	call	400a118 <__malloc_lock>
 40043c4:	88800217 	ldw	r2,8(r17)
 40043c8:	14800117 	ldw	r18,4(r2)
 40043cc:	00bfff04 	movi	r2,-4
 40043d0:	90a4703a 	and	r18,r18,r2
 40043d4:	9083fbc4 	addi	r2,r18,4079
 40043d8:	14e7c83a 	sub	r19,r2,r19
 40043dc:	9826d33a 	srli	r19,r19,12
 40043e0:	0083ffc4 	movi	r2,4095
 40043e4:	9cffffc4 	addi	r19,r19,-1
 40043e8:	9826933a 	slli	r19,r19,12
 40043ec:	14c0060e 	bge	r2,r19,4004408 <_malloc_trim_r+0x70>
 40043f0:	8009883a 	mov	r4,r16
 40043f4:	000b883a 	mov	r5,zero
 40043f8:	40073400 	call	4007340 <_sbrk_r>
 40043fc:	88c00217 	ldw	r3,8(r17)
 4004400:	1c87883a 	add	r3,r3,r18
 4004404:	10c00a26 	beq	r2,r3,4004430 <_malloc_trim_r+0x98>
 4004408:	8009883a 	mov	r4,r16
 400440c:	400a1380 	call	400a138 <__malloc_unlock>
 4004410:	0005883a 	mov	r2,zero
 4004414:	dfc00417 	ldw	ra,16(sp)
 4004418:	dcc00317 	ldw	r19,12(sp)
 400441c:	dc800217 	ldw	r18,8(sp)
 4004420:	dc400117 	ldw	r17,4(sp)
 4004424:	dc000017 	ldw	r16,0(sp)
 4004428:	dec00504 	addi	sp,sp,20
 400442c:	f800283a 	ret
 4004430:	8009883a 	mov	r4,r16
 4004434:	04cbc83a 	sub	r5,zero,r19
 4004438:	40073400 	call	4007340 <_sbrk_r>
 400443c:	00ffffc4 	movi	r3,-1
 4004440:	10c01326 	beq	r2,r3,4004490 <_malloc_trim_r+0xf8>
 4004444:	00810074 	movhi	r2,1025
 4004448:	10bea004 	addi	r2,r2,-1408
 400444c:	11000017 	ldw	r4,0(r2)
 4004450:	88c00217 	ldw	r3,8(r17)
 4004454:	94e5c83a 	sub	r18,r18,r19
 4004458:	94800054 	ori	r18,r18,1
 400445c:	24e7c83a 	sub	r19,r4,r19
 4004460:	1c800115 	stw	r18,4(r3)
 4004464:	8009883a 	mov	r4,r16
 4004468:	14c00015 	stw	r19,0(r2)
 400446c:	400a1380 	call	400a138 <__malloc_unlock>
 4004470:	00800044 	movi	r2,1
 4004474:	dfc00417 	ldw	ra,16(sp)
 4004478:	dcc00317 	ldw	r19,12(sp)
 400447c:	dc800217 	ldw	r18,8(sp)
 4004480:	dc400117 	ldw	r17,4(sp)
 4004484:	dc000017 	ldw	r16,0(sp)
 4004488:	dec00504 	addi	sp,sp,20
 400448c:	f800283a 	ret
 4004490:	8009883a 	mov	r4,r16
 4004494:	000b883a 	mov	r5,zero
 4004498:	40073400 	call	4007340 <_sbrk_r>
 400449c:	88c00217 	ldw	r3,8(r17)
 40044a0:	014003c4 	movi	r5,15
 40044a4:	10c9c83a 	sub	r4,r2,r3
 40044a8:	293fd70e 	bge	r5,r4,4004408 <__alt_data_end+0xfe004408>
 40044ac:	01410074 	movhi	r5,1025
 40044b0:	2977f104 	addi	r5,r5,-8252
 40044b4:	29400017 	ldw	r5,0(r5)
 40044b8:	21000054 	ori	r4,r4,1
 40044bc:	19000115 	stw	r4,4(r3)
 40044c0:	1145c83a 	sub	r2,r2,r5
 40044c4:	01410074 	movhi	r5,1025
 40044c8:	297ea004 	addi	r5,r5,-1408
 40044cc:	28800015 	stw	r2,0(r5)
 40044d0:	003fcd06 	br	4004408 <__alt_data_end+0xfe004408>

040044d4 <_free_r>:
 40044d4:	defffd04 	addi	sp,sp,-12
 40044d8:	dc400115 	stw	r17,4(sp)
 40044dc:	dc000015 	stw	r16,0(sp)
 40044e0:	dfc00215 	stw	ra,8(sp)
 40044e4:	2821883a 	mov	r16,r5
 40044e8:	2023883a 	mov	r17,r4
 40044ec:	28004b26 	beq	r5,zero,400461c <_free_r+0x148>
 40044f0:	400a1180 	call	400a118 <__malloc_lock>
 40044f4:	823fff17 	ldw	r8,-4(r16)
 40044f8:	00bfff84 	movi	r2,-2
 40044fc:	81bffe04 	addi	r6,r16,-8
 4004500:	4084703a 	and	r2,r8,r2
 4004504:	3087883a 	add	r3,r6,r2
 4004508:	01410074 	movhi	r5,1025
 400450c:	29726a04 	addi	r5,r5,-13912
 4004510:	1a400117 	ldw	r9,4(r3)
 4004514:	29000217 	ldw	r4,8(r5)
 4004518:	01ffff04 	movi	r7,-4
 400451c:	49ce703a 	and	r7,r9,r7
 4004520:	20c06526 	beq	r4,r3,40046b8 <_free_r+0x1e4>
 4004524:	19c00115 	stw	r7,4(r3)
 4004528:	4200004c 	andi	r8,r8,1
 400452c:	40003026 	beq	r8,zero,40045f0 <_free_r+0x11c>
 4004530:	0009883a 	mov	r4,zero
 4004534:	19d1883a 	add	r8,r3,r7
 4004538:	42000117 	ldw	r8,4(r8)
 400453c:	4200004c 	andi	r8,r8,1
 4004540:	4000061e 	bne	r8,zero,400455c <_free_r+0x88>
 4004544:	11c5883a 	add	r2,r2,r7
 4004548:	19c00217 	ldw	r7,8(r3)
 400454c:	20004e26 	beq	r4,zero,4004688 <_free_r+0x1b4>
 4004550:	18c00317 	ldw	r3,12(r3)
 4004554:	38c00315 	stw	r3,12(r7)
 4004558:	19c00215 	stw	r7,8(r3)
 400455c:	11c00054 	ori	r7,r2,1
 4004560:	3087883a 	add	r3,r6,r2
 4004564:	31c00115 	stw	r7,4(r6)
 4004568:	18800015 	stw	r2,0(r3)
 400456c:	20001a1e 	bne	r4,zero,40045d8 <_free_r+0x104>
 4004570:	00c07fc4 	movi	r3,511
 4004574:	18802e2e 	bgeu	r3,r2,4004630 <_free_r+0x15c>
 4004578:	1006d27a 	srli	r3,r2,9
 400457c:	01000104 	movi	r4,4
 4004580:	20c06636 	bltu	r4,r3,400471c <_free_r+0x248>
 4004584:	1008d1ba 	srli	r4,r2,6
 4004588:	21000e04 	addi	r4,r4,56
 400458c:	210f883a 	add	r7,r4,r4
 4004590:	39cf883a 	add	r7,r7,r7
 4004594:	39cf883a 	add	r7,r7,r7
 4004598:	29cf883a 	add	r7,r5,r7
 400459c:	38c00217 	ldw	r3,8(r7)
 40045a0:	01410074 	movhi	r5,1025
 40045a4:	29726a04 	addi	r5,r5,-13912
 40045a8:	19c06126 	beq	r3,r7,4004730 <_free_r+0x25c>
 40045ac:	013fff04 	movi	r4,-4
 40045b0:	19400117 	ldw	r5,4(r3)
 40045b4:	290a703a 	and	r5,r5,r4
 40045b8:	1140022e 	bgeu	r2,r5,40045c4 <_free_r+0xf0>
 40045bc:	18c00217 	ldw	r3,8(r3)
 40045c0:	38fffb1e 	bne	r7,r3,40045b0 <__alt_data_end+0xfe0045b0>
 40045c4:	18800317 	ldw	r2,12(r3)
 40045c8:	30800315 	stw	r2,12(r6)
 40045cc:	30c00215 	stw	r3,8(r6)
 40045d0:	11800215 	stw	r6,8(r2)
 40045d4:	19800315 	stw	r6,12(r3)
 40045d8:	8809883a 	mov	r4,r17
 40045dc:	dfc00217 	ldw	ra,8(sp)
 40045e0:	dc400117 	ldw	r17,4(sp)
 40045e4:	dc000017 	ldw	r16,0(sp)
 40045e8:	dec00304 	addi	sp,sp,12
 40045ec:	400a1381 	jmpi	400a138 <__malloc_unlock>
 40045f0:	813ffe17 	ldw	r4,-8(r16)
 40045f4:	2a400204 	addi	r9,r5,8
 40045f8:	310dc83a 	sub	r6,r6,r4
 40045fc:	32000217 	ldw	r8,8(r6)
 4004600:	1105883a 	add	r2,r2,r4
 4004604:	42404326 	beq	r8,r9,4004714 <_free_r+0x240>
 4004608:	32400317 	ldw	r9,12(r6)
 400460c:	0009883a 	mov	r4,zero
 4004610:	42400315 	stw	r9,12(r8)
 4004614:	4a000215 	stw	r8,8(r9)
 4004618:	003fc606 	br	4004534 <__alt_data_end+0xfe004534>
 400461c:	dfc00217 	ldw	ra,8(sp)
 4004620:	dc400117 	ldw	r17,4(sp)
 4004624:	dc000017 	ldw	r16,0(sp)
 4004628:	dec00304 	addi	sp,sp,12
 400462c:	f800283a 	ret
 4004630:	1004d0fa 	srli	r2,r2,3
 4004634:	02000044 	movi	r8,1
 4004638:	29c00117 	ldw	r7,4(r5)
 400463c:	1087883a 	add	r3,r2,r2
 4004640:	18c7883a 	add	r3,r3,r3
 4004644:	1005d0ba 	srai	r2,r2,2
 4004648:	18c7883a 	add	r3,r3,r3
 400464c:	28c7883a 	add	r3,r5,r3
 4004650:	19000217 	ldw	r4,8(r3)
 4004654:	4084983a 	sll	r2,r8,r2
 4004658:	30c00315 	stw	r3,12(r6)
 400465c:	31000215 	stw	r4,8(r6)
 4004660:	11c4b03a 	or	r2,r2,r7
 4004664:	21800315 	stw	r6,12(r4)
 4004668:	8809883a 	mov	r4,r17
 400466c:	28800115 	stw	r2,4(r5)
 4004670:	19800215 	stw	r6,8(r3)
 4004674:	dfc00217 	ldw	ra,8(sp)
 4004678:	dc400117 	ldw	r17,4(sp)
 400467c:	dc000017 	ldw	r16,0(sp)
 4004680:	dec00304 	addi	sp,sp,12
 4004684:	400a1381 	jmpi	400a138 <__malloc_unlock>
 4004688:	02010074 	movhi	r8,1025
 400468c:	42326c04 	addi	r8,r8,-13904
 4004690:	3a3faf1e 	bne	r7,r8,4004550 <__alt_data_end+0xfe004550>
 4004694:	29800515 	stw	r6,20(r5)
 4004698:	29800415 	stw	r6,16(r5)
 400469c:	11000054 	ori	r4,r2,1
 40046a0:	3087883a 	add	r3,r6,r2
 40046a4:	31c00315 	stw	r7,12(r6)
 40046a8:	31c00215 	stw	r7,8(r6)
 40046ac:	31000115 	stw	r4,4(r6)
 40046b0:	18800015 	stw	r2,0(r3)
 40046b4:	003fc806 	br	40045d8 <__alt_data_end+0xfe0045d8>
 40046b8:	4200004c 	andi	r8,r8,1
 40046bc:	3885883a 	add	r2,r7,r2
 40046c0:	4000071e 	bne	r8,zero,40046e0 <_free_r+0x20c>
 40046c4:	81fffe17 	ldw	r7,-8(r16)
 40046c8:	31cdc83a 	sub	r6,r6,r7
 40046cc:	30c00317 	ldw	r3,12(r6)
 40046d0:	31000217 	ldw	r4,8(r6)
 40046d4:	11c5883a 	add	r2,r2,r7
 40046d8:	20c00315 	stw	r3,12(r4)
 40046dc:	19000215 	stw	r4,8(r3)
 40046e0:	00c10074 	movhi	r3,1025
 40046e4:	18f7f204 	addi	r3,r3,-8248
 40046e8:	18c00017 	ldw	r3,0(r3)
 40046ec:	11000054 	ori	r4,r2,1
 40046f0:	31000115 	stw	r4,4(r6)
 40046f4:	29800215 	stw	r6,8(r5)
 40046f8:	10ffb736 	bltu	r2,r3,40045d8 <__alt_data_end+0xfe0045d8>
 40046fc:	00810074 	movhi	r2,1025
 4004700:	10be9804 	addi	r2,r2,-1440
 4004704:	11400017 	ldw	r5,0(r2)
 4004708:	8809883a 	mov	r4,r17
 400470c:	40043980 	call	4004398 <_malloc_trim_r>
 4004710:	003fb106 	br	40045d8 <__alt_data_end+0xfe0045d8>
 4004714:	01000044 	movi	r4,1
 4004718:	003f8606 	br	4004534 <__alt_data_end+0xfe004534>
 400471c:	01000504 	movi	r4,20
 4004720:	20c00b36 	bltu	r4,r3,4004750 <_free_r+0x27c>
 4004724:	190016c4 	addi	r4,r3,91
 4004728:	210f883a 	add	r7,r4,r4
 400472c:	003f9806 	br	4004590 <__alt_data_end+0xfe004590>
 4004730:	2009d0ba 	srai	r4,r4,2
 4004734:	00800044 	movi	r2,1
 4004738:	29c00117 	ldw	r7,4(r5)
 400473c:	1108983a 	sll	r4,r2,r4
 4004740:	1805883a 	mov	r2,r3
 4004744:	21c8b03a 	or	r4,r4,r7
 4004748:	29000115 	stw	r4,4(r5)
 400474c:	003f9e06 	br	40045c8 <__alt_data_end+0xfe0045c8>
 4004750:	01001504 	movi	r4,84
 4004754:	20c00436 	bltu	r4,r3,4004768 <_free_r+0x294>
 4004758:	1008d33a 	srli	r4,r2,12
 400475c:	21001b84 	addi	r4,r4,110
 4004760:	210f883a 	add	r7,r4,r4
 4004764:	003f8a06 	br	4004590 <__alt_data_end+0xfe004590>
 4004768:	01005504 	movi	r4,340
 400476c:	20c00436 	bltu	r4,r3,4004780 <_free_r+0x2ac>
 4004770:	1008d3fa 	srli	r4,r2,15
 4004774:	21001dc4 	addi	r4,r4,119
 4004778:	210f883a 	add	r7,r4,r4
 400477c:	003f8406 	br	4004590 <__alt_data_end+0xfe004590>
 4004780:	01015504 	movi	r4,1364
 4004784:	20c00436 	bltu	r4,r3,4004798 <_free_r+0x2c4>
 4004788:	1008d4ba 	srli	r4,r2,18
 400478c:	21001f04 	addi	r4,r4,124
 4004790:	210f883a 	add	r7,r4,r4
 4004794:	003f7e06 	br	4004590 <__alt_data_end+0xfe004590>
 4004798:	01c03f04 	movi	r7,252
 400479c:	01001f84 	movi	r4,126
 40047a0:	003f7b06 	br	4004590 <__alt_data_end+0xfe004590>

040047a4 <__sfvwrite_r>:
 40047a4:	30800217 	ldw	r2,8(r6)
 40047a8:	defff504 	addi	sp,sp,-44
 40047ac:	dd400615 	stw	r21,24(sp)
 40047b0:	dd000515 	stw	r20,20(sp)
 40047b4:	dc000115 	stw	r16,4(sp)
 40047b8:	dfc00a15 	stw	ra,40(sp)
 40047bc:	df000915 	stw	fp,36(sp)
 40047c0:	ddc00815 	stw	r23,32(sp)
 40047c4:	dd800715 	stw	r22,28(sp)
 40047c8:	dcc00415 	stw	r19,16(sp)
 40047cc:	dc800315 	stw	r18,12(sp)
 40047d0:	dc400215 	stw	r17,8(sp)
 40047d4:	3029883a 	mov	r20,r6
 40047d8:	202b883a 	mov	r21,r4
 40047dc:	2821883a 	mov	r16,r5
 40047e0:	10002126 	beq	r2,zero,4004868 <__sfvwrite_r+0xc4>
 40047e4:	2880030b 	ldhu	r2,12(r5)
 40047e8:	10c0020c 	andi	r3,r2,8
 40047ec:	18ffffcc 	andi	r3,r3,65535
 40047f0:	18e0001c 	xori	r3,r3,32768
 40047f4:	18e00004 	addi	r3,r3,-32768
 40047f8:	18002826 	beq	r3,zero,400489c <__sfvwrite_r+0xf8>
 40047fc:	28c00417 	ldw	r3,16(r5)
 4004800:	18002626 	beq	r3,zero,400489c <__sfvwrite_r+0xf8>
 4004804:	10c0008c 	andi	r3,r2,2
 4004808:	18ffffcc 	andi	r3,r3,65535
 400480c:	18e0001c 	xori	r3,r3,32768
 4004810:	18e00004 	addi	r3,r3,-32768
 4004814:	a4400017 	ldw	r17,0(r20)
 4004818:	18002b26 	beq	r3,zero,40048c8 <__sfvwrite_r+0x124>
 400481c:	0027883a 	mov	r19,zero
 4004820:	0025883a 	mov	r18,zero
 4004824:	05810004 	movi	r22,1024
 4004828:	980d883a 	mov	r6,r19
 400482c:	a809883a 	mov	r4,r21
 4004830:	90004f26 	beq	r18,zero,4004970 <__sfvwrite_r+0x1cc>
 4004834:	900f883a 	mov	r7,r18
 4004838:	81400717 	ldw	r5,28(r16)
 400483c:	b480012e 	bgeu	r22,r18,4004844 <__sfvwrite_r+0xa0>
 4004840:	01c10004 	movi	r7,1024
 4004844:	80800917 	ldw	r2,36(r16)
 4004848:	103ee83a 	callr	r2
 400484c:	0080540e 	bge	zero,r2,40049a0 <__sfvwrite_r+0x1fc>
 4004850:	a0c00217 	ldw	r3,8(r20)
 4004854:	98a7883a 	add	r19,r19,r2
 4004858:	90a5c83a 	sub	r18,r18,r2
 400485c:	1885c83a 	sub	r2,r3,r2
 4004860:	a0800215 	stw	r2,8(r20)
 4004864:	103ff01e 	bne	r2,zero,4004828 <__alt_data_end+0xfe004828>
 4004868:	0005883a 	mov	r2,zero
 400486c:	dfc00a17 	ldw	ra,40(sp)
 4004870:	df000917 	ldw	fp,36(sp)
 4004874:	ddc00817 	ldw	r23,32(sp)
 4004878:	dd800717 	ldw	r22,28(sp)
 400487c:	dd400617 	ldw	r21,24(sp)
 4004880:	dd000517 	ldw	r20,20(sp)
 4004884:	dcc00417 	ldw	r19,16(sp)
 4004888:	dc800317 	ldw	r18,12(sp)
 400488c:	dc400217 	ldw	r17,8(sp)
 4004890:	dc000117 	ldw	r16,4(sp)
 4004894:	dec00b04 	addi	sp,sp,44
 4004898:	f800283a 	ret
 400489c:	a809883a 	mov	r4,r21
 40048a0:	800b883a 	mov	r5,r16
 40048a4:	40024c80 	call	40024c8 <__swsetup_r>
 40048a8:	1000f01e 	bne	r2,zero,4004c6c <__sfvwrite_r+0x4c8>
 40048ac:	8080030b 	ldhu	r2,12(r16)
 40048b0:	a4400017 	ldw	r17,0(r20)
 40048b4:	10c0008c 	andi	r3,r2,2
 40048b8:	18ffffcc 	andi	r3,r3,65535
 40048bc:	18e0001c 	xori	r3,r3,32768
 40048c0:	18e00004 	addi	r3,r3,-32768
 40048c4:	183fd51e 	bne	r3,zero,400481c <__alt_data_end+0xfe00481c>
 40048c8:	10c0004c 	andi	r3,r2,1
 40048cc:	002d883a 	mov	r22,zero
 40048d0:	1800381e 	bne	r3,zero,40049b4 <__sfvwrite_r+0x210>
 40048d4:	0025883a 	mov	r18,zero
 40048d8:	90002126 	beq	r18,zero,4004960 <__sfvwrite_r+0x1bc>
 40048dc:	10c0800c 	andi	r3,r2,512
 40048e0:	18ffffcc 	andi	r3,r3,65535
 40048e4:	18e0001c 	xori	r3,r3,32768
 40048e8:	18e00004 	addi	r3,r3,-32768
 40048ec:	84c00217 	ldw	r19,8(r16)
 40048f0:	18006b26 	beq	r3,zero,4004aa0 <__sfvwrite_r+0x2fc>
 40048f4:	980f883a 	mov	r7,r19
 40048f8:	94c08636 	bltu	r18,r19,4004b14 <__sfvwrite_r+0x370>
 40048fc:	10c1200c 	andi	r3,r2,1152
 4004900:	18009f1e 	bne	r3,zero,4004b80 <__sfvwrite_r+0x3dc>
 4004904:	81000017 	ldw	r4,0(r16)
 4004908:	982f883a 	mov	r23,r19
 400490c:	9039883a 	mov	fp,r18
 4004910:	9027883a 	mov	r19,r18
 4004914:	380d883a 	mov	r6,r7
 4004918:	b00b883a 	mov	r5,r22
 400491c:	d9c00015 	stw	r7,0(sp)
 4004920:	4005a280 	call	4005a28 <memmove>
 4004924:	d9c00017 	ldw	r7,0(sp)
 4004928:	81000217 	ldw	r4,8(r16)
 400492c:	80800017 	ldw	r2,0(r16)
 4004930:	25efc83a 	sub	r23,r4,r23
 4004934:	11cf883a 	add	r7,r2,r7
 4004938:	85c00215 	stw	r23,8(r16)
 400493c:	81c00015 	stw	r7,0(r16)
 4004940:	a0800217 	ldw	r2,8(r20)
 4004944:	b72d883a 	add	r22,r22,fp
 4004948:	9725c83a 	sub	r18,r18,fp
 400494c:	14e7c83a 	sub	r19,r2,r19
 4004950:	a4c00215 	stw	r19,8(r20)
 4004954:	983fc426 	beq	r19,zero,4004868 <__alt_data_end+0xfe004868>
 4004958:	8080030b 	ldhu	r2,12(r16)
 400495c:	903fdf1e 	bne	r18,zero,40048dc <__alt_data_end+0xfe0048dc>
 4004960:	8d800017 	ldw	r22,0(r17)
 4004964:	8c800117 	ldw	r18,4(r17)
 4004968:	8c400204 	addi	r17,r17,8
 400496c:	003fda06 	br	40048d8 <__alt_data_end+0xfe0048d8>
 4004970:	8cc00017 	ldw	r19,0(r17)
 4004974:	8c800117 	ldw	r18,4(r17)
 4004978:	8c400204 	addi	r17,r17,8
 400497c:	003faa06 	br	4004828 <__alt_data_end+0xfe004828>
 4004980:	4006ce00 	call	4006ce0 <_realloc_r>
 4004984:	102f883a 	mov	r23,r2
 4004988:	10009f1e 	bne	r2,zero,4004c08 <__sfvwrite_r+0x464>
 400498c:	81400417 	ldw	r5,16(r16)
 4004990:	a809883a 	mov	r4,r21
 4004994:	40044d40 	call	40044d4 <_free_r>
 4004998:	00800304 	movi	r2,12
 400499c:	a8800015 	stw	r2,0(r21)
 40049a0:	80c0030b 	ldhu	r3,12(r16)
 40049a4:	00bfffc4 	movi	r2,-1
 40049a8:	18c01014 	ori	r3,r3,64
 40049ac:	80c0030d 	sth	r3,12(r16)
 40049b0:	003fae06 	br	400486c <__alt_data_end+0xfe00486c>
 40049b4:	0007883a 	mov	r3,zero
 40049b8:	0039883a 	mov	fp,zero
 40049bc:	0025883a 	mov	r18,zero
 40049c0:	90001e26 	beq	r18,zero,4004a3c <__sfvwrite_r+0x298>
 40049c4:	18006526 	beq	r3,zero,4004b5c <__sfvwrite_r+0x3b8>
 40049c8:	b02f883a 	mov	r23,r22
 40049cc:	9580012e 	bgeu	r18,r22,40049d4 <__sfvwrite_r+0x230>
 40049d0:	902f883a 	mov	r23,r18
 40049d4:	81000017 	ldw	r4,0(r16)
 40049d8:	80800417 	ldw	r2,16(r16)
 40049dc:	84c00217 	ldw	r19,8(r16)
 40049e0:	81c00517 	ldw	r7,20(r16)
 40049e4:	1100022e 	bgeu	r2,r4,40049f0 <__sfvwrite_r+0x24c>
 40049e8:	99e7883a 	add	r19,r19,r7
 40049ec:	9dc01816 	blt	r19,r23,4004a50 <__sfvwrite_r+0x2ac>
 40049f0:	b9c03b16 	blt	r23,r7,4004ae0 <__sfvwrite_r+0x33c>
 40049f4:	80800917 	ldw	r2,36(r16)
 40049f8:	81400717 	ldw	r5,28(r16)
 40049fc:	a809883a 	mov	r4,r21
 4004a00:	d8c00015 	stw	r3,0(sp)
 4004a04:	e00d883a 	mov	r6,fp
 4004a08:	103ee83a 	callr	r2
 4004a0c:	1027883a 	mov	r19,r2
 4004a10:	d8c00017 	ldw	r3,0(sp)
 4004a14:	00bfe20e 	bge	zero,r2,40049a0 <__alt_data_end+0xfe0049a0>
 4004a18:	b4edc83a 	sub	r22,r22,r19
 4004a1c:	b0001a26 	beq	r22,zero,4004a88 <__sfvwrite_r+0x2e4>
 4004a20:	a0800217 	ldw	r2,8(r20)
 4004a24:	e4f9883a 	add	fp,fp,r19
 4004a28:	94e5c83a 	sub	r18,r18,r19
 4004a2c:	14e7c83a 	sub	r19,r2,r19
 4004a30:	a4c00215 	stw	r19,8(r20)
 4004a34:	983f8c26 	beq	r19,zero,4004868 <__alt_data_end+0xfe004868>
 4004a38:	903fe21e 	bne	r18,zero,40049c4 <__alt_data_end+0xfe0049c4>
 4004a3c:	8f000017 	ldw	fp,0(r17)
 4004a40:	8c800117 	ldw	r18,4(r17)
 4004a44:	0007883a 	mov	r3,zero
 4004a48:	8c400204 	addi	r17,r17,8
 4004a4c:	003fdc06 	br	40049c0 <__alt_data_end+0xfe0049c0>
 4004a50:	e00b883a 	mov	r5,fp
 4004a54:	980d883a 	mov	r6,r19
 4004a58:	d8c00015 	stw	r3,0(sp)
 4004a5c:	4005a280 	call	4005a28 <memmove>
 4004a60:	80800017 	ldw	r2,0(r16)
 4004a64:	a809883a 	mov	r4,r21
 4004a68:	800b883a 	mov	r5,r16
 4004a6c:	14c5883a 	add	r2,r2,r19
 4004a70:	80800015 	stw	r2,0(r16)
 4004a74:	4003e940 	call	4003e94 <_fflush_r>
 4004a78:	d8c00017 	ldw	r3,0(sp)
 4004a7c:	103fc81e 	bne	r2,zero,40049a0 <__alt_data_end+0xfe0049a0>
 4004a80:	b4edc83a 	sub	r22,r22,r19
 4004a84:	b03fe61e 	bne	r22,zero,4004a20 <__alt_data_end+0xfe004a20>
 4004a88:	a809883a 	mov	r4,r21
 4004a8c:	800b883a 	mov	r5,r16
 4004a90:	4003e940 	call	4003e94 <_fflush_r>
 4004a94:	103fc21e 	bne	r2,zero,40049a0 <__alt_data_end+0xfe0049a0>
 4004a98:	0007883a 	mov	r3,zero
 4004a9c:	003fe006 	br	4004a20 <__alt_data_end+0xfe004a20>
 4004aa0:	81000017 	ldw	r4,0(r16)
 4004aa4:	80800417 	ldw	r2,16(r16)
 4004aa8:	1100022e 	bgeu	r2,r4,4004ab4 <__sfvwrite_r+0x310>
 4004aac:	9839883a 	mov	fp,r19
 4004ab0:	9c806036 	bltu	r19,r18,4004c34 <__sfvwrite_r+0x490>
 4004ab4:	81c00517 	ldw	r7,20(r16)
 4004ab8:	91c01c36 	bltu	r18,r7,4004b2c <__sfvwrite_r+0x388>
 4004abc:	80800917 	ldw	r2,36(r16)
 4004ac0:	81400717 	ldw	r5,28(r16)
 4004ac4:	a809883a 	mov	r4,r21
 4004ac8:	b00d883a 	mov	r6,r22
 4004acc:	103ee83a 	callr	r2
 4004ad0:	1027883a 	mov	r19,r2
 4004ad4:	00bfb20e 	bge	zero,r2,40049a0 <__alt_data_end+0xfe0049a0>
 4004ad8:	1039883a 	mov	fp,r2
 4004adc:	003f9806 	br	4004940 <__alt_data_end+0xfe004940>
 4004ae0:	b80d883a 	mov	r6,r23
 4004ae4:	e00b883a 	mov	r5,fp
 4004ae8:	d8c00015 	stw	r3,0(sp)
 4004aec:	4005a280 	call	4005a28 <memmove>
 4004af0:	80800217 	ldw	r2,8(r16)
 4004af4:	81000017 	ldw	r4,0(r16)
 4004af8:	b827883a 	mov	r19,r23
 4004afc:	15c5c83a 	sub	r2,r2,r23
 4004b00:	25ef883a 	add	r23,r4,r23
 4004b04:	80800215 	stw	r2,8(r16)
 4004b08:	85c00015 	stw	r23,0(r16)
 4004b0c:	d8c00017 	ldw	r3,0(sp)
 4004b10:	003fc106 	br	4004a18 <__alt_data_end+0xfe004a18>
 4004b14:	81000017 	ldw	r4,0(r16)
 4004b18:	902f883a 	mov	r23,r18
 4004b1c:	9039883a 	mov	fp,r18
 4004b20:	9027883a 	mov	r19,r18
 4004b24:	900f883a 	mov	r7,r18
 4004b28:	003f7a06 	br	4004914 <__alt_data_end+0xfe004914>
 4004b2c:	b00b883a 	mov	r5,r22
 4004b30:	900d883a 	mov	r6,r18
 4004b34:	4005a280 	call	4005a28 <memmove>
 4004b38:	80c00217 	ldw	r3,8(r16)
 4004b3c:	80800017 	ldw	r2,0(r16)
 4004b40:	9027883a 	mov	r19,r18
 4004b44:	1c87c83a 	sub	r3,r3,r18
 4004b48:	1485883a 	add	r2,r2,r18
 4004b4c:	80c00215 	stw	r3,8(r16)
 4004b50:	80800015 	stw	r2,0(r16)
 4004b54:	9039883a 	mov	fp,r18
 4004b58:	003f7906 	br	4004940 <__alt_data_end+0xfe004940>
 4004b5c:	e009883a 	mov	r4,fp
 4004b60:	01400284 	movi	r5,10
 4004b64:	900d883a 	mov	r6,r18
 4004b68:	40057f00 	call	40057f0 <memchr>
 4004b6c:	10003c26 	beq	r2,zero,4004c60 <__sfvwrite_r+0x4bc>
 4004b70:	15800044 	addi	r22,r2,1
 4004b74:	b72dc83a 	sub	r22,r22,fp
 4004b78:	00c00044 	movi	r3,1
 4004b7c:	003f9206 	br	40049c8 <__alt_data_end+0xfe0049c8>
 4004b80:	81000517 	ldw	r4,20(r16)
 4004b84:	81400417 	ldw	r5,16(r16)
 4004b88:	80c00017 	ldw	r3,0(r16)
 4004b8c:	210d883a 	add	r6,r4,r4
 4004b90:	3109883a 	add	r4,r6,r4
 4004b94:	2026d7fa 	srli	r19,r4,31
 4004b98:	1979c83a 	sub	fp,r3,r5
 4004b9c:	e1800044 	addi	r6,fp,1
 4004ba0:	9909883a 	add	r4,r19,r4
 4004ba4:	2027d07a 	srai	r19,r4,1
 4004ba8:	3489883a 	add	r4,r6,r18
 4004bac:	980d883a 	mov	r6,r19
 4004bb0:	9900022e 	bgeu	r19,r4,4004bbc <__sfvwrite_r+0x418>
 4004bb4:	2027883a 	mov	r19,r4
 4004bb8:	200d883a 	mov	r6,r4
 4004bbc:	1081000c 	andi	r2,r2,1024
 4004bc0:	10bfffcc 	andi	r2,r2,65535
 4004bc4:	10a0001c 	xori	r2,r2,32768
 4004bc8:	10a00004 	addi	r2,r2,-32768
 4004bcc:	a809883a 	mov	r4,r21
 4004bd0:	103f6b26 	beq	r2,zero,4004980 <__alt_data_end+0xfe004980>
 4004bd4:	300b883a 	mov	r5,r6
 4004bd8:	400506c0 	call	400506c <_malloc_r>
 4004bdc:	102f883a 	mov	r23,r2
 4004be0:	103f6d26 	beq	r2,zero,4004998 <__alt_data_end+0xfe004998>
 4004be4:	81400417 	ldw	r5,16(r16)
 4004be8:	1009883a 	mov	r4,r2
 4004bec:	e00d883a 	mov	r6,fp
 4004bf0:	40058e80 	call	40058e8 <memcpy>
 4004bf4:	8080030b 	ldhu	r2,12(r16)
 4004bf8:	00fedfc4 	movi	r3,-1153
 4004bfc:	10c4703a 	and	r2,r2,r3
 4004c00:	10802014 	ori	r2,r2,128
 4004c04:	8080030d 	sth	r2,12(r16)
 4004c08:	bf09883a 	add	r4,r23,fp
 4004c0c:	9f07c83a 	sub	r3,r19,fp
 4004c10:	85c00415 	stw	r23,16(r16)
 4004c14:	84c00515 	stw	r19,20(r16)
 4004c18:	81000015 	stw	r4,0(r16)
 4004c1c:	902f883a 	mov	r23,r18
 4004c20:	80c00215 	stw	r3,8(r16)
 4004c24:	9039883a 	mov	fp,r18
 4004c28:	9027883a 	mov	r19,r18
 4004c2c:	900f883a 	mov	r7,r18
 4004c30:	003f3806 	br	4004914 <__alt_data_end+0xfe004914>
 4004c34:	b00b883a 	mov	r5,r22
 4004c38:	980d883a 	mov	r6,r19
 4004c3c:	4005a280 	call	4005a28 <memmove>
 4004c40:	80800017 	ldw	r2,0(r16)
 4004c44:	a809883a 	mov	r4,r21
 4004c48:	800b883a 	mov	r5,r16
 4004c4c:	14c5883a 	add	r2,r2,r19
 4004c50:	80800015 	stw	r2,0(r16)
 4004c54:	4003e940 	call	4003e94 <_fflush_r>
 4004c58:	103f3926 	beq	r2,zero,4004940 <__alt_data_end+0xfe004940>
 4004c5c:	003f5006 	br	40049a0 <__alt_data_end+0xfe0049a0>
 4004c60:	95800044 	addi	r22,r18,1
 4004c64:	00c00044 	movi	r3,1
 4004c68:	003f5706 	br	40049c8 <__alt_data_end+0xfe0049c8>
 4004c6c:	80c0030b 	ldhu	r3,12(r16)
 4004c70:	00bfffc4 	movi	r2,-1
 4004c74:	18c01014 	ori	r3,r3,64
 4004c78:	80c0030d 	sth	r3,12(r16)
 4004c7c:	00c00244 	movi	r3,9
 4004c80:	a8c00015 	stw	r3,0(r21)
 4004c84:	003ef906 	br	400486c <__alt_data_end+0xfe00486c>

04004c88 <_fwalk>:
 4004c88:	defff904 	addi	sp,sp,-28
 4004c8c:	dcc00315 	stw	r19,12(sp)
 4004c90:	24c0b804 	addi	r19,r4,736
 4004c94:	dd400515 	stw	r21,20(sp)
 4004c98:	dd000415 	stw	r20,16(sp)
 4004c9c:	dfc00615 	stw	ra,24(sp)
 4004ca0:	dc800215 	stw	r18,8(sp)
 4004ca4:	dc400115 	stw	r17,4(sp)
 4004ca8:	dc000015 	stw	r16,0(sp)
 4004cac:	282b883a 	mov	r21,r5
 4004cb0:	0029883a 	mov	r20,zero
 4004cb4:	40043580 	call	4004358 <__sfp_lock_acquire>
 4004cb8:	98001226 	beq	r19,zero,4004d04 <_fwalk+0x7c>
 4004cbc:	04bfffc4 	movi	r18,-1
 4004cc0:	9c400117 	ldw	r17,4(r19)
 4004cc4:	9c000217 	ldw	r16,8(r19)
 4004cc8:	8c7fffc4 	addi	r17,r17,-1
 4004ccc:	88000b16 	blt	r17,zero,4004cfc <_fwalk+0x74>
 4004cd0:	84000304 	addi	r16,r16,12
 4004cd4:	80c0000f 	ldh	r3,0(r16)
 4004cd8:	8c7fffc4 	addi	r17,r17,-1
 4004cdc:	813ffd04 	addi	r4,r16,-12
 4004ce0:	18000426 	beq	r3,zero,4004cf4 <_fwalk+0x6c>
 4004ce4:	80c0008f 	ldh	r3,2(r16)
 4004ce8:	1c800226 	beq	r3,r18,4004cf4 <_fwalk+0x6c>
 4004cec:	a83ee83a 	callr	r21
 4004cf0:	a0a8b03a 	or	r20,r20,r2
 4004cf4:	84001704 	addi	r16,r16,92
 4004cf8:	8cbff61e 	bne	r17,r18,4004cd4 <__alt_data_end+0xfe004cd4>
 4004cfc:	9cc00017 	ldw	r19,0(r19)
 4004d00:	983fef1e 	bne	r19,zero,4004cc0 <__alt_data_end+0xfe004cc0>
 4004d04:	400435c0 	call	400435c <__sfp_lock_release>
 4004d08:	a005883a 	mov	r2,r20
 4004d0c:	dfc00617 	ldw	ra,24(sp)
 4004d10:	dd400517 	ldw	r21,20(sp)
 4004d14:	dd000417 	ldw	r20,16(sp)
 4004d18:	dcc00317 	ldw	r19,12(sp)
 4004d1c:	dc800217 	ldw	r18,8(sp)
 4004d20:	dc400117 	ldw	r17,4(sp)
 4004d24:	dc000017 	ldw	r16,0(sp)
 4004d28:	dec00704 	addi	sp,sp,28
 4004d2c:	f800283a 	ret

04004d30 <_fwalk_reent>:
 4004d30:	defff804 	addi	sp,sp,-32
 4004d34:	dcc00315 	stw	r19,12(sp)
 4004d38:	24c0b804 	addi	r19,r4,736
 4004d3c:	dd800615 	stw	r22,24(sp)
 4004d40:	dd400515 	stw	r21,20(sp)
 4004d44:	dd000415 	stw	r20,16(sp)
 4004d48:	dfc00715 	stw	ra,28(sp)
 4004d4c:	dc800215 	stw	r18,8(sp)
 4004d50:	dc400115 	stw	r17,4(sp)
 4004d54:	dc000015 	stw	r16,0(sp)
 4004d58:	2029883a 	mov	r20,r4
 4004d5c:	282b883a 	mov	r21,r5
 4004d60:	002d883a 	mov	r22,zero
 4004d64:	40043580 	call	4004358 <__sfp_lock_acquire>
 4004d68:	98001326 	beq	r19,zero,4004db8 <_fwalk_reent+0x88>
 4004d6c:	04bfffc4 	movi	r18,-1
 4004d70:	9c400117 	ldw	r17,4(r19)
 4004d74:	9c000217 	ldw	r16,8(r19)
 4004d78:	8c7fffc4 	addi	r17,r17,-1
 4004d7c:	88000c16 	blt	r17,zero,4004db0 <_fwalk_reent+0x80>
 4004d80:	84000304 	addi	r16,r16,12
 4004d84:	80c0000f 	ldh	r3,0(r16)
 4004d88:	8c7fffc4 	addi	r17,r17,-1
 4004d8c:	817ffd04 	addi	r5,r16,-12
 4004d90:	18000526 	beq	r3,zero,4004da8 <_fwalk_reent+0x78>
 4004d94:	80c0008f 	ldh	r3,2(r16)
 4004d98:	a009883a 	mov	r4,r20
 4004d9c:	1c800226 	beq	r3,r18,4004da8 <_fwalk_reent+0x78>
 4004da0:	a83ee83a 	callr	r21
 4004da4:	b0acb03a 	or	r22,r22,r2
 4004da8:	84001704 	addi	r16,r16,92
 4004dac:	8cbff51e 	bne	r17,r18,4004d84 <__alt_data_end+0xfe004d84>
 4004db0:	9cc00017 	ldw	r19,0(r19)
 4004db4:	983fee1e 	bne	r19,zero,4004d70 <__alt_data_end+0xfe004d70>
 4004db8:	400435c0 	call	400435c <__sfp_lock_release>
 4004dbc:	b005883a 	mov	r2,r22
 4004dc0:	dfc00717 	ldw	ra,28(sp)
 4004dc4:	dd800617 	ldw	r22,24(sp)
 4004dc8:	dd400517 	ldw	r21,20(sp)
 4004dcc:	dd000417 	ldw	r20,16(sp)
 4004dd0:	dcc00317 	ldw	r19,12(sp)
 4004dd4:	dc800217 	ldw	r18,8(sp)
 4004dd8:	dc400117 	ldw	r17,4(sp)
 4004ddc:	dc000017 	ldw	r16,0(sp)
 4004de0:	dec00804 	addi	sp,sp,32
 4004de4:	f800283a 	ret

04004de8 <_setlocale_r>:
 4004de8:	defffc04 	addi	sp,sp,-16
 4004dec:	dc800215 	stw	r18,8(sp)
 4004df0:	dc400115 	stw	r17,4(sp)
 4004df4:	dc000015 	stw	r16,0(sp)
 4004df8:	dfc00315 	stw	ra,12(sp)
 4004dfc:	3021883a 	mov	r16,r6
 4004e00:	2023883a 	mov	r17,r4
 4004e04:	2825883a 	mov	r18,r5
 4004e08:	30001626 	beq	r6,zero,4004e64 <_setlocale_r+0x7c>
 4004e0c:	3009883a 	mov	r4,r6
 4004e10:	01410074 	movhi	r5,1025
 4004e14:	2970bb04 	addi	r5,r5,-15636
 4004e18:	40074e40 	call	40074e4 <strcmp>
 4004e1c:	10000a1e 	bne	r2,zero,4004e48 <_setlocale_r+0x60>
 4004e20:	8c800c15 	stw	r18,48(r17)
 4004e24:	8c000d15 	stw	r16,52(r17)
 4004e28:	00810074 	movhi	r2,1025
 4004e2c:	10b0bb04 	addi	r2,r2,-15636
 4004e30:	dfc00317 	ldw	ra,12(sp)
 4004e34:	dc800217 	ldw	r18,8(sp)
 4004e38:	dc400117 	ldw	r17,4(sp)
 4004e3c:	dc000017 	ldw	r16,0(sp)
 4004e40:	dec00404 	addi	sp,sp,16
 4004e44:	f800283a 	ret
 4004e48:	8009883a 	mov	r4,r16
 4004e4c:	01410074 	movhi	r5,1025
 4004e50:	2970a604 	addi	r5,r5,-15720
 4004e54:	40074e40 	call	40074e4 <strcmp>
 4004e58:	103ff126 	beq	r2,zero,4004e20 <__alt_data_end+0xfe004e20>
 4004e5c:	0005883a 	mov	r2,zero
 4004e60:	003ff306 	br	4004e30 <__alt_data_end+0xfe004e30>
 4004e64:	00810074 	movhi	r2,1025
 4004e68:	10b0bb04 	addi	r2,r2,-15636
 4004e6c:	dfc00317 	ldw	ra,12(sp)
 4004e70:	dc800217 	ldw	r18,8(sp)
 4004e74:	dc400117 	ldw	r17,4(sp)
 4004e78:	dc000017 	ldw	r16,0(sp)
 4004e7c:	dec00404 	addi	sp,sp,16
 4004e80:	f800283a 	ret

04004e84 <__locale_charset>:
 4004e84:	00810074 	movhi	r2,1025
 4004e88:	10b0bc04 	addi	r2,r2,-15632
 4004e8c:	f800283a 	ret

04004e90 <_localeconv_r>:
 4004e90:	00810074 	movhi	r2,1025
 4004e94:	10b0c004 	addi	r2,r2,-15616
 4004e98:	f800283a 	ret

04004e9c <setlocale>:
 4004e9c:	00c10074 	movhi	r3,1025
 4004ea0:	18f7ef04 	addi	r3,r3,-8260
 4004ea4:	2005883a 	mov	r2,r4
 4004ea8:	19000017 	ldw	r4,0(r3)
 4004eac:	280d883a 	mov	r6,r5
 4004eb0:	100b883a 	mov	r5,r2
 4004eb4:	4004de81 	jmpi	4004de8 <_setlocale_r>

04004eb8 <localeconv>:
 4004eb8:	00810074 	movhi	r2,1025
 4004ebc:	10b0c004 	addi	r2,r2,-15616
 4004ec0:	f800283a 	ret

04004ec4 <__smakebuf_r>:
 4004ec4:	2880030b 	ldhu	r2,12(r5)
 4004ec8:	deffed04 	addi	sp,sp,-76
 4004ecc:	dc401015 	stw	r17,64(sp)
 4004ed0:	10c0008c 	andi	r3,r2,2
 4004ed4:	18ffffcc 	andi	r3,r3,65535
 4004ed8:	18e0001c 	xori	r3,r3,32768
 4004edc:	dc000f15 	stw	r16,60(sp)
 4004ee0:	dfc01215 	stw	ra,72(sp)
 4004ee4:	dc801115 	stw	r18,68(sp)
 4004ee8:	18e00004 	addi	r3,r3,-32768
 4004eec:	2821883a 	mov	r16,r5
 4004ef0:	2023883a 	mov	r17,r4
 4004ef4:	1800381e 	bne	r3,zero,4004fd8 <__smakebuf_r+0x114>
 4004ef8:	2940038f 	ldh	r5,14(r5)
 4004efc:	28002d16 	blt	r5,zero,4004fb4 <__smakebuf_r+0xf0>
 4004f00:	d80d883a 	mov	r6,sp
 4004f04:	40078740 	call	4007874 <_fstat_r>
 4004f08:	10002916 	blt	r2,zero,4004fb0 <__smakebuf_r+0xec>
 4004f0c:	d8800117 	ldw	r2,4(sp)
 4004f10:	00e00014 	movui	r3,32768
 4004f14:	10bc000c 	andi	r2,r2,61440
 4004f18:	10c03c26 	beq	r2,r3,400500c <__smakebuf_r+0x148>
 4004f1c:	80c0030b 	ldhu	r3,12(r16)
 4004f20:	18c20014 	ori	r3,r3,2048
 4004f24:	80c0030d 	sth	r3,12(r16)
 4004f28:	00c80004 	movi	r3,8192
 4004f2c:	10c00c1e 	bne	r2,r3,4004f60 <__smakebuf_r+0x9c>
 4004f30:	8140038f 	ldh	r5,14(r16)
 4004f34:	8809883a 	mov	r4,r17
 4004f38:	40078dc0 	call	40078dc <_isatty_r>
 4004f3c:	10000826 	beq	r2,zero,4004f60 <__smakebuf_r+0x9c>
 4004f40:	80c0030b 	ldhu	r3,12(r16)
 4004f44:	808010c4 	addi	r2,r16,67
 4004f48:	80800015 	stw	r2,0(r16)
 4004f4c:	18c00054 	ori	r3,r3,1
 4004f50:	80800415 	stw	r2,16(r16)
 4004f54:	00800044 	movi	r2,1
 4004f58:	80c0030d 	sth	r3,12(r16)
 4004f5c:	80800515 	stw	r2,20(r16)
 4004f60:	04810004 	movi	r18,1024
 4004f64:	8809883a 	mov	r4,r17
 4004f68:	900b883a 	mov	r5,r18
 4004f6c:	400506c0 	call	400506c <_malloc_r>
 4004f70:	10003026 	beq	r2,zero,4005034 <__smakebuf_r+0x170>
 4004f74:	80c0030b 	ldhu	r3,12(r16)
 4004f78:	01010034 	movhi	r4,1024
 4004f7c:	21102f04 	addi	r4,r4,16572
 4004f80:	89000f15 	stw	r4,60(r17)
 4004f84:	18c02014 	ori	r3,r3,128
 4004f88:	80c0030d 	sth	r3,12(r16)
 4004f8c:	80800015 	stw	r2,0(r16)
 4004f90:	80800415 	stw	r2,16(r16)
 4004f94:	84800515 	stw	r18,20(r16)
 4004f98:	dfc01217 	ldw	ra,72(sp)
 4004f9c:	dc801117 	ldw	r18,68(sp)
 4004fa0:	dc401017 	ldw	r17,64(sp)
 4004fa4:	dc000f17 	ldw	r16,60(sp)
 4004fa8:	dec01304 	addi	sp,sp,76
 4004fac:	f800283a 	ret
 4004fb0:	8080030b 	ldhu	r2,12(r16)
 4004fb4:	10c0200c 	andi	r3,r2,128
 4004fb8:	18ffffcc 	andi	r3,r3,65535
 4004fbc:	18e0001c 	xori	r3,r3,32768
 4004fc0:	18e00004 	addi	r3,r3,-32768
 4004fc4:	18000f1e 	bne	r3,zero,4005004 <__smakebuf_r+0x140>
 4004fc8:	04810004 	movi	r18,1024
 4004fcc:	10820014 	ori	r2,r2,2048
 4004fd0:	8080030d 	sth	r2,12(r16)
 4004fd4:	003fe306 	br	4004f64 <__alt_data_end+0xfe004f64>
 4004fd8:	288010c4 	addi	r2,r5,67
 4004fdc:	28800015 	stw	r2,0(r5)
 4004fe0:	28800415 	stw	r2,16(r5)
 4004fe4:	00800044 	movi	r2,1
 4004fe8:	28800515 	stw	r2,20(r5)
 4004fec:	dfc01217 	ldw	ra,72(sp)
 4004ff0:	dc801117 	ldw	r18,68(sp)
 4004ff4:	dc401017 	ldw	r17,64(sp)
 4004ff8:	dc000f17 	ldw	r16,60(sp)
 4004ffc:	dec01304 	addi	sp,sp,76
 4005000:	f800283a 	ret
 4005004:	04801004 	movi	r18,64
 4005008:	003ff006 	br	4004fcc <__alt_data_end+0xfe004fcc>
 400500c:	81000a17 	ldw	r4,40(r16)
 4005010:	00c10034 	movhi	r3,1024
 4005014:	18dd2004 	addi	r3,r3,29824
 4005018:	20ffc01e 	bne	r4,r3,4004f1c <__alt_data_end+0xfe004f1c>
 400501c:	8080030b 	ldhu	r2,12(r16)
 4005020:	00c10004 	movi	r3,1024
 4005024:	80c01315 	stw	r3,76(r16)
 4005028:	10c4b03a 	or	r2,r2,r3
 400502c:	8080030d 	sth	r2,12(r16)
 4005030:	003fcb06 	br	4004f60 <__alt_data_end+0xfe004f60>
 4005034:	8080030b 	ldhu	r2,12(r16)
 4005038:	10c0800c 	andi	r3,r2,512
 400503c:	18ffffcc 	andi	r3,r3,65535
 4005040:	18e0001c 	xori	r3,r3,32768
 4005044:	18e00004 	addi	r3,r3,-32768
 4005048:	183fd31e 	bne	r3,zero,4004f98 <__alt_data_end+0xfe004f98>
 400504c:	10800094 	ori	r2,r2,2
 4005050:	80c010c4 	addi	r3,r16,67
 4005054:	8080030d 	sth	r2,12(r16)
 4005058:	00800044 	movi	r2,1
 400505c:	80c00015 	stw	r3,0(r16)
 4005060:	80c00415 	stw	r3,16(r16)
 4005064:	80800515 	stw	r2,20(r16)
 4005068:	003fcb06 	br	4004f98 <__alt_data_end+0xfe004f98>

0400506c <_malloc_r>:
 400506c:	defff604 	addi	sp,sp,-40
 4005070:	dc800215 	stw	r18,8(sp)
 4005074:	dfc00915 	stw	ra,36(sp)
 4005078:	df000815 	stw	fp,32(sp)
 400507c:	ddc00715 	stw	r23,28(sp)
 4005080:	dd800615 	stw	r22,24(sp)
 4005084:	dd400515 	stw	r21,20(sp)
 4005088:	dd000415 	stw	r20,16(sp)
 400508c:	dcc00315 	stw	r19,12(sp)
 4005090:	dc400115 	stw	r17,4(sp)
 4005094:	dc000015 	stw	r16,0(sp)
 4005098:	288002c4 	addi	r2,r5,11
 400509c:	00c00584 	movi	r3,22
 40050a0:	2025883a 	mov	r18,r4
 40050a4:	18802b2e 	bgeu	r3,r2,4005154 <_malloc_r+0xe8>
 40050a8:	047ffe04 	movi	r17,-8
 40050ac:	1462703a 	and	r17,r2,r17
 40050b0:	88002a16 	blt	r17,zero,400515c <_malloc_r+0xf0>
 40050b4:	89402936 	bltu	r17,r5,400515c <_malloc_r+0xf0>
 40050b8:	9009883a 	mov	r4,r18
 40050bc:	400a1180 	call	400a118 <__malloc_lock>
 40050c0:	00807dc4 	movi	r2,503
 40050c4:	14402936 	bltu	r2,r17,400516c <_malloc_r+0x100>
 40050c8:	8808d0fa 	srli	r4,r17,3
 40050cc:	04c10074 	movhi	r19,1025
 40050d0:	9cf26a04 	addi	r19,r19,-13912
 40050d4:	2105883a 	add	r2,r4,r4
 40050d8:	1085883a 	add	r2,r2,r2
 40050dc:	1085883a 	add	r2,r2,r2
 40050e0:	9885883a 	add	r2,r19,r2
 40050e4:	14000317 	ldw	r16,12(r2)
 40050e8:	80815526 	beq	r16,r2,4005640 <_malloc_r+0x5d4>
 40050ec:	81000117 	ldw	r4,4(r16)
 40050f0:	00bfff04 	movi	r2,-4
 40050f4:	80c00317 	ldw	r3,12(r16)
 40050f8:	2084703a 	and	r2,r4,r2
 40050fc:	8085883a 	add	r2,r16,r2
 4005100:	11800117 	ldw	r6,4(r2)
 4005104:	81400217 	ldw	r5,8(r16)
 4005108:	9009883a 	mov	r4,r18
 400510c:	31800054 	ori	r6,r6,1
 4005110:	11800115 	stw	r6,4(r2)
 4005114:	28c00315 	stw	r3,12(r5)
 4005118:	19400215 	stw	r5,8(r3)
 400511c:	400a1380 	call	400a138 <__malloc_unlock>
 4005120:	80800204 	addi	r2,r16,8
 4005124:	dfc00917 	ldw	ra,36(sp)
 4005128:	df000817 	ldw	fp,32(sp)
 400512c:	ddc00717 	ldw	r23,28(sp)
 4005130:	dd800617 	ldw	r22,24(sp)
 4005134:	dd400517 	ldw	r21,20(sp)
 4005138:	dd000417 	ldw	r20,16(sp)
 400513c:	dcc00317 	ldw	r19,12(sp)
 4005140:	dc800217 	ldw	r18,8(sp)
 4005144:	dc400117 	ldw	r17,4(sp)
 4005148:	dc000017 	ldw	r16,0(sp)
 400514c:	dec00a04 	addi	sp,sp,40
 4005150:	f800283a 	ret
 4005154:	04400404 	movi	r17,16
 4005158:	897fd72e 	bgeu	r17,r5,40050b8 <__alt_data_end+0xfe0050b8>
 400515c:	00800304 	movi	r2,12
 4005160:	90800015 	stw	r2,0(r18)
 4005164:	0005883a 	mov	r2,zero
 4005168:	003fee06 	br	4005124 <__alt_data_end+0xfe005124>
 400516c:	8808d27a 	srli	r4,r17,9
 4005170:	20007126 	beq	r4,zero,4005338 <_malloc_r+0x2cc>
 4005174:	00800104 	movi	r2,4
 4005178:	1100eb36 	bltu	r2,r4,4005528 <_malloc_r+0x4bc>
 400517c:	8808d1ba 	srli	r4,r17,6
 4005180:	21000e04 	addi	r4,r4,56
 4005184:	210b883a 	add	r5,r4,r4
 4005188:	294b883a 	add	r5,r5,r5
 400518c:	294b883a 	add	r5,r5,r5
 4005190:	04c10074 	movhi	r19,1025
 4005194:	9cf26a04 	addi	r19,r19,-13912
 4005198:	994b883a 	add	r5,r19,r5
 400519c:	2c000317 	ldw	r16,12(r5)
 40051a0:	2c000e26 	beq	r5,r16,40051dc <_malloc_r+0x170>
 40051a4:	80c00117 	ldw	r3,4(r16)
 40051a8:	01ffff04 	movi	r7,-4
 40051ac:	018003c4 	movi	r6,15
 40051b0:	19c6703a 	and	r3,r3,r7
 40051b4:	1c45c83a 	sub	r2,r3,r17
 40051b8:	30800716 	blt	r6,r2,40051d8 <_malloc_r+0x16c>
 40051bc:	1000610e 	bge	r2,zero,4005344 <_malloc_r+0x2d8>
 40051c0:	84000317 	ldw	r16,12(r16)
 40051c4:	2c000526 	beq	r5,r16,40051dc <_malloc_r+0x170>
 40051c8:	80c00117 	ldw	r3,4(r16)
 40051cc:	19c6703a 	and	r3,r3,r7
 40051d0:	1c45c83a 	sub	r2,r3,r17
 40051d4:	30bff90e 	bge	r6,r2,40051bc <__alt_data_end+0xfe0051bc>
 40051d8:	213fffc4 	addi	r4,r4,-1
 40051dc:	21000044 	addi	r4,r4,1
 40051e0:	9c000417 	ldw	r16,16(r19)
 40051e4:	00c10074 	movhi	r3,1025
 40051e8:	18f26a04 	addi	r3,r3,-13912
 40051ec:	1a400204 	addi	r9,r3,8
 40051f0:	8240ff26 	beq	r16,r9,40055f0 <_malloc_r+0x584>
 40051f4:	81400117 	ldw	r5,4(r16)
 40051f8:	00bfff04 	movi	r2,-4
 40051fc:	018003c4 	movi	r6,15
 4005200:	2884703a 	and	r2,r5,r2
 4005204:	144bc83a 	sub	r5,r2,r17
 4005208:	3140ea16 	blt	r6,r5,40055b4 <_malloc_r+0x548>
 400520c:	1a400515 	stw	r9,20(r3)
 4005210:	1a400415 	stw	r9,16(r3)
 4005214:	2800570e 	bge	r5,zero,4005374 <_malloc_r+0x308>
 4005218:	01407fc4 	movi	r5,511
 400521c:	2880ca36 	bltu	r5,r2,4005548 <_malloc_r+0x4dc>
 4005220:	1004d0fa 	srli	r2,r2,3
 4005224:	02000044 	movi	r8,1
 4005228:	19c00117 	ldw	r7,4(r3)
 400522c:	108b883a 	add	r5,r2,r2
 4005230:	294b883a 	add	r5,r5,r5
 4005234:	1005d0ba 	srai	r2,r2,2
 4005238:	294b883a 	add	r5,r5,r5
 400523c:	28cb883a 	add	r5,r5,r3
 4005240:	29800217 	ldw	r6,8(r5)
 4005244:	4084983a 	sll	r2,r8,r2
 4005248:	81400315 	stw	r5,12(r16)
 400524c:	81800215 	stw	r6,8(r16)
 4005250:	11c4b03a 	or	r2,r2,r7
 4005254:	18800115 	stw	r2,4(r3)
 4005258:	2c000215 	stw	r16,8(r5)
 400525c:	34000315 	stw	r16,12(r6)
 4005260:	200bd0ba 	srai	r5,r4,2
 4005264:	00c00044 	movi	r3,1
 4005268:	194a983a 	sll	r5,r3,r5
 400526c:	11404936 	bltu	r2,r5,4005394 <_malloc_r+0x328>
 4005270:	1146703a 	and	r3,r2,r5
 4005274:	18000a1e 	bne	r3,zero,40052a0 <_malloc_r+0x234>
 4005278:	00ffff04 	movi	r3,-4
 400527c:	294b883a 	add	r5,r5,r5
 4005280:	20c8703a 	and	r4,r4,r3
 4005284:	1146703a 	and	r3,r2,r5
 4005288:	21000104 	addi	r4,r4,4
 400528c:	1800041e 	bne	r3,zero,40052a0 <_malloc_r+0x234>
 4005290:	294b883a 	add	r5,r5,r5
 4005294:	1146703a 	and	r3,r2,r5
 4005298:	21000104 	addi	r4,r4,4
 400529c:	183ffc26 	beq	r3,zero,4005290 <__alt_data_end+0xfe005290>
 40052a0:	023fff04 	movi	r8,-4
 40052a4:	01c003c4 	movi	r7,15
 40052a8:	2105883a 	add	r2,r4,r4
 40052ac:	1085883a 	add	r2,r2,r2
 40052b0:	1085883a 	add	r2,r2,r2
 40052b4:	9899883a 	add	r12,r19,r2
 40052b8:	62800304 	addi	r10,r12,12
 40052bc:	2017883a 	mov	r11,r4
 40052c0:	54000017 	ldw	r16,0(r10)
 40052c4:	51bffd04 	addi	r6,r10,-12
 40052c8:	8180041e 	bne	r16,r6,40052dc <_malloc_r+0x270>
 40052cc:	0000ca06 	br	40055f8 <_malloc_r+0x58c>
 40052d0:	10001c0e 	bge	r2,zero,4005344 <_malloc_r+0x2d8>
 40052d4:	84000317 	ldw	r16,12(r16)
 40052d8:	8180c726 	beq	r16,r6,40055f8 <_malloc_r+0x58c>
 40052dc:	80c00117 	ldw	r3,4(r16)
 40052e0:	1a06703a 	and	r3,r3,r8
 40052e4:	1c45c83a 	sub	r2,r3,r17
 40052e8:	38bff90e 	bge	r7,r2,40052d0 <__alt_data_end+0xfe0052d0>
 40052ec:	81000317 	ldw	r4,12(r16)
 40052f0:	81400217 	ldw	r5,8(r16)
 40052f4:	8447883a 	add	r3,r16,r17
 40052f8:	8c400054 	ori	r17,r17,1
 40052fc:	29000315 	stw	r4,12(r5)
 4005300:	21400215 	stw	r5,8(r4)
 4005304:	84400115 	stw	r17,4(r16)
 4005308:	1889883a 	add	r4,r3,r2
 400530c:	11400054 	ori	r5,r2,1
 4005310:	98c00515 	stw	r3,20(r19)
 4005314:	98c00415 	stw	r3,16(r19)
 4005318:	20800015 	stw	r2,0(r4)
 400531c:	1a400315 	stw	r9,12(r3)
 4005320:	1a400215 	stw	r9,8(r3)
 4005324:	19400115 	stw	r5,4(r3)
 4005328:	9009883a 	mov	r4,r18
 400532c:	400a1380 	call	400a138 <__malloc_unlock>
 4005330:	80800204 	addi	r2,r16,8
 4005334:	003f7b06 	br	4005124 <__alt_data_end+0xfe005124>
 4005338:	8808d0fa 	srli	r4,r17,3
 400533c:	210b883a 	add	r5,r4,r4
 4005340:	003f9106 	br	4005188 <__alt_data_end+0xfe005188>
 4005344:	80c7883a 	add	r3,r16,r3
 4005348:	19400117 	ldw	r5,4(r3)
 400534c:	80800317 	ldw	r2,12(r16)
 4005350:	81000217 	ldw	r4,8(r16)
 4005354:	29400054 	ori	r5,r5,1
 4005358:	19400115 	stw	r5,4(r3)
 400535c:	20800315 	stw	r2,12(r4)
 4005360:	11000215 	stw	r4,8(r2)
 4005364:	9009883a 	mov	r4,r18
 4005368:	400a1380 	call	400a138 <__malloc_unlock>
 400536c:	80800204 	addi	r2,r16,8
 4005370:	003f6c06 	br	4005124 <__alt_data_end+0xfe005124>
 4005374:	8085883a 	add	r2,r16,r2
 4005378:	10c00117 	ldw	r3,4(r2)
 400537c:	9009883a 	mov	r4,r18
 4005380:	18c00054 	ori	r3,r3,1
 4005384:	10c00115 	stw	r3,4(r2)
 4005388:	400a1380 	call	400a138 <__malloc_unlock>
 400538c:	80800204 	addi	r2,r16,8
 4005390:	003f6406 	br	4005124 <__alt_data_end+0xfe005124>
 4005394:	9c000217 	ldw	r16,8(r19)
 4005398:	00bfff04 	movi	r2,-4
 400539c:	85400117 	ldw	r21,4(r16)
 40053a0:	a8aa703a 	and	r21,r21,r2
 40053a4:	ac400336 	bltu	r21,r17,40053b4 <_malloc_r+0x348>
 40053a8:	ac45c83a 	sub	r2,r21,r17
 40053ac:	00c003c4 	movi	r3,15
 40053b0:	18805316 	blt	r3,r2,4005500 <_malloc_r+0x494>
 40053b4:	d5e6aa17 	ldw	r23,-25944(gp)
 40053b8:	d0e00317 	ldw	r3,-32756(gp)
 40053bc:	00bfffc4 	movi	r2,-1
 40053c0:	8579883a 	add	fp,r16,r21
 40053c4:	8def883a 	add	r23,r17,r23
 40053c8:	1880d226 	beq	r3,r2,4005714 <_malloc_r+0x6a8>
 40053cc:	bdc403c4 	addi	r23,r23,4111
 40053d0:	00bc0004 	movi	r2,-4096
 40053d4:	b8ae703a 	and	r23,r23,r2
 40053d8:	9009883a 	mov	r4,r18
 40053dc:	b80b883a 	mov	r5,r23
 40053e0:	40073400 	call	4007340 <_sbrk_r>
 40053e4:	1029883a 	mov	r20,r2
 40053e8:	00bfffc4 	movi	r2,-1
 40053ec:	a080d126 	beq	r20,r2,4005734 <_malloc_r+0x6c8>
 40053f0:	a7009f36 	bltu	r20,fp,4005670 <_malloc_r+0x604>
 40053f4:	05810074 	movhi	r22,1025
 40053f8:	b5bea004 	addi	r22,r22,-1408
 40053fc:	b0800017 	ldw	r2,0(r22)
 4005400:	b885883a 	add	r2,r23,r2
 4005404:	b0800015 	stw	r2,0(r22)
 4005408:	e500cf26 	beq	fp,r20,4005748 <_malloc_r+0x6dc>
 400540c:	d1200317 	ldw	r4,-32756(gp)
 4005410:	00ffffc4 	movi	r3,-1
 4005414:	20c0e026 	beq	r4,r3,4005798 <_malloc_r+0x72c>
 4005418:	a739c83a 	sub	fp,r20,fp
 400541c:	1705883a 	add	r2,r2,fp
 4005420:	b0800015 	stw	r2,0(r22)
 4005424:	a08001cc 	andi	r2,r20,7
 4005428:	1000a526 	beq	r2,zero,40056c0 <_malloc_r+0x654>
 400542c:	a0a9c83a 	sub	r20,r20,r2
 4005430:	00c40204 	movi	r3,4104
 4005434:	a5000204 	addi	r20,r20,8
 4005438:	1885c83a 	sub	r2,r3,r2
 400543c:	a5c7883a 	add	r3,r20,r23
 4005440:	18c3ffcc 	andi	r3,r3,4095
 4005444:	10efc83a 	sub	r23,r2,r3
 4005448:	9009883a 	mov	r4,r18
 400544c:	b80b883a 	mov	r5,r23
 4005450:	40073400 	call	4007340 <_sbrk_r>
 4005454:	00ffffc4 	movi	r3,-1
 4005458:	10c0cc26 	beq	r2,r3,400578c <_malloc_r+0x720>
 400545c:	1505c83a 	sub	r2,r2,r20
 4005460:	b887883a 	add	r3,r23,r2
 4005464:	18c00054 	ori	r3,r3,1
 4005468:	b0800017 	ldw	r2,0(r22)
 400546c:	9d000215 	stw	r20,8(r19)
 4005470:	a0c00115 	stw	r3,4(r20)
 4005474:	b885883a 	add	r2,r23,r2
 4005478:	b0800015 	stw	r2,0(r22)
 400547c:	84c00e26 	beq	r16,r19,40054b8 <_malloc_r+0x44c>
 4005480:	00c003c4 	movi	r3,15
 4005484:	1d40902e 	bgeu	r3,r21,40056c8 <_malloc_r+0x65c>
 4005488:	ad7ffd04 	addi	r21,r21,-12
 400548c:	013ffe04 	movi	r4,-8
 4005490:	a908703a 	and	r4,r21,r4
 4005494:	810b883a 	add	r5,r16,r4
 4005498:	01800144 	movi	r6,5
 400549c:	29800115 	stw	r6,4(r5)
 40054a0:	29800215 	stw	r6,8(r5)
 40054a4:	81400117 	ldw	r5,4(r16)
 40054a8:	2940004c 	andi	r5,r5,1
 40054ac:	214ab03a 	or	r5,r4,r5
 40054b0:	81400115 	stw	r5,4(r16)
 40054b4:	1900ae36 	bltu	r3,r4,4005770 <_malloc_r+0x704>
 40054b8:	d0e6a917 	ldw	r3,-25948(gp)
 40054bc:	1880012e 	bgeu	r3,r2,40054c4 <_malloc_r+0x458>
 40054c0:	d0a6a915 	stw	r2,-25948(gp)
 40054c4:	d0e6a817 	ldw	r3,-25952(gp)
 40054c8:	9c000217 	ldw	r16,8(r19)
 40054cc:	1880012e 	bgeu	r3,r2,40054d4 <_malloc_r+0x468>
 40054d0:	d0a6a815 	stw	r2,-25952(gp)
 40054d4:	80c00117 	ldw	r3,4(r16)
 40054d8:	00bfff04 	movi	r2,-4
 40054dc:	1886703a 	and	r3,r3,r2
 40054e0:	1c45c83a 	sub	r2,r3,r17
 40054e4:	1c400236 	bltu	r3,r17,40054f0 <_malloc_r+0x484>
 40054e8:	00c003c4 	movi	r3,15
 40054ec:	18800416 	blt	r3,r2,4005500 <_malloc_r+0x494>
 40054f0:	9009883a 	mov	r4,r18
 40054f4:	400a1380 	call	400a138 <__malloc_unlock>
 40054f8:	0005883a 	mov	r2,zero
 40054fc:	003f0906 	br	4005124 <__alt_data_end+0xfe005124>
 4005500:	88c00054 	ori	r3,r17,1
 4005504:	10800054 	ori	r2,r2,1
 4005508:	80c00115 	stw	r3,4(r16)
 400550c:	8463883a 	add	r17,r16,r17
 4005510:	88800115 	stw	r2,4(r17)
 4005514:	9009883a 	mov	r4,r18
 4005518:	9c400215 	stw	r17,8(r19)
 400551c:	400a1380 	call	400a138 <__malloc_unlock>
 4005520:	80800204 	addi	r2,r16,8
 4005524:	003eff06 	br	4005124 <__alt_data_end+0xfe005124>
 4005528:	00800504 	movi	r2,20
 400552c:	1100492e 	bgeu	r2,r4,4005654 <_malloc_r+0x5e8>
 4005530:	00801504 	movi	r2,84
 4005534:	11005c36 	bltu	r2,r4,40056a8 <_malloc_r+0x63c>
 4005538:	8808d33a 	srli	r4,r17,12
 400553c:	21001b84 	addi	r4,r4,110
 4005540:	210b883a 	add	r5,r4,r4
 4005544:	003f1006 	br	4005188 <__alt_data_end+0xfe005188>
 4005548:	1006d27a 	srli	r3,r2,9
 400554c:	01400104 	movi	r5,4
 4005550:	28c0432e 	bgeu	r5,r3,4005660 <_malloc_r+0x5f4>
 4005554:	01400504 	movi	r5,20
 4005558:	28c07036 	bltu	r5,r3,400571c <_malloc_r+0x6b0>
 400555c:	194016c4 	addi	r5,r3,91
 4005560:	294d883a 	add	r6,r5,r5
 4005564:	318d883a 	add	r6,r6,r6
 4005568:	318d883a 	add	r6,r6,r6
 400556c:	998d883a 	add	r6,r19,r6
 4005570:	30c00217 	ldw	r3,8(r6)
 4005574:	01c10074 	movhi	r7,1025
 4005578:	39f26a04 	addi	r7,r7,-13912
 400557c:	19805726 	beq	r3,r6,40056dc <_malloc_r+0x670>
 4005580:	01ffff04 	movi	r7,-4
 4005584:	19400117 	ldw	r5,4(r3)
 4005588:	29ca703a 	and	r5,r5,r7
 400558c:	1140022e 	bgeu	r2,r5,4005598 <_malloc_r+0x52c>
 4005590:	18c00217 	ldw	r3,8(r3)
 4005594:	30fffb1e 	bne	r6,r3,4005584 <__alt_data_end+0xfe005584>
 4005598:	19400317 	ldw	r5,12(r3)
 400559c:	98800117 	ldw	r2,4(r19)
 40055a0:	81400315 	stw	r5,12(r16)
 40055a4:	80c00215 	stw	r3,8(r16)
 40055a8:	2c000215 	stw	r16,8(r5)
 40055ac:	1c000315 	stw	r16,12(r3)
 40055b0:	003f2b06 	br	4005260 <__alt_data_end+0xfe005260>
 40055b4:	8445883a 	add	r2,r16,r17
 40055b8:	8c400054 	ori	r17,r17,1
 40055bc:	18800515 	stw	r2,20(r3)
 40055c0:	18800415 	stw	r2,16(r3)
 40055c4:	29000054 	ori	r4,r5,1
 40055c8:	1147883a 	add	r3,r2,r5
 40055cc:	84400115 	stw	r17,4(r16)
 40055d0:	11000115 	stw	r4,4(r2)
 40055d4:	12400315 	stw	r9,12(r2)
 40055d8:	12400215 	stw	r9,8(r2)
 40055dc:	19400015 	stw	r5,0(r3)
 40055e0:	9009883a 	mov	r4,r18
 40055e4:	400a1380 	call	400a138 <__malloc_unlock>
 40055e8:	80800204 	addi	r2,r16,8
 40055ec:	003ecd06 	br	4005124 <__alt_data_end+0xfe005124>
 40055f0:	18800117 	ldw	r2,4(r3)
 40055f4:	003f1a06 	br	4005260 <__alt_data_end+0xfe005260>
 40055f8:	5ac00044 	addi	r11,r11,1
 40055fc:	588000cc 	andi	r2,r11,3
 4005600:	52800204 	addi	r10,r10,8
 4005604:	103f2e1e 	bne	r2,zero,40052c0 <__alt_data_end+0xfe0052c0>
 4005608:	20c000cc 	andi	r3,r4,3
 400560c:	60bffe04 	addi	r2,r12,-8
 4005610:	18006f26 	beq	r3,zero,40057d0 <_malloc_r+0x764>
 4005614:	63000017 	ldw	r12,0(r12)
 4005618:	213fffc4 	addi	r4,r4,-1
 400561c:	60bffa26 	beq	r12,r2,4005608 <__alt_data_end+0xfe005608>
 4005620:	98800117 	ldw	r2,4(r19)
 4005624:	294b883a 	add	r5,r5,r5
 4005628:	117f5a36 	bltu	r2,r5,4005394 <__alt_data_end+0xfe005394>
 400562c:	283f5926 	beq	r5,zero,4005394 <__alt_data_end+0xfe005394>
 4005630:	1146703a 	and	r3,r2,r5
 4005634:	18001626 	beq	r3,zero,4005690 <_malloc_r+0x624>
 4005638:	5809883a 	mov	r4,r11
 400563c:	003f1a06 	br	40052a8 <__alt_data_end+0xfe0052a8>
 4005640:	80800204 	addi	r2,r16,8
 4005644:	84000517 	ldw	r16,20(r16)
 4005648:	143ea81e 	bne	r2,r16,40050ec <__alt_data_end+0xfe0050ec>
 400564c:	21000084 	addi	r4,r4,2
 4005650:	003ee306 	br	40051e0 <__alt_data_end+0xfe0051e0>
 4005654:	210016c4 	addi	r4,r4,91
 4005658:	210b883a 	add	r5,r4,r4
 400565c:	003eca06 	br	4005188 <__alt_data_end+0xfe005188>
 4005660:	100ad1ba 	srli	r5,r2,6
 4005664:	29400e04 	addi	r5,r5,56
 4005668:	294d883a 	add	r6,r5,r5
 400566c:	003fbd06 	br	4005564 <__alt_data_end+0xfe005564>
 4005670:	84ff6026 	beq	r16,r19,40053f4 <__alt_data_end+0xfe0053f4>
 4005674:	00810074 	movhi	r2,1025
 4005678:	10b26a04 	addi	r2,r2,-13912
 400567c:	14000217 	ldw	r16,8(r2)
 4005680:	00bfff04 	movi	r2,-4
 4005684:	80c00117 	ldw	r3,4(r16)
 4005688:	1886703a 	and	r3,r3,r2
 400568c:	003f9406 	br	40054e0 <__alt_data_end+0xfe0054e0>
 4005690:	294b883a 	add	r5,r5,r5
 4005694:	1146703a 	and	r3,r2,r5
 4005698:	5ac00104 	addi	r11,r11,4
 400569c:	183ffc26 	beq	r3,zero,4005690 <__alt_data_end+0xfe005690>
 40056a0:	5809883a 	mov	r4,r11
 40056a4:	003f0006 	br	40052a8 <__alt_data_end+0xfe0052a8>
 40056a8:	00805504 	movi	r2,340
 40056ac:	11001336 	bltu	r2,r4,40056fc <_malloc_r+0x690>
 40056b0:	8808d3fa 	srli	r4,r17,15
 40056b4:	21001dc4 	addi	r4,r4,119
 40056b8:	210b883a 	add	r5,r4,r4
 40056bc:	003eb206 	br	4005188 <__alt_data_end+0xfe005188>
 40056c0:	00840004 	movi	r2,4096
 40056c4:	003f5d06 	br	400543c <__alt_data_end+0xfe00543c>
 40056c8:	00800044 	movi	r2,1
 40056cc:	a0800115 	stw	r2,4(r20)
 40056d0:	a021883a 	mov	r16,r20
 40056d4:	0007883a 	mov	r3,zero
 40056d8:	003f8106 	br	40054e0 <__alt_data_end+0xfe0054e0>
 40056dc:	280bd0ba 	srai	r5,r5,2
 40056e0:	01800044 	movi	r6,1
 40056e4:	38800117 	ldw	r2,4(r7)
 40056e8:	314c983a 	sll	r6,r6,r5
 40056ec:	180b883a 	mov	r5,r3
 40056f0:	3084b03a 	or	r2,r6,r2
 40056f4:	38800115 	stw	r2,4(r7)
 40056f8:	003fa906 	br	40055a0 <__alt_data_end+0xfe0055a0>
 40056fc:	00815504 	movi	r2,1364
 4005700:	11001836 	bltu	r2,r4,4005764 <_malloc_r+0x6f8>
 4005704:	8808d4ba 	srli	r4,r17,18
 4005708:	21001f04 	addi	r4,r4,124
 400570c:	210b883a 	add	r5,r4,r4
 4005710:	003e9d06 	br	4005188 <__alt_data_end+0xfe005188>
 4005714:	bdc00404 	addi	r23,r23,16
 4005718:	003f2f06 	br	40053d8 <__alt_data_end+0xfe0053d8>
 400571c:	01401504 	movi	r5,84
 4005720:	28c01f36 	bltu	r5,r3,40057a0 <_malloc_r+0x734>
 4005724:	100ad33a 	srli	r5,r2,12
 4005728:	29401b84 	addi	r5,r5,110
 400572c:	294d883a 	add	r6,r5,r5
 4005730:	003f8c06 	br	4005564 <__alt_data_end+0xfe005564>
 4005734:	9c000217 	ldw	r16,8(r19)
 4005738:	00bfff04 	movi	r2,-4
 400573c:	80c00117 	ldw	r3,4(r16)
 4005740:	1886703a 	and	r3,r3,r2
 4005744:	003f6606 	br	40054e0 <__alt_data_end+0xfe0054e0>
 4005748:	e0c3ffcc 	andi	r3,fp,4095
 400574c:	183f2f1e 	bne	r3,zero,400540c <__alt_data_end+0xfe00540c>
 4005750:	98c00217 	ldw	r3,8(r19)
 4005754:	bd49883a 	add	r4,r23,r21
 4005758:	21000054 	ori	r4,r4,1
 400575c:	19000115 	stw	r4,4(r3)
 4005760:	003f5506 	br	40054b8 <__alt_data_end+0xfe0054b8>
 4005764:	01403f04 	movi	r5,252
 4005768:	01001f84 	movi	r4,126
 400576c:	003e8606 	br	4005188 <__alt_data_end+0xfe005188>
 4005770:	9009883a 	mov	r4,r18
 4005774:	81400204 	addi	r5,r16,8
 4005778:	40044d40 	call	40044d4 <_free_r>
 400577c:	00810074 	movhi	r2,1025
 4005780:	10bea004 	addi	r2,r2,-1408
 4005784:	10800017 	ldw	r2,0(r2)
 4005788:	003f4b06 	br	40054b8 <__alt_data_end+0xfe0054b8>
 400578c:	00c00044 	movi	r3,1
 4005790:	002f883a 	mov	r23,zero
 4005794:	003f3406 	br	4005468 <__alt_data_end+0xfe005468>
 4005798:	d5200315 	stw	r20,-32756(gp)
 400579c:	003f2106 	br	4005424 <__alt_data_end+0xfe005424>
 40057a0:	01405504 	movi	r5,340
 40057a4:	28c00436 	bltu	r5,r3,40057b8 <_malloc_r+0x74c>
 40057a8:	100ad3fa 	srli	r5,r2,15
 40057ac:	29401dc4 	addi	r5,r5,119
 40057b0:	294d883a 	add	r6,r5,r5
 40057b4:	003f6b06 	br	4005564 <__alt_data_end+0xfe005564>
 40057b8:	01415504 	movi	r5,1364
 40057bc:	28c00936 	bltu	r5,r3,40057e4 <_malloc_r+0x778>
 40057c0:	100ad4ba 	srli	r5,r2,18
 40057c4:	29401f04 	addi	r5,r5,124
 40057c8:	294d883a 	add	r6,r5,r5
 40057cc:	003f6506 	br	4005564 <__alt_data_end+0xfe005564>
 40057d0:	98800117 	ldw	r2,4(r19)
 40057d4:	0146303a 	nor	r3,zero,r5
 40057d8:	1884703a 	and	r2,r3,r2
 40057dc:	98800115 	stw	r2,4(r19)
 40057e0:	003f9006 	br	4005624 <__alt_data_end+0xfe005624>
 40057e4:	01803f04 	movi	r6,252
 40057e8:	01401f84 	movi	r5,126
 40057ec:	003f5d06 	br	4005564 <__alt_data_end+0xfe005564>

040057f0 <memchr>:
 40057f0:	008000c4 	movi	r2,3
 40057f4:	29403fcc 	andi	r5,r5,255
 40057f8:	1180282e 	bgeu	r2,r6,400589c <memchr+0xac>
 40057fc:	2086703a 	and	r3,r4,r2
 4005800:	1800351e 	bne	r3,zero,40058d8 <memchr+0xe8>
 4005804:	2816923a 	slli	r11,r5,8
 4005808:	2093883a 	add	r9,r4,r2
 400580c:	22000084 	addi	r8,r4,2
 4005810:	5957883a 	add	r11,r11,r5
 4005814:	5816923a 	slli	r11,r11,8
 4005818:	20c00044 	addi	r3,r4,1
 400581c:	037fbff4 	movhi	r13,65279
 4005820:	6b7fbfc4 	addi	r13,r13,-257
 4005824:	5957883a 	add	r11,r11,r5
 4005828:	5816923a 	slli	r11,r11,8
 400582c:	03202074 	movhi	r12,32897
 4005830:	63202004 	addi	r12,r12,-32640
 4005834:	101d883a 	mov	r14,r2
 4005838:	5957883a 	add	r11,r11,r5
 400583c:	21c00017 	ldw	r7,0(r4)
 4005840:	31bfff04 	addi	r6,r6,-4
 4005844:	1805883a 	mov	r2,r3
 4005848:	3acef03a 	xor	r7,r7,r11
 400584c:	3b55883a 	add	r10,r7,r13
 4005850:	01ce303a 	nor	r7,zero,r7
 4005854:	51ce703a 	and	r7,r10,r7
 4005858:	3b0e703a 	and	r7,r7,r12
 400585c:	38000a26 	beq	r7,zero,4005888 <memchr+0x98>
 4005860:	21c00003 	ldbu	r7,0(r4)
 4005864:	39401e26 	beq	r7,r5,40058e0 <memchr+0xf0>
 4005868:	19c00003 	ldbu	r7,0(r3)
 400586c:	39401926 	beq	r7,r5,40058d4 <memchr+0xe4>
 4005870:	41c00003 	ldbu	r7,0(r8)
 4005874:	4005883a 	mov	r2,r8
 4005878:	39401626 	beq	r7,r5,40058d4 <memchr+0xe4>
 400587c:	49c00003 	ldbu	r7,0(r9)
 4005880:	4805883a 	mov	r2,r9
 4005884:	39401326 	beq	r7,r5,40058d4 <memchr+0xe4>
 4005888:	21000104 	addi	r4,r4,4
 400588c:	4a400104 	addi	r9,r9,4
 4005890:	42000104 	addi	r8,r8,4
 4005894:	18c00104 	addi	r3,r3,4
 4005898:	71bfe836 	bltu	r14,r6,400583c <__alt_data_end+0xfe00583c>
 400589c:	2005883a 	mov	r2,r4
 40058a0:	30000a26 	beq	r6,zero,40058cc <memchr+0xdc>
 40058a4:	10c00003 	ldbu	r3,0(r2)
 40058a8:	19400a26 	beq	r3,r5,40058d4 <memchr+0xe4>
 40058ac:	10c00044 	addi	r3,r2,1
 40058b0:	118d883a 	add	r6,r2,r6
 40058b4:	00000306 	br	40058c4 <memchr+0xd4>
 40058b8:	11000003 	ldbu	r4,0(r2)
 40058bc:	18c00044 	addi	r3,r3,1
 40058c0:	21400426 	beq	r4,r5,40058d4 <memchr+0xe4>
 40058c4:	1805883a 	mov	r2,r3
 40058c8:	19bffb1e 	bne	r3,r6,40058b8 <__alt_data_end+0xfe0058b8>
 40058cc:	0005883a 	mov	r2,zero
 40058d0:	f800283a 	ret
 40058d4:	f800283a 	ret
 40058d8:	2005883a 	mov	r2,r4
 40058dc:	003ff106 	br	40058a4 <__alt_data_end+0xfe0058a4>
 40058e0:	2005883a 	mov	r2,r4
 40058e4:	f800283a 	ret

040058e8 <memcpy>:
 40058e8:	defffb04 	addi	sp,sp,-20
 40058ec:	dc000015 	stw	r16,0(sp)
 40058f0:	dfc00415 	stw	ra,16(sp)
 40058f4:	dcc00315 	stw	r19,12(sp)
 40058f8:	dc800215 	stw	r18,8(sp)
 40058fc:	dc400115 	stw	r17,4(sp)
 4005900:	00c003c4 	movi	r3,15
 4005904:	2021883a 	mov	r16,r4
 4005908:	3005883a 	mov	r2,r6
 400590c:	1980032e 	bgeu	r3,r6,400591c <memcpy+0x34>
 4005910:	2906b03a 	or	r3,r5,r4
 4005914:	18c000cc 	andi	r3,r3,3
 4005918:	18001026 	beq	r3,zero,400595c <memcpy+0x74>
 400591c:	8007883a 	mov	r3,r16
 4005920:	288f883a 	add	r7,r5,r2
 4005924:	10000526 	beq	r2,zero,400593c <memcpy+0x54>
 4005928:	29800003 	ldbu	r6,0(r5)
 400592c:	18c00044 	addi	r3,r3,1
 4005930:	29400044 	addi	r5,r5,1
 4005934:	19bfffc5 	stb	r6,-1(r3)
 4005938:	29fffb1e 	bne	r5,r7,4005928 <__alt_data_end+0xfe005928>
 400593c:	8005883a 	mov	r2,r16
 4005940:	dfc00417 	ldw	ra,16(sp)
 4005944:	dcc00317 	ldw	r19,12(sp)
 4005948:	dc800217 	ldw	r18,8(sp)
 400594c:	dc400117 	ldw	r17,4(sp)
 4005950:	dc000017 	ldw	r16,0(sp)
 4005954:	dec00504 	addi	sp,sp,20
 4005958:	f800283a 	ret
 400595c:	32bffc04 	addi	r10,r6,-16
 4005960:	5014d13a 	srli	r10,r10,4
 4005964:	20800404 	addi	r2,r4,16
 4005968:	2007883a 	mov	r3,r4
 400596c:	5008913a 	slli	r4,r10,4
 4005970:	280f883a 	mov	r7,r5
 4005974:	1105883a 	add	r2,r2,r4
 4005978:	3a000017 	ldw	r8,0(r7)
 400597c:	18c00404 	addi	r3,r3,16
 4005980:	39c00404 	addi	r7,r7,16
 4005984:	1a3ffc15 	stw	r8,-16(r3)
 4005988:	3a3ffd17 	ldw	r8,-12(r7)
 400598c:	1a3ffd15 	stw	r8,-12(r3)
 4005990:	3a3ffe17 	ldw	r8,-8(r7)
 4005994:	1a3ffe15 	stw	r8,-8(r3)
 4005998:	3a3fff17 	ldw	r8,-4(r7)
 400599c:	1a3fff15 	stw	r8,-4(r3)
 40059a0:	18bff51e 	bne	r3,r2,4005978 <__alt_data_end+0xfe005978>
 40059a4:	52800044 	addi	r10,r10,1
 40059a8:	5014913a 	slli	r10,r10,4
 40059ac:	308003cc 	andi	r2,r6,15
 40059b0:	010000c4 	movi	r4,3
 40059b4:	8287883a 	add	r3,r16,r10
 40059b8:	2a95883a 	add	r10,r5,r10
 40059bc:	2080182e 	bgeu	r4,r2,4005a20 <memcpy+0x138>
 40059c0:	147fff04 	addi	r17,r2,-4
 40059c4:	8808d0ba 	srli	r4,r17,2
 40059c8:	1a400104 	addi	r9,r3,4
 40059cc:	180d883a 	mov	r6,r3
 40059d0:	2105883a 	add	r2,r4,r4
 40059d4:	1085883a 	add	r2,r2,r2
 40059d8:	4893883a 	add	r9,r9,r2
 40059dc:	500f883a 	mov	r7,r10
 40059e0:	3a000017 	ldw	r8,0(r7)
 40059e4:	31800104 	addi	r6,r6,4
 40059e8:	39c00104 	addi	r7,r7,4
 40059ec:	323fff15 	stw	r8,-4(r6)
 40059f0:	327ffb1e 	bne	r6,r9,40059e0 <__alt_data_end+0xfe0059e0>
 40059f4:	20800044 	addi	r2,r4,1
 40059f8:	1085883a 	add	r2,r2,r2
 40059fc:	1085883a 	add	r2,r2,r2
 4005a00:	017fff04 	movi	r5,-4
 4005a04:	18a5883a 	add	r18,r3,r2
 4005a08:	50a7883a 	add	r19,r10,r2
 4005a0c:	40094f00 	call	40094f0 <__mulsi3>
 4005a10:	1445883a 	add	r2,r2,r17
 4005a14:	980b883a 	mov	r5,r19
 4005a18:	9007883a 	mov	r3,r18
 4005a1c:	003fc006 	br	4005920 <__alt_data_end+0xfe005920>
 4005a20:	500b883a 	mov	r5,r10
 4005a24:	003fbe06 	br	4005920 <__alt_data_end+0xfe005920>

04005a28 <memmove>:
 4005a28:	defffb04 	addi	sp,sp,-20
 4005a2c:	dc000015 	stw	r16,0(sp)
 4005a30:	dfc00415 	stw	ra,16(sp)
 4005a34:	dcc00315 	stw	r19,12(sp)
 4005a38:	dc800215 	stw	r18,8(sp)
 4005a3c:	dc400115 	stw	r17,4(sp)
 4005a40:	2021883a 	mov	r16,r4
 4005a44:	300f883a 	mov	r7,r6
 4005a48:	2900122e 	bgeu	r5,r4,4005a94 <memmove+0x6c>
 4005a4c:	2987883a 	add	r3,r5,r6
 4005a50:	20c0102e 	bgeu	r4,r3,4005a94 <memmove+0x6c>
 4005a54:	218b883a 	add	r5,r4,r6
 4005a58:	1989c83a 	sub	r4,r3,r6
 4005a5c:	30000526 	beq	r6,zero,4005a74 <memmove+0x4c>
 4005a60:	18ffffc4 	addi	r3,r3,-1
 4005a64:	18800003 	ldbu	r2,0(r3)
 4005a68:	297fffc4 	addi	r5,r5,-1
 4005a6c:	28800005 	stb	r2,0(r5)
 4005a70:	193ffb1e 	bne	r3,r4,4005a60 <__alt_data_end+0xfe005a60>
 4005a74:	8005883a 	mov	r2,r16
 4005a78:	dfc00417 	ldw	ra,16(sp)
 4005a7c:	dcc00317 	ldw	r19,12(sp)
 4005a80:	dc800217 	ldw	r18,8(sp)
 4005a84:	dc400117 	ldw	r17,4(sp)
 4005a88:	dc000017 	ldw	r16,0(sp)
 4005a8c:	dec00504 	addi	sp,sp,20
 4005a90:	f800283a 	ret
 4005a94:	008003c4 	movi	r2,15
 4005a98:	1180422e 	bgeu	r2,r6,4005ba4 <memmove+0x17c>
 4005a9c:	2c04b03a 	or	r2,r5,r16
 4005aa0:	108000cc 	andi	r2,r2,3
 4005aa4:	10003f1e 	bne	r2,zero,4005ba4 <memmove+0x17c>
 4005aa8:	32bffc04 	addi	r10,r6,-16
 4005aac:	5014d13a 	srli	r10,r10,4
 4005ab0:	81000404 	addi	r4,r16,16
 4005ab4:	8007883a 	mov	r3,r16
 4005ab8:	5004913a 	slli	r2,r10,4
 4005abc:	280f883a 	mov	r7,r5
 4005ac0:	2089883a 	add	r4,r4,r2
 4005ac4:	38800017 	ldw	r2,0(r7)
 4005ac8:	18c00404 	addi	r3,r3,16
 4005acc:	39c00404 	addi	r7,r7,16
 4005ad0:	18bffc15 	stw	r2,-16(r3)
 4005ad4:	38bffd17 	ldw	r2,-12(r7)
 4005ad8:	18bffd15 	stw	r2,-12(r3)
 4005adc:	38bffe17 	ldw	r2,-8(r7)
 4005ae0:	18bffe15 	stw	r2,-8(r3)
 4005ae4:	38bfff17 	ldw	r2,-4(r7)
 4005ae8:	18bfff15 	stw	r2,-4(r3)
 4005aec:	193ff51e 	bne	r3,r4,4005ac4 <__alt_data_end+0xfe005ac4>
 4005af0:	52800044 	addi	r10,r10,1
 4005af4:	5014913a 	slli	r10,r10,4
 4005af8:	31c003cc 	andi	r7,r6,15
 4005afc:	008000c4 	movi	r2,3
 4005b00:	8287883a 	add	r3,r16,r10
 4005b04:	2a95883a 	add	r10,r5,r10
 4005b08:	11c0282e 	bgeu	r2,r7,4005bac <memmove+0x184>
 4005b0c:	3c7fff04 	addi	r17,r7,-4
 4005b10:	8808d0ba 	srli	r4,r17,2
 4005b14:	1a400104 	addi	r9,r3,4
 4005b18:	180d883a 	mov	r6,r3
 4005b1c:	2105883a 	add	r2,r4,r4
 4005b20:	1085883a 	add	r2,r2,r2
 4005b24:	4893883a 	add	r9,r9,r2
 4005b28:	5005883a 	mov	r2,r10
 4005b2c:	12000017 	ldw	r8,0(r2)
 4005b30:	31800104 	addi	r6,r6,4
 4005b34:	10800104 	addi	r2,r2,4
 4005b38:	323fff15 	stw	r8,-4(r6)
 4005b3c:	327ffb1e 	bne	r6,r9,4005b2c <__alt_data_end+0xfe005b2c>
 4005b40:	20800044 	addi	r2,r4,1
 4005b44:	1085883a 	add	r2,r2,r2
 4005b48:	1085883a 	add	r2,r2,r2
 4005b4c:	017fff04 	movi	r5,-4
 4005b50:	18a5883a 	add	r18,r3,r2
 4005b54:	50a7883a 	add	r19,r10,r2
 4005b58:	40094f00 	call	40094f0 <__mulsi3>
 4005b5c:	144f883a 	add	r7,r2,r17
 4005b60:	980b883a 	mov	r5,r19
 4005b64:	9007883a 	mov	r3,r18
 4005b68:	383fc226 	beq	r7,zero,4005a74 <__alt_data_end+0xfe005a74>
 4005b6c:	19cf883a 	add	r7,r3,r7
 4005b70:	29800003 	ldbu	r6,0(r5)
 4005b74:	18c00044 	addi	r3,r3,1
 4005b78:	29400044 	addi	r5,r5,1
 4005b7c:	19bfffc5 	stb	r6,-1(r3)
 4005b80:	19fffb1e 	bne	r3,r7,4005b70 <__alt_data_end+0xfe005b70>
 4005b84:	8005883a 	mov	r2,r16
 4005b88:	dfc00417 	ldw	ra,16(sp)
 4005b8c:	dcc00317 	ldw	r19,12(sp)
 4005b90:	dc800217 	ldw	r18,8(sp)
 4005b94:	dc400117 	ldw	r17,4(sp)
 4005b98:	dc000017 	ldw	r16,0(sp)
 4005b9c:	dec00504 	addi	sp,sp,20
 4005ba0:	f800283a 	ret
 4005ba4:	8007883a 	mov	r3,r16
 4005ba8:	003fef06 	br	4005b68 <__alt_data_end+0xfe005b68>
 4005bac:	500b883a 	mov	r5,r10
 4005bb0:	003fed06 	br	4005b68 <__alt_data_end+0xfe005b68>

04005bb4 <memset>:
 4005bb4:	00c000c4 	movi	r3,3
 4005bb8:	2005883a 	mov	r2,r4
 4005bbc:	29403fcc 	andi	r5,r5,255
 4005bc0:	19802d2e 	bgeu	r3,r6,4005c78 <memset+0xc4>
 4005bc4:	20c6703a 	and	r3,r4,r3
 4005bc8:	18002e1e 	bne	r3,zero,4005c84 <memset+0xd0>
 4005bcc:	2806923a 	slli	r3,r5,8
 4005bd0:	010003c4 	movi	r4,15
 4005bd4:	3011883a 	mov	r8,r6
 4005bd8:	1946b03a 	or	r3,r3,r5
 4005bdc:	180e943a 	slli	r7,r3,16
 4005be0:	38ceb03a 	or	r7,r7,r3
 4005be4:	1007883a 	mov	r3,r2
 4005be8:	21800f2e 	bgeu	r4,r6,4005c28 <memset+0x74>
 4005bec:	19c00015 	stw	r7,0(r3)
 4005bf0:	19c00115 	stw	r7,4(r3)
 4005bf4:	19c00215 	stw	r7,8(r3)
 4005bf8:	19c00315 	stw	r7,12(r3)
 4005bfc:	423ffc04 	addi	r8,r8,-16
 4005c00:	18c00404 	addi	r3,r3,16
 4005c04:	223ff936 	bltu	r4,r8,4005bec <__alt_data_end+0xfe005bec>
 4005c08:	30fffc04 	addi	r3,r6,-16
 4005c0c:	1806d13a 	srli	r3,r3,4
 4005c10:	318003cc 	andi	r6,r6,15
 4005c14:	010000c4 	movi	r4,3
 4005c18:	18c00044 	addi	r3,r3,1
 4005c1c:	1806913a 	slli	r3,r3,4
 4005c20:	10c7883a 	add	r3,r2,r3
 4005c24:	21800e2e 	bgeu	r4,r6,4005c60 <memset+0xac>
 4005c28:	1813883a 	mov	r9,r3
 4005c2c:	3011883a 	mov	r8,r6
 4005c30:	010000c4 	movi	r4,3
 4005c34:	49c00015 	stw	r7,0(r9)
 4005c38:	423fff04 	addi	r8,r8,-4
 4005c3c:	4a400104 	addi	r9,r9,4
 4005c40:	223ffc36 	bltu	r4,r8,4005c34 <__alt_data_end+0xfe005c34>
 4005c44:	313fff04 	addi	r4,r6,-4
 4005c48:	2008d0ba 	srli	r4,r4,2
 4005c4c:	318000cc 	andi	r6,r6,3
 4005c50:	21000044 	addi	r4,r4,1
 4005c54:	2109883a 	add	r4,r4,r4
 4005c58:	2109883a 	add	r4,r4,r4
 4005c5c:	1907883a 	add	r3,r3,r4
 4005c60:	30000a26 	beq	r6,zero,4005c8c <memset+0xd8>
 4005c64:	198d883a 	add	r6,r3,r6
 4005c68:	19400005 	stb	r5,0(r3)
 4005c6c:	18c00044 	addi	r3,r3,1
 4005c70:	19bffd1e 	bne	r3,r6,4005c68 <__alt_data_end+0xfe005c68>
 4005c74:	f800283a 	ret
 4005c78:	2007883a 	mov	r3,r4
 4005c7c:	303ff91e 	bne	r6,zero,4005c64 <__alt_data_end+0xfe005c64>
 4005c80:	00000206 	br	4005c8c <memset+0xd8>
 4005c84:	2007883a 	mov	r3,r4
 4005c88:	003ff606 	br	4005c64 <__alt_data_end+0xfe005c64>
 4005c8c:	f800283a 	ret

04005c90 <_Balloc>:
 4005c90:	20801317 	ldw	r2,76(r4)
 4005c94:	defffc04 	addi	sp,sp,-16
 4005c98:	dc400115 	stw	r17,4(sp)
 4005c9c:	dc000015 	stw	r16,0(sp)
 4005ca0:	dfc00315 	stw	ra,12(sp)
 4005ca4:	dc800215 	stw	r18,8(sp)
 4005ca8:	2023883a 	mov	r17,r4
 4005cac:	2821883a 	mov	r16,r5
 4005cb0:	10000f26 	beq	r2,zero,4005cf0 <_Balloc+0x60>
 4005cb4:	8407883a 	add	r3,r16,r16
 4005cb8:	18c7883a 	add	r3,r3,r3
 4005cbc:	10c7883a 	add	r3,r2,r3
 4005cc0:	18800017 	ldw	r2,0(r3)
 4005cc4:	10001126 	beq	r2,zero,4005d0c <_Balloc+0x7c>
 4005cc8:	11000017 	ldw	r4,0(r2)
 4005ccc:	19000015 	stw	r4,0(r3)
 4005cd0:	10000415 	stw	zero,16(r2)
 4005cd4:	10000315 	stw	zero,12(r2)
 4005cd8:	dfc00317 	ldw	ra,12(sp)
 4005cdc:	dc800217 	ldw	r18,8(sp)
 4005ce0:	dc400117 	ldw	r17,4(sp)
 4005ce4:	dc000017 	ldw	r16,0(sp)
 4005ce8:	dec00404 	addi	sp,sp,16
 4005cec:	f800283a 	ret
 4005cf0:	01400104 	movi	r5,4
 4005cf4:	01800404 	movi	r6,16
 4005cf8:	40075f40 	call	40075f4 <_calloc_r>
 4005cfc:	88801315 	stw	r2,76(r17)
 4005d00:	103fec1e 	bne	r2,zero,4005cb4 <__alt_data_end+0xfe005cb4>
 4005d04:	0005883a 	mov	r2,zero
 4005d08:	003ff306 	br	4005cd8 <__alt_data_end+0xfe005cd8>
 4005d0c:	01400044 	movi	r5,1
 4005d10:	2c24983a 	sll	r18,r5,r16
 4005d14:	8809883a 	mov	r4,r17
 4005d18:	91800144 	addi	r6,r18,5
 4005d1c:	318d883a 	add	r6,r6,r6
 4005d20:	318d883a 	add	r6,r6,r6
 4005d24:	40075f40 	call	40075f4 <_calloc_r>
 4005d28:	103ff626 	beq	r2,zero,4005d04 <__alt_data_end+0xfe005d04>
 4005d2c:	14000115 	stw	r16,4(r2)
 4005d30:	14800215 	stw	r18,8(r2)
 4005d34:	003fe606 	br	4005cd0 <__alt_data_end+0xfe005cd0>

04005d38 <_Bfree>:
 4005d38:	28000826 	beq	r5,zero,4005d5c <_Bfree+0x24>
 4005d3c:	28c00117 	ldw	r3,4(r5)
 4005d40:	20801317 	ldw	r2,76(r4)
 4005d44:	18c7883a 	add	r3,r3,r3
 4005d48:	18c7883a 	add	r3,r3,r3
 4005d4c:	10c5883a 	add	r2,r2,r3
 4005d50:	10c00017 	ldw	r3,0(r2)
 4005d54:	28c00015 	stw	r3,0(r5)
 4005d58:	11400015 	stw	r5,0(r2)
 4005d5c:	f800283a 	ret

04005d60 <__multadd>:
 4005d60:	defff604 	addi	sp,sp,-40
 4005d64:	dd400515 	stw	r21,20(sp)
 4005d68:	2d400417 	ldw	r21,16(r5)
 4005d6c:	df000815 	stw	fp,32(sp)
 4005d70:	ddc00715 	stw	r23,28(sp)
 4005d74:	dd800615 	stw	r22,24(sp)
 4005d78:	dd000415 	stw	r20,16(sp)
 4005d7c:	dc400115 	stw	r17,4(sp)
 4005d80:	dc000015 	stw	r16,0(sp)
 4005d84:	dfc00915 	stw	ra,36(sp)
 4005d88:	dcc00315 	stw	r19,12(sp)
 4005d8c:	dc800215 	stw	r18,8(sp)
 4005d90:	282d883a 	mov	r22,r5
 4005d94:	202f883a 	mov	r23,r4
 4005d98:	3029883a 	mov	r20,r6
 4005d9c:	3839883a 	mov	fp,r7
 4005da0:	2c000504 	addi	r16,r5,20
 4005da4:	0023883a 	mov	r17,zero
 4005da8:	84c00017 	ldw	r19,0(r16)
 4005dac:	a00b883a 	mov	r5,r20
 4005db0:	8c400044 	addi	r17,r17,1
 4005db4:	993fffcc 	andi	r4,r19,65535
 4005db8:	40094f00 	call	40094f0 <__mulsi3>
 4005dbc:	1725883a 	add	r18,r2,fp
 4005dc0:	9808d43a 	srli	r4,r19,16
 4005dc4:	9026d43a 	srli	r19,r18,16
 4005dc8:	a00b883a 	mov	r5,r20
 4005dcc:	40094f00 	call	40094f0 <__mulsi3>
 4005dd0:	988f883a 	add	r7,r19,r2
 4005dd4:	3804943a 	slli	r2,r7,16
 4005dd8:	94bfffcc 	andi	r18,r18,65535
 4005ddc:	3838d43a 	srli	fp,r7,16
 4005de0:	14a5883a 	add	r18,r2,r18
 4005de4:	84800015 	stw	r18,0(r16)
 4005de8:	84000104 	addi	r16,r16,4
 4005dec:	8d7fee16 	blt	r17,r21,4005da8 <__alt_data_end+0xfe005da8>
 4005df0:	e0000926 	beq	fp,zero,4005e18 <__multadd+0xb8>
 4005df4:	b0800217 	ldw	r2,8(r22)
 4005df8:	a880140e 	bge	r21,r2,4005e4c <__multadd+0xec>
 4005dfc:	a8800144 	addi	r2,r21,5
 4005e00:	1085883a 	add	r2,r2,r2
 4005e04:	1085883a 	add	r2,r2,r2
 4005e08:	b085883a 	add	r2,r22,r2
 4005e0c:	ad400044 	addi	r21,r21,1
 4005e10:	17000015 	stw	fp,0(r2)
 4005e14:	b5400415 	stw	r21,16(r22)
 4005e18:	b005883a 	mov	r2,r22
 4005e1c:	dfc00917 	ldw	ra,36(sp)
 4005e20:	df000817 	ldw	fp,32(sp)
 4005e24:	ddc00717 	ldw	r23,28(sp)
 4005e28:	dd800617 	ldw	r22,24(sp)
 4005e2c:	dd400517 	ldw	r21,20(sp)
 4005e30:	dd000417 	ldw	r20,16(sp)
 4005e34:	dcc00317 	ldw	r19,12(sp)
 4005e38:	dc800217 	ldw	r18,8(sp)
 4005e3c:	dc400117 	ldw	r17,4(sp)
 4005e40:	dc000017 	ldw	r16,0(sp)
 4005e44:	dec00a04 	addi	sp,sp,40
 4005e48:	f800283a 	ret
 4005e4c:	b1400117 	ldw	r5,4(r22)
 4005e50:	b809883a 	mov	r4,r23
 4005e54:	29400044 	addi	r5,r5,1
 4005e58:	4005c900 	call	4005c90 <_Balloc>
 4005e5c:	b1800417 	ldw	r6,16(r22)
 4005e60:	b1400304 	addi	r5,r22,12
 4005e64:	11000304 	addi	r4,r2,12
 4005e68:	31800084 	addi	r6,r6,2
 4005e6c:	318d883a 	add	r6,r6,r6
 4005e70:	318d883a 	add	r6,r6,r6
 4005e74:	1021883a 	mov	r16,r2
 4005e78:	40058e80 	call	40058e8 <memcpy>
 4005e7c:	b0c00117 	ldw	r3,4(r22)
 4005e80:	b8801317 	ldw	r2,76(r23)
 4005e84:	18c7883a 	add	r3,r3,r3
 4005e88:	18c7883a 	add	r3,r3,r3
 4005e8c:	10c5883a 	add	r2,r2,r3
 4005e90:	10c00017 	ldw	r3,0(r2)
 4005e94:	b0c00015 	stw	r3,0(r22)
 4005e98:	15800015 	stw	r22,0(r2)
 4005e9c:	802d883a 	mov	r22,r16
 4005ea0:	003fd606 	br	4005dfc <__alt_data_end+0xfe005dfc>

04005ea4 <__s2b>:
 4005ea4:	defff904 	addi	sp,sp,-28
 4005ea8:	dd000415 	stw	r20,16(sp)
 4005eac:	dc400115 	stw	r17,4(sp)
 4005eb0:	2829883a 	mov	r20,r5
 4005eb4:	2023883a 	mov	r17,r4
 4005eb8:	01400244 	movi	r5,9
 4005ebc:	39000204 	addi	r4,r7,8
 4005ec0:	dcc00315 	stw	r19,12(sp)
 4005ec4:	dc800215 	stw	r18,8(sp)
 4005ec8:	dfc00615 	stw	ra,24(sp)
 4005ecc:	dd400515 	stw	r21,20(sp)
 4005ed0:	dc000015 	stw	r16,0(sp)
 4005ed4:	3825883a 	mov	r18,r7
 4005ed8:	3027883a 	mov	r19,r6
 4005edc:	40094340 	call	4009434 <__divsi3>
 4005ee0:	00c00044 	movi	r3,1
 4005ee4:	000b883a 	mov	r5,zero
 4005ee8:	1880030e 	bge	r3,r2,4005ef8 <__s2b+0x54>
 4005eec:	18c7883a 	add	r3,r3,r3
 4005ef0:	29400044 	addi	r5,r5,1
 4005ef4:	18bffd16 	blt	r3,r2,4005eec <__alt_data_end+0xfe005eec>
 4005ef8:	8809883a 	mov	r4,r17
 4005efc:	4005c900 	call	4005c90 <_Balloc>
 4005f00:	d8c00717 	ldw	r3,28(sp)
 4005f04:	10c00515 	stw	r3,20(r2)
 4005f08:	00c00044 	movi	r3,1
 4005f0c:	10c00415 	stw	r3,16(r2)
 4005f10:	00c00244 	movi	r3,9
 4005f14:	1cc0210e 	bge	r3,r19,4005f9c <__s2b+0xf8>
 4005f18:	a0eb883a 	add	r21,r20,r3
 4005f1c:	a821883a 	mov	r16,r21
 4005f20:	a4e9883a 	add	r20,r20,r19
 4005f24:	81c00007 	ldb	r7,0(r16)
 4005f28:	8809883a 	mov	r4,r17
 4005f2c:	84000044 	addi	r16,r16,1
 4005f30:	100b883a 	mov	r5,r2
 4005f34:	01800284 	movi	r6,10
 4005f38:	39fff404 	addi	r7,r7,-48
 4005f3c:	4005d600 	call	4005d60 <__multadd>
 4005f40:	853ff81e 	bne	r16,r20,4005f24 <__alt_data_end+0xfe005f24>
 4005f44:	ace1883a 	add	r16,r21,r19
 4005f48:	843ffe04 	addi	r16,r16,-8
 4005f4c:	9c800a0e 	bge	r19,r18,4005f78 <__s2b+0xd4>
 4005f50:	94e5c83a 	sub	r18,r18,r19
 4005f54:	84a5883a 	add	r18,r16,r18
 4005f58:	81c00007 	ldb	r7,0(r16)
 4005f5c:	8809883a 	mov	r4,r17
 4005f60:	84000044 	addi	r16,r16,1
 4005f64:	100b883a 	mov	r5,r2
 4005f68:	01800284 	movi	r6,10
 4005f6c:	39fff404 	addi	r7,r7,-48
 4005f70:	4005d600 	call	4005d60 <__multadd>
 4005f74:	84bff81e 	bne	r16,r18,4005f58 <__alt_data_end+0xfe005f58>
 4005f78:	dfc00617 	ldw	ra,24(sp)
 4005f7c:	dd400517 	ldw	r21,20(sp)
 4005f80:	dd000417 	ldw	r20,16(sp)
 4005f84:	dcc00317 	ldw	r19,12(sp)
 4005f88:	dc800217 	ldw	r18,8(sp)
 4005f8c:	dc400117 	ldw	r17,4(sp)
 4005f90:	dc000017 	ldw	r16,0(sp)
 4005f94:	dec00704 	addi	sp,sp,28
 4005f98:	f800283a 	ret
 4005f9c:	a4000284 	addi	r16,r20,10
 4005fa0:	1827883a 	mov	r19,r3
 4005fa4:	003fe906 	br	4005f4c <__alt_data_end+0xfe005f4c>

04005fa8 <__hi0bits>:
 4005fa8:	20bfffec 	andhi	r2,r4,65535
 4005fac:	1000141e 	bne	r2,zero,4006000 <__hi0bits+0x58>
 4005fb0:	2008943a 	slli	r4,r4,16
 4005fb4:	00800404 	movi	r2,16
 4005fb8:	20ffc02c 	andhi	r3,r4,65280
 4005fbc:	1800021e 	bne	r3,zero,4005fc8 <__hi0bits+0x20>
 4005fc0:	2008923a 	slli	r4,r4,8
 4005fc4:	10800204 	addi	r2,r2,8
 4005fc8:	20fc002c 	andhi	r3,r4,61440
 4005fcc:	1800021e 	bne	r3,zero,4005fd8 <__hi0bits+0x30>
 4005fd0:	2008913a 	slli	r4,r4,4
 4005fd4:	10800104 	addi	r2,r2,4
 4005fd8:	20f0002c 	andhi	r3,r4,49152
 4005fdc:	1800031e 	bne	r3,zero,4005fec <__hi0bits+0x44>
 4005fe0:	2109883a 	add	r4,r4,r4
 4005fe4:	10800084 	addi	r2,r2,2
 4005fe8:	2109883a 	add	r4,r4,r4
 4005fec:	20000316 	blt	r4,zero,4005ffc <__hi0bits+0x54>
 4005ff0:	2110002c 	andhi	r4,r4,16384
 4005ff4:	2000041e 	bne	r4,zero,4006008 <__hi0bits+0x60>
 4005ff8:	00800804 	movi	r2,32
 4005ffc:	f800283a 	ret
 4006000:	0005883a 	mov	r2,zero
 4006004:	003fec06 	br	4005fb8 <__alt_data_end+0xfe005fb8>
 4006008:	10800044 	addi	r2,r2,1
 400600c:	f800283a 	ret

04006010 <__lo0bits>:
 4006010:	20c00017 	ldw	r3,0(r4)
 4006014:	188001cc 	andi	r2,r3,7
 4006018:	10000826 	beq	r2,zero,400603c <__lo0bits+0x2c>
 400601c:	1880004c 	andi	r2,r3,1
 4006020:	1000211e 	bne	r2,zero,40060a8 <__lo0bits+0x98>
 4006024:	1880008c 	andi	r2,r3,2
 4006028:	1000211e 	bne	r2,zero,40060b0 <__lo0bits+0xa0>
 400602c:	1806d0ba 	srli	r3,r3,2
 4006030:	00800084 	movi	r2,2
 4006034:	20c00015 	stw	r3,0(r4)
 4006038:	f800283a 	ret
 400603c:	18bfffcc 	andi	r2,r3,65535
 4006040:	10001326 	beq	r2,zero,4006090 <__lo0bits+0x80>
 4006044:	0005883a 	mov	r2,zero
 4006048:	19403fcc 	andi	r5,r3,255
 400604c:	2800021e 	bne	r5,zero,4006058 <__lo0bits+0x48>
 4006050:	1806d23a 	srli	r3,r3,8
 4006054:	10800204 	addi	r2,r2,8
 4006058:	194003cc 	andi	r5,r3,15
 400605c:	2800021e 	bne	r5,zero,4006068 <__lo0bits+0x58>
 4006060:	1806d13a 	srli	r3,r3,4
 4006064:	10800104 	addi	r2,r2,4
 4006068:	194000cc 	andi	r5,r3,3
 400606c:	2800021e 	bne	r5,zero,4006078 <__lo0bits+0x68>
 4006070:	1806d0ba 	srli	r3,r3,2
 4006074:	10800084 	addi	r2,r2,2
 4006078:	1940004c 	andi	r5,r3,1
 400607c:	2800081e 	bne	r5,zero,40060a0 <__lo0bits+0x90>
 4006080:	1806d07a 	srli	r3,r3,1
 4006084:	1800051e 	bne	r3,zero,400609c <__lo0bits+0x8c>
 4006088:	00800804 	movi	r2,32
 400608c:	f800283a 	ret
 4006090:	1806d43a 	srli	r3,r3,16
 4006094:	00800404 	movi	r2,16
 4006098:	003feb06 	br	4006048 <__alt_data_end+0xfe006048>
 400609c:	10800044 	addi	r2,r2,1
 40060a0:	20c00015 	stw	r3,0(r4)
 40060a4:	f800283a 	ret
 40060a8:	0005883a 	mov	r2,zero
 40060ac:	f800283a 	ret
 40060b0:	1806d07a 	srli	r3,r3,1
 40060b4:	00800044 	movi	r2,1
 40060b8:	20c00015 	stw	r3,0(r4)
 40060bc:	f800283a 	ret

040060c0 <__i2b>:
 40060c0:	defffd04 	addi	sp,sp,-12
 40060c4:	dc000015 	stw	r16,0(sp)
 40060c8:	04000044 	movi	r16,1
 40060cc:	dc400115 	stw	r17,4(sp)
 40060d0:	2823883a 	mov	r17,r5
 40060d4:	800b883a 	mov	r5,r16
 40060d8:	dfc00215 	stw	ra,8(sp)
 40060dc:	4005c900 	call	4005c90 <_Balloc>
 40060e0:	14400515 	stw	r17,20(r2)
 40060e4:	14000415 	stw	r16,16(r2)
 40060e8:	dfc00217 	ldw	ra,8(sp)
 40060ec:	dc400117 	ldw	r17,4(sp)
 40060f0:	dc000017 	ldw	r16,0(sp)
 40060f4:	dec00304 	addi	sp,sp,12
 40060f8:	f800283a 	ret

040060fc <__multiply>:
 40060fc:	defff004 	addi	sp,sp,-64
 4006100:	dc800815 	stw	r18,32(sp)
 4006104:	dc400715 	stw	r17,28(sp)
 4006108:	34800417 	ldw	r18,16(r6)
 400610c:	2c400417 	ldw	r17,16(r5)
 4006110:	ddc00d15 	stw	r23,52(sp)
 4006114:	dc000615 	stw	r16,24(sp)
 4006118:	dfc00f15 	stw	ra,60(sp)
 400611c:	df000e15 	stw	fp,56(sp)
 4006120:	dd800c15 	stw	r22,48(sp)
 4006124:	dd400b15 	stw	r21,44(sp)
 4006128:	dd000a15 	stw	r20,40(sp)
 400612c:	dcc00915 	stw	r19,36(sp)
 4006130:	2821883a 	mov	r16,r5
 4006134:	302f883a 	mov	r23,r6
 4006138:	8c80050e 	bge	r17,r18,4006150 <__multiply+0x54>
 400613c:	8807883a 	mov	r3,r17
 4006140:	3021883a 	mov	r16,r6
 4006144:	9023883a 	mov	r17,r18
 4006148:	282f883a 	mov	r23,r5
 400614c:	1825883a 	mov	r18,r3
 4006150:	80800217 	ldw	r2,8(r16)
 4006154:	8c87883a 	add	r3,r17,r18
 4006158:	d8c00115 	stw	r3,4(sp)
 400615c:	81400117 	ldw	r5,4(r16)
 4006160:	10c0010e 	bge	r2,r3,4006168 <__multiply+0x6c>
 4006164:	29400044 	addi	r5,r5,1
 4006168:	4005c900 	call	4005c90 <_Balloc>
 400616c:	d8c00117 	ldw	r3,4(sp)
 4006170:	d8800515 	stw	r2,20(sp)
 4006174:	14c00504 	addi	r19,r2,20
 4006178:	1d400144 	addi	r21,r3,5
 400617c:	ad6b883a 	add	r21,r21,r21
 4006180:	ad6b883a 	add	r21,r21,r21
 4006184:	156b883a 	add	r21,r2,r21
 4006188:	dd400215 	stw	r21,8(sp)
 400618c:	9805883a 	mov	r2,r19
 4006190:	9d40042e 	bgeu	r19,r21,40061a4 <__multiply+0xa8>
 4006194:	d8c00217 	ldw	r3,8(sp)
 4006198:	10000015 	stw	zero,0(r2)
 400619c:	10800104 	addi	r2,r2,4
 40061a0:	10fffc36 	bltu	r2,r3,4006194 <__alt_data_end+0xfe006194>
 40061a4:	94800144 	addi	r18,r18,5
 40061a8:	94a5883a 	add	r18,r18,r18
 40061ac:	94ad883a 	add	r22,r18,r18
 40061b0:	8c400144 	addi	r17,r17,5
 40061b4:	8c63883a 	add	r17,r17,r17
 40061b8:	bdad883a 	add	r22,r23,r22
 40061bc:	80c00504 	addi	r3,r16,20
 40061c0:	8c63883a 	add	r17,r17,r17
 40061c4:	bc800504 	addi	r18,r23,20
 40061c8:	dd800315 	stw	r22,12(sp)
 40061cc:	d8c00415 	stw	r3,16(sp)
 40061d0:	dcc00015 	stw	r19,0(sp)
 40061d4:	8463883a 	add	r17,r16,r17
 40061d8:	9580412e 	bgeu	r18,r22,40062e0 <__multiply+0x1e4>
 40061dc:	90800017 	ldw	r2,0(r18)
 40061e0:	173fffcc 	andi	fp,r2,65535
 40061e4:	e0001a26 	beq	fp,zero,4006250 <__multiply+0x154>
 40061e8:	dd000017 	ldw	r20,0(sp)
 40061ec:	dd800417 	ldw	r22,16(sp)
 40061f0:	002b883a 	mov	r21,zero
 40061f4:	b4c00017 	ldw	r19,0(r22)
 40061f8:	a4000017 	ldw	r16,0(r20)
 40061fc:	e00b883a 	mov	r5,fp
 4006200:	993fffcc 	andi	r4,r19,65535
 4006204:	40094f00 	call	40094f0 <__mulsi3>
 4006208:	9808d43a 	srli	r4,r19,16
 400620c:	817fffcc 	andi	r5,r16,65535
 4006210:	1145883a 	add	r2,r2,r5
 4006214:	e00b883a 	mov	r5,fp
 4006218:	1567883a 	add	r19,r2,r21
 400621c:	8020d43a 	srli	r16,r16,16
 4006220:	40094f00 	call	40094f0 <__mulsi3>
 4006224:	9808d43a 	srli	r4,r19,16
 4006228:	1405883a 	add	r2,r2,r16
 400622c:	a4c0000d 	sth	r19,0(r20)
 4006230:	110f883a 	add	r7,r2,r4
 4006234:	a1c0008d 	sth	r7,2(r20)
 4006238:	b5800104 	addi	r22,r22,4
 400623c:	382ad43a 	srli	r21,r7,16
 4006240:	a5000104 	addi	r20,r20,4
 4006244:	b47feb36 	bltu	r22,r17,40061f4 <__alt_data_end+0xfe0061f4>
 4006248:	a5400015 	stw	r21,0(r20)
 400624c:	90800017 	ldw	r2,0(r18)
 4006250:	1038d43a 	srli	fp,r2,16
 4006254:	e0001c26 	beq	fp,zero,40062c8 <__multiply+0x1cc>
 4006258:	d8c00017 	ldw	r3,0(sp)
 400625c:	dd000417 	ldw	r20,16(sp)
 4006260:	002b883a 	mov	r21,zero
 4006264:	1d800017 	ldw	r22,0(r3)
 4006268:	182f883a 	mov	r23,r3
 400626c:	b021883a 	mov	r16,r22
 4006270:	a4c00017 	ldw	r19,0(r20)
 4006274:	8020d43a 	srli	r16,r16,16
 4006278:	e00b883a 	mov	r5,fp
 400627c:	993fffcc 	andi	r4,r19,65535
 4006280:	40094f00 	call	40094f0 <__mulsi3>
 4006284:	1405883a 	add	r2,r2,r16
 4006288:	9808d43a 	srli	r4,r19,16
 400628c:	156b883a 	add	r21,r2,r21
 4006290:	bdc00104 	addi	r23,r23,4
 4006294:	bdbfff0d 	sth	r22,-4(r23)
 4006298:	bd7fff8d 	sth	r21,-2(r23)
 400629c:	bc000017 	ldw	r16,0(r23)
 40062a0:	e00b883a 	mov	r5,fp
 40062a4:	40094f00 	call	40094f0 <__mulsi3>
 40062a8:	a80ed43a 	srli	r7,r21,16
 40062ac:	813fffcc 	andi	r4,r16,65535
 40062b0:	2085883a 	add	r2,r4,r2
 40062b4:	11ed883a 	add	r22,r2,r7
 40062b8:	a5000104 	addi	r20,r20,4
 40062bc:	b02ad43a 	srli	r21,r22,16
 40062c0:	a47feb36 	bltu	r20,r17,4006270 <__alt_data_end+0xfe006270>
 40062c4:	bd800015 	stw	r22,0(r23)
 40062c8:	d8c00017 	ldw	r3,0(sp)
 40062cc:	94800104 	addi	r18,r18,4
 40062d0:	18c00104 	addi	r3,r3,4
 40062d4:	d8c00015 	stw	r3,0(sp)
 40062d8:	d8c00317 	ldw	r3,12(sp)
 40062dc:	90ffbf36 	bltu	r18,r3,40061dc <__alt_data_end+0xfe0061dc>
 40062e0:	d8c00117 	ldw	r3,4(sp)
 40062e4:	00c00c0e 	bge	zero,r3,4006318 <__multiply+0x21c>
 40062e8:	d8c00217 	ldw	r3,8(sp)
 40062ec:	18bfff17 	ldw	r2,-4(r3)
 40062f0:	1d7fff04 	addi	r21,r3,-4
 40062f4:	10000326 	beq	r2,zero,4006304 <__multiply+0x208>
 40062f8:	00000706 	br	4006318 <__multiply+0x21c>
 40062fc:	a8800017 	ldw	r2,0(r21)
 4006300:	1000051e 	bne	r2,zero,4006318 <__multiply+0x21c>
 4006304:	d8c00117 	ldw	r3,4(sp)
 4006308:	ad7fff04 	addi	r21,r21,-4
 400630c:	18ffffc4 	addi	r3,r3,-1
 4006310:	d8c00115 	stw	r3,4(sp)
 4006314:	183ff91e 	bne	r3,zero,40062fc <__alt_data_end+0xfe0062fc>
 4006318:	d8800517 	ldw	r2,20(sp)
 400631c:	d8c00117 	ldw	r3,4(sp)
 4006320:	10c00415 	stw	r3,16(r2)
 4006324:	dfc00f17 	ldw	ra,60(sp)
 4006328:	df000e17 	ldw	fp,56(sp)
 400632c:	ddc00d17 	ldw	r23,52(sp)
 4006330:	dd800c17 	ldw	r22,48(sp)
 4006334:	dd400b17 	ldw	r21,44(sp)
 4006338:	dd000a17 	ldw	r20,40(sp)
 400633c:	dcc00917 	ldw	r19,36(sp)
 4006340:	dc800817 	ldw	r18,32(sp)
 4006344:	dc400717 	ldw	r17,28(sp)
 4006348:	dc000617 	ldw	r16,24(sp)
 400634c:	dec01004 	addi	sp,sp,64
 4006350:	f800283a 	ret

04006354 <__pow5mult>:
 4006354:	defffb04 	addi	sp,sp,-20
 4006358:	dcc00315 	stw	r19,12(sp)
 400635c:	dc800215 	stw	r18,8(sp)
 4006360:	dc000015 	stw	r16,0(sp)
 4006364:	dfc00415 	stw	ra,16(sp)
 4006368:	dc400115 	stw	r17,4(sp)
 400636c:	308000cc 	andi	r2,r6,3
 4006370:	3021883a 	mov	r16,r6
 4006374:	2027883a 	mov	r19,r4
 4006378:	2825883a 	mov	r18,r5
 400637c:	10002e1e 	bne	r2,zero,4006438 <__pow5mult+0xe4>
 4006380:	8021d0ba 	srai	r16,r16,2
 4006384:	80001a26 	beq	r16,zero,40063f0 <__pow5mult+0x9c>
 4006388:	9c401217 	ldw	r17,72(r19)
 400638c:	8800061e 	bne	r17,zero,40063a8 <__pow5mult+0x54>
 4006390:	00003406 	br	4006464 <__pow5mult+0x110>
 4006394:	8021d07a 	srai	r16,r16,1
 4006398:	80001526 	beq	r16,zero,40063f0 <__pow5mult+0x9c>
 400639c:	88c00017 	ldw	r3,0(r17)
 40063a0:	18001b26 	beq	r3,zero,4006410 <__pow5mult+0xbc>
 40063a4:	1823883a 	mov	r17,r3
 40063a8:	80c0004c 	andi	r3,r16,1
 40063ac:	183ff926 	beq	r3,zero,4006394 <__alt_data_end+0xfe006394>
 40063b0:	900b883a 	mov	r5,r18
 40063b4:	880d883a 	mov	r6,r17
 40063b8:	9809883a 	mov	r4,r19
 40063bc:	40060fc0 	call	40060fc <__multiply>
 40063c0:	90001b26 	beq	r18,zero,4006430 <__pow5mult+0xdc>
 40063c4:	91000117 	ldw	r4,4(r18)
 40063c8:	98c01317 	ldw	r3,76(r19)
 40063cc:	8021d07a 	srai	r16,r16,1
 40063d0:	2109883a 	add	r4,r4,r4
 40063d4:	2109883a 	add	r4,r4,r4
 40063d8:	1907883a 	add	r3,r3,r4
 40063dc:	19000017 	ldw	r4,0(r3)
 40063e0:	91000015 	stw	r4,0(r18)
 40063e4:	1c800015 	stw	r18,0(r3)
 40063e8:	1025883a 	mov	r18,r2
 40063ec:	803feb1e 	bne	r16,zero,400639c <__alt_data_end+0xfe00639c>
 40063f0:	9005883a 	mov	r2,r18
 40063f4:	dfc00417 	ldw	ra,16(sp)
 40063f8:	dcc00317 	ldw	r19,12(sp)
 40063fc:	dc800217 	ldw	r18,8(sp)
 4006400:	dc400117 	ldw	r17,4(sp)
 4006404:	dc000017 	ldw	r16,0(sp)
 4006408:	dec00504 	addi	sp,sp,20
 400640c:	f800283a 	ret
 4006410:	880b883a 	mov	r5,r17
 4006414:	880d883a 	mov	r6,r17
 4006418:	9809883a 	mov	r4,r19
 400641c:	40060fc0 	call	40060fc <__multiply>
 4006420:	88800015 	stw	r2,0(r17)
 4006424:	10000015 	stw	zero,0(r2)
 4006428:	1023883a 	mov	r17,r2
 400642c:	003fde06 	br	40063a8 <__alt_data_end+0xfe0063a8>
 4006430:	1025883a 	mov	r18,r2
 4006434:	003fd706 	br	4006394 <__alt_data_end+0xfe006394>
 4006438:	10bfffc4 	addi	r2,r2,-1
 400643c:	1085883a 	add	r2,r2,r2
 4006440:	00c10074 	movhi	r3,1025
 4006444:	18f11204 	addi	r3,r3,-15288
 4006448:	1085883a 	add	r2,r2,r2
 400644c:	1885883a 	add	r2,r3,r2
 4006450:	11800017 	ldw	r6,0(r2)
 4006454:	000f883a 	mov	r7,zero
 4006458:	4005d600 	call	4005d60 <__multadd>
 400645c:	1025883a 	mov	r18,r2
 4006460:	003fc706 	br	4006380 <__alt_data_end+0xfe006380>
 4006464:	9809883a 	mov	r4,r19
 4006468:	01409c44 	movi	r5,625
 400646c:	40060c00 	call	40060c0 <__i2b>
 4006470:	98801215 	stw	r2,72(r19)
 4006474:	1023883a 	mov	r17,r2
 4006478:	10000015 	stw	zero,0(r2)
 400647c:	003fca06 	br	40063a8 <__alt_data_end+0xfe0063a8>

04006480 <__lshift>:
 4006480:	defff904 	addi	sp,sp,-28
 4006484:	dd400515 	stw	r21,20(sp)
 4006488:	dc400115 	stw	r17,4(sp)
 400648c:	2d400417 	ldw	r21,16(r5)
 4006490:	3023d17a 	srai	r17,r6,5
 4006494:	28800217 	ldw	r2,8(r5)
 4006498:	dd000415 	stw	r20,16(sp)
 400649c:	8d6b883a 	add	r21,r17,r21
 40064a0:	dcc00315 	stw	r19,12(sp)
 40064a4:	dc800215 	stw	r18,8(sp)
 40064a8:	dc000015 	stw	r16,0(sp)
 40064ac:	dfc00615 	stw	ra,24(sp)
 40064b0:	ac000044 	addi	r16,r21,1
 40064b4:	2825883a 	mov	r18,r5
 40064b8:	3029883a 	mov	r20,r6
 40064bc:	2027883a 	mov	r19,r4
 40064c0:	29400117 	ldw	r5,4(r5)
 40064c4:	1400030e 	bge	r2,r16,40064d4 <__lshift+0x54>
 40064c8:	1085883a 	add	r2,r2,r2
 40064cc:	29400044 	addi	r5,r5,1
 40064d0:	143ffd16 	blt	r2,r16,40064c8 <__alt_data_end+0xfe0064c8>
 40064d4:	9809883a 	mov	r4,r19
 40064d8:	4005c900 	call	4005c90 <_Balloc>
 40064dc:	10c00504 	addi	r3,r2,20
 40064e0:	0440090e 	bge	zero,r17,4006508 <__lshift+0x88>
 40064e4:	000f883a 	mov	r7,zero
 40064e8:	18000015 	stw	zero,0(r3)
 40064ec:	39c00044 	addi	r7,r7,1
 40064f0:	18c00104 	addi	r3,r3,4
 40064f4:	3c7ffc1e 	bne	r7,r17,40064e8 <__alt_data_end+0xfe0064e8>
 40064f8:	38c00144 	addi	r3,r7,5
 40064fc:	18c7883a 	add	r3,r3,r3
 4006500:	18c7883a 	add	r3,r3,r3
 4006504:	10c7883a 	add	r3,r2,r3
 4006508:	92000417 	ldw	r8,16(r18)
 400650c:	a18007cc 	andi	r6,r20,31
 4006510:	91c00504 	addi	r7,r18,20
 4006514:	42000144 	addi	r8,r8,5
 4006518:	4211883a 	add	r8,r8,r8
 400651c:	4211883a 	add	r8,r8,r8
 4006520:	9211883a 	add	r8,r18,r8
 4006524:	30002226 	beq	r6,zero,40065b0 <__lshift+0x130>
 4006528:	02800804 	movi	r10,32
 400652c:	5195c83a 	sub	r10,r10,r6
 4006530:	000b883a 	mov	r5,zero
 4006534:	3a400017 	ldw	r9,0(r7)
 4006538:	18c00104 	addi	r3,r3,4
 400653c:	39c00104 	addi	r7,r7,4
 4006540:	4992983a 	sll	r9,r9,r6
 4006544:	2a4ab03a 	or	r5,r5,r9
 4006548:	197fff15 	stw	r5,-4(r3)
 400654c:	397fff17 	ldw	r5,-4(r7)
 4006550:	2a8ad83a 	srl	r5,r5,r10
 4006554:	3a3ff736 	bltu	r7,r8,4006534 <__alt_data_end+0xfe006534>
 4006558:	19400015 	stw	r5,0(r3)
 400655c:	28000126 	beq	r5,zero,4006564 <__lshift+0xe4>
 4006560:	ac000084 	addi	r16,r21,2
 4006564:	91000117 	ldw	r4,4(r18)
 4006568:	98c01317 	ldw	r3,76(r19)
 400656c:	843fffc4 	addi	r16,r16,-1
 4006570:	2109883a 	add	r4,r4,r4
 4006574:	2109883a 	add	r4,r4,r4
 4006578:	1907883a 	add	r3,r3,r4
 400657c:	19000017 	ldw	r4,0(r3)
 4006580:	14000415 	stw	r16,16(r2)
 4006584:	91000015 	stw	r4,0(r18)
 4006588:	1c800015 	stw	r18,0(r3)
 400658c:	dfc00617 	ldw	ra,24(sp)
 4006590:	dd400517 	ldw	r21,20(sp)
 4006594:	dd000417 	ldw	r20,16(sp)
 4006598:	dcc00317 	ldw	r19,12(sp)
 400659c:	dc800217 	ldw	r18,8(sp)
 40065a0:	dc400117 	ldw	r17,4(sp)
 40065a4:	dc000017 	ldw	r16,0(sp)
 40065a8:	dec00704 	addi	sp,sp,28
 40065ac:	f800283a 	ret
 40065b0:	39400017 	ldw	r5,0(r7)
 40065b4:	18c00104 	addi	r3,r3,4
 40065b8:	39c00104 	addi	r7,r7,4
 40065bc:	197fff15 	stw	r5,-4(r3)
 40065c0:	3a3fe82e 	bgeu	r7,r8,4006564 <__alt_data_end+0xfe006564>
 40065c4:	39400017 	ldw	r5,0(r7)
 40065c8:	18c00104 	addi	r3,r3,4
 40065cc:	39c00104 	addi	r7,r7,4
 40065d0:	197fff15 	stw	r5,-4(r3)
 40065d4:	3a3ff636 	bltu	r7,r8,40065b0 <__alt_data_end+0xfe0065b0>
 40065d8:	003fe206 	br	4006564 <__alt_data_end+0xfe006564>

040065dc <__mcmp>:
 40065dc:	20800417 	ldw	r2,16(r4)
 40065e0:	28c00417 	ldw	r3,16(r5)
 40065e4:	10c5c83a 	sub	r2,r2,r3
 40065e8:	10000f1e 	bne	r2,zero,4006628 <__mcmp+0x4c>
 40065ec:	18c00144 	addi	r3,r3,5
 40065f0:	18c7883a 	add	r3,r3,r3
 40065f4:	18c7883a 	add	r3,r3,r3
 40065f8:	21c00504 	addi	r7,r4,20
 40065fc:	28cb883a 	add	r5,r5,r3
 4006600:	20c9883a 	add	r4,r4,r3
 4006604:	213fff04 	addi	r4,r4,-4
 4006608:	297fff04 	addi	r5,r5,-4
 400660c:	21800017 	ldw	r6,0(r4)
 4006610:	28c00017 	ldw	r3,0(r5)
 4006614:	30c0021e 	bne	r6,r3,4006620 <__mcmp+0x44>
 4006618:	393ffa36 	bltu	r7,r4,4006604 <__alt_data_end+0xfe006604>
 400661c:	f800283a 	ret
 4006620:	30c00236 	bltu	r6,r3,400662c <__mcmp+0x50>
 4006624:	00800044 	movi	r2,1
 4006628:	f800283a 	ret
 400662c:	00bfffc4 	movi	r2,-1
 4006630:	f800283a 	ret

04006634 <__mdiff>:
 4006634:	defffb04 	addi	sp,sp,-20
 4006638:	dc000015 	stw	r16,0(sp)
 400663c:	2821883a 	mov	r16,r5
 4006640:	dc800215 	stw	r18,8(sp)
 4006644:	300b883a 	mov	r5,r6
 4006648:	2025883a 	mov	r18,r4
 400664c:	8009883a 	mov	r4,r16
 4006650:	dc400115 	stw	r17,4(sp)
 4006654:	dfc00415 	stw	ra,16(sp)
 4006658:	dcc00315 	stw	r19,12(sp)
 400665c:	3023883a 	mov	r17,r6
 4006660:	40065dc0 	call	40065dc <__mcmp>
 4006664:	10005026 	beq	r2,zero,40067a8 <__mdiff+0x174>
 4006668:	10004a16 	blt	r2,zero,4006794 <__mdiff+0x160>
 400666c:	0027883a 	mov	r19,zero
 4006670:	81400117 	ldw	r5,4(r16)
 4006674:	9009883a 	mov	r4,r18
 4006678:	4005c900 	call	4005c90 <_Balloc>
 400667c:	82400417 	ldw	r9,16(r16)
 4006680:	89800417 	ldw	r6,16(r17)
 4006684:	14c00315 	stw	r19,12(r2)
 4006688:	4b800144 	addi	r14,r9,5
 400668c:	31800144 	addi	r6,r6,5
 4006690:	739d883a 	add	r14,r14,r14
 4006694:	318d883a 	add	r6,r6,r6
 4006698:	739d883a 	add	r14,r14,r14
 400669c:	318d883a 	add	r6,r6,r6
 40066a0:	81c00504 	addi	r7,r16,20
 40066a4:	839d883a 	add	r14,r16,r14
 40066a8:	8a000504 	addi	r8,r17,20
 40066ac:	898d883a 	add	r6,r17,r6
 40066b0:	10c00504 	addi	r3,r2,20
 40066b4:	0009883a 	mov	r4,zero
 40066b8:	3b000017 	ldw	r12,0(r7)
 40066bc:	42c00017 	ldw	r11,0(r8)
 40066c0:	42000104 	addi	r8,r8,4
 40066c4:	62bfffcc 	andi	r10,r12,65535
 40066c8:	5b7fffcc 	andi	r13,r11,65535
 40066cc:	5109883a 	add	r4,r10,r4
 40066d0:	2355c83a 	sub	r10,r4,r13
 40066d4:	5816d43a 	srli	r11,r11,16
 40066d8:	6008d43a 	srli	r4,r12,16
 40066dc:	501bd43a 	srai	r13,r10,16
 40066e0:	1a80000d 	sth	r10,0(r3)
 40066e4:	22c9c83a 	sub	r4,r4,r11
 40066e8:	2349883a 	add	r4,r4,r13
 40066ec:	1900008d 	sth	r4,2(r3)
 40066f0:	39c00104 	addi	r7,r7,4
 40066f4:	2009d43a 	srai	r4,r4,16
 40066f8:	18c00104 	addi	r3,r3,4
 40066fc:	41bfee36 	bltu	r8,r6,40066b8 <__alt_data_end+0xfe0066b8>
 4006700:	180b883a 	mov	r5,r3
 4006704:	3815883a 	mov	r10,r7
 4006708:	3b80132e 	bgeu	r7,r14,4006758 <__mdiff+0x124>
 400670c:	3a000017 	ldw	r8,0(r7)
 4006710:	18c00104 	addi	r3,r3,4
 4006714:	39c00104 	addi	r7,r7,4
 4006718:	41bfffcc 	andi	r6,r8,65535
 400671c:	310d883a 	add	r6,r6,r4
 4006720:	3009d43a 	srai	r4,r6,16
 4006724:	4010d43a 	srli	r8,r8,16
 4006728:	19bfff0d 	sth	r6,-4(r3)
 400672c:	2209883a 	add	r4,r4,r8
 4006730:	193fff8d 	sth	r4,-2(r3)
 4006734:	2009d43a 	srai	r4,r4,16
 4006738:	3bbff436 	bltu	r7,r14,400670c <__alt_data_end+0xfe00670c>
 400673c:	0286303a 	nor	r3,zero,r10
 4006740:	1b87883a 	add	r3,r3,r14
 4006744:	1806d0ba 	srli	r3,r3,2
 4006748:	18c00044 	addi	r3,r3,1
 400674c:	18c7883a 	add	r3,r3,r3
 4006750:	18c7883a 	add	r3,r3,r3
 4006754:	28c7883a 	add	r3,r5,r3
 4006758:	193fff17 	ldw	r4,-4(r3)
 400675c:	18ffff04 	addi	r3,r3,-4
 4006760:	2000041e 	bne	r4,zero,4006774 <__mdiff+0x140>
 4006764:	18ffff04 	addi	r3,r3,-4
 4006768:	19000017 	ldw	r4,0(r3)
 400676c:	4a7fffc4 	addi	r9,r9,-1
 4006770:	203ffc26 	beq	r4,zero,4006764 <__alt_data_end+0xfe006764>
 4006774:	12400415 	stw	r9,16(r2)
 4006778:	dfc00417 	ldw	ra,16(sp)
 400677c:	dcc00317 	ldw	r19,12(sp)
 4006780:	dc800217 	ldw	r18,8(sp)
 4006784:	dc400117 	ldw	r17,4(sp)
 4006788:	dc000017 	ldw	r16,0(sp)
 400678c:	dec00504 	addi	sp,sp,20
 4006790:	f800283a 	ret
 4006794:	8005883a 	mov	r2,r16
 4006798:	04c00044 	movi	r19,1
 400679c:	8821883a 	mov	r16,r17
 40067a0:	1023883a 	mov	r17,r2
 40067a4:	003fb206 	br	4006670 <__alt_data_end+0xfe006670>
 40067a8:	9009883a 	mov	r4,r18
 40067ac:	000b883a 	mov	r5,zero
 40067b0:	4005c900 	call	4005c90 <_Balloc>
 40067b4:	00c00044 	movi	r3,1
 40067b8:	10c00415 	stw	r3,16(r2)
 40067bc:	10000515 	stw	zero,20(r2)
 40067c0:	dfc00417 	ldw	ra,16(sp)
 40067c4:	dcc00317 	ldw	r19,12(sp)
 40067c8:	dc800217 	ldw	r18,8(sp)
 40067cc:	dc400117 	ldw	r17,4(sp)
 40067d0:	dc000017 	ldw	r16,0(sp)
 40067d4:	dec00504 	addi	sp,sp,20
 40067d8:	f800283a 	ret

040067dc <__ulp>:
 40067dc:	295ffc2c 	andhi	r5,r5,32752
 40067e0:	00bf3034 	movhi	r2,64704
 40067e4:	2887883a 	add	r3,r5,r2
 40067e8:	00c0020e 	bge	zero,r3,40067f4 <__ulp+0x18>
 40067ec:	0005883a 	mov	r2,zero
 40067f0:	f800283a 	ret
 40067f4:	00c7c83a 	sub	r3,zero,r3
 40067f8:	1805d53a 	srai	r2,r3,20
 40067fc:	00c004c4 	movi	r3,19
 4006800:	18800a0e 	bge	r3,r2,400682c <__ulp+0x50>
 4006804:	01000c84 	movi	r4,50
 4006808:	0007883a 	mov	r3,zero
 400680c:	20800516 	blt	r4,r2,4006824 <__ulp+0x48>
 4006810:	01000cc4 	movi	r4,51
 4006814:	2085c83a 	sub	r2,r4,r2
 4006818:	01000044 	movi	r4,1
 400681c:	2084983a 	sll	r2,r4,r2
 4006820:	f800283a 	ret
 4006824:	00800044 	movi	r2,1
 4006828:	f800283a 	ret
 400682c:	00c00234 	movhi	r3,8
 4006830:	1887d83a 	sra	r3,r3,r2
 4006834:	0005883a 	mov	r2,zero
 4006838:	f800283a 	ret

0400683c <__b2d>:
 400683c:	defffa04 	addi	sp,sp,-24
 4006840:	dc000015 	stw	r16,0(sp)
 4006844:	24000417 	ldw	r16,16(r4)
 4006848:	dc400115 	stw	r17,4(sp)
 400684c:	dcc00315 	stw	r19,12(sp)
 4006850:	84000144 	addi	r16,r16,5
 4006854:	8421883a 	add	r16,r16,r16
 4006858:	8421883a 	add	r16,r16,r16
 400685c:	2421883a 	add	r16,r4,r16
 4006860:	847fff17 	ldw	r17,-4(r16)
 4006864:	24c00504 	addi	r19,r4,20
 4006868:	dd000415 	stw	r20,16(sp)
 400686c:	8809883a 	mov	r4,r17
 4006870:	dc800215 	stw	r18,8(sp)
 4006874:	2829883a 	mov	r20,r5
 4006878:	dfc00515 	stw	ra,20(sp)
 400687c:	4005fa80 	call	4005fa8 <__hi0bits>
 4006880:	00c00804 	movi	r3,32
 4006884:	1887c83a 	sub	r3,r3,r2
 4006888:	a0c00015 	stw	r3,0(r20)
 400688c:	00c00284 	movi	r3,10
 4006890:	84bfff04 	addi	r18,r16,-4
 4006894:	18801216 	blt	r3,r2,40068e0 <__b2d+0xa4>
 4006898:	010002c4 	movi	r4,11
 400689c:	2089c83a 	sub	r4,r4,r2
 40068a0:	8906d83a 	srl	r3,r17,r4
 40068a4:	18cffc34 	orhi	r3,r3,16368
 40068a8:	9c80322e 	bgeu	r19,r18,4006974 <__b2d+0x138>
 40068ac:	817ffe17 	ldw	r5,-8(r16)
 40068b0:	2908d83a 	srl	r4,r5,r4
 40068b4:	10800544 	addi	r2,r2,21
 40068b8:	88a2983a 	sll	r17,r17,r2
 40068bc:	2444b03a 	or	r2,r4,r17
 40068c0:	dfc00517 	ldw	ra,20(sp)
 40068c4:	dd000417 	ldw	r20,16(sp)
 40068c8:	dcc00317 	ldw	r19,12(sp)
 40068cc:	dc800217 	ldw	r18,8(sp)
 40068d0:	dc400117 	ldw	r17,4(sp)
 40068d4:	dc000017 	ldw	r16,0(sp)
 40068d8:	dec00604 	addi	sp,sp,24
 40068dc:	f800283a 	ret
 40068e0:	9c801636 	bltu	r19,r18,400693c <__b2d+0x100>
 40068e4:	113ffd44 	addi	r4,r2,-11
 40068e8:	000b883a 	mov	r5,zero
 40068ec:	20001726 	beq	r4,zero,400694c <__b2d+0x110>
 40068f0:	00c00ac4 	movi	r3,43
 40068f4:	1885c83a 	sub	r2,r3,r2
 40068f8:	8906983a 	sll	r3,r17,r4
 40068fc:	288cd83a 	srl	r6,r5,r2
 4006900:	18cffc34 	orhi	r3,r3,16368
 4006904:	1986b03a 	or	r3,r3,r6
 4006908:	9c801c2e 	bgeu	r19,r18,400697c <__b2d+0x140>
 400690c:	91bfff17 	ldw	r6,-4(r18)
 4006910:	3084d83a 	srl	r2,r6,r2
 4006914:	2908983a 	sll	r4,r5,r4
 4006918:	1104b03a 	or	r2,r2,r4
 400691c:	dfc00517 	ldw	ra,20(sp)
 4006920:	dd000417 	ldw	r20,16(sp)
 4006924:	dcc00317 	ldw	r19,12(sp)
 4006928:	dc800217 	ldw	r18,8(sp)
 400692c:	dc400117 	ldw	r17,4(sp)
 4006930:	dc000017 	ldw	r16,0(sp)
 4006934:	dec00604 	addi	sp,sp,24
 4006938:	f800283a 	ret
 400693c:	113ffd44 	addi	r4,r2,-11
 4006940:	84bffe04 	addi	r18,r16,-8
 4006944:	817ffe17 	ldw	r5,-8(r16)
 4006948:	203fe91e 	bne	r4,zero,40068f0 <__alt_data_end+0xfe0068f0>
 400694c:	88cffc34 	orhi	r3,r17,16368
 4006950:	2805883a 	mov	r2,r5
 4006954:	dfc00517 	ldw	ra,20(sp)
 4006958:	dd000417 	ldw	r20,16(sp)
 400695c:	dcc00317 	ldw	r19,12(sp)
 4006960:	dc800217 	ldw	r18,8(sp)
 4006964:	dc400117 	ldw	r17,4(sp)
 4006968:	dc000017 	ldw	r16,0(sp)
 400696c:	dec00604 	addi	sp,sp,24
 4006970:	f800283a 	ret
 4006974:	0009883a 	mov	r4,zero
 4006978:	003fce06 	br	40068b4 <__alt_data_end+0xfe0068b4>
 400697c:	0005883a 	mov	r2,zero
 4006980:	003fe406 	br	4006914 <__alt_data_end+0xfe006914>

04006984 <__d2b>:
 4006984:	defff804 	addi	sp,sp,-32
 4006988:	dc400315 	stw	r17,12(sp)
 400698c:	3023883a 	mov	r17,r6
 4006990:	dc800415 	stw	r18,16(sp)
 4006994:	8824907a 	slli	r18,r17,1
 4006998:	dcc00515 	stw	r19,20(sp)
 400699c:	2827883a 	mov	r19,r5
 40069a0:	9024d57a 	srli	r18,r18,21
 40069a4:	01400044 	movi	r5,1
 40069a8:	dd000615 	stw	r20,24(sp)
 40069ac:	dc000215 	stw	r16,8(sp)
 40069b0:	dfc00715 	stw	ra,28(sp)
 40069b4:	3829883a 	mov	r20,r7
 40069b8:	4005c900 	call	4005c90 <_Balloc>
 40069bc:	1021883a 	mov	r16,r2
 40069c0:	00800434 	movhi	r2,16
 40069c4:	10bfffc4 	addi	r2,r2,-1
 40069c8:	88a2703a 	and	r17,r17,r2
 40069cc:	90000126 	beq	r18,zero,40069d4 <__d2b+0x50>
 40069d0:	8c400434 	orhi	r17,r17,16
 40069d4:	dc400015 	stw	r17,0(sp)
 40069d8:	98002226 	beq	r19,zero,4006a64 <__d2b+0xe0>
 40069dc:	d9000104 	addi	r4,sp,4
 40069e0:	dcc00115 	stw	r19,4(sp)
 40069e4:	40060100 	call	4006010 <__lo0bits>
 40069e8:	d8c00017 	ldw	r3,0(sp)
 40069ec:	10002d1e 	bne	r2,zero,4006aa4 <__d2b+0x120>
 40069f0:	d9000117 	ldw	r4,4(sp)
 40069f4:	81000515 	stw	r4,20(r16)
 40069f8:	1823003a 	cmpeq	r17,r3,zero
 40069fc:	01000084 	movi	r4,2
 4006a00:	2463c83a 	sub	r17,r4,r17
 4006a04:	80c00615 	stw	r3,24(r16)
 4006a08:	84400415 	stw	r17,16(r16)
 4006a0c:	90001d1e 	bne	r18,zero,4006a84 <__d2b+0x100>
 4006a10:	88c00104 	addi	r3,r17,4
 4006a14:	18c7883a 	add	r3,r3,r3
 4006a18:	18c7883a 	add	r3,r3,r3
 4006a1c:	80c7883a 	add	r3,r16,r3
 4006a20:	19000017 	ldw	r4,0(r3)
 4006a24:	10bef384 	addi	r2,r2,-1074
 4006a28:	a0800015 	stw	r2,0(r20)
 4006a2c:	4005fa80 	call	4005fa8 <__hi0bits>
 4006a30:	8822917a 	slli	r17,r17,5
 4006a34:	d8c00817 	ldw	r3,32(sp)
 4006a38:	8885c83a 	sub	r2,r17,r2
 4006a3c:	18800015 	stw	r2,0(r3)
 4006a40:	8005883a 	mov	r2,r16
 4006a44:	dfc00717 	ldw	ra,28(sp)
 4006a48:	dd000617 	ldw	r20,24(sp)
 4006a4c:	dcc00517 	ldw	r19,20(sp)
 4006a50:	dc800417 	ldw	r18,16(sp)
 4006a54:	dc400317 	ldw	r17,12(sp)
 4006a58:	dc000217 	ldw	r16,8(sp)
 4006a5c:	dec00804 	addi	sp,sp,32
 4006a60:	f800283a 	ret
 4006a64:	d809883a 	mov	r4,sp
 4006a68:	40060100 	call	4006010 <__lo0bits>
 4006a6c:	d8c00017 	ldw	r3,0(sp)
 4006a70:	04400044 	movi	r17,1
 4006a74:	84400415 	stw	r17,16(r16)
 4006a78:	80c00515 	stw	r3,20(r16)
 4006a7c:	10800804 	addi	r2,r2,32
 4006a80:	903fe326 	beq	r18,zero,4006a10 <__alt_data_end+0xfe006a10>
 4006a84:	00c00d44 	movi	r3,53
 4006a88:	94bef344 	addi	r18,r18,-1075
 4006a8c:	90a5883a 	add	r18,r18,r2
 4006a90:	1885c83a 	sub	r2,r3,r2
 4006a94:	d8c00817 	ldw	r3,32(sp)
 4006a98:	a4800015 	stw	r18,0(r20)
 4006a9c:	18800015 	stw	r2,0(r3)
 4006aa0:	003fe706 	br	4006a40 <__alt_data_end+0xfe006a40>
 4006aa4:	01000804 	movi	r4,32
 4006aa8:	2089c83a 	sub	r4,r4,r2
 4006aac:	1908983a 	sll	r4,r3,r4
 4006ab0:	d9400117 	ldw	r5,4(sp)
 4006ab4:	1886d83a 	srl	r3,r3,r2
 4006ab8:	2148b03a 	or	r4,r4,r5
 4006abc:	81000515 	stw	r4,20(r16)
 4006ac0:	d8c00015 	stw	r3,0(sp)
 4006ac4:	003fcc06 	br	40069f8 <__alt_data_end+0xfe0069f8>

04006ac8 <__ratio>:
 4006ac8:	defff904 	addi	sp,sp,-28
 4006acc:	dc400315 	stw	r17,12(sp)
 4006ad0:	2823883a 	mov	r17,r5
 4006ad4:	d9400104 	addi	r5,sp,4
 4006ad8:	dfc00615 	stw	ra,24(sp)
 4006adc:	dcc00515 	stw	r19,20(sp)
 4006ae0:	dc800415 	stw	r18,16(sp)
 4006ae4:	2027883a 	mov	r19,r4
 4006ae8:	dc000215 	stw	r16,8(sp)
 4006aec:	400683c0 	call	400683c <__b2d>
 4006af0:	8809883a 	mov	r4,r17
 4006af4:	d80b883a 	mov	r5,sp
 4006af8:	1025883a 	mov	r18,r2
 4006afc:	1821883a 	mov	r16,r3
 4006b00:	400683c0 	call	400683c <__b2d>
 4006b04:	99400417 	ldw	r5,16(r19)
 4006b08:	89000417 	ldw	r4,16(r17)
 4006b0c:	d9800117 	ldw	r6,4(sp)
 4006b10:	2909c83a 	sub	r4,r5,r4
 4006b14:	d9400017 	ldw	r5,0(sp)
 4006b18:	2008917a 	slli	r4,r4,5
 4006b1c:	314bc83a 	sub	r5,r6,r5
 4006b20:	290b883a 	add	r5,r5,r4
 4006b24:	01400e0e 	bge	zero,r5,4006b60 <__ratio+0x98>
 4006b28:	280a953a 	slli	r5,r5,20
 4006b2c:	2c21883a 	add	r16,r5,r16
 4006b30:	9009883a 	mov	r4,r18
 4006b34:	800b883a 	mov	r5,r16
 4006b38:	100d883a 	mov	r6,r2
 4006b3c:	180f883a 	mov	r7,r3
 4006b40:	4008d7c0 	call	4008d7c <__divdf3>
 4006b44:	dfc00617 	ldw	ra,24(sp)
 4006b48:	dcc00517 	ldw	r19,20(sp)
 4006b4c:	dc800417 	ldw	r18,16(sp)
 4006b50:	dc400317 	ldw	r17,12(sp)
 4006b54:	dc000217 	ldw	r16,8(sp)
 4006b58:	dec00704 	addi	sp,sp,28
 4006b5c:	f800283a 	ret
 4006b60:	280a953a 	slli	r5,r5,20
 4006b64:	1947c83a 	sub	r3,r3,r5
 4006b68:	003ff106 	br	4006b30 <__alt_data_end+0xfe006b30>

04006b6c <_mprec_log10>:
 4006b6c:	defffe04 	addi	sp,sp,-8
 4006b70:	dc000015 	stw	r16,0(sp)
 4006b74:	dfc00115 	stw	ra,4(sp)
 4006b78:	008005c4 	movi	r2,23
 4006b7c:	2021883a 	mov	r16,r4
 4006b80:	11000d0e 	bge	r2,r4,4006bb8 <_mprec_log10+0x4c>
 4006b84:	0005883a 	mov	r2,zero
 4006b88:	00cffc34 	movhi	r3,16368
 4006b8c:	843fffc4 	addi	r16,r16,-1
 4006b90:	1009883a 	mov	r4,r2
 4006b94:	180b883a 	mov	r5,r3
 4006b98:	000d883a 	mov	r6,zero
 4006b9c:	01d00934 	movhi	r7,16420
 4006ba0:	4008a980 	call	4008a98 <__muldf3>
 4006ba4:	803ff91e 	bne	r16,zero,4006b8c <__alt_data_end+0xfe006b8c>
 4006ba8:	dfc00117 	ldw	ra,4(sp)
 4006bac:	dc000017 	ldw	r16,0(sp)
 4006bb0:	dec00204 	addi	sp,sp,8
 4006bb4:	f800283a 	ret
 4006bb8:	202090fa 	slli	r16,r4,3
 4006bbc:	00810074 	movhi	r2,1025
 4006bc0:	10b0e004 	addi	r2,r2,-15488
 4006bc4:	1421883a 	add	r16,r2,r16
 4006bc8:	80800017 	ldw	r2,0(r16)
 4006bcc:	80c00117 	ldw	r3,4(r16)
 4006bd0:	dfc00117 	ldw	ra,4(sp)
 4006bd4:	dc000017 	ldw	r16,0(sp)
 4006bd8:	dec00204 	addi	sp,sp,8
 4006bdc:	f800283a 	ret

04006be0 <__copybits>:
 4006be0:	297fffc4 	addi	r5,r5,-1
 4006be4:	31c00417 	ldw	r7,16(r6)
 4006be8:	2811d17a 	srai	r8,r5,5
 4006bec:	30800504 	addi	r2,r6,20
 4006bf0:	39c00144 	addi	r7,r7,5
 4006bf4:	42000044 	addi	r8,r8,1
 4006bf8:	39cf883a 	add	r7,r7,r7
 4006bfc:	4211883a 	add	r8,r8,r8
 4006c00:	39cf883a 	add	r7,r7,r7
 4006c04:	4211883a 	add	r8,r8,r8
 4006c08:	31cf883a 	add	r7,r6,r7
 4006c0c:	2211883a 	add	r8,r4,r8
 4006c10:	11c00d2e 	bgeu	r2,r7,4006c48 <__copybits+0x68>
 4006c14:	2007883a 	mov	r3,r4
 4006c18:	11400017 	ldw	r5,0(r2)
 4006c1c:	18c00104 	addi	r3,r3,4
 4006c20:	10800104 	addi	r2,r2,4
 4006c24:	197fff15 	stw	r5,-4(r3)
 4006c28:	11fffb36 	bltu	r2,r7,4006c18 <__alt_data_end+0xfe006c18>
 4006c2c:	3985c83a 	sub	r2,r7,r6
 4006c30:	10bffac4 	addi	r2,r2,-21
 4006c34:	1004d0ba 	srli	r2,r2,2
 4006c38:	10800044 	addi	r2,r2,1
 4006c3c:	1085883a 	add	r2,r2,r2
 4006c40:	1085883a 	add	r2,r2,r2
 4006c44:	2089883a 	add	r4,r4,r2
 4006c48:	2200032e 	bgeu	r4,r8,4006c58 <__copybits+0x78>
 4006c4c:	20000015 	stw	zero,0(r4)
 4006c50:	21000104 	addi	r4,r4,4
 4006c54:	223ffd36 	bltu	r4,r8,4006c4c <__alt_data_end+0xfe006c4c>
 4006c58:	f800283a 	ret

04006c5c <__any_on>:
 4006c5c:	21800417 	ldw	r6,16(r4)
 4006c60:	2805d17a 	srai	r2,r5,5
 4006c64:	20c00504 	addi	r3,r4,20
 4006c68:	30800f0e 	bge	r6,r2,4006ca8 <__any_on+0x4c>
 4006c6c:	3005883a 	mov	r2,r6
 4006c70:	10800144 	addi	r2,r2,5
 4006c74:	1085883a 	add	r2,r2,r2
 4006c78:	1085883a 	add	r2,r2,r2
 4006c7c:	2089883a 	add	r4,r4,r2
 4006c80:	1900152e 	bgeu	r3,r4,4006cd8 <__any_on+0x7c>
 4006c84:	20bfff17 	ldw	r2,-4(r4)
 4006c88:	213fff04 	addi	r4,r4,-4
 4006c8c:	1000041e 	bne	r2,zero,4006ca0 <__any_on+0x44>
 4006c90:	1900112e 	bgeu	r3,r4,4006cd8 <__any_on+0x7c>
 4006c94:	213fff04 	addi	r4,r4,-4
 4006c98:	20800017 	ldw	r2,0(r4)
 4006c9c:	103ffc26 	beq	r2,zero,4006c90 <__alt_data_end+0xfe006c90>
 4006ca0:	00800044 	movi	r2,1
 4006ca4:	f800283a 	ret
 4006ca8:	11bff10e 	bge	r2,r6,4006c70 <__alt_data_end+0xfe006c70>
 4006cac:	294007cc 	andi	r5,r5,31
 4006cb0:	283fef26 	beq	r5,zero,4006c70 <__alt_data_end+0xfe006c70>
 4006cb4:	11800144 	addi	r6,r2,5
 4006cb8:	318d883a 	add	r6,r6,r6
 4006cbc:	318d883a 	add	r6,r6,r6
 4006cc0:	218d883a 	add	r6,r4,r6
 4006cc4:	31800017 	ldw	r6,0(r6)
 4006cc8:	314ed83a 	srl	r7,r6,r5
 4006ccc:	394a983a 	sll	r5,r7,r5
 4006cd0:	29bff31e 	bne	r5,r6,4006ca0 <__alt_data_end+0xfe006ca0>
 4006cd4:	003fe606 	br	4006c70 <__alt_data_end+0xfe006c70>
 4006cd8:	0005883a 	mov	r2,zero
 4006cdc:	f800283a 	ret

04006ce0 <_realloc_r>:
 4006ce0:	defff504 	addi	sp,sp,-44
 4006ce4:	dd400615 	stw	r21,24(sp)
 4006ce8:	dc800315 	stw	r18,12(sp)
 4006cec:	dc000115 	stw	r16,4(sp)
 4006cf0:	dfc00a15 	stw	ra,40(sp)
 4006cf4:	df000915 	stw	fp,36(sp)
 4006cf8:	ddc00815 	stw	r23,32(sp)
 4006cfc:	dd800715 	stw	r22,28(sp)
 4006d00:	dd000515 	stw	r20,20(sp)
 4006d04:	dcc00415 	stw	r19,16(sp)
 4006d08:	dc400215 	stw	r17,8(sp)
 4006d0c:	2821883a 	mov	r16,r5
 4006d10:	202b883a 	mov	r21,r4
 4006d14:	3025883a 	mov	r18,r6
 4006d18:	28009626 	beq	r5,zero,4006f74 <_realloc_r+0x294>
 4006d1c:	400a1180 	call	400a118 <__malloc_lock>
 4006d20:	80bfff17 	ldw	r2,-4(r16)
 4006d24:	04ffff04 	movi	r19,-4
 4006d28:	90c002c4 	addi	r3,r18,11
 4006d2c:	01000584 	movi	r4,22
 4006d30:	85bffe04 	addi	r22,r16,-8
 4006d34:	14e6703a 	and	r19,r2,r19
 4006d38:	20c0372e 	bgeu	r4,r3,4006e18 <_realloc_r+0x138>
 4006d3c:	047ffe04 	movi	r17,-8
 4006d40:	1c62703a 	and	r17,r3,r17
 4006d44:	8807883a 	mov	r3,r17
 4006d48:	88005a16 	blt	r17,zero,4006eb4 <_realloc_r+0x1d4>
 4006d4c:	8c805936 	bltu	r17,r18,4006eb4 <_realloc_r+0x1d4>
 4006d50:	98c0340e 	bge	r19,r3,4006e24 <_realloc_r+0x144>
 4006d54:	07010074 	movhi	fp,1025
 4006d58:	e7326a04 	addi	fp,fp,-13912
 4006d5c:	e1400217 	ldw	r5,8(fp)
 4006d60:	b4c9883a 	add	r4,r22,r19
 4006d64:	29009026 	beq	r5,r4,4006fa8 <_realloc_r+0x2c8>
 4006d68:	21800117 	ldw	r6,4(r4)
 4006d6c:	01ffff84 	movi	r7,-2
 4006d70:	31ce703a 	and	r7,r6,r7
 4006d74:	21cf883a 	add	r7,r4,r7
 4006d78:	39c00117 	ldw	r7,4(r7)
 4006d7c:	39c0004c 	andi	r7,r7,1
 4006d80:	38004326 	beq	r7,zero,4006e90 <_realloc_r+0x1b0>
 4006d84:	000d883a 	mov	r6,zero
 4006d88:	0009883a 	mov	r4,zero
 4006d8c:	1080004c 	andi	r2,r2,1
 4006d90:	10005a1e 	bne	r2,zero,4006efc <_realloc_r+0x21c>
 4006d94:	85fffe17 	ldw	r23,-8(r16)
 4006d98:	00bfff04 	movi	r2,-4
 4006d9c:	b5efc83a 	sub	r23,r22,r23
 4006da0:	b9c00117 	ldw	r7,4(r23)
 4006da4:	388e703a 	and	r7,r7,r2
 4006da8:	3ccf883a 	add	r7,r7,r19
 4006dac:	20005226 	beq	r4,zero,4006ef8 <_realloc_r+0x218>
 4006db0:	31e9883a 	add	r20,r6,r7
 4006db4:	2140c726 	beq	r4,r5,40070d4 <_realloc_r+0x3f4>
 4006db8:	a0c04f16 	blt	r20,r3,4006ef8 <_realloc_r+0x218>
 4006dbc:	20800317 	ldw	r2,12(r4)
 4006dc0:	20c00217 	ldw	r3,8(r4)
 4006dc4:	99bfff04 	addi	r6,r19,-4
 4006dc8:	01000904 	movi	r4,36
 4006dcc:	18800315 	stw	r2,12(r3)
 4006dd0:	10c00215 	stw	r3,8(r2)
 4006dd4:	b8c00217 	ldw	r3,8(r23)
 4006dd8:	b8800317 	ldw	r2,12(r23)
 4006ddc:	bc800204 	addi	r18,r23,8
 4006de0:	18800315 	stw	r2,12(r3)
 4006de4:	10c00215 	stw	r3,8(r2)
 4006de8:	2180ed36 	bltu	r4,r6,40071a0 <_realloc_r+0x4c0>
 4006dec:	008004c4 	movi	r2,19
 4006df0:	11809b2e 	bgeu	r2,r6,4007060 <_realloc_r+0x380>
 4006df4:	80800017 	ldw	r2,0(r16)
 4006df8:	b8800215 	stw	r2,8(r23)
 4006dfc:	80800117 	ldw	r2,4(r16)
 4006e00:	b8800315 	stw	r2,12(r23)
 4006e04:	008006c4 	movi	r2,27
 4006e08:	1180f936 	bltu	r2,r6,40071f0 <_realloc_r+0x510>
 4006e0c:	b8800404 	addi	r2,r23,16
 4006e10:	80c00204 	addi	r3,r16,8
 4006e14:	00009406 	br	4007068 <_realloc_r+0x388>
 4006e18:	00c00404 	movi	r3,16
 4006e1c:	1823883a 	mov	r17,r3
 4006e20:	003fca06 	br	4006d4c <__alt_data_end+0xfe006d4c>
 4006e24:	9829883a 	mov	r20,r19
 4006e28:	a447c83a 	sub	r3,r20,r17
 4006e2c:	010003c4 	movi	r4,15
 4006e30:	1080004c 	andi	r2,r2,1
 4006e34:	20c02336 	bltu	r4,r3,4006ec4 <_realloc_r+0x1e4>
 4006e38:	1504b03a 	or	r2,r2,r20
 4006e3c:	b0800115 	stw	r2,4(r22)
 4006e40:	b52d883a 	add	r22,r22,r20
 4006e44:	b0800117 	ldw	r2,4(r22)
 4006e48:	10800054 	ori	r2,r2,1
 4006e4c:	b0800115 	stw	r2,4(r22)
 4006e50:	a809883a 	mov	r4,r21
 4006e54:	400a1380 	call	400a138 <__malloc_unlock>
 4006e58:	8025883a 	mov	r18,r16
 4006e5c:	9005883a 	mov	r2,r18
 4006e60:	dfc00a17 	ldw	ra,40(sp)
 4006e64:	df000917 	ldw	fp,36(sp)
 4006e68:	ddc00817 	ldw	r23,32(sp)
 4006e6c:	dd800717 	ldw	r22,28(sp)
 4006e70:	dd400617 	ldw	r21,24(sp)
 4006e74:	dd000517 	ldw	r20,20(sp)
 4006e78:	dcc00417 	ldw	r19,16(sp)
 4006e7c:	dc800317 	ldw	r18,12(sp)
 4006e80:	dc400217 	ldw	r17,8(sp)
 4006e84:	dc000117 	ldw	r16,4(sp)
 4006e88:	dec00b04 	addi	sp,sp,44
 4006e8c:	f800283a 	ret
 4006e90:	01ffff04 	movi	r7,-4
 4006e94:	31cc703a 	and	r6,r6,r7
 4006e98:	34e9883a 	add	r20,r6,r19
 4006e9c:	a0ffbb16 	blt	r20,r3,4006d8c <__alt_data_end+0xfe006d8c>
 4006ea0:	20c00317 	ldw	r3,12(r4)
 4006ea4:	21000217 	ldw	r4,8(r4)
 4006ea8:	20c00315 	stw	r3,12(r4)
 4006eac:	19000215 	stw	r4,8(r3)
 4006eb0:	003fdd06 	br	4006e28 <__alt_data_end+0xfe006e28>
 4006eb4:	00800304 	movi	r2,12
 4006eb8:	a8800015 	stw	r2,0(r21)
 4006ebc:	0025883a 	mov	r18,zero
 4006ec0:	003fe606 	br	4006e5c <__alt_data_end+0xfe006e5c>
 4006ec4:	1444b03a 	or	r2,r2,r17
 4006ec8:	b0800115 	stw	r2,4(r22)
 4006ecc:	b44b883a 	add	r5,r22,r17
 4006ed0:	18800054 	ori	r2,r3,1
 4006ed4:	28800115 	stw	r2,4(r5)
 4006ed8:	28c7883a 	add	r3,r5,r3
 4006edc:	18800117 	ldw	r2,4(r3)
 4006ee0:	a809883a 	mov	r4,r21
 4006ee4:	29400204 	addi	r5,r5,8
 4006ee8:	10800054 	ori	r2,r2,1
 4006eec:	18800115 	stw	r2,4(r3)
 4006ef0:	40044d40 	call	40044d4 <_free_r>
 4006ef4:	003fd606 	br	4006e50 <__alt_data_end+0xfe006e50>
 4006ef8:	38c0330e 	bge	r7,r3,4006fc8 <_realloc_r+0x2e8>
 4006efc:	900b883a 	mov	r5,r18
 4006f00:	a809883a 	mov	r4,r21
 4006f04:	400506c0 	call	400506c <_malloc_r>
 4006f08:	1025883a 	mov	r18,r2
 4006f0c:	10001626 	beq	r2,zero,4006f68 <_realloc_r+0x288>
 4006f10:	80bfff17 	ldw	r2,-4(r16)
 4006f14:	00ffff84 	movi	r3,-2
 4006f18:	913ffe04 	addi	r4,r18,-8
 4006f1c:	10c6703a 	and	r3,r2,r3
 4006f20:	b0c7883a 	add	r3,r22,r3
 4006f24:	20c09926 	beq	r4,r3,400718c <_realloc_r+0x4ac>
 4006f28:	99bfff04 	addi	r6,r19,-4
 4006f2c:	00800904 	movi	r2,36
 4006f30:	11806436 	bltu	r2,r6,40070c4 <_realloc_r+0x3e4>
 4006f34:	00c004c4 	movi	r3,19
 4006f38:	19804036 	bltu	r3,r6,400703c <_realloc_r+0x35c>
 4006f3c:	9005883a 	mov	r2,r18
 4006f40:	8007883a 	mov	r3,r16
 4006f44:	19000017 	ldw	r4,0(r3)
 4006f48:	11000015 	stw	r4,0(r2)
 4006f4c:	19000117 	ldw	r4,4(r3)
 4006f50:	11000115 	stw	r4,4(r2)
 4006f54:	18c00217 	ldw	r3,8(r3)
 4006f58:	10c00215 	stw	r3,8(r2)
 4006f5c:	a809883a 	mov	r4,r21
 4006f60:	800b883a 	mov	r5,r16
 4006f64:	40044d40 	call	40044d4 <_free_r>
 4006f68:	a809883a 	mov	r4,r21
 4006f6c:	400a1380 	call	400a138 <__malloc_unlock>
 4006f70:	003fba06 	br	4006e5c <__alt_data_end+0xfe006e5c>
 4006f74:	300b883a 	mov	r5,r6
 4006f78:	dfc00a17 	ldw	ra,40(sp)
 4006f7c:	df000917 	ldw	fp,36(sp)
 4006f80:	ddc00817 	ldw	r23,32(sp)
 4006f84:	dd800717 	ldw	r22,28(sp)
 4006f88:	dd400617 	ldw	r21,24(sp)
 4006f8c:	dd000517 	ldw	r20,20(sp)
 4006f90:	dcc00417 	ldw	r19,16(sp)
 4006f94:	dc800317 	ldw	r18,12(sp)
 4006f98:	dc400217 	ldw	r17,8(sp)
 4006f9c:	dc000117 	ldw	r16,4(sp)
 4006fa0:	dec00b04 	addi	sp,sp,44
 4006fa4:	400506c1 	jmpi	400506c <_malloc_r>
 4006fa8:	29800117 	ldw	r6,4(r5)
 4006fac:	013fff04 	movi	r4,-4
 4006fb0:	89c00404 	addi	r7,r17,16
 4006fb4:	310c703a 	and	r6,r6,r4
 4006fb8:	34c9883a 	add	r4,r6,r19
 4006fbc:	21c0340e 	bge	r4,r7,4007090 <_realloc_r+0x3b0>
 4006fc0:	2809883a 	mov	r4,r5
 4006fc4:	003f7106 	br	4006d8c <__alt_data_end+0xfe006d8c>
 4006fc8:	b8800317 	ldw	r2,12(r23)
 4006fcc:	b8c00217 	ldw	r3,8(r23)
 4006fd0:	99bfff04 	addi	r6,r19,-4
 4006fd4:	01000904 	movi	r4,36
 4006fd8:	18800315 	stw	r2,12(r3)
 4006fdc:	10c00215 	stw	r3,8(r2)
 4006fe0:	bc800204 	addi	r18,r23,8
 4006fe4:	21807836 	bltu	r4,r6,40071c8 <_realloc_r+0x4e8>
 4006fe8:	008004c4 	movi	r2,19
 4006fec:	1180732e 	bgeu	r2,r6,40071bc <_realloc_r+0x4dc>
 4006ff0:	80800017 	ldw	r2,0(r16)
 4006ff4:	b8800215 	stw	r2,8(r23)
 4006ff8:	80800117 	ldw	r2,4(r16)
 4006ffc:	b8800315 	stw	r2,12(r23)
 4007000:	008006c4 	movi	r2,27
 4007004:	11808936 	bltu	r2,r6,400722c <_realloc_r+0x54c>
 4007008:	b8800404 	addi	r2,r23,16
 400700c:	80c00204 	addi	r3,r16,8
 4007010:	19000017 	ldw	r4,0(r3)
 4007014:	9021883a 	mov	r16,r18
 4007018:	3829883a 	mov	r20,r7
 400701c:	11000015 	stw	r4,0(r2)
 4007020:	19000117 	ldw	r4,4(r3)
 4007024:	b82d883a 	mov	r22,r23
 4007028:	11000115 	stw	r4,4(r2)
 400702c:	18c00217 	ldw	r3,8(r3)
 4007030:	10c00215 	stw	r3,8(r2)
 4007034:	b8800117 	ldw	r2,4(r23)
 4007038:	003f7b06 	br	4006e28 <__alt_data_end+0xfe006e28>
 400703c:	80c00017 	ldw	r3,0(r16)
 4007040:	90c00015 	stw	r3,0(r18)
 4007044:	80c00117 	ldw	r3,4(r16)
 4007048:	90c00115 	stw	r3,4(r18)
 400704c:	00c006c4 	movi	r3,27
 4007050:	19804636 	bltu	r3,r6,400716c <_realloc_r+0x48c>
 4007054:	90800204 	addi	r2,r18,8
 4007058:	80c00204 	addi	r3,r16,8
 400705c:	003fb906 	br	4006f44 <__alt_data_end+0xfe006f44>
 4007060:	9005883a 	mov	r2,r18
 4007064:	8007883a 	mov	r3,r16
 4007068:	19000017 	ldw	r4,0(r3)
 400706c:	9021883a 	mov	r16,r18
 4007070:	b82d883a 	mov	r22,r23
 4007074:	11000015 	stw	r4,0(r2)
 4007078:	19000117 	ldw	r4,4(r3)
 400707c:	11000115 	stw	r4,4(r2)
 4007080:	18c00217 	ldw	r3,8(r3)
 4007084:	10c00215 	stw	r3,8(r2)
 4007088:	b8800117 	ldw	r2,4(r23)
 400708c:	003f6606 	br	4006e28 <__alt_data_end+0xfe006e28>
 4007090:	2445c83a 	sub	r2,r4,r17
 4007094:	b46d883a 	add	r22,r22,r17
 4007098:	10800054 	ori	r2,r2,1
 400709c:	b0800115 	stw	r2,4(r22)
 40070a0:	80bfff17 	ldw	r2,-4(r16)
 40070a4:	a809883a 	mov	r4,r21
 40070a8:	e5800215 	stw	r22,8(fp)
 40070ac:	1080004c 	andi	r2,r2,1
 40070b0:	88a2b03a 	or	r17,r17,r2
 40070b4:	847fff15 	stw	r17,-4(r16)
 40070b8:	400a1380 	call	400a138 <__malloc_unlock>
 40070bc:	8025883a 	mov	r18,r16
 40070c0:	003f6606 	br	4006e5c <__alt_data_end+0xfe006e5c>
 40070c4:	9009883a 	mov	r4,r18
 40070c8:	800b883a 	mov	r5,r16
 40070cc:	4005a280 	call	4005a28 <memmove>
 40070d0:	003fa206 	br	4006f5c <__alt_data_end+0xfe006f5c>
 40070d4:	88800404 	addi	r2,r17,16
 40070d8:	a0bf8716 	blt	r20,r2,4006ef8 <__alt_data_end+0xfe006ef8>
 40070dc:	b8800317 	ldw	r2,12(r23)
 40070e0:	b8c00217 	ldw	r3,8(r23)
 40070e4:	99bfff04 	addi	r6,r19,-4
 40070e8:	01000904 	movi	r4,36
 40070ec:	18800315 	stw	r2,12(r3)
 40070f0:	10c00215 	stw	r3,8(r2)
 40070f4:	bc800204 	addi	r18,r23,8
 40070f8:	21806536 	bltu	r4,r6,4007290 <_realloc_r+0x5b0>
 40070fc:	008004c4 	movi	r2,19
 4007100:	1180592e 	bgeu	r2,r6,4007268 <_realloc_r+0x588>
 4007104:	80800017 	ldw	r2,0(r16)
 4007108:	b8800215 	stw	r2,8(r23)
 400710c:	80800117 	ldw	r2,4(r16)
 4007110:	b8800315 	stw	r2,12(r23)
 4007114:	008006c4 	movi	r2,27
 4007118:	11806136 	bltu	r2,r6,40072a0 <_realloc_r+0x5c0>
 400711c:	b8800404 	addi	r2,r23,16
 4007120:	80c00204 	addi	r3,r16,8
 4007124:	19000017 	ldw	r4,0(r3)
 4007128:	11000015 	stw	r4,0(r2)
 400712c:	19000117 	ldw	r4,4(r3)
 4007130:	11000115 	stw	r4,4(r2)
 4007134:	18c00217 	ldw	r3,8(r3)
 4007138:	10c00215 	stw	r3,8(r2)
 400713c:	a447c83a 	sub	r3,r20,r17
 4007140:	bc45883a 	add	r2,r23,r17
 4007144:	18c00054 	ori	r3,r3,1
 4007148:	10c00115 	stw	r3,4(r2)
 400714c:	b8c00117 	ldw	r3,4(r23)
 4007150:	e0800215 	stw	r2,8(fp)
 4007154:	a809883a 	mov	r4,r21
 4007158:	1880004c 	andi	r2,r3,1
 400715c:	88a2b03a 	or	r17,r17,r2
 4007160:	bc400115 	stw	r17,4(r23)
 4007164:	400a1380 	call	400a138 <__malloc_unlock>
 4007168:	003f3c06 	br	4006e5c <__alt_data_end+0xfe006e5c>
 400716c:	80c00217 	ldw	r3,8(r16)
 4007170:	90c00215 	stw	r3,8(r18)
 4007174:	80c00317 	ldw	r3,12(r16)
 4007178:	90c00315 	stw	r3,12(r18)
 400717c:	30802426 	beq	r6,r2,4007210 <_realloc_r+0x530>
 4007180:	90800404 	addi	r2,r18,16
 4007184:	80c00404 	addi	r3,r16,16
 4007188:	003f6e06 	br	4006f44 <__alt_data_end+0xfe006f44>
 400718c:	953fff17 	ldw	r20,-4(r18)
 4007190:	00ffff04 	movi	r3,-4
 4007194:	a0e8703a 	and	r20,r20,r3
 4007198:	a4e9883a 	add	r20,r20,r19
 400719c:	003f2206 	br	4006e28 <__alt_data_end+0xfe006e28>
 40071a0:	800b883a 	mov	r5,r16
 40071a4:	9009883a 	mov	r4,r18
 40071a8:	4005a280 	call	4005a28 <memmove>
 40071ac:	9021883a 	mov	r16,r18
 40071b0:	b8800117 	ldw	r2,4(r23)
 40071b4:	b82d883a 	mov	r22,r23
 40071b8:	003f1b06 	br	4006e28 <__alt_data_end+0xfe006e28>
 40071bc:	9005883a 	mov	r2,r18
 40071c0:	8007883a 	mov	r3,r16
 40071c4:	003f9206 	br	4007010 <__alt_data_end+0xfe007010>
 40071c8:	800b883a 	mov	r5,r16
 40071cc:	9009883a 	mov	r4,r18
 40071d0:	d9c00015 	stw	r7,0(sp)
 40071d4:	4005a280 	call	4005a28 <memmove>
 40071d8:	d9c00017 	ldw	r7,0(sp)
 40071dc:	9021883a 	mov	r16,r18
 40071e0:	b8800117 	ldw	r2,4(r23)
 40071e4:	3829883a 	mov	r20,r7
 40071e8:	b82d883a 	mov	r22,r23
 40071ec:	003f0e06 	br	4006e28 <__alt_data_end+0xfe006e28>
 40071f0:	80800217 	ldw	r2,8(r16)
 40071f4:	b8800415 	stw	r2,16(r23)
 40071f8:	80800317 	ldw	r2,12(r16)
 40071fc:	b8800515 	stw	r2,20(r23)
 4007200:	31001226 	beq	r6,r4,400724c <_realloc_r+0x56c>
 4007204:	b8800604 	addi	r2,r23,24
 4007208:	80c00404 	addi	r3,r16,16
 400720c:	003f9606 	br	4007068 <__alt_data_end+0xfe007068>
 4007210:	81000417 	ldw	r4,16(r16)
 4007214:	90800604 	addi	r2,r18,24
 4007218:	80c00604 	addi	r3,r16,24
 400721c:	91000415 	stw	r4,16(r18)
 4007220:	81000517 	ldw	r4,20(r16)
 4007224:	91000515 	stw	r4,20(r18)
 4007228:	003f4606 	br	4006f44 <__alt_data_end+0xfe006f44>
 400722c:	80800217 	ldw	r2,8(r16)
 4007230:	b8800415 	stw	r2,16(r23)
 4007234:	80800317 	ldw	r2,12(r16)
 4007238:	b8800515 	stw	r2,20(r23)
 400723c:	31000d26 	beq	r6,r4,4007274 <_realloc_r+0x594>
 4007240:	b8800604 	addi	r2,r23,24
 4007244:	80c00404 	addi	r3,r16,16
 4007248:	003f7106 	br	4007010 <__alt_data_end+0xfe007010>
 400724c:	81000417 	ldw	r4,16(r16)
 4007250:	b8800804 	addi	r2,r23,32
 4007254:	80c00604 	addi	r3,r16,24
 4007258:	b9000615 	stw	r4,24(r23)
 400725c:	81000517 	ldw	r4,20(r16)
 4007260:	b9000715 	stw	r4,28(r23)
 4007264:	003f8006 	br	4007068 <__alt_data_end+0xfe007068>
 4007268:	9005883a 	mov	r2,r18
 400726c:	8007883a 	mov	r3,r16
 4007270:	003fac06 	br	4007124 <__alt_data_end+0xfe007124>
 4007274:	81000417 	ldw	r4,16(r16)
 4007278:	b8800804 	addi	r2,r23,32
 400727c:	80c00604 	addi	r3,r16,24
 4007280:	b9000615 	stw	r4,24(r23)
 4007284:	81000517 	ldw	r4,20(r16)
 4007288:	b9000715 	stw	r4,28(r23)
 400728c:	003f6006 	br	4007010 <__alt_data_end+0xfe007010>
 4007290:	9009883a 	mov	r4,r18
 4007294:	800b883a 	mov	r5,r16
 4007298:	4005a280 	call	4005a28 <memmove>
 400729c:	003fa706 	br	400713c <__alt_data_end+0xfe00713c>
 40072a0:	80800217 	ldw	r2,8(r16)
 40072a4:	b8800415 	stw	r2,16(r23)
 40072a8:	80800317 	ldw	r2,12(r16)
 40072ac:	b8800515 	stw	r2,20(r23)
 40072b0:	31000326 	beq	r6,r4,40072c0 <_realloc_r+0x5e0>
 40072b4:	b8800604 	addi	r2,r23,24
 40072b8:	80c00404 	addi	r3,r16,16
 40072bc:	003f9906 	br	4007124 <__alt_data_end+0xfe007124>
 40072c0:	81000417 	ldw	r4,16(r16)
 40072c4:	b8800804 	addi	r2,r23,32
 40072c8:	80c00604 	addi	r3,r16,24
 40072cc:	b9000615 	stw	r4,24(r23)
 40072d0:	81000517 	ldw	r4,20(r16)
 40072d4:	b9000715 	stw	r4,28(r23)
 40072d8:	003f9206 	br	4007124 <__alt_data_end+0xfe007124>

040072dc <__isinfd>:
 40072dc:	0105c83a 	sub	r2,zero,r4
 40072e0:	1108b03a 	or	r4,r2,r4
 40072e4:	2004d7fa 	srli	r2,r4,31
 40072e8:	00e00034 	movhi	r3,32768
 40072ec:	18ffffc4 	addi	r3,r3,-1
 40072f0:	28ca703a 	and	r5,r5,r3
 40072f4:	1144b03a 	or	r2,r2,r5
 40072f8:	00dffc34 	movhi	r3,32752
 40072fc:	1885c83a 	sub	r2,r3,r2
 4007300:	0087c83a 	sub	r3,zero,r2
 4007304:	1884b03a 	or	r2,r3,r2
 4007308:	1005d7fa 	srai	r2,r2,31
 400730c:	10800044 	addi	r2,r2,1
 4007310:	f800283a 	ret

04007314 <__isnand>:
 4007314:	0105c83a 	sub	r2,zero,r4
 4007318:	1108b03a 	or	r4,r2,r4
 400731c:	2004d7fa 	srli	r2,r4,31
 4007320:	00e00034 	movhi	r3,32768
 4007324:	18ffffc4 	addi	r3,r3,-1
 4007328:	28ca703a 	and	r5,r5,r3
 400732c:	1144b03a 	or	r2,r2,r5
 4007330:	00dffc34 	movhi	r3,32752
 4007334:	1885c83a 	sub	r2,r3,r2
 4007338:	1004d7fa 	srli	r2,r2,31
 400733c:	f800283a 	ret

04007340 <_sbrk_r>:
 4007340:	defffd04 	addi	sp,sp,-12
 4007344:	dc400115 	stw	r17,4(sp)
 4007348:	dc000015 	stw	r16,0(sp)
 400734c:	2023883a 	mov	r17,r4
 4007350:	04010074 	movhi	r16,1025
 4007354:	843e9904 	addi	r16,r16,-1436
 4007358:	2809883a 	mov	r4,r5
 400735c:	dfc00215 	stw	ra,8(sp)
 4007360:	80000015 	stw	zero,0(r16)
 4007364:	400a31c0 	call	400a31c <sbrk>
 4007368:	00ffffc4 	movi	r3,-1
 400736c:	10c00526 	beq	r2,r3,4007384 <_sbrk_r+0x44>
 4007370:	dfc00217 	ldw	ra,8(sp)
 4007374:	dc400117 	ldw	r17,4(sp)
 4007378:	dc000017 	ldw	r16,0(sp)
 400737c:	dec00304 	addi	sp,sp,12
 4007380:	f800283a 	ret
 4007384:	80c00017 	ldw	r3,0(r16)
 4007388:	183ff926 	beq	r3,zero,4007370 <__alt_data_end+0xfe007370>
 400738c:	88c00015 	stw	r3,0(r17)
 4007390:	dfc00217 	ldw	ra,8(sp)
 4007394:	dc400117 	ldw	r17,4(sp)
 4007398:	dc000017 	ldw	r16,0(sp)
 400739c:	dec00304 	addi	sp,sp,12
 40073a0:	f800283a 	ret

040073a4 <__sread>:
 40073a4:	defffe04 	addi	sp,sp,-8
 40073a8:	dc000015 	stw	r16,0(sp)
 40073ac:	2821883a 	mov	r16,r5
 40073b0:	2940038f 	ldh	r5,14(r5)
 40073b4:	dfc00115 	stw	ra,4(sp)
 40073b8:	40079ac0 	call	40079ac <_read_r>
 40073bc:	10000716 	blt	r2,zero,40073dc <__sread+0x38>
 40073c0:	80c01417 	ldw	r3,80(r16)
 40073c4:	1887883a 	add	r3,r3,r2
 40073c8:	80c01415 	stw	r3,80(r16)
 40073cc:	dfc00117 	ldw	ra,4(sp)
 40073d0:	dc000017 	ldw	r16,0(sp)
 40073d4:	dec00204 	addi	sp,sp,8
 40073d8:	f800283a 	ret
 40073dc:	80c0030b 	ldhu	r3,12(r16)
 40073e0:	18fbffcc 	andi	r3,r3,61439
 40073e4:	80c0030d 	sth	r3,12(r16)
 40073e8:	dfc00117 	ldw	ra,4(sp)
 40073ec:	dc000017 	ldw	r16,0(sp)
 40073f0:	dec00204 	addi	sp,sp,8
 40073f4:	f800283a 	ret

040073f8 <__swrite>:
 40073f8:	2880030b 	ldhu	r2,12(r5)
 40073fc:	defffb04 	addi	sp,sp,-20
 4007400:	dcc00315 	stw	r19,12(sp)
 4007404:	10c0400c 	andi	r3,r2,256
 4007408:	18ffffcc 	andi	r3,r3,65535
 400740c:	18e0001c 	xori	r3,r3,32768
 4007410:	dc800215 	stw	r18,8(sp)
 4007414:	dc400115 	stw	r17,4(sp)
 4007418:	dc000015 	stw	r16,0(sp)
 400741c:	dfc00415 	stw	ra,16(sp)
 4007420:	18e00004 	addi	r3,r3,-32768
 4007424:	2821883a 	mov	r16,r5
 4007428:	2027883a 	mov	r19,r4
 400742c:	3025883a 	mov	r18,r6
 4007430:	3823883a 	mov	r17,r7
 4007434:	18000526 	beq	r3,zero,400744c <__swrite+0x54>
 4007438:	2940038f 	ldh	r5,14(r5)
 400743c:	000d883a 	mov	r6,zero
 4007440:	01c00084 	movi	r7,2
 4007444:	40079400 	call	4007940 <_lseek_r>
 4007448:	8080030b 	ldhu	r2,12(r16)
 400744c:	8140038f 	ldh	r5,14(r16)
 4007450:	10bbffcc 	andi	r2,r2,61439
 4007454:	9809883a 	mov	r4,r19
 4007458:	900d883a 	mov	r6,r18
 400745c:	880f883a 	mov	r7,r17
 4007460:	8080030d 	sth	r2,12(r16)
 4007464:	dfc00417 	ldw	ra,16(sp)
 4007468:	dcc00317 	ldw	r19,12(sp)
 400746c:	dc800217 	ldw	r18,8(sp)
 4007470:	dc400117 	ldw	r17,4(sp)
 4007474:	dc000017 	ldw	r16,0(sp)
 4007478:	dec00504 	addi	sp,sp,20
 400747c:	40075881 	jmpi	4007588 <_write_r>

04007480 <__sseek>:
 4007480:	defffe04 	addi	sp,sp,-8
 4007484:	dc000015 	stw	r16,0(sp)
 4007488:	2821883a 	mov	r16,r5
 400748c:	2940038f 	ldh	r5,14(r5)
 4007490:	dfc00115 	stw	ra,4(sp)
 4007494:	40079400 	call	4007940 <_lseek_r>
 4007498:	00ffffc4 	movi	r3,-1
 400749c:	10c00826 	beq	r2,r3,40074c0 <__sseek+0x40>
 40074a0:	80c0030b 	ldhu	r3,12(r16)
 40074a4:	80801415 	stw	r2,80(r16)
 40074a8:	18c40014 	ori	r3,r3,4096
 40074ac:	80c0030d 	sth	r3,12(r16)
 40074b0:	dfc00117 	ldw	ra,4(sp)
 40074b4:	dc000017 	ldw	r16,0(sp)
 40074b8:	dec00204 	addi	sp,sp,8
 40074bc:	f800283a 	ret
 40074c0:	80c0030b 	ldhu	r3,12(r16)
 40074c4:	18fbffcc 	andi	r3,r3,61439
 40074c8:	80c0030d 	sth	r3,12(r16)
 40074cc:	dfc00117 	ldw	ra,4(sp)
 40074d0:	dc000017 	ldw	r16,0(sp)
 40074d4:	dec00204 	addi	sp,sp,8
 40074d8:	f800283a 	ret

040074dc <__sclose>:
 40074dc:	2940038f 	ldh	r5,14(r5)
 40074e0:	40076c01 	jmpi	40076c0 <_close_r>

040074e4 <strcmp>:
 40074e4:	2904b03a 	or	r2,r5,r4
 40074e8:	108000cc 	andi	r2,r2,3
 40074ec:	1000171e 	bne	r2,zero,400754c <strcmp+0x68>
 40074f0:	20800017 	ldw	r2,0(r4)
 40074f4:	28c00017 	ldw	r3,0(r5)
 40074f8:	10c0141e 	bne	r2,r3,400754c <strcmp+0x68>
 40074fc:	027fbff4 	movhi	r9,65279
 4007500:	4a7fbfc4 	addi	r9,r9,-257
 4007504:	1247883a 	add	r3,r2,r9
 4007508:	0084303a 	nor	r2,zero,r2
 400750c:	1884703a 	and	r2,r3,r2
 4007510:	02202074 	movhi	r8,32897
 4007514:	42202004 	addi	r8,r8,-32640
 4007518:	1204703a 	and	r2,r2,r8
 400751c:	10000226 	beq	r2,zero,4007528 <strcmp+0x44>
 4007520:	00001706 	br	4007580 <strcmp+0x9c>
 4007524:	3000161e 	bne	r6,zero,4007580 <strcmp+0x9c>
 4007528:	21000104 	addi	r4,r4,4
 400752c:	20800017 	ldw	r2,0(r4)
 4007530:	29400104 	addi	r5,r5,4
 4007534:	28c00017 	ldw	r3,0(r5)
 4007538:	124f883a 	add	r7,r2,r9
 400753c:	008c303a 	nor	r6,zero,r2
 4007540:	398c703a 	and	r6,r7,r6
 4007544:	320c703a 	and	r6,r6,r8
 4007548:	10fff626 	beq	r2,r3,4007524 <__alt_data_end+0xfe007524>
 400754c:	20800007 	ldb	r2,0(r4)
 4007550:	1000051e 	bne	r2,zero,4007568 <strcmp+0x84>
 4007554:	00000606 	br	4007570 <strcmp+0x8c>
 4007558:	21000044 	addi	r4,r4,1
 400755c:	20800007 	ldb	r2,0(r4)
 4007560:	29400044 	addi	r5,r5,1
 4007564:	10000226 	beq	r2,zero,4007570 <strcmp+0x8c>
 4007568:	28c00007 	ldb	r3,0(r5)
 400756c:	10fffa26 	beq	r2,r3,4007558 <__alt_data_end+0xfe007558>
 4007570:	20c00003 	ldbu	r3,0(r4)
 4007574:	28800003 	ldbu	r2,0(r5)
 4007578:	1885c83a 	sub	r2,r3,r2
 400757c:	f800283a 	ret
 4007580:	0005883a 	mov	r2,zero
 4007584:	f800283a 	ret

04007588 <_write_r>:
 4007588:	defffd04 	addi	sp,sp,-12
 400758c:	dc400115 	stw	r17,4(sp)
 4007590:	dc000015 	stw	r16,0(sp)
 4007594:	2023883a 	mov	r17,r4
 4007598:	04010074 	movhi	r16,1025
 400759c:	843e9904 	addi	r16,r16,-1436
 40075a0:	2809883a 	mov	r4,r5
 40075a4:	300b883a 	mov	r5,r6
 40075a8:	380d883a 	mov	r6,r7
 40075ac:	dfc00215 	stw	ra,8(sp)
 40075b0:	80000015 	stw	zero,0(r16)
 40075b4:	400a41c0 	call	400a41c <write>
 40075b8:	00ffffc4 	movi	r3,-1
 40075bc:	10c00526 	beq	r2,r3,40075d4 <_write_r+0x4c>
 40075c0:	dfc00217 	ldw	ra,8(sp)
 40075c4:	dc400117 	ldw	r17,4(sp)
 40075c8:	dc000017 	ldw	r16,0(sp)
 40075cc:	dec00304 	addi	sp,sp,12
 40075d0:	f800283a 	ret
 40075d4:	80c00017 	ldw	r3,0(r16)
 40075d8:	183ff926 	beq	r3,zero,40075c0 <__alt_data_end+0xfe0075c0>
 40075dc:	88c00015 	stw	r3,0(r17)
 40075e0:	dfc00217 	ldw	ra,8(sp)
 40075e4:	dc400117 	ldw	r17,4(sp)
 40075e8:	dc000017 	ldw	r16,0(sp)
 40075ec:	dec00304 	addi	sp,sp,12
 40075f0:	f800283a 	ret

040075f4 <_calloc_r>:
 40075f4:	defffe04 	addi	sp,sp,-8
 40075f8:	dc000015 	stw	r16,0(sp)
 40075fc:	2021883a 	mov	r16,r4
 4007600:	3009883a 	mov	r4,r6
 4007604:	dfc00115 	stw	ra,4(sp)
 4007608:	40094f00 	call	40094f0 <__mulsi3>
 400760c:	8009883a 	mov	r4,r16
 4007610:	100b883a 	mov	r5,r2
 4007614:	400506c0 	call	400506c <_malloc_r>
 4007618:	1021883a 	mov	r16,r2
 400761c:	10000c26 	beq	r2,zero,4007650 <_calloc_r+0x5c>
 4007620:	11bfff17 	ldw	r6,-4(r2)
 4007624:	00ffff04 	movi	r3,-4
 4007628:	00800904 	movi	r2,36
 400762c:	30cc703a 	and	r6,r6,r3
 4007630:	30cd883a 	add	r6,r6,r3
 4007634:	11801436 	bltu	r2,r6,4007688 <_calloc_r+0x94>
 4007638:	00c004c4 	movi	r3,19
 400763c:	19800936 	bltu	r3,r6,4007664 <_calloc_r+0x70>
 4007640:	8005883a 	mov	r2,r16
 4007644:	10000015 	stw	zero,0(r2)
 4007648:	10000115 	stw	zero,4(r2)
 400764c:	10000215 	stw	zero,8(r2)
 4007650:	8005883a 	mov	r2,r16
 4007654:	dfc00117 	ldw	ra,4(sp)
 4007658:	dc000017 	ldw	r16,0(sp)
 400765c:	dec00204 	addi	sp,sp,8
 4007660:	f800283a 	ret
 4007664:	80000015 	stw	zero,0(r16)
 4007668:	80000115 	stw	zero,4(r16)
 400766c:	00c006c4 	movi	r3,27
 4007670:	19800d2e 	bgeu	r3,r6,40076a8 <_calloc_r+0xb4>
 4007674:	80000215 	stw	zero,8(r16)
 4007678:	80000315 	stw	zero,12(r16)
 400767c:	30800c26 	beq	r6,r2,40076b0 <_calloc_r+0xbc>
 4007680:	80800404 	addi	r2,r16,16
 4007684:	003fef06 	br	4007644 <__alt_data_end+0xfe007644>
 4007688:	8009883a 	mov	r4,r16
 400768c:	000b883a 	mov	r5,zero
 4007690:	4005bb40 	call	4005bb4 <memset>
 4007694:	8005883a 	mov	r2,r16
 4007698:	dfc00117 	ldw	ra,4(sp)
 400769c:	dc000017 	ldw	r16,0(sp)
 40076a0:	dec00204 	addi	sp,sp,8
 40076a4:	f800283a 	ret
 40076a8:	80800204 	addi	r2,r16,8
 40076ac:	003fe506 	br	4007644 <__alt_data_end+0xfe007644>
 40076b0:	80000415 	stw	zero,16(r16)
 40076b4:	80000515 	stw	zero,20(r16)
 40076b8:	80800604 	addi	r2,r16,24
 40076bc:	003fe106 	br	4007644 <__alt_data_end+0xfe007644>

040076c0 <_close_r>:
 40076c0:	defffd04 	addi	sp,sp,-12
 40076c4:	dc400115 	stw	r17,4(sp)
 40076c8:	dc000015 	stw	r16,0(sp)
 40076cc:	2023883a 	mov	r17,r4
 40076d0:	04010074 	movhi	r16,1025
 40076d4:	843e9904 	addi	r16,r16,-1436
 40076d8:	2809883a 	mov	r4,r5
 40076dc:	dfc00215 	stw	ra,8(sp)
 40076e0:	80000015 	stw	zero,0(r16)
 40076e4:	4009ba40 	call	4009ba4 <close>
 40076e8:	00ffffc4 	movi	r3,-1
 40076ec:	10c00526 	beq	r2,r3,4007704 <_close_r+0x44>
 40076f0:	dfc00217 	ldw	ra,8(sp)
 40076f4:	dc400117 	ldw	r17,4(sp)
 40076f8:	dc000017 	ldw	r16,0(sp)
 40076fc:	dec00304 	addi	sp,sp,12
 4007700:	f800283a 	ret
 4007704:	80c00017 	ldw	r3,0(r16)
 4007708:	183ff926 	beq	r3,zero,40076f0 <__alt_data_end+0xfe0076f0>
 400770c:	88c00015 	stw	r3,0(r17)
 4007710:	dfc00217 	ldw	ra,8(sp)
 4007714:	dc400117 	ldw	r17,4(sp)
 4007718:	dc000017 	ldw	r16,0(sp)
 400771c:	dec00304 	addi	sp,sp,12
 4007720:	f800283a 	ret

04007724 <_fclose_r>:
 4007724:	defffc04 	addi	sp,sp,-16
 4007728:	dc400115 	stw	r17,4(sp)
 400772c:	dc000015 	stw	r16,0(sp)
 4007730:	dfc00315 	stw	ra,12(sp)
 4007734:	dc800215 	stw	r18,8(sp)
 4007738:	2821883a 	mov	r16,r5
 400773c:	2023883a 	mov	r17,r4
 4007740:	28003426 	beq	r5,zero,4007814 <_fclose_r+0xf0>
 4007744:	40043580 	call	4004358 <__sfp_lock_acquire>
 4007748:	88000226 	beq	r17,zero,4007754 <_fclose_r+0x30>
 400774c:	88800e17 	ldw	r2,56(r17)
 4007750:	10003826 	beq	r2,zero,4007834 <_fclose_r+0x110>
 4007754:	8080030f 	ldh	r2,12(r16)
 4007758:	10002526 	beq	r2,zero,40077f0 <_fclose_r+0xcc>
 400775c:	8809883a 	mov	r4,r17
 4007760:	800b883a 	mov	r5,r16
 4007764:	4003e940 	call	4003e94 <_fflush_r>
 4007768:	1025883a 	mov	r18,r2
 400776c:	80800b17 	ldw	r2,44(r16)
 4007770:	10000426 	beq	r2,zero,4007784 <_fclose_r+0x60>
 4007774:	81400717 	ldw	r5,28(r16)
 4007778:	8809883a 	mov	r4,r17
 400777c:	103ee83a 	callr	r2
 4007780:	10003516 	blt	r2,zero,4007858 <_fclose_r+0x134>
 4007784:	8080030b 	ldhu	r2,12(r16)
 4007788:	1080200c 	andi	r2,r2,128
 400778c:	10bfffcc 	andi	r2,r2,65535
 4007790:	10a0001c 	xori	r2,r2,32768
 4007794:	10a00004 	addi	r2,r2,-32768
 4007798:	10002b1e 	bne	r2,zero,4007848 <_fclose_r+0x124>
 400779c:	81400c17 	ldw	r5,48(r16)
 40077a0:	28000526 	beq	r5,zero,40077b8 <_fclose_r+0x94>
 40077a4:	80801004 	addi	r2,r16,64
 40077a8:	28800226 	beq	r5,r2,40077b4 <_fclose_r+0x90>
 40077ac:	8809883a 	mov	r4,r17
 40077b0:	40044d40 	call	40044d4 <_free_r>
 40077b4:	80000c15 	stw	zero,48(r16)
 40077b8:	81401117 	ldw	r5,68(r16)
 40077bc:	28000326 	beq	r5,zero,40077cc <_fclose_r+0xa8>
 40077c0:	8809883a 	mov	r4,r17
 40077c4:	40044d40 	call	40044d4 <_free_r>
 40077c8:	80001115 	stw	zero,68(r16)
 40077cc:	8000030d 	sth	zero,12(r16)
 40077d0:	400435c0 	call	400435c <__sfp_lock_release>
 40077d4:	9005883a 	mov	r2,r18
 40077d8:	dfc00317 	ldw	ra,12(sp)
 40077dc:	dc800217 	ldw	r18,8(sp)
 40077e0:	dc400117 	ldw	r17,4(sp)
 40077e4:	dc000017 	ldw	r16,0(sp)
 40077e8:	dec00404 	addi	sp,sp,16
 40077ec:	f800283a 	ret
 40077f0:	400435c0 	call	400435c <__sfp_lock_release>
 40077f4:	0025883a 	mov	r18,zero
 40077f8:	9005883a 	mov	r2,r18
 40077fc:	dfc00317 	ldw	ra,12(sp)
 4007800:	dc800217 	ldw	r18,8(sp)
 4007804:	dc400117 	ldw	r17,4(sp)
 4007808:	dc000017 	ldw	r16,0(sp)
 400780c:	dec00404 	addi	sp,sp,16
 4007810:	f800283a 	ret
 4007814:	0025883a 	mov	r18,zero
 4007818:	9005883a 	mov	r2,r18
 400781c:	dfc00317 	ldw	ra,12(sp)
 4007820:	dc800217 	ldw	r18,8(sp)
 4007824:	dc400117 	ldw	r17,4(sp)
 4007828:	dc000017 	ldw	r16,0(sp)
 400782c:	dec00404 	addi	sp,sp,16
 4007830:	f800283a 	ret
 4007834:	8809883a 	mov	r4,r17
 4007838:	40041500 	call	4004150 <__sinit>
 400783c:	8080030f 	ldh	r2,12(r16)
 4007840:	103fc61e 	bne	r2,zero,400775c <__alt_data_end+0xfe00775c>
 4007844:	003fea06 	br	40077f0 <__alt_data_end+0xfe0077f0>
 4007848:	81400417 	ldw	r5,16(r16)
 400784c:	8809883a 	mov	r4,r17
 4007850:	40044d40 	call	40044d4 <_free_r>
 4007854:	003fd106 	br	400779c <__alt_data_end+0xfe00779c>
 4007858:	04bfffc4 	movi	r18,-1
 400785c:	003fc906 	br	4007784 <__alt_data_end+0xfe007784>

04007860 <fclose>:
 4007860:	00810074 	movhi	r2,1025
 4007864:	10b7ef04 	addi	r2,r2,-8260
 4007868:	200b883a 	mov	r5,r4
 400786c:	11000017 	ldw	r4,0(r2)
 4007870:	40077241 	jmpi	4007724 <_fclose_r>

04007874 <_fstat_r>:
 4007874:	defffd04 	addi	sp,sp,-12
 4007878:	dc400115 	stw	r17,4(sp)
 400787c:	dc000015 	stw	r16,0(sp)
 4007880:	2023883a 	mov	r17,r4
 4007884:	04010074 	movhi	r16,1025
 4007888:	843e9904 	addi	r16,r16,-1436
 400788c:	2809883a 	mov	r4,r5
 4007890:	300b883a 	mov	r5,r6
 4007894:	dfc00215 	stw	ra,8(sp)
 4007898:	80000015 	stw	zero,0(r16)
 400789c:	4009cec0 	call	4009cec <fstat>
 40078a0:	00ffffc4 	movi	r3,-1
 40078a4:	10c00526 	beq	r2,r3,40078bc <_fstat_r+0x48>
 40078a8:	dfc00217 	ldw	ra,8(sp)
 40078ac:	dc400117 	ldw	r17,4(sp)
 40078b0:	dc000017 	ldw	r16,0(sp)
 40078b4:	dec00304 	addi	sp,sp,12
 40078b8:	f800283a 	ret
 40078bc:	80c00017 	ldw	r3,0(r16)
 40078c0:	183ff926 	beq	r3,zero,40078a8 <__alt_data_end+0xfe0078a8>
 40078c4:	88c00015 	stw	r3,0(r17)
 40078c8:	dfc00217 	ldw	ra,8(sp)
 40078cc:	dc400117 	ldw	r17,4(sp)
 40078d0:	dc000017 	ldw	r16,0(sp)
 40078d4:	dec00304 	addi	sp,sp,12
 40078d8:	f800283a 	ret

040078dc <_isatty_r>:
 40078dc:	defffd04 	addi	sp,sp,-12
 40078e0:	dc400115 	stw	r17,4(sp)
 40078e4:	dc000015 	stw	r16,0(sp)
 40078e8:	2023883a 	mov	r17,r4
 40078ec:	04010074 	movhi	r16,1025
 40078f0:	843e9904 	addi	r16,r16,-1436
 40078f4:	2809883a 	mov	r4,r5
 40078f8:	dfc00215 	stw	ra,8(sp)
 40078fc:	80000015 	stw	zero,0(r16)
 4007900:	4009dec0 	call	4009dec <isatty>
 4007904:	00ffffc4 	movi	r3,-1
 4007908:	10c00526 	beq	r2,r3,4007920 <_isatty_r+0x44>
 400790c:	dfc00217 	ldw	ra,8(sp)
 4007910:	dc400117 	ldw	r17,4(sp)
 4007914:	dc000017 	ldw	r16,0(sp)
 4007918:	dec00304 	addi	sp,sp,12
 400791c:	f800283a 	ret
 4007920:	80c00017 	ldw	r3,0(r16)
 4007924:	183ff926 	beq	r3,zero,400790c <__alt_data_end+0xfe00790c>
 4007928:	88c00015 	stw	r3,0(r17)
 400792c:	dfc00217 	ldw	ra,8(sp)
 4007930:	dc400117 	ldw	r17,4(sp)
 4007934:	dc000017 	ldw	r16,0(sp)
 4007938:	dec00304 	addi	sp,sp,12
 400793c:	f800283a 	ret

04007940 <_lseek_r>:
 4007940:	defffd04 	addi	sp,sp,-12
 4007944:	dc400115 	stw	r17,4(sp)
 4007948:	dc000015 	stw	r16,0(sp)
 400794c:	2023883a 	mov	r17,r4
 4007950:	04010074 	movhi	r16,1025
 4007954:	843e9904 	addi	r16,r16,-1436
 4007958:	2809883a 	mov	r4,r5
 400795c:	300b883a 	mov	r5,r6
 4007960:	380d883a 	mov	r6,r7
 4007964:	dfc00215 	stw	ra,8(sp)
 4007968:	80000015 	stw	zero,0(r16)
 400796c:	4009fcc0 	call	4009fcc <lseek>
 4007970:	00ffffc4 	movi	r3,-1
 4007974:	10c00526 	beq	r2,r3,400798c <_lseek_r+0x4c>
 4007978:	dfc00217 	ldw	ra,8(sp)
 400797c:	dc400117 	ldw	r17,4(sp)
 4007980:	dc000017 	ldw	r16,0(sp)
 4007984:	dec00304 	addi	sp,sp,12
 4007988:	f800283a 	ret
 400798c:	80c00017 	ldw	r3,0(r16)
 4007990:	183ff926 	beq	r3,zero,4007978 <__alt_data_end+0xfe007978>
 4007994:	88c00015 	stw	r3,0(r17)
 4007998:	dfc00217 	ldw	ra,8(sp)
 400799c:	dc400117 	ldw	r17,4(sp)
 40079a0:	dc000017 	ldw	r16,0(sp)
 40079a4:	dec00304 	addi	sp,sp,12
 40079a8:	f800283a 	ret

040079ac <_read_r>:
 40079ac:	defffd04 	addi	sp,sp,-12
 40079b0:	dc400115 	stw	r17,4(sp)
 40079b4:	dc000015 	stw	r16,0(sp)
 40079b8:	2023883a 	mov	r17,r4
 40079bc:	04010074 	movhi	r16,1025
 40079c0:	843e9904 	addi	r16,r16,-1436
 40079c4:	2809883a 	mov	r4,r5
 40079c8:	300b883a 	mov	r5,r6
 40079cc:	380d883a 	mov	r6,r7
 40079d0:	dfc00215 	stw	ra,8(sp)
 40079d4:	80000015 	stw	zero,0(r16)
 40079d8:	400a1a80 	call	400a1a8 <read>
 40079dc:	00ffffc4 	movi	r3,-1
 40079e0:	10c00526 	beq	r2,r3,40079f8 <_read_r+0x4c>
 40079e4:	dfc00217 	ldw	ra,8(sp)
 40079e8:	dc400117 	ldw	r17,4(sp)
 40079ec:	dc000017 	ldw	r16,0(sp)
 40079f0:	dec00304 	addi	sp,sp,12
 40079f4:	f800283a 	ret
 40079f8:	80c00017 	ldw	r3,0(r16)
 40079fc:	183ff926 	beq	r3,zero,40079e4 <__alt_data_end+0xfe0079e4>
 4007a00:	88c00015 	stw	r3,0(r17)
 4007a04:	dfc00217 	ldw	ra,8(sp)
 4007a08:	dc400117 	ldw	r17,4(sp)
 4007a0c:	dc000017 	ldw	r16,0(sp)
 4007a10:	dec00304 	addi	sp,sp,12
 4007a14:	f800283a 	ret

04007a18 <__udivdi3>:
 4007a18:	defff504 	addi	sp,sp,-44
 4007a1c:	dd000515 	stw	r20,20(sp)
 4007a20:	dcc00415 	stw	r19,16(sp)
 4007a24:	dc800315 	stw	r18,12(sp)
 4007a28:	dc400215 	stw	r17,8(sp)
 4007a2c:	dc000115 	stw	r16,4(sp)
 4007a30:	dfc00a15 	stw	ra,40(sp)
 4007a34:	df000915 	stw	fp,36(sp)
 4007a38:	ddc00815 	stw	r23,32(sp)
 4007a3c:	dd800715 	stw	r22,28(sp)
 4007a40:	dd400615 	stw	r21,24(sp)
 4007a44:	2025883a 	mov	r18,r4
 4007a48:	2823883a 	mov	r17,r5
 4007a4c:	3021883a 	mov	r16,r6
 4007a50:	2027883a 	mov	r19,r4
 4007a54:	2829883a 	mov	r20,r5
 4007a58:	3800451e 	bne	r7,zero,4007b70 <__udivdi3+0x158>
 4007a5c:	2980652e 	bgeu	r5,r6,4007bf4 <__udivdi3+0x1dc>
 4007a60:	00bfffd4 	movui	r2,65535
 4007a64:	1180b436 	bltu	r2,r6,4007d38 <__udivdi3+0x320>
 4007a68:	00803fc4 	movi	r2,255
 4007a6c:	11816636 	bltu	r2,r6,4008008 <__udivdi3+0x5f0>
 4007a70:	0005883a 	mov	r2,zero
 4007a74:	0007883a 	mov	r3,zero
 4007a78:	3084d83a 	srl	r2,r6,r2
 4007a7c:	01010074 	movhi	r4,1025
 4007a80:	21311a04 	addi	r4,r4,-15256
 4007a84:	2085883a 	add	r2,r4,r2
 4007a88:	10800003 	ldbu	r2,0(r2)
 4007a8c:	10c7883a 	add	r3,r2,r3
 4007a90:	00800804 	movi	r2,32
 4007a94:	10c5c83a 	sub	r2,r2,r3
 4007a98:	10000526 	beq	r2,zero,4007ab0 <__udivdi3+0x98>
 4007a9c:	88a2983a 	sll	r17,r17,r2
 4007aa0:	90c6d83a 	srl	r3,r18,r3
 4007aa4:	30a0983a 	sll	r16,r6,r2
 4007aa8:	90a6983a 	sll	r19,r18,r2
 4007aac:	88e8b03a 	or	r20,r17,r3
 4007ab0:	8022d43a 	srli	r17,r16,16
 4007ab4:	a009883a 	mov	r4,r20
 4007ab8:	857fffcc 	andi	r21,r16,65535
 4007abc:	880b883a 	mov	r5,r17
 4007ac0:	40094e80 	call	40094e8 <__umodsi3>
 4007ac4:	a009883a 	mov	r4,r20
 4007ac8:	880b883a 	mov	r5,r17
 4007acc:	102d883a 	mov	r22,r2
 4007ad0:	40094e00 	call	40094e0 <__udivsi3>
 4007ad4:	1009883a 	mov	r4,r2
 4007ad8:	a80b883a 	mov	r5,r21
 4007adc:	1025883a 	mov	r18,r2
 4007ae0:	40094f00 	call	40094f0 <__mulsi3>
 4007ae4:	1009883a 	mov	r4,r2
 4007ae8:	b006943a 	slli	r3,r22,16
 4007aec:	9804d43a 	srli	r2,r19,16
 4007af0:	1886b03a 	or	r3,r3,r2
 4007af4:	1900052e 	bgeu	r3,r4,4007b0c <__udivdi3+0xf4>
 4007af8:	1c07883a 	add	r3,r3,r16
 4007afc:	90bfffc4 	addi	r2,r18,-1
 4007b00:	1c000136 	bltu	r3,r16,4007b08 <__udivdi3+0xf0>
 4007b04:	19015536 	bltu	r3,r4,400805c <__udivdi3+0x644>
 4007b08:	1025883a 	mov	r18,r2
 4007b0c:	1929c83a 	sub	r20,r3,r4
 4007b10:	880b883a 	mov	r5,r17
 4007b14:	a009883a 	mov	r4,r20
 4007b18:	40094e80 	call	40094e8 <__umodsi3>
 4007b1c:	102d883a 	mov	r22,r2
 4007b20:	880b883a 	mov	r5,r17
 4007b24:	a009883a 	mov	r4,r20
 4007b28:	b02c943a 	slli	r22,r22,16
 4007b2c:	40094e00 	call	40094e0 <__udivsi3>
 4007b30:	1009883a 	mov	r4,r2
 4007b34:	a80b883a 	mov	r5,r21
 4007b38:	9cffffcc 	andi	r19,r19,65535
 4007b3c:	1023883a 	mov	r17,r2
 4007b40:	b4e6b03a 	or	r19,r22,r19
 4007b44:	40094f00 	call	40094f0 <__mulsi3>
 4007b48:	9880052e 	bgeu	r19,r2,4007b60 <__udivdi3+0x148>
 4007b4c:	9c27883a 	add	r19,r19,r16
 4007b50:	88ffffc4 	addi	r3,r17,-1
 4007b54:	9c011436 	bltu	r19,r16,4007fa8 <__udivdi3+0x590>
 4007b58:	9881132e 	bgeu	r19,r2,4007fa8 <__udivdi3+0x590>
 4007b5c:	8c7fff84 	addi	r17,r17,-2
 4007b60:	9004943a 	slli	r2,r18,16
 4007b64:	0007883a 	mov	r3,zero
 4007b68:	8884b03a 	or	r2,r17,r2
 4007b6c:	00001506 	br	4007bc4 <__udivdi3+0x1ac>
 4007b70:	29c06a36 	bltu	r5,r7,4007d1c <__udivdi3+0x304>
 4007b74:	00bfffd4 	movui	r2,65535
 4007b78:	11c06a2e 	bgeu	r2,r7,4007d24 <__udivdi3+0x30c>
 4007b7c:	00804034 	movhi	r2,256
 4007b80:	10bfffc4 	addi	r2,r2,-1
 4007b84:	11c11436 	bltu	r2,r7,4007fd8 <__udivdi3+0x5c0>
 4007b88:	00c00404 	movi	r3,16
 4007b8c:	180b883a 	mov	r5,r3
 4007b90:	38c6d83a 	srl	r3,r7,r3
 4007b94:	01010074 	movhi	r4,1025
 4007b98:	21311a04 	addi	r4,r4,-15256
 4007b9c:	04000804 	movi	r16,32
 4007ba0:	20c7883a 	add	r3,r4,r3
 4007ba4:	18800003 	ldbu	r2,0(r3)
 4007ba8:	1145883a 	add	r2,r2,r5
 4007bac:	80a1c83a 	sub	r16,r16,r2
 4007bb0:	80006e1e 	bne	r16,zero,4007d6c <__udivdi3+0x354>
 4007bb4:	0007883a 	mov	r3,zero
 4007bb8:	3c406a36 	bltu	r7,r17,4007d64 <__udivdi3+0x34c>
 4007bbc:	9180692e 	bgeu	r18,r6,4007d64 <__udivdi3+0x34c>
 4007bc0:	0005883a 	mov	r2,zero
 4007bc4:	dfc00a17 	ldw	ra,40(sp)
 4007bc8:	df000917 	ldw	fp,36(sp)
 4007bcc:	ddc00817 	ldw	r23,32(sp)
 4007bd0:	dd800717 	ldw	r22,28(sp)
 4007bd4:	dd400617 	ldw	r21,24(sp)
 4007bd8:	dd000517 	ldw	r20,20(sp)
 4007bdc:	dcc00417 	ldw	r19,16(sp)
 4007be0:	dc800317 	ldw	r18,12(sp)
 4007be4:	dc400217 	ldw	r17,8(sp)
 4007be8:	dc000117 	ldw	r16,4(sp)
 4007bec:	dec00b04 	addi	sp,sp,44
 4007bf0:	f800283a 	ret
 4007bf4:	3000041e 	bne	r6,zero,4007c08 <__udivdi3+0x1f0>
 4007bf8:	01000044 	movi	r4,1
 4007bfc:	000b883a 	mov	r5,zero
 4007c00:	40094e00 	call	40094e0 <__udivsi3>
 4007c04:	1021883a 	mov	r16,r2
 4007c08:	00bfffd4 	movui	r2,65535
 4007c0c:	1400502e 	bgeu	r2,r16,4007d50 <__udivdi3+0x338>
 4007c10:	00804034 	movhi	r2,256
 4007c14:	10bfffc4 	addi	r2,r2,-1
 4007c18:	1400f536 	bltu	r2,r16,4007ff0 <__udivdi3+0x5d8>
 4007c1c:	00800404 	movi	r2,16
 4007c20:	1007883a 	mov	r3,r2
 4007c24:	8084d83a 	srl	r2,r16,r2
 4007c28:	01010074 	movhi	r4,1025
 4007c2c:	21311a04 	addi	r4,r4,-15256
 4007c30:	2085883a 	add	r2,r4,r2
 4007c34:	10800003 	ldbu	r2,0(r2)
 4007c38:	10c7883a 	add	r3,r2,r3
 4007c3c:	00800804 	movi	r2,32
 4007c40:	10c5c83a 	sub	r2,r2,r3
 4007c44:	1000a01e 	bne	r2,zero,4007ec8 <__udivdi3+0x4b0>
 4007c48:	8028d43a 	srli	r20,r16,16
 4007c4c:	8c23c83a 	sub	r17,r17,r16
 4007c50:	857fffcc 	andi	r21,r16,65535
 4007c54:	00c00044 	movi	r3,1
 4007c58:	8809883a 	mov	r4,r17
 4007c5c:	a00b883a 	mov	r5,r20
 4007c60:	d8c00015 	stw	r3,0(sp)
 4007c64:	40094e80 	call	40094e8 <__umodsi3>
 4007c68:	8809883a 	mov	r4,r17
 4007c6c:	a00b883a 	mov	r5,r20
 4007c70:	102d883a 	mov	r22,r2
 4007c74:	40094e00 	call	40094e0 <__udivsi3>
 4007c78:	1009883a 	mov	r4,r2
 4007c7c:	a80b883a 	mov	r5,r21
 4007c80:	1025883a 	mov	r18,r2
 4007c84:	40094f00 	call	40094f0 <__mulsi3>
 4007c88:	1009883a 	mov	r4,r2
 4007c8c:	b00c943a 	slli	r6,r22,16
 4007c90:	9804d43a 	srli	r2,r19,16
 4007c94:	d8c00017 	ldw	r3,0(sp)
 4007c98:	308cb03a 	or	r6,r6,r2
 4007c9c:	3100052e 	bgeu	r6,r4,4007cb4 <__udivdi3+0x29c>
 4007ca0:	340d883a 	add	r6,r6,r16
 4007ca4:	90bfffc4 	addi	r2,r18,-1
 4007ca8:	34000136 	bltu	r6,r16,4007cb0 <__udivdi3+0x298>
 4007cac:	3100e836 	bltu	r6,r4,4008050 <__udivdi3+0x638>
 4007cb0:	1025883a 	mov	r18,r2
 4007cb4:	3123c83a 	sub	r17,r6,r4
 4007cb8:	8809883a 	mov	r4,r17
 4007cbc:	a00b883a 	mov	r5,r20
 4007cc0:	d8c00015 	stw	r3,0(sp)
 4007cc4:	40094e80 	call	40094e8 <__umodsi3>
 4007cc8:	102d883a 	mov	r22,r2
 4007ccc:	8809883a 	mov	r4,r17
 4007cd0:	a00b883a 	mov	r5,r20
 4007cd4:	b02c943a 	slli	r22,r22,16
 4007cd8:	40094e00 	call	40094e0 <__udivsi3>
 4007cdc:	1009883a 	mov	r4,r2
 4007ce0:	a80b883a 	mov	r5,r21
 4007ce4:	9cffffcc 	andi	r19,r19,65535
 4007ce8:	1023883a 	mov	r17,r2
 4007cec:	b4e6b03a 	or	r19,r22,r19
 4007cf0:	40094f00 	call	40094f0 <__mulsi3>
 4007cf4:	d8c00017 	ldw	r3,0(sp)
 4007cf8:	9880052e 	bgeu	r19,r2,4007d10 <__udivdi3+0x2f8>
 4007cfc:	9c27883a 	add	r19,r19,r16
 4007d00:	893fffc4 	addi	r4,r17,-1
 4007d04:	9c00aa36 	bltu	r19,r16,4007fb0 <__udivdi3+0x598>
 4007d08:	9880a92e 	bgeu	r19,r2,4007fb0 <__udivdi3+0x598>
 4007d0c:	8c7fff84 	addi	r17,r17,-2
 4007d10:	9004943a 	slli	r2,r18,16
 4007d14:	8884b03a 	or	r2,r17,r2
 4007d18:	003faa06 	br	4007bc4 <__alt_data_end+0xfe007bc4>
 4007d1c:	0007883a 	mov	r3,zero
 4007d20:	003fa706 	br	4007bc0 <__alt_data_end+0xfe007bc0>
 4007d24:	00803fc4 	movi	r2,255
 4007d28:	11c0ae36 	bltu	r2,r7,4007fe4 <__udivdi3+0x5cc>
 4007d2c:	0007883a 	mov	r3,zero
 4007d30:	000b883a 	mov	r5,zero
 4007d34:	003f9606 	br	4007b90 <__alt_data_end+0xfe007b90>
 4007d38:	00804034 	movhi	r2,256
 4007d3c:	10bfffc4 	addi	r2,r2,-1
 4007d40:	1180ae36 	bltu	r2,r6,4007ffc <__udivdi3+0x5e4>
 4007d44:	00800404 	movi	r2,16
 4007d48:	1007883a 	mov	r3,r2
 4007d4c:	003f4a06 	br	4007a78 <__alt_data_end+0xfe007a78>
 4007d50:	00803fc4 	movi	r2,255
 4007d54:	1400af36 	bltu	r2,r16,4008014 <__udivdi3+0x5fc>
 4007d58:	0005883a 	mov	r2,zero
 4007d5c:	0007883a 	mov	r3,zero
 4007d60:	003fb006 	br	4007c24 <__alt_data_end+0xfe007c24>
 4007d64:	00800044 	movi	r2,1
 4007d68:	003f9606 	br	4007bc4 <__alt_data_end+0xfe007bc4>
 4007d6c:	3c0e983a 	sll	r7,r7,r16
 4007d70:	3086d83a 	srl	r3,r6,r2
 4007d74:	88aed83a 	srl	r23,r17,r2
 4007d78:	9084d83a 	srl	r2,r18,r2
 4007d7c:	38e6b03a 	or	r19,r7,r3
 4007d80:	9828d43a 	srli	r20,r19,16
 4007d84:	8c22983a 	sll	r17,r17,r16
 4007d88:	b809883a 	mov	r4,r23
 4007d8c:	a00b883a 	mov	r5,r20
 4007d90:	342a983a 	sll	r21,r6,r16
 4007d94:	88a2b03a 	or	r17,r17,r2
 4007d98:	40094e80 	call	40094e8 <__umodsi3>
 4007d9c:	b809883a 	mov	r4,r23
 4007da0:	a00b883a 	mov	r5,r20
 4007da4:	1039883a 	mov	fp,r2
 4007da8:	9dbfffcc 	andi	r22,r19,65535
 4007dac:	40094e00 	call	40094e0 <__udivsi3>
 4007db0:	1009883a 	mov	r4,r2
 4007db4:	b00b883a 	mov	r5,r22
 4007db8:	102f883a 	mov	r23,r2
 4007dbc:	40094f00 	call	40094f0 <__mulsi3>
 4007dc0:	1009883a 	mov	r4,r2
 4007dc4:	e00e943a 	slli	r7,fp,16
 4007dc8:	8804d43a 	srli	r2,r17,16
 4007dcc:	388eb03a 	or	r7,r7,r2
 4007dd0:	3900042e 	bgeu	r7,r4,4007de4 <__udivdi3+0x3cc>
 4007dd4:	3ccf883a 	add	r7,r7,r19
 4007dd8:	b8bfffc4 	addi	r2,r23,-1
 4007ddc:	3cc0942e 	bgeu	r7,r19,4008030 <__udivdi3+0x618>
 4007de0:	102f883a 	mov	r23,r2
 4007de4:	3939c83a 	sub	fp,r7,r4
 4007de8:	a00b883a 	mov	r5,r20
 4007dec:	e009883a 	mov	r4,fp
 4007df0:	40094e80 	call	40094e8 <__umodsi3>
 4007df4:	a00b883a 	mov	r5,r20
 4007df8:	e009883a 	mov	r4,fp
 4007dfc:	d8800015 	stw	r2,0(sp)
 4007e00:	40094e00 	call	40094e0 <__udivsi3>
 4007e04:	1009883a 	mov	r4,r2
 4007e08:	b00b883a 	mov	r5,r22
 4007e0c:	1029883a 	mov	r20,r2
 4007e10:	40094f00 	call	40094f0 <__mulsi3>
 4007e14:	d8c00017 	ldw	r3,0(sp)
 4007e18:	8c7fffcc 	andi	r17,r17,65535
 4007e1c:	1806943a 	slli	r3,r3,16
 4007e20:	1c46b03a 	or	r3,r3,r17
 4007e24:	1880042e 	bgeu	r3,r2,4007e38 <__udivdi3+0x420>
 4007e28:	1cc7883a 	add	r3,r3,r19
 4007e2c:	a13fffc4 	addi	r4,r20,-1
 4007e30:	1cc07b2e 	bgeu	r3,r19,4008020 <__udivdi3+0x608>
 4007e34:	2029883a 	mov	r20,r4
 4007e38:	b82e943a 	slli	r23,r23,16
 4007e3c:	a822d43a 	srli	r17,r21,16
 4007e40:	ad7fffcc 	andi	r21,r21,65535
 4007e44:	a5e8b03a 	or	r20,r20,r23
 4007e48:	a5bfffcc 	andi	r22,r20,65535
 4007e4c:	b009883a 	mov	r4,r22
 4007e50:	a80b883a 	mov	r5,r21
 4007e54:	18afc83a 	sub	r23,r3,r2
 4007e58:	a026d43a 	srli	r19,r20,16
 4007e5c:	40094f00 	call	40094f0 <__mulsi3>
 4007e60:	b009883a 	mov	r4,r22
 4007e64:	880b883a 	mov	r5,r17
 4007e68:	1039883a 	mov	fp,r2
 4007e6c:	40094f00 	call	40094f0 <__mulsi3>
 4007e70:	a80b883a 	mov	r5,r21
 4007e74:	9809883a 	mov	r4,r19
 4007e78:	102d883a 	mov	r22,r2
 4007e7c:	40094f00 	call	40094f0 <__mulsi3>
 4007e80:	9809883a 	mov	r4,r19
 4007e84:	880b883a 	mov	r5,r17
 4007e88:	102b883a 	mov	r21,r2
 4007e8c:	40094f00 	call	40094f0 <__mulsi3>
 4007e90:	100b883a 	mov	r5,r2
 4007e94:	e004d43a 	srli	r2,fp,16
 4007e98:	ad89883a 	add	r4,r21,r22
 4007e9c:	2089883a 	add	r4,r4,r2
 4007ea0:	2540022e 	bgeu	r4,r21,4007eac <__udivdi3+0x494>
 4007ea4:	00800074 	movhi	r2,1
 4007ea8:	288b883a 	add	r5,r5,r2
 4007eac:	2004d43a 	srli	r2,r4,16
 4007eb0:	288b883a 	add	r5,r5,r2
 4007eb4:	b9404536 	bltu	r23,r5,4007fcc <__udivdi3+0x5b4>
 4007eb8:	b9403f26 	beq	r23,r5,4007fb8 <__udivdi3+0x5a0>
 4007ebc:	a005883a 	mov	r2,r20
 4007ec0:	0007883a 	mov	r3,zero
 4007ec4:	003f3f06 	br	4007bc4 <__alt_data_end+0xfe007bc4>
 4007ec8:	80a0983a 	sll	r16,r16,r2
 4007ecc:	88eed83a 	srl	r23,r17,r3
 4007ed0:	90c6d83a 	srl	r3,r18,r3
 4007ed4:	8028d43a 	srli	r20,r16,16
 4007ed8:	88a2983a 	sll	r17,r17,r2
 4007edc:	b809883a 	mov	r4,r23
 4007ee0:	a00b883a 	mov	r5,r20
 4007ee4:	88ecb03a 	or	r22,r17,r3
 4007ee8:	90a6983a 	sll	r19,r18,r2
 4007eec:	40094e80 	call	40094e8 <__umodsi3>
 4007ef0:	b809883a 	mov	r4,r23
 4007ef4:	a00b883a 	mov	r5,r20
 4007ef8:	1023883a 	mov	r17,r2
 4007efc:	857fffcc 	andi	r21,r16,65535
 4007f00:	40094e00 	call	40094e0 <__udivsi3>
 4007f04:	1009883a 	mov	r4,r2
 4007f08:	a80b883a 	mov	r5,r21
 4007f0c:	102f883a 	mov	r23,r2
 4007f10:	40094f00 	call	40094f0 <__mulsi3>
 4007f14:	1009883a 	mov	r4,r2
 4007f18:	880a943a 	slli	r5,r17,16
 4007f1c:	b004d43a 	srli	r2,r22,16
 4007f20:	288ab03a 	or	r5,r5,r2
 4007f24:	2900062e 	bgeu	r5,r4,4007f40 <__udivdi3+0x528>
 4007f28:	2c0b883a 	add	r5,r5,r16
 4007f2c:	b8bfffc4 	addi	r2,r23,-1
 4007f30:	2c004536 	bltu	r5,r16,4008048 <__udivdi3+0x630>
 4007f34:	2900442e 	bgeu	r5,r4,4008048 <__udivdi3+0x630>
 4007f38:	bdffff84 	addi	r23,r23,-2
 4007f3c:	2c0b883a 	add	r5,r5,r16
 4007f40:	2925c83a 	sub	r18,r5,r4
 4007f44:	9009883a 	mov	r4,r18
 4007f48:	a00b883a 	mov	r5,r20
 4007f4c:	40094e80 	call	40094e8 <__umodsi3>
 4007f50:	1023883a 	mov	r17,r2
 4007f54:	9009883a 	mov	r4,r18
 4007f58:	a00b883a 	mov	r5,r20
 4007f5c:	8822943a 	slli	r17,r17,16
 4007f60:	40094e00 	call	40094e0 <__udivsi3>
 4007f64:	1009883a 	mov	r4,r2
 4007f68:	a80b883a 	mov	r5,r21
 4007f6c:	b5bfffcc 	andi	r22,r22,65535
 4007f70:	1025883a 	mov	r18,r2
 4007f74:	8da2b03a 	or	r17,r17,r22
 4007f78:	40094f00 	call	40094f0 <__mulsi3>
 4007f7c:	8880062e 	bgeu	r17,r2,4007f98 <__udivdi3+0x580>
 4007f80:	8c23883a 	add	r17,r17,r16
 4007f84:	90ffffc4 	addi	r3,r18,-1
 4007f88:	8c002d36 	bltu	r17,r16,4008040 <__udivdi3+0x628>
 4007f8c:	88802c2e 	bgeu	r17,r2,4008040 <__udivdi3+0x628>
 4007f90:	94bfff84 	addi	r18,r18,-2
 4007f94:	8c23883a 	add	r17,r17,r16
 4007f98:	b806943a 	slli	r3,r23,16
 4007f9c:	88a3c83a 	sub	r17,r17,r2
 4007fa0:	90c6b03a 	or	r3,r18,r3
 4007fa4:	003f2c06 	br	4007c58 <__alt_data_end+0xfe007c58>
 4007fa8:	1823883a 	mov	r17,r3
 4007fac:	003eec06 	br	4007b60 <__alt_data_end+0xfe007b60>
 4007fb0:	2023883a 	mov	r17,r4
 4007fb4:	003f5606 	br	4007d10 <__alt_data_end+0xfe007d10>
 4007fb8:	2008943a 	slli	r4,r4,16
 4007fbc:	9420983a 	sll	r16,r18,r16
 4007fc0:	e73fffcc 	andi	fp,fp,65535
 4007fc4:	2709883a 	add	r4,r4,fp
 4007fc8:	813fbc2e 	bgeu	r16,r4,4007ebc <__alt_data_end+0xfe007ebc>
 4007fcc:	a0bfffc4 	addi	r2,r20,-1
 4007fd0:	0007883a 	mov	r3,zero
 4007fd4:	003efb06 	br	4007bc4 <__alt_data_end+0xfe007bc4>
 4007fd8:	00c00604 	movi	r3,24
 4007fdc:	180b883a 	mov	r5,r3
 4007fe0:	003eeb06 	br	4007b90 <__alt_data_end+0xfe007b90>
 4007fe4:	00c00204 	movi	r3,8
 4007fe8:	180b883a 	mov	r5,r3
 4007fec:	003ee806 	br	4007b90 <__alt_data_end+0xfe007b90>
 4007ff0:	00800604 	movi	r2,24
 4007ff4:	1007883a 	mov	r3,r2
 4007ff8:	003f0a06 	br	4007c24 <__alt_data_end+0xfe007c24>
 4007ffc:	00800604 	movi	r2,24
 4008000:	1007883a 	mov	r3,r2
 4008004:	003e9c06 	br	4007a78 <__alt_data_end+0xfe007a78>
 4008008:	00800204 	movi	r2,8
 400800c:	1007883a 	mov	r3,r2
 4008010:	003e9906 	br	4007a78 <__alt_data_end+0xfe007a78>
 4008014:	00800204 	movi	r2,8
 4008018:	1007883a 	mov	r3,r2
 400801c:	003f0106 	br	4007c24 <__alt_data_end+0xfe007c24>
 4008020:	18bf842e 	bgeu	r3,r2,4007e34 <__alt_data_end+0xfe007e34>
 4008024:	a53fff84 	addi	r20,r20,-2
 4008028:	1cc7883a 	add	r3,r3,r19
 400802c:	003f8206 	br	4007e38 <__alt_data_end+0xfe007e38>
 4008030:	393f6b2e 	bgeu	r7,r4,4007de0 <__alt_data_end+0xfe007de0>
 4008034:	bdffff84 	addi	r23,r23,-2
 4008038:	3ccf883a 	add	r7,r7,r19
 400803c:	003f6906 	br	4007de4 <__alt_data_end+0xfe007de4>
 4008040:	1825883a 	mov	r18,r3
 4008044:	003fd406 	br	4007f98 <__alt_data_end+0xfe007f98>
 4008048:	102f883a 	mov	r23,r2
 400804c:	003fbc06 	br	4007f40 <__alt_data_end+0xfe007f40>
 4008050:	94bfff84 	addi	r18,r18,-2
 4008054:	340d883a 	add	r6,r6,r16
 4008058:	003f1606 	br	4007cb4 <__alt_data_end+0xfe007cb4>
 400805c:	94bfff84 	addi	r18,r18,-2
 4008060:	1c07883a 	add	r3,r3,r16
 4008064:	003ea906 	br	4007b0c <__alt_data_end+0xfe007b0c>

04008068 <__umoddi3>:
 4008068:	defff304 	addi	sp,sp,-52
 400806c:	dd000715 	stw	r20,28(sp)
 4008070:	dcc00615 	stw	r19,24(sp)
 4008074:	dc800515 	stw	r18,20(sp)
 4008078:	dc400415 	stw	r17,16(sp)
 400807c:	dc000315 	stw	r16,12(sp)
 4008080:	dfc00c15 	stw	ra,48(sp)
 4008084:	df000b15 	stw	fp,44(sp)
 4008088:	ddc00a15 	stw	r23,40(sp)
 400808c:	dd800915 	stw	r22,36(sp)
 4008090:	dd400815 	stw	r21,32(sp)
 4008094:	2025883a 	mov	r18,r4
 4008098:	2823883a 	mov	r17,r5
 400809c:	3021883a 	mov	r16,r6
 40080a0:	2027883a 	mov	r19,r4
 40080a4:	2829883a 	mov	r20,r5
 40080a8:	38003a1e 	bne	r7,zero,4008194 <__umoddi3+0x12c>
 40080ac:	2980522e 	bgeu	r5,r6,40081f8 <__umoddi3+0x190>
 40080b0:	00bfffd4 	movui	r2,65535
 40080b4:	1180a436 	bltu	r2,r6,4008348 <__umoddi3+0x2e0>
 40080b8:	00803fc4 	movi	r2,255
 40080bc:	11816036 	bltu	r2,r6,4008640 <__umoddi3+0x5d8>
 40080c0:	0005883a 	mov	r2,zero
 40080c4:	0009883a 	mov	r4,zero
 40080c8:	3084d83a 	srl	r2,r6,r2
 40080cc:	00c10074 	movhi	r3,1025
 40080d0:	18f11a04 	addi	r3,r3,-15256
 40080d4:	05400804 	movi	r21,32
 40080d8:	1885883a 	add	r2,r3,r2
 40080dc:	10800003 	ldbu	r2,0(r2)
 40080e0:	1109883a 	add	r4,r2,r4
 40080e4:	a92bc83a 	sub	r21,r21,r4
 40080e8:	a8010e26 	beq	r21,zero,4008524 <__umoddi3+0x4bc>
 40080ec:	8d62983a 	sll	r17,r17,r21
 40080f0:	9108d83a 	srl	r4,r18,r4
 40080f4:	3560983a 	sll	r16,r6,r21
 40080f8:	9566983a 	sll	r19,r18,r21
 40080fc:	8928b03a 	or	r20,r17,r4
 4008100:	8022d43a 	srli	r17,r16,16
 4008104:	a009883a 	mov	r4,r20
 4008108:	84bfffcc 	andi	r18,r16,65535
 400810c:	880b883a 	mov	r5,r17
 4008110:	40094e80 	call	40094e8 <__umodsi3>
 4008114:	a009883a 	mov	r4,r20
 4008118:	880b883a 	mov	r5,r17
 400811c:	102d883a 	mov	r22,r2
 4008120:	40094e00 	call	40094e0 <__udivsi3>
 4008124:	1009883a 	mov	r4,r2
 4008128:	900b883a 	mov	r5,r18
 400812c:	40094f00 	call	40094f0 <__mulsi3>
 4008130:	1009883a 	mov	r4,r2
 4008134:	b006943a 	slli	r3,r22,16
 4008138:	9804d43a 	srli	r2,r19,16
 400813c:	1886b03a 	or	r3,r3,r2
 4008140:	1900042e 	bgeu	r3,r4,4008154 <__umoddi3+0xec>
 4008144:	1c07883a 	add	r3,r3,r16
 4008148:	1c000236 	bltu	r3,r16,4008154 <__umoddi3+0xec>
 400814c:	1900012e 	bgeu	r3,r4,4008154 <__umoddi3+0xec>
 4008150:	1c07883a 	add	r3,r3,r16
 4008154:	1929c83a 	sub	r20,r3,r4
 4008158:	a009883a 	mov	r4,r20
 400815c:	880b883a 	mov	r5,r17
 4008160:	40094e80 	call	40094e8 <__umodsi3>
 4008164:	102d883a 	mov	r22,r2
 4008168:	a009883a 	mov	r4,r20
 400816c:	880b883a 	mov	r5,r17
 4008170:	b02c943a 	slli	r22,r22,16
 4008174:	40094e00 	call	40094e0 <__udivsi3>
 4008178:	1009883a 	mov	r4,r2
 400817c:	900b883a 	mov	r5,r18
 4008180:	9cffffcc 	andi	r19,r19,65535
 4008184:	40094f00 	call	40094f0 <__mulsi3>
 4008188:	b4e6b03a 	or	r19,r22,r19
 400818c:	9880572e 	bgeu	r19,r2,40082ec <__umoddi3+0x284>
 4008190:	00005206 	br	40082dc <__umoddi3+0x274>
 4008194:	29c05936 	bltu	r5,r7,40082fc <__umoddi3+0x294>
 4008198:	00bfffd4 	movui	r2,65535
 400819c:	11c0652e 	bgeu	r2,r7,4008334 <__umoddi3+0x2cc>
 40081a0:	00804034 	movhi	r2,256
 40081a4:	10bfffc4 	addi	r2,r2,-1
 40081a8:	11c11936 	bltu	r2,r7,4008610 <__umoddi3+0x5a8>
 40081ac:	00c00404 	movi	r3,16
 40081b0:	1827883a 	mov	r19,r3
 40081b4:	38c6d83a 	srl	r3,r7,r3
 40081b8:	01010074 	movhi	r4,1025
 40081bc:	21311a04 	addi	r4,r4,-15256
 40081c0:	04000804 	movi	r16,32
 40081c4:	20c7883a 	add	r3,r4,r3
 40081c8:	18800003 	ldbu	r2,0(r3)
 40081cc:	14e7883a 	add	r19,r2,r19
 40081d0:	84e1c83a 	sub	r16,r16,r19
 40081d4:	8000671e 	bne	r16,zero,4008374 <__umoddi3+0x30c>
 40081d8:	3c400136 	bltu	r7,r17,40081e0 <__umoddi3+0x178>
 40081dc:	91812536 	bltu	r18,r6,4008674 <__umoddi3+0x60c>
 40081e0:	9185c83a 	sub	r2,r18,r6
 40081e4:	89e3c83a 	sub	r17,r17,r7
 40081e8:	90a5803a 	cmpltu	r18,r18,r2
 40081ec:	8ca9c83a 	sub	r20,r17,r18
 40081f0:	a007883a 	mov	r3,r20
 40081f4:	00004306 	br	4008304 <__umoddi3+0x29c>
 40081f8:	3000041e 	bne	r6,zero,400820c <__umoddi3+0x1a4>
 40081fc:	01000044 	movi	r4,1
 4008200:	000b883a 	mov	r5,zero
 4008204:	40094e00 	call	40094e0 <__udivsi3>
 4008208:	1021883a 	mov	r16,r2
 400820c:	00bfffd4 	movui	r2,65535
 4008210:	1400532e 	bgeu	r2,r16,4008360 <__umoddi3+0x2f8>
 4008214:	00804034 	movhi	r2,256
 4008218:	10bfffc4 	addi	r2,r2,-1
 400821c:	14010536 	bltu	r2,r16,4008634 <__umoddi3+0x5cc>
 4008220:	00800404 	movi	r2,16
 4008224:	1007883a 	mov	r3,r2
 4008228:	8084d83a 	srl	r2,r16,r2
 400822c:	01010074 	movhi	r4,1025
 4008230:	21311a04 	addi	r4,r4,-15256
 4008234:	05400804 	movi	r21,32
 4008238:	2085883a 	add	r2,r4,r2
 400823c:	10800003 	ldbu	r2,0(r2)
 4008240:	10c7883a 	add	r3,r2,r3
 4008244:	a8ebc83a 	sub	r21,r21,r3
 4008248:	a800b81e 	bne	r21,zero,400852c <__umoddi3+0x4c4>
 400824c:	8028d43a 	srli	r20,r16,16
 4008250:	8c23c83a 	sub	r17,r17,r16
 4008254:	85bfffcc 	andi	r22,r16,65535
 4008258:	8809883a 	mov	r4,r17
 400825c:	a00b883a 	mov	r5,r20
 4008260:	40094e80 	call	40094e8 <__umodsi3>
 4008264:	8809883a 	mov	r4,r17
 4008268:	a00b883a 	mov	r5,r20
 400826c:	1025883a 	mov	r18,r2
 4008270:	40094e00 	call	40094e0 <__udivsi3>
 4008274:	1009883a 	mov	r4,r2
 4008278:	b00b883a 	mov	r5,r22
 400827c:	40094f00 	call	40094f0 <__mulsi3>
 4008280:	1009883a 	mov	r4,r2
 4008284:	9006943a 	slli	r3,r18,16
 4008288:	9804d43a 	srli	r2,r19,16
 400828c:	1886b03a 	or	r3,r3,r2
 4008290:	1900032e 	bgeu	r3,r4,40082a0 <__umoddi3+0x238>
 4008294:	1c07883a 	add	r3,r3,r16
 4008298:	1c000136 	bltu	r3,r16,40082a0 <__umoddi3+0x238>
 400829c:	1900f336 	bltu	r3,r4,400866c <__umoddi3+0x604>
 40082a0:	1923c83a 	sub	r17,r3,r4
 40082a4:	8809883a 	mov	r4,r17
 40082a8:	a00b883a 	mov	r5,r20
 40082ac:	40094e80 	call	40094e8 <__umodsi3>
 40082b0:	102f883a 	mov	r23,r2
 40082b4:	8809883a 	mov	r4,r17
 40082b8:	a00b883a 	mov	r5,r20
 40082bc:	b82e943a 	slli	r23,r23,16
 40082c0:	40094e00 	call	40094e0 <__udivsi3>
 40082c4:	1009883a 	mov	r4,r2
 40082c8:	b00b883a 	mov	r5,r22
 40082cc:	9cffffcc 	andi	r19,r19,65535
 40082d0:	40094f00 	call	40094f0 <__mulsi3>
 40082d4:	bce6b03a 	or	r19,r23,r19
 40082d8:	9880042e 	bgeu	r19,r2,40082ec <__umoddi3+0x284>
 40082dc:	9c27883a 	add	r19,r19,r16
 40082e0:	9c000236 	bltu	r19,r16,40082ec <__umoddi3+0x284>
 40082e4:	9880012e 	bgeu	r19,r2,40082ec <__umoddi3+0x284>
 40082e8:	9c27883a 	add	r19,r19,r16
 40082ec:	9885c83a 	sub	r2,r19,r2
 40082f0:	1544d83a 	srl	r2,r2,r21
 40082f4:	0007883a 	mov	r3,zero
 40082f8:	00000206 	br	4008304 <__umoddi3+0x29c>
 40082fc:	2005883a 	mov	r2,r4
 4008300:	2807883a 	mov	r3,r5
 4008304:	dfc00c17 	ldw	ra,48(sp)
 4008308:	df000b17 	ldw	fp,44(sp)
 400830c:	ddc00a17 	ldw	r23,40(sp)
 4008310:	dd800917 	ldw	r22,36(sp)
 4008314:	dd400817 	ldw	r21,32(sp)
 4008318:	dd000717 	ldw	r20,28(sp)
 400831c:	dcc00617 	ldw	r19,24(sp)
 4008320:	dc800517 	ldw	r18,20(sp)
 4008324:	dc400417 	ldw	r17,16(sp)
 4008328:	dc000317 	ldw	r16,12(sp)
 400832c:	dec00d04 	addi	sp,sp,52
 4008330:	f800283a 	ret
 4008334:	00803fc4 	movi	r2,255
 4008338:	11c0b236 	bltu	r2,r7,4008604 <__umoddi3+0x59c>
 400833c:	0007883a 	mov	r3,zero
 4008340:	0027883a 	mov	r19,zero
 4008344:	003f9b06 	br	40081b4 <__alt_data_end+0xfe0081b4>
 4008348:	00804034 	movhi	r2,256
 400834c:	10bfffc4 	addi	r2,r2,-1
 4008350:	1180b236 	bltu	r2,r6,400861c <__umoddi3+0x5b4>
 4008354:	00800404 	movi	r2,16
 4008358:	1009883a 	mov	r4,r2
 400835c:	003f5a06 	br	40080c8 <__alt_data_end+0xfe0080c8>
 4008360:	00803fc4 	movi	r2,255
 4008364:	1400b036 	bltu	r2,r16,4008628 <__umoddi3+0x5c0>
 4008368:	0005883a 	mov	r2,zero
 400836c:	0007883a 	mov	r3,zero
 4008370:	003fad06 	br	4008228 <__alt_data_end+0xfe008228>
 4008374:	34c4d83a 	srl	r2,r6,r19
 4008378:	3c0e983a 	sll	r7,r7,r16
 400837c:	8cf8d83a 	srl	fp,r17,r19
 4008380:	8c22983a 	sll	r17,r17,r16
 4008384:	38a8b03a 	or	r20,r7,r2
 4008388:	a02ad43a 	srli	r21,r20,16
 400838c:	94c4d83a 	srl	r2,r18,r19
 4008390:	e009883a 	mov	r4,fp
 4008394:	a80b883a 	mov	r5,r21
 4008398:	342c983a 	sll	r22,r6,r16
 400839c:	88a2b03a 	or	r17,r17,r2
 40083a0:	40094e80 	call	40094e8 <__umodsi3>
 40083a4:	e009883a 	mov	r4,fp
 40083a8:	a80b883a 	mov	r5,r21
 40083ac:	a5ffffcc 	andi	r23,r20,65535
 40083b0:	d8800215 	stw	r2,8(sp)
 40083b4:	40094e00 	call	40094e0 <__udivsi3>
 40083b8:	1009883a 	mov	r4,r2
 40083bc:	b80b883a 	mov	r5,r23
 40083c0:	1039883a 	mov	fp,r2
 40083c4:	40094f00 	call	40094f0 <__mulsi3>
 40083c8:	d8c00217 	ldw	r3,8(sp)
 40083cc:	1009883a 	mov	r4,r2
 40083d0:	8804d43a 	srli	r2,r17,16
 40083d4:	1806943a 	slli	r3,r3,16
 40083d8:	9424983a 	sll	r18,r18,r16
 40083dc:	1886b03a 	or	r3,r3,r2
 40083e0:	1900042e 	bgeu	r3,r4,40083f4 <__umoddi3+0x38c>
 40083e4:	1d07883a 	add	r3,r3,r20
 40083e8:	e0bfffc4 	addi	r2,fp,-1
 40083ec:	1d009b2e 	bgeu	r3,r20,400865c <__umoddi3+0x5f4>
 40083f0:	1039883a 	mov	fp,r2
 40083f4:	1907c83a 	sub	r3,r3,r4
 40083f8:	1809883a 	mov	r4,r3
 40083fc:	a80b883a 	mov	r5,r21
 4008400:	d8c00215 	stw	r3,8(sp)
 4008404:	40094e80 	call	40094e8 <__umodsi3>
 4008408:	d8c00217 	ldw	r3,8(sp)
 400840c:	a80b883a 	mov	r5,r21
 4008410:	d8800015 	stw	r2,0(sp)
 4008414:	1809883a 	mov	r4,r3
 4008418:	40094e00 	call	40094e0 <__udivsi3>
 400841c:	1009883a 	mov	r4,r2
 4008420:	b80b883a 	mov	r5,r23
 4008424:	102b883a 	mov	r21,r2
 4008428:	40094f00 	call	40094f0 <__mulsi3>
 400842c:	d9c00017 	ldw	r7,0(sp)
 4008430:	8c7fffcc 	andi	r17,r17,65535
 4008434:	380e943a 	slli	r7,r7,16
 4008438:	3c4eb03a 	or	r7,r7,r17
 400843c:	3880042e 	bgeu	r7,r2,4008450 <__umoddi3+0x3e8>
 4008440:	3d0f883a 	add	r7,r7,r20
 4008444:	a8ffffc4 	addi	r3,r21,-1
 4008448:	3d00802e 	bgeu	r7,r20,400864c <__umoddi3+0x5e4>
 400844c:	182b883a 	mov	r21,r3
 4008450:	e038943a 	slli	fp,fp,16
 4008454:	b010d43a 	srli	r8,r22,16
 4008458:	b1bfffcc 	andi	r6,r22,65535
 400845c:	af2ab03a 	or	r21,r21,fp
 4008460:	a82ed43a 	srli	r23,r21,16
 4008464:	ad7fffcc 	andi	r21,r21,65535
 4008468:	300b883a 	mov	r5,r6
 400846c:	a809883a 	mov	r4,r21
 4008470:	38a3c83a 	sub	r17,r7,r2
 4008474:	d9800115 	stw	r6,4(sp)
 4008478:	da000015 	stw	r8,0(sp)
 400847c:	40094f00 	call	40094f0 <__mulsi3>
 4008480:	da000017 	ldw	r8,0(sp)
 4008484:	a809883a 	mov	r4,r21
 4008488:	1039883a 	mov	fp,r2
 400848c:	400b883a 	mov	r5,r8
 4008490:	da000215 	stw	r8,8(sp)
 4008494:	40094f00 	call	40094f0 <__mulsi3>
 4008498:	d9800117 	ldw	r6,4(sp)
 400849c:	b809883a 	mov	r4,r23
 40084a0:	d8800015 	stw	r2,0(sp)
 40084a4:	300b883a 	mov	r5,r6
 40084a8:	40094f00 	call	40094f0 <__mulsi3>
 40084ac:	d8c00217 	ldw	r3,8(sp)
 40084b0:	b809883a 	mov	r4,r23
 40084b4:	102b883a 	mov	r21,r2
 40084b8:	180b883a 	mov	r5,r3
 40084bc:	40094f00 	call	40094f0 <__mulsi3>
 40084c0:	d9c00017 	ldw	r7,0(sp)
 40084c4:	1007883a 	mov	r3,r2
 40084c8:	e004d43a 	srli	r2,fp,16
 40084cc:	a9c9883a 	add	r4,r21,r7
 40084d0:	2089883a 	add	r4,r4,r2
 40084d4:	2540022e 	bgeu	r4,r21,40084e0 <__umoddi3+0x478>
 40084d8:	00800074 	movhi	r2,1
 40084dc:	1887883a 	add	r3,r3,r2
 40084e0:	2004d43a 	srli	r2,r4,16
 40084e4:	2008943a 	slli	r4,r4,16
 40084e8:	e73fffcc 	andi	fp,fp,65535
 40084ec:	1887883a 	add	r3,r3,r2
 40084f0:	2709883a 	add	r4,r4,fp
 40084f4:	88c03d36 	bltu	r17,r3,40085ec <__umoddi3+0x584>
 40084f8:	88c06126 	beq	r17,r3,4008680 <__umoddi3+0x618>
 40084fc:	88c7c83a 	sub	r3,r17,r3
 4008500:	202d883a 	mov	r22,r4
 4008504:	95adc83a 	sub	r22,r18,r22
 4008508:	95a5803a 	cmpltu	r18,r18,r22
 400850c:	1c87c83a 	sub	r3,r3,r18
 4008510:	1cc4983a 	sll	r2,r3,r19
 4008514:	b42cd83a 	srl	r22,r22,r16
 4008518:	1c06d83a 	srl	r3,r3,r16
 400851c:	1584b03a 	or	r2,r2,r22
 4008520:	003f7806 	br	4008304 <__alt_data_end+0xfe008304>
 4008524:	002b883a 	mov	r21,zero
 4008528:	003ef506 	br	4008100 <__alt_data_end+0xfe008100>
 400852c:	8560983a 	sll	r16,r16,r21
 4008530:	88e6d83a 	srl	r19,r17,r3
 4008534:	90c6d83a 	srl	r3,r18,r3
 4008538:	8028d43a 	srli	r20,r16,16
 400853c:	8d62983a 	sll	r17,r17,r21
 4008540:	9809883a 	mov	r4,r19
 4008544:	a00b883a 	mov	r5,r20
 4008548:	88eeb03a 	or	r23,r17,r3
 400854c:	40094e80 	call	40094e8 <__umodsi3>
 4008550:	9809883a 	mov	r4,r19
 4008554:	a00b883a 	mov	r5,r20
 4008558:	1023883a 	mov	r17,r2
 400855c:	85bfffcc 	andi	r22,r16,65535
 4008560:	40094e00 	call	40094e0 <__udivsi3>
 4008564:	1009883a 	mov	r4,r2
 4008568:	b00b883a 	mov	r5,r22
 400856c:	40094f00 	call	40094f0 <__mulsi3>
 4008570:	1007883a 	mov	r3,r2
 4008574:	8808943a 	slli	r4,r17,16
 4008578:	b804d43a 	srli	r2,r23,16
 400857c:	9566983a 	sll	r19,r18,r21
 4008580:	2088b03a 	or	r4,r4,r2
 4008584:	20c0042e 	bgeu	r4,r3,4008598 <__umoddi3+0x530>
 4008588:	2409883a 	add	r4,r4,r16
 400858c:	24000236 	bltu	r4,r16,4008598 <__umoddi3+0x530>
 4008590:	20c0012e 	bgeu	r4,r3,4008598 <__umoddi3+0x530>
 4008594:	2409883a 	add	r4,r4,r16
 4008598:	20e5c83a 	sub	r18,r4,r3
 400859c:	9009883a 	mov	r4,r18
 40085a0:	a00b883a 	mov	r5,r20
 40085a4:	40094e80 	call	40094e8 <__umodsi3>
 40085a8:	1023883a 	mov	r17,r2
 40085ac:	9009883a 	mov	r4,r18
 40085b0:	a00b883a 	mov	r5,r20
 40085b4:	8822943a 	slli	r17,r17,16
 40085b8:	40094e00 	call	40094e0 <__udivsi3>
 40085bc:	1009883a 	mov	r4,r2
 40085c0:	b00b883a 	mov	r5,r22
 40085c4:	bdffffcc 	andi	r23,r23,65535
 40085c8:	40094f00 	call	40094f0 <__mulsi3>
 40085cc:	8de2b03a 	or	r17,r17,r23
 40085d0:	8880042e 	bgeu	r17,r2,40085e4 <__umoddi3+0x57c>
 40085d4:	8c23883a 	add	r17,r17,r16
 40085d8:	8c000236 	bltu	r17,r16,40085e4 <__umoddi3+0x57c>
 40085dc:	8880012e 	bgeu	r17,r2,40085e4 <__umoddi3+0x57c>
 40085e0:	8c23883a 	add	r17,r17,r16
 40085e4:	88a3c83a 	sub	r17,r17,r2
 40085e8:	003f1b06 	br	4008258 <__alt_data_end+0xfe008258>
 40085ec:	25adc83a 	sub	r22,r4,r22
 40085f0:	1d07c83a 	sub	r3,r3,r20
 40085f4:	2589803a 	cmpltu	r4,r4,r22
 40085f8:	1907c83a 	sub	r3,r3,r4
 40085fc:	88c7c83a 	sub	r3,r17,r3
 4008600:	003fc006 	br	4008504 <__alt_data_end+0xfe008504>
 4008604:	00c00204 	movi	r3,8
 4008608:	1827883a 	mov	r19,r3
 400860c:	003ee906 	br	40081b4 <__alt_data_end+0xfe0081b4>
 4008610:	00c00604 	movi	r3,24
 4008614:	1827883a 	mov	r19,r3
 4008618:	003ee606 	br	40081b4 <__alt_data_end+0xfe0081b4>
 400861c:	00800604 	movi	r2,24
 4008620:	1009883a 	mov	r4,r2
 4008624:	003ea806 	br	40080c8 <__alt_data_end+0xfe0080c8>
 4008628:	00800204 	movi	r2,8
 400862c:	1007883a 	mov	r3,r2
 4008630:	003efd06 	br	4008228 <__alt_data_end+0xfe008228>
 4008634:	00800604 	movi	r2,24
 4008638:	1007883a 	mov	r3,r2
 400863c:	003efa06 	br	4008228 <__alt_data_end+0xfe008228>
 4008640:	00800204 	movi	r2,8
 4008644:	1009883a 	mov	r4,r2
 4008648:	003e9f06 	br	40080c8 <__alt_data_end+0xfe0080c8>
 400864c:	38bf7f2e 	bgeu	r7,r2,400844c <__alt_data_end+0xfe00844c>
 4008650:	ad7fff84 	addi	r21,r21,-2
 4008654:	3d0f883a 	add	r7,r7,r20
 4008658:	003f7d06 	br	4008450 <__alt_data_end+0xfe008450>
 400865c:	193f642e 	bgeu	r3,r4,40083f0 <__alt_data_end+0xfe0083f0>
 4008660:	e73fff84 	addi	fp,fp,-2
 4008664:	1d07883a 	add	r3,r3,r20
 4008668:	003f6206 	br	40083f4 <__alt_data_end+0xfe0083f4>
 400866c:	1c07883a 	add	r3,r3,r16
 4008670:	003f0b06 	br	40082a0 <__alt_data_end+0xfe0082a0>
 4008674:	9005883a 	mov	r2,r18
 4008678:	a007883a 	mov	r3,r20
 400867c:	003f2106 	br	4008304 <__alt_data_end+0xfe008304>
 4008680:	913fda36 	bltu	r18,r4,40085ec <__alt_data_end+0xfe0085ec>
 4008684:	202d883a 	mov	r22,r4
 4008688:	0007883a 	mov	r3,zero
 400868c:	003f9d06 	br	4008504 <__alt_data_end+0xfe008504>

04008690 <_fpadd_parts>:
 4008690:	2005883a 	mov	r2,r4
 4008694:	21000017 	ldw	r4,0(r4)
 4008698:	01c00044 	movi	r7,1
 400869c:	3900622e 	bgeu	r7,r4,4008828 <_fpadd_parts+0x198>
 40086a0:	28c00017 	ldw	r3,0(r5)
 40086a4:	38c05f2e 	bgeu	r7,r3,4008824 <_fpadd_parts+0x194>
 40086a8:	01c00104 	movi	r7,4
 40086ac:	21c0c626 	beq	r4,r7,40089c8 <_fpadd_parts+0x338>
 40086b0:	19c05c26 	beq	r3,r7,4008824 <_fpadd_parts+0x194>
 40086b4:	01c00084 	movi	r7,2
 40086b8:	19c06b26 	beq	r3,r7,4008868 <_fpadd_parts+0x1d8>
 40086bc:	21c05926 	beq	r4,r7,4008824 <_fpadd_parts+0x194>
 40086c0:	11c00217 	ldw	r7,8(r2)
 40086c4:	2ac00217 	ldw	r11,8(r5)
 40086c8:	13000317 	ldw	r12,12(r2)
 40086cc:	13400417 	ldw	r13,16(r2)
 40086d0:	3ac9c83a 	sub	r4,r7,r11
 40086d4:	2a000317 	ldw	r8,12(r5)
 40086d8:	2a400417 	ldw	r9,16(r5)
 40086dc:	2015883a 	mov	r10,r4
 40086e0:	20007516 	blt	r4,zero,40088b8 <_fpadd_parts+0x228>
 40086e4:	00c00fc4 	movi	r3,63
 40086e8:	1a805016 	blt	r3,r10,400882c <_fpadd_parts+0x19c>
 40086ec:	0100870e 	bge	zero,r4,400890c <_fpadd_parts+0x27c>
 40086f0:	50fff804 	addi	r3,r10,-32
 40086f4:	18009916 	blt	r3,zero,400895c <_fpadd_parts+0x2cc>
 40086f8:	48d6d83a 	srl	r11,r9,r3
 40086fc:	001d883a 	mov	r14,zero
 4008700:	18009e16 	blt	r3,zero,400897c <_fpadd_parts+0x2ec>
 4008704:	01000044 	movi	r4,1
 4008708:	20c6983a 	sll	r3,r4,r3
 400870c:	0015883a 	mov	r10,zero
 4008710:	513fffc4 	addi	r4,r10,-1
 4008714:	2295403a 	cmpgeu	r10,r4,r10
 4008718:	1a87c83a 	sub	r3,r3,r10
 400871c:	1a52703a 	and	r9,r3,r9
 4008720:	2210703a 	and	r8,r4,r8
 4008724:	4250b03a 	or	r8,r8,r9
 4008728:	4010c03a 	cmpne	r8,r8,zero
 400872c:	42d0b03a 	or	r8,r8,r11
 4008730:	7013883a 	mov	r9,r14
 4008734:	11000117 	ldw	r4,4(r2)
 4008738:	28800117 	ldw	r2,4(r5)
 400873c:	20804126 	beq	r4,r2,4008844 <_fpadd_parts+0x1b4>
 4008740:	20006326 	beq	r4,zero,40088d0 <_fpadd_parts+0x240>
 4008744:	4305c83a 	sub	r2,r8,r12
 4008748:	4091803a 	cmpltu	r8,r8,r2
 400874c:	4b47c83a 	sub	r3,r9,r13
 4008750:	1a07c83a 	sub	r3,r3,r8
 4008754:	18006316 	blt	r3,zero,40088e4 <_fpadd_parts+0x254>
 4008758:	30000115 	stw	zero,4(r6)
 400875c:	31c00215 	stw	r7,8(r6)
 4008760:	30800315 	stw	r2,12(r6)
 4008764:	30c00415 	stw	r3,16(r6)
 4008768:	11ffffc4 	addi	r7,r2,-1
 400876c:	388b403a 	cmpgeu	r5,r7,r2
 4008770:	194bc83a 	sub	r5,r3,r5
 4008774:	01040034 	movhi	r4,4096
 4008778:	213fffc4 	addi	r4,r4,-1
 400877c:	21401736 	bltu	r4,r5,40087dc <_fpadd_parts+0x14c>
 4008780:	29008226 	beq	r5,r4,400898c <_fpadd_parts+0x2fc>
 4008784:	31400217 	ldw	r5,8(r6)
 4008788:	02840034 	movhi	r10,4096
 400878c:	52bfffc4 	addi	r10,r10,-1
 4008790:	033fff84 	movi	r12,-2
 4008794:	297fffc4 	addi	r5,r5,-1
 4008798:	00000106 	br	40087a0 <_fpadd_parts+0x110>
 400879c:	3a804a26 	beq	r7,r10,40088c8 <_fpadd_parts+0x238>
 40087a0:	1089883a 	add	r4,r2,r2
 40087a4:	2091803a 	cmpltu	r8,r4,r2
 40087a8:	18c7883a 	add	r3,r3,r3
 40087ac:	227fffc4 	addi	r9,r4,-1
 40087b0:	40d1883a 	add	r8,r8,r3
 40087b4:	490f403a 	cmpgeu	r7,r9,r4
 40087b8:	41cfc83a 	sub	r7,r8,r7
 40087bc:	2817883a 	mov	r11,r5
 40087c0:	2005883a 	mov	r2,r4
 40087c4:	4007883a 	mov	r3,r8
 40087c8:	297fffc4 	addi	r5,r5,-1
 40087cc:	51fff32e 	bgeu	r10,r7,400879c <__alt_data_end+0xfe00879c>
 40087d0:	31000315 	stw	r4,12(r6)
 40087d4:	32000415 	stw	r8,16(r6)
 40087d8:	32c00215 	stw	r11,8(r6)
 40087dc:	010000c4 	movi	r4,3
 40087e0:	31000015 	stw	r4,0(r6)
 40087e4:	01080034 	movhi	r4,8192
 40087e8:	213fffc4 	addi	r4,r4,-1
 40087ec:	20c00b2e 	bgeu	r4,r3,400881c <_fpadd_parts+0x18c>
 40087f0:	180e97fa 	slli	r7,r3,31
 40087f4:	1008d07a 	srli	r4,r2,1
 40087f8:	31400217 	ldw	r5,8(r6)
 40087fc:	1806d07a 	srli	r3,r3,1
 4008800:	1080004c 	andi	r2,r2,1
 4008804:	3908b03a 	or	r4,r7,r4
 4008808:	1108b03a 	or	r4,r2,r4
 400880c:	29400044 	addi	r5,r5,1
 4008810:	31000315 	stw	r4,12(r6)
 4008814:	30c00415 	stw	r3,16(r6)
 4008818:	31400215 	stw	r5,8(r6)
 400881c:	3005883a 	mov	r2,r6
 4008820:	f800283a 	ret
 4008824:	2805883a 	mov	r2,r5
 4008828:	f800283a 	ret
 400882c:	59c01e0e 	bge	r11,r7,40088a8 <_fpadd_parts+0x218>
 4008830:	11000117 	ldw	r4,4(r2)
 4008834:	28800117 	ldw	r2,4(r5)
 4008838:	0011883a 	mov	r8,zero
 400883c:	0013883a 	mov	r9,zero
 4008840:	20bfbf1e 	bne	r4,r2,4008740 <__alt_data_end+0xfe008740>
 4008844:	4305883a 	add	r2,r8,r12
 4008848:	1207803a 	cmpltu	r3,r2,r8
 400884c:	4b53883a 	add	r9,r9,r13
 4008850:	1a47883a 	add	r3,r3,r9
 4008854:	31000115 	stw	r4,4(r6)
 4008858:	31c00215 	stw	r7,8(r6)
 400885c:	30800315 	stw	r2,12(r6)
 4008860:	30c00415 	stw	r3,16(r6)
 4008864:	003fdd06 	br	40087dc <__alt_data_end+0xfe0087dc>
 4008868:	20ffef1e 	bne	r4,r3,4008828 <__alt_data_end+0xfe008828>
 400886c:	31000015 	stw	r4,0(r6)
 4008870:	10c00117 	ldw	r3,4(r2)
 4008874:	30c00115 	stw	r3,4(r6)
 4008878:	10c00217 	ldw	r3,8(r2)
 400887c:	11000117 	ldw	r4,4(r2)
 4008880:	29400117 	ldw	r5,4(r5)
 4008884:	30c00215 	stw	r3,8(r6)
 4008888:	10c00317 	ldw	r3,12(r2)
 400888c:	2908703a 	and	r4,r5,r4
 4008890:	30c00315 	stw	r3,12(r6)
 4008894:	10c00417 	ldw	r3,16(r2)
 4008898:	31000115 	stw	r4,4(r6)
 400889c:	3005883a 	mov	r2,r6
 40088a0:	30c00415 	stw	r3,16(r6)
 40088a4:	f800283a 	ret
 40088a8:	580f883a 	mov	r7,r11
 40088ac:	0019883a 	mov	r12,zero
 40088b0:	001b883a 	mov	r13,zero
 40088b4:	003f9f06 	br	4008734 <__alt_data_end+0xfe008734>
 40088b8:	0115c83a 	sub	r10,zero,r4
 40088bc:	00c00fc4 	movi	r3,63
 40088c0:	1abfda16 	blt	r3,r10,400882c <__alt_data_end+0xfe00882c>
 40088c4:	003f8906 	br	40086ec <__alt_data_end+0xfe0086ec>
 40088c8:	627fb52e 	bgeu	r12,r9,40087a0 <__alt_data_end+0xfe0087a0>
 40088cc:	003fc006 	br	40087d0 <__alt_data_end+0xfe0087d0>
 40088d0:	6205c83a 	sub	r2,r12,r8
 40088d4:	6099803a 	cmpltu	r12,r12,r2
 40088d8:	6a47c83a 	sub	r3,r13,r9
 40088dc:	1b07c83a 	sub	r3,r3,r12
 40088e0:	183f9d0e 	bge	r3,zero,4008758 <__alt_data_end+0xfe008758>
 40088e4:	0085c83a 	sub	r2,zero,r2
 40088e8:	1008c03a 	cmpne	r4,r2,zero
 40088ec:	00c7c83a 	sub	r3,zero,r3
 40088f0:	1907c83a 	sub	r3,r3,r4
 40088f4:	01000044 	movi	r4,1
 40088f8:	31000115 	stw	r4,4(r6)
 40088fc:	31c00215 	stw	r7,8(r6)
 4008900:	30800315 	stw	r2,12(r6)
 4008904:	30c00415 	stw	r3,16(r6)
 4008908:	003f9706 	br	4008768 <__alt_data_end+0xfe008768>
 400890c:	203f8926 	beq	r4,zero,4008734 <__alt_data_end+0xfe008734>
 4008910:	50fff804 	addi	r3,r10,-32
 4008914:	3a8f883a 	add	r7,r7,r10
 4008918:	18002316 	blt	r3,zero,40089a8 <_fpadd_parts+0x318>
 400891c:	68d6d83a 	srl	r11,r13,r3
 4008920:	001d883a 	mov	r14,zero
 4008924:	18001c16 	blt	r3,zero,4008998 <_fpadd_parts+0x308>
 4008928:	01000044 	movi	r4,1
 400892c:	20c6983a 	sll	r3,r4,r3
 4008930:	0015883a 	mov	r10,zero
 4008934:	513fffc4 	addi	r4,r10,-1
 4008938:	2295403a 	cmpgeu	r10,r4,r10
 400893c:	1a87c83a 	sub	r3,r3,r10
 4008940:	1b5a703a 	and	r13,r3,r13
 4008944:	2318703a 	and	r12,r4,r12
 4008948:	6358b03a 	or	r12,r12,r13
 400894c:	6018c03a 	cmpne	r12,r12,zero
 4008950:	62d8b03a 	or	r12,r12,r11
 4008954:	701b883a 	mov	r13,r14
 4008958:	003f7606 	br	4008734 <__alt_data_end+0xfe008734>
 400895c:	4808907a 	slli	r4,r9,1
 4008960:	02c007c4 	movi	r11,31
 4008964:	5a97c83a 	sub	r11,r11,r10
 4008968:	22c8983a 	sll	r4,r4,r11
 400896c:	4296d83a 	srl	r11,r8,r10
 4008970:	4a9cd83a 	srl	r14,r9,r10
 4008974:	22d6b03a 	or	r11,r4,r11
 4008978:	003f6106 	br	4008700 <__alt_data_end+0xfe008700>
 400897c:	00c00044 	movi	r3,1
 4008980:	1a94983a 	sll	r10,r3,r10
 4008984:	0007883a 	mov	r3,zero
 4008988:	003f6106 	br	4008710 <__alt_data_end+0xfe008710>
 400898c:	013fff84 	movi	r4,-2
 4008990:	21ff7c2e 	bgeu	r4,r7,4008784 <__alt_data_end+0xfe008784>
 4008994:	003f9106 	br	40087dc <__alt_data_end+0xfe0087dc>
 4008998:	00c00044 	movi	r3,1
 400899c:	1a94983a 	sll	r10,r3,r10
 40089a0:	0007883a 	mov	r3,zero
 40089a4:	003fe306 	br	4008934 <__alt_data_end+0xfe008934>
 40089a8:	6816907a 	slli	r11,r13,1
 40089ac:	010007c4 	movi	r4,31
 40089b0:	2289c83a 	sub	r4,r4,r10
 40089b4:	5908983a 	sll	r4,r11,r4
 40089b8:	6296d83a 	srl	r11,r12,r10
 40089bc:	6a9cd83a 	srl	r14,r13,r10
 40089c0:	22d6b03a 	or	r11,r4,r11
 40089c4:	003fd706 	br	4008924 <__alt_data_end+0xfe008924>
 40089c8:	193f971e 	bne	r3,r4,4008828 <__alt_data_end+0xfe008828>
 40089cc:	11000117 	ldw	r4,4(r2)
 40089d0:	28c00117 	ldw	r3,4(r5)
 40089d4:	20ff9426 	beq	r4,r3,4008828 <__alt_data_end+0xfe008828>
 40089d8:	00810074 	movhi	r2,1025
 40089dc:	10b11504 	addi	r2,r2,-15276
 40089e0:	f800283a 	ret

040089e4 <__adddf3>:
 40089e4:	deffec04 	addi	sp,sp,-80
 40089e8:	d9001115 	stw	r4,68(sp)
 40089ec:	d9401215 	stw	r5,72(sp)
 40089f0:	d9001104 	addi	r4,sp,68
 40089f4:	d9400a04 	addi	r5,sp,40
 40089f8:	dfc01315 	stw	ra,76(sp)
 40089fc:	d9c01015 	stw	r7,64(sp)
 4008a00:	d9800f15 	stw	r6,60(sp)
 4008a04:	40098f80 	call	40098f8 <__unpack_d>
 4008a08:	d9000f04 	addi	r4,sp,60
 4008a0c:	d9400504 	addi	r5,sp,20
 4008a10:	40098f80 	call	40098f8 <__unpack_d>
 4008a14:	d9000a04 	addi	r4,sp,40
 4008a18:	d9400504 	addi	r5,sp,20
 4008a1c:	d80d883a 	mov	r6,sp
 4008a20:	40086900 	call	4008690 <_fpadd_parts>
 4008a24:	1009883a 	mov	r4,r2
 4008a28:	40096d40 	call	40096d4 <__pack_d>
 4008a2c:	dfc01317 	ldw	ra,76(sp)
 4008a30:	dec01404 	addi	sp,sp,80
 4008a34:	f800283a 	ret

04008a38 <__subdf3>:
 4008a38:	deffec04 	addi	sp,sp,-80
 4008a3c:	d9001115 	stw	r4,68(sp)
 4008a40:	d9401215 	stw	r5,72(sp)
 4008a44:	d9001104 	addi	r4,sp,68
 4008a48:	d9400a04 	addi	r5,sp,40
 4008a4c:	dfc01315 	stw	ra,76(sp)
 4008a50:	d9c01015 	stw	r7,64(sp)
 4008a54:	d9800f15 	stw	r6,60(sp)
 4008a58:	40098f80 	call	40098f8 <__unpack_d>
 4008a5c:	d9000f04 	addi	r4,sp,60
 4008a60:	d9400504 	addi	r5,sp,20
 4008a64:	40098f80 	call	40098f8 <__unpack_d>
 4008a68:	d8800617 	ldw	r2,24(sp)
 4008a6c:	d9000a04 	addi	r4,sp,40
 4008a70:	d9400504 	addi	r5,sp,20
 4008a74:	d80d883a 	mov	r6,sp
 4008a78:	1080005c 	xori	r2,r2,1
 4008a7c:	d8800615 	stw	r2,24(sp)
 4008a80:	40086900 	call	4008690 <_fpadd_parts>
 4008a84:	1009883a 	mov	r4,r2
 4008a88:	40096d40 	call	40096d4 <__pack_d>
 4008a8c:	dfc01317 	ldw	ra,76(sp)
 4008a90:	dec01404 	addi	sp,sp,80
 4008a94:	f800283a 	ret

04008a98 <__muldf3>:
 4008a98:	deffe404 	addi	sp,sp,-112
 4008a9c:	d9001115 	stw	r4,68(sp)
 4008aa0:	d9401215 	stw	r5,72(sp)
 4008aa4:	d9001104 	addi	r4,sp,68
 4008aa8:	d9400a04 	addi	r5,sp,40
 4008aac:	dfc01b15 	stw	ra,108(sp)
 4008ab0:	d9800f15 	stw	r6,60(sp)
 4008ab4:	d9c01015 	stw	r7,64(sp)
 4008ab8:	ddc01a15 	stw	r23,104(sp)
 4008abc:	dd801915 	stw	r22,100(sp)
 4008ac0:	dd401815 	stw	r21,96(sp)
 4008ac4:	dd001715 	stw	r20,92(sp)
 4008ac8:	dcc01615 	stw	r19,88(sp)
 4008acc:	dc801515 	stw	r18,84(sp)
 4008ad0:	dc401415 	stw	r17,80(sp)
 4008ad4:	dc001315 	stw	r16,76(sp)
 4008ad8:	40098f80 	call	40098f8 <__unpack_d>
 4008adc:	d9000f04 	addi	r4,sp,60
 4008ae0:	d9400504 	addi	r5,sp,20
 4008ae4:	40098f80 	call	40098f8 <__unpack_d>
 4008ae8:	d8c00a17 	ldw	r3,40(sp)
 4008aec:	00800044 	movi	r2,1
 4008af0:	10c01136 	bltu	r2,r3,4008b38 <__muldf3+0xa0>
 4008af4:	d8c00b17 	ldw	r3,44(sp)
 4008af8:	d8800617 	ldw	r2,24(sp)
 4008afc:	d9000a04 	addi	r4,sp,40
 4008b00:	1884c03a 	cmpne	r2,r3,r2
 4008b04:	d8800b15 	stw	r2,44(sp)
 4008b08:	40096d40 	call	40096d4 <__pack_d>
 4008b0c:	dfc01b17 	ldw	ra,108(sp)
 4008b10:	ddc01a17 	ldw	r23,104(sp)
 4008b14:	dd801917 	ldw	r22,100(sp)
 4008b18:	dd401817 	ldw	r21,96(sp)
 4008b1c:	dd001717 	ldw	r20,92(sp)
 4008b20:	dcc01617 	ldw	r19,88(sp)
 4008b24:	dc801517 	ldw	r18,84(sp)
 4008b28:	dc401417 	ldw	r17,80(sp)
 4008b2c:	dc001317 	ldw	r16,76(sp)
 4008b30:	dec01c04 	addi	sp,sp,112
 4008b34:	f800283a 	ret
 4008b38:	d9000517 	ldw	r4,20(sp)
 4008b3c:	11000636 	bltu	r2,r4,4008b58 <__muldf3+0xc0>
 4008b40:	d8800617 	ldw	r2,24(sp)
 4008b44:	d8c00b17 	ldw	r3,44(sp)
 4008b48:	d9000504 	addi	r4,sp,20
 4008b4c:	1884c03a 	cmpne	r2,r3,r2
 4008b50:	d8800615 	stw	r2,24(sp)
 4008b54:	003fec06 	br	4008b08 <__alt_data_end+0xfe008b08>
 4008b58:	00800104 	movi	r2,4
 4008b5c:	1880051e 	bne	r3,r2,4008b74 <__muldf3+0xdc>
 4008b60:	00800084 	movi	r2,2
 4008b64:	20bfe31e 	bne	r4,r2,4008af4 <__alt_data_end+0xfe008af4>
 4008b68:	01010074 	movhi	r4,1025
 4008b6c:	21311504 	addi	r4,r4,-15276
 4008b70:	003fe506 	br	4008b08 <__alt_data_end+0xfe008b08>
 4008b74:	2080031e 	bne	r4,r2,4008b84 <__muldf3+0xec>
 4008b78:	00800084 	movi	r2,2
 4008b7c:	18bffa26 	beq	r3,r2,4008b68 <__alt_data_end+0xfe008b68>
 4008b80:	003fef06 	br	4008b40 <__alt_data_end+0xfe008b40>
 4008b84:	00800084 	movi	r2,2
 4008b88:	18bfda26 	beq	r3,r2,4008af4 <__alt_data_end+0xfe008af4>
 4008b8c:	20bfec26 	beq	r4,r2,4008b40 <__alt_data_end+0xfe008b40>
 4008b90:	dc000d17 	ldw	r16,52(sp)
 4008b94:	dd000817 	ldw	r20,32(sp)
 4008b98:	dc800917 	ldw	r18,36(sp)
 4008b9c:	8009883a 	mov	r4,r16
 4008ba0:	000b883a 	mov	r5,zero
 4008ba4:	a00d883a 	mov	r6,r20
 4008ba8:	000f883a 	mov	r7,zero
 4008bac:	40095180 	call	4009518 <__muldi3>
 4008bb0:	dc400e17 	ldw	r17,56(sp)
 4008bb4:	9009883a 	mov	r4,r18
 4008bb8:	800d883a 	mov	r6,r16
 4008bbc:	000b883a 	mov	r5,zero
 4008bc0:	000f883a 	mov	r7,zero
 4008bc4:	102f883a 	mov	r23,r2
 4008bc8:	1827883a 	mov	r19,r3
 4008bcc:	40095180 	call	4009518 <__muldi3>
 4008bd0:	900d883a 	mov	r6,r18
 4008bd4:	8809883a 	mov	r4,r17
 4008bd8:	000b883a 	mov	r5,zero
 4008bdc:	000f883a 	mov	r7,zero
 4008be0:	102b883a 	mov	r21,r2
 4008be4:	1821883a 	mov	r16,r3
 4008be8:	40095180 	call	4009518 <__muldi3>
 4008bec:	8809883a 	mov	r4,r17
 4008bf0:	000b883a 	mov	r5,zero
 4008bf4:	a00d883a 	mov	r6,r20
 4008bf8:	000f883a 	mov	r7,zero
 4008bfc:	102d883a 	mov	r22,r2
 4008c00:	1825883a 	mov	r18,r3
 4008c04:	40095180 	call	4009518 <__muldi3>
 4008c08:	154b883a 	add	r5,r2,r21
 4008c0c:	2889803a 	cmpltu	r4,r5,r2
 4008c10:	1c07883a 	add	r3,r3,r16
 4008c14:	20c9883a 	add	r4,r4,r3
 4008c18:	24004b36 	bltu	r4,r16,4008d48 <__muldf3+0x2b0>
 4008c1c:	8100011e 	bne	r16,r4,4008c24 <__muldf3+0x18c>
 4008c20:	2d404936 	bltu	r5,r21,4008d48 <__muldf3+0x2b0>
 4008c24:	0011883a 	mov	r8,zero
 4008c28:	0007883a 	mov	r3,zero
 4008c2c:	2ccb883a 	add	r5,r5,r19
 4008c30:	b80d883a 	mov	r6,r23
 4008c34:	2cc0012e 	bgeu	r5,r19,4008c3c <__muldf3+0x1a4>
 4008c38:	02000044 	movi	r8,1
 4008c3c:	258f883a 	add	r7,r4,r22
 4008c40:	3909803a 	cmpltu	r4,r7,r4
 4008c44:	da400c17 	ldw	r9,48(sp)
 4008c48:	2489883a 	add	r4,r4,r18
 4008c4c:	d8800717 	ldw	r2,28(sp)
 4008c50:	20c9883a 	add	r4,r4,r3
 4008c54:	da800b17 	ldw	r10,44(sp)
 4008c58:	d8c00617 	ldw	r3,24(sp)
 4008c5c:	3a11883a 	add	r8,r7,r8
 4008c60:	4885883a 	add	r2,r9,r2
 4008c64:	50c6c03a 	cmpne	r3,r10,r3
 4008c68:	41cf803a 	cmpltu	r7,r8,r7
 4008c6c:	12400104 	addi	r9,r2,4
 4008c70:	d8c00115 	stw	r3,4(sp)
 4008c74:	3909883a 	add	r4,r7,r4
 4008c78:	da400215 	stw	r9,8(sp)
 4008c7c:	03480034 	movhi	r13,8192
 4008c80:	6b7fffc4 	addi	r13,r13,-1
 4008c84:	4007883a 	mov	r3,r8
 4008c88:	6900102e 	bgeu	r13,r4,4008ccc <__muldf3+0x234>
 4008c8c:	10800144 	addi	r2,r2,5
 4008c90:	180ed07a 	srli	r7,r3,1
 4008c94:	18c0004c 	andi	r3,r3,1
 4008c98:	201097fa 	slli	r8,r4,31
 4008c9c:	281697fa 	slli	r11,r5,31
 4008ca0:	2008d07a 	srli	r4,r4,1
 4008ca4:	3014d07a 	srli	r10,r6,1
 4008ca8:	2812d07a 	srli	r9,r5,1
 4008cac:	1019883a 	mov	r12,r2
 4008cb0:	18000226 	beq	r3,zero,4008cbc <__muldf3+0x224>
 4008cb4:	5a8cb03a 	or	r6,r11,r10
 4008cb8:	49600034 	orhi	r5,r9,32768
 4008cbc:	41c6b03a 	or	r3,r8,r7
 4008cc0:	10800044 	addi	r2,r2,1
 4008cc4:	693ff236 	bltu	r13,r4,4008c90 <__alt_data_end+0xfe008c90>
 4008cc8:	db000215 	stw	r12,8(sp)
 4008ccc:	03440034 	movhi	r13,4096
 4008cd0:	6b7fffc4 	addi	r13,r13,-1
 4008cd4:	69001336 	bltu	r13,r4,4008d24 <__muldf3+0x28c>
 4008cd8:	d8800217 	ldw	r2,8(sp)
 4008cdc:	10bfffc4 	addi	r2,r2,-1
 4008ce0:	18d3883a 	add	r9,r3,r3
 4008ce4:	48c7803a 	cmpltu	r3,r9,r3
 4008ce8:	2109883a 	add	r4,r4,r4
 4008cec:	190f883a 	add	r7,r3,r4
 4008cf0:	3191883a 	add	r8,r6,r6
 4008cf4:	4197803a 	cmpltu	r11,r8,r6
 4008cf8:	2955883a 	add	r10,r5,r5
 4008cfc:	1019883a 	mov	r12,r2
 4008d00:	4807883a 	mov	r3,r9
 4008d04:	3809883a 	mov	r4,r7
 4008d08:	2800010e 	bge	r5,zero,4008d10 <__muldf3+0x278>
 4008d0c:	48c00054 	ori	r3,r9,1
 4008d10:	400d883a 	mov	r6,r8
 4008d14:	5a8b883a 	add	r5,r11,r10
 4008d18:	10bfffc4 	addi	r2,r2,-1
 4008d1c:	69fff02e 	bgeu	r13,r7,4008ce0 <__alt_data_end+0xfe008ce0>
 4008d20:	db000215 	stw	r12,8(sp)
 4008d24:	18803fcc 	andi	r2,r3,255
 4008d28:	01c02004 	movi	r7,128
 4008d2c:	11c00926 	beq	r2,r7,4008d54 <__muldf3+0x2bc>
 4008d30:	008000c4 	movi	r2,3
 4008d34:	d9000415 	stw	r4,16(sp)
 4008d38:	d8c00315 	stw	r3,12(sp)
 4008d3c:	d8800015 	stw	r2,0(sp)
 4008d40:	d809883a 	mov	r4,sp
 4008d44:	003f7006 	br	4008b08 <__alt_data_end+0xfe008b08>
 4008d48:	0011883a 	mov	r8,zero
 4008d4c:	00c00044 	movi	r3,1
 4008d50:	003fb606 	br	4008c2c <__alt_data_end+0xfe008c2c>
 4008d54:	19c0400c 	andi	r7,r3,256
 4008d58:	383ff51e 	bne	r7,zero,4008d30 <__alt_data_end+0xfe008d30>
 4008d5c:	314ab03a 	or	r5,r6,r5
 4008d60:	283ff326 	beq	r5,zero,4008d30 <__alt_data_end+0xfe008d30>
 4008d64:	1885883a 	add	r2,r3,r2
 4008d68:	10cb803a 	cmpltu	r5,r2,r3
 4008d6c:	00ffc004 	movi	r3,-256
 4008d70:	10c6703a 	and	r3,r2,r3
 4008d74:	2909883a 	add	r4,r5,r4
 4008d78:	003fed06 	br	4008d30 <__alt_data_end+0xfe008d30>

04008d7c <__divdf3>:
 4008d7c:	defff104 	addi	sp,sp,-60
 4008d80:	d9000c15 	stw	r4,48(sp)
 4008d84:	d9400d15 	stw	r5,52(sp)
 4008d88:	d9000c04 	addi	r4,sp,48
 4008d8c:	d9400504 	addi	r5,sp,20
 4008d90:	dfc00e15 	stw	ra,56(sp)
 4008d94:	d9800a15 	stw	r6,40(sp)
 4008d98:	d9c00b15 	stw	r7,44(sp)
 4008d9c:	40098f80 	call	40098f8 <__unpack_d>
 4008da0:	d9000a04 	addi	r4,sp,40
 4008da4:	d80b883a 	mov	r5,sp
 4008da8:	40098f80 	call	40098f8 <__unpack_d>
 4008dac:	d8c00517 	ldw	r3,20(sp)
 4008db0:	00800044 	movi	r2,1
 4008db4:	10c00536 	bltu	r2,r3,4008dcc <__divdf3+0x50>
 4008db8:	d9000504 	addi	r4,sp,20
 4008dbc:	40096d40 	call	40096d4 <__pack_d>
 4008dc0:	dfc00e17 	ldw	ra,56(sp)
 4008dc4:	dec00f04 	addi	sp,sp,60
 4008dc8:	f800283a 	ret
 4008dcc:	d9000017 	ldw	r4,0(sp)
 4008dd0:	11000536 	bltu	r2,r4,4008de8 <__divdf3+0x6c>
 4008dd4:	d809883a 	mov	r4,sp
 4008dd8:	40096d40 	call	40096d4 <__pack_d>
 4008ddc:	dfc00e17 	ldw	ra,56(sp)
 4008de0:	dec00f04 	addi	sp,sp,60
 4008de4:	f800283a 	ret
 4008de8:	d9800617 	ldw	r6,24(sp)
 4008dec:	d9400117 	ldw	r5,4(sp)
 4008df0:	00800104 	movi	r2,4
 4008df4:	314af03a 	xor	r5,r6,r5
 4008df8:	d9400615 	stw	r5,24(sp)
 4008dfc:	18800226 	beq	r3,r2,4008e08 <__divdf3+0x8c>
 4008e00:	01400084 	movi	r5,2
 4008e04:	1940041e 	bne	r3,r5,4008e18 <__divdf3+0x9c>
 4008e08:	193feb1e 	bne	r3,r4,4008db8 <__alt_data_end+0xfe008db8>
 4008e0c:	01010074 	movhi	r4,1025
 4008e10:	21311504 	addi	r4,r4,-15276
 4008e14:	003fe906 	br	4008dbc <__alt_data_end+0xfe008dbc>
 4008e18:	20803326 	beq	r4,r2,4008ee8 <__divdf3+0x16c>
 4008e1c:	21403726 	beq	r4,r5,4008efc <__divdf3+0x180>
 4008e20:	d8800217 	ldw	r2,8(sp)
 4008e24:	d9000717 	ldw	r4,28(sp)
 4008e28:	d8c00917 	ldw	r3,36(sp)
 4008e2c:	da000417 	ldw	r8,16(sp)
 4008e30:	2089c83a 	sub	r4,r4,r2
 4008e34:	d9000715 	stw	r4,28(sp)
 4008e38:	d8800817 	ldw	r2,32(sp)
 4008e3c:	dbc00317 	ldw	r15,12(sp)
 4008e40:	1a000236 	bltu	r3,r8,4008e4c <__divdf3+0xd0>
 4008e44:	40c0081e 	bne	r8,r3,4008e68 <__divdf3+0xec>
 4008e48:	13c0072e 	bgeu	r2,r15,4008e68 <__divdf3+0xec>
 4008e4c:	108b883a 	add	r5,r2,r2
 4008e50:	288d803a 	cmpltu	r6,r5,r2
 4008e54:	18c7883a 	add	r3,r3,r3
 4008e58:	213fffc4 	addi	r4,r4,-1
 4008e5c:	2805883a 	mov	r2,r5
 4008e60:	30c7883a 	add	r3,r6,r3
 4008e64:	d9000715 	stw	r4,28(sp)
 4008e68:	01400f44 	movi	r5,61
 4008e6c:	000f883a 	mov	r7,zero
 4008e70:	01040034 	movhi	r4,4096
 4008e74:	0019883a 	mov	r12,zero
 4008e78:	001b883a 	mov	r13,zero
 4008e7c:	201697fa 	slli	r11,r4,31
 4008e80:	3814d07a 	srli	r10,r7,1
 4008e84:	297fffc4 	addi	r5,r5,-1
 4008e88:	1a000936 	bltu	r3,r8,4008eb0 <__divdf3+0x134>
 4008e8c:	13cdc83a 	sub	r6,r2,r15
 4008e90:	1193803a 	cmpltu	r9,r2,r6
 4008e94:	1a1dc83a 	sub	r14,r3,r8
 4008e98:	40c0011e 	bne	r8,r3,4008ea0 <__divdf3+0x124>
 4008e9c:	13c00436 	bltu	r2,r15,4008eb0 <__divdf3+0x134>
 4008ea0:	3005883a 	mov	r2,r6
 4008ea4:	7247c83a 	sub	r3,r14,r9
 4008ea8:	61d8b03a 	or	r12,r12,r7
 4008eac:	691ab03a 	or	r13,r13,r4
 4008eb0:	108d883a 	add	r6,r2,r2
 4008eb4:	3093803a 	cmpltu	r9,r6,r2
 4008eb8:	18c7883a 	add	r3,r3,r3
 4008ebc:	5a8eb03a 	or	r7,r11,r10
 4008ec0:	2008d07a 	srli	r4,r4,1
 4008ec4:	3005883a 	mov	r2,r6
 4008ec8:	48c7883a 	add	r3,r9,r3
 4008ecc:	283feb1e 	bne	r5,zero,4008e7c <__alt_data_end+0xfe008e7c>
 4008ed0:	61003fcc 	andi	r4,r12,255
 4008ed4:	01402004 	movi	r5,128
 4008ed8:	21400b26 	beq	r4,r5,4008f08 <__divdf3+0x18c>
 4008edc:	db000815 	stw	r12,32(sp)
 4008ee0:	db400915 	stw	r13,36(sp)
 4008ee4:	003fb406 	br	4008db8 <__alt_data_end+0xfe008db8>
 4008ee8:	d8000815 	stw	zero,32(sp)
 4008eec:	d8000915 	stw	zero,36(sp)
 4008ef0:	d8000715 	stw	zero,28(sp)
 4008ef4:	d9000504 	addi	r4,sp,20
 4008ef8:	003fb006 	br	4008dbc <__alt_data_end+0xfe008dbc>
 4008efc:	d8800515 	stw	r2,20(sp)
 4008f00:	d9000504 	addi	r4,sp,20
 4008f04:	003fad06 	br	4008dbc <__alt_data_end+0xfe008dbc>
 4008f08:	6140400c 	andi	r5,r12,256
 4008f0c:	283ff31e 	bne	r5,zero,4008edc <__alt_data_end+0xfe008edc>
 4008f10:	30c4b03a 	or	r2,r6,r3
 4008f14:	103ff126 	beq	r2,zero,4008edc <__alt_data_end+0xfe008edc>
 4008f18:	6109883a 	add	r4,r12,r4
 4008f1c:	2305803a 	cmpltu	r2,r4,r12
 4008f20:	033fc004 	movi	r12,-256
 4008f24:	2318703a 	and	r12,r4,r12
 4008f28:	135b883a 	add	r13,r2,r13
 4008f2c:	003feb06 	br	4008edc <__alt_data_end+0xfe008edc>

04008f30 <__eqdf2>:
 4008f30:	defff104 	addi	sp,sp,-60
 4008f34:	d9000c15 	stw	r4,48(sp)
 4008f38:	d9400d15 	stw	r5,52(sp)
 4008f3c:	d9000c04 	addi	r4,sp,48
 4008f40:	d9400504 	addi	r5,sp,20
 4008f44:	dfc00e15 	stw	ra,56(sp)
 4008f48:	d9800a15 	stw	r6,40(sp)
 4008f4c:	d9c00b15 	stw	r7,44(sp)
 4008f50:	40098f80 	call	40098f8 <__unpack_d>
 4008f54:	d9000a04 	addi	r4,sp,40
 4008f58:	d80b883a 	mov	r5,sp
 4008f5c:	40098f80 	call	40098f8 <__unpack_d>
 4008f60:	d8c00517 	ldw	r3,20(sp)
 4008f64:	00800044 	movi	r2,1
 4008f68:	10c0052e 	bgeu	r2,r3,4008f80 <__eqdf2+0x50>
 4008f6c:	d8c00017 	ldw	r3,0(sp)
 4008f70:	10c0032e 	bgeu	r2,r3,4008f80 <__eqdf2+0x50>
 4008f74:	d9000504 	addi	r4,sp,20
 4008f78:	d80b883a 	mov	r5,sp
 4008f7c:	40099fc0 	call	40099fc <__fpcmp_parts_d>
 4008f80:	dfc00e17 	ldw	ra,56(sp)
 4008f84:	dec00f04 	addi	sp,sp,60
 4008f88:	f800283a 	ret

04008f8c <__nedf2>:
 4008f8c:	defff104 	addi	sp,sp,-60
 4008f90:	d9000c15 	stw	r4,48(sp)
 4008f94:	d9400d15 	stw	r5,52(sp)
 4008f98:	d9000c04 	addi	r4,sp,48
 4008f9c:	d9400504 	addi	r5,sp,20
 4008fa0:	dfc00e15 	stw	ra,56(sp)
 4008fa4:	d9800a15 	stw	r6,40(sp)
 4008fa8:	d9c00b15 	stw	r7,44(sp)
 4008fac:	40098f80 	call	40098f8 <__unpack_d>
 4008fb0:	d9000a04 	addi	r4,sp,40
 4008fb4:	d80b883a 	mov	r5,sp
 4008fb8:	40098f80 	call	40098f8 <__unpack_d>
 4008fbc:	d8c00517 	ldw	r3,20(sp)
 4008fc0:	00800044 	movi	r2,1
 4008fc4:	10c0052e 	bgeu	r2,r3,4008fdc <__nedf2+0x50>
 4008fc8:	d8c00017 	ldw	r3,0(sp)
 4008fcc:	10c0032e 	bgeu	r2,r3,4008fdc <__nedf2+0x50>
 4008fd0:	d9000504 	addi	r4,sp,20
 4008fd4:	d80b883a 	mov	r5,sp
 4008fd8:	40099fc0 	call	40099fc <__fpcmp_parts_d>
 4008fdc:	dfc00e17 	ldw	ra,56(sp)
 4008fe0:	dec00f04 	addi	sp,sp,60
 4008fe4:	f800283a 	ret

04008fe8 <__gtdf2>:
 4008fe8:	defff104 	addi	sp,sp,-60
 4008fec:	d9000c15 	stw	r4,48(sp)
 4008ff0:	d9400d15 	stw	r5,52(sp)
 4008ff4:	d9000c04 	addi	r4,sp,48
 4008ff8:	d9400504 	addi	r5,sp,20
 4008ffc:	dfc00e15 	stw	ra,56(sp)
 4009000:	d9800a15 	stw	r6,40(sp)
 4009004:	d9c00b15 	stw	r7,44(sp)
 4009008:	40098f80 	call	40098f8 <__unpack_d>
 400900c:	d9000a04 	addi	r4,sp,40
 4009010:	d80b883a 	mov	r5,sp
 4009014:	40098f80 	call	40098f8 <__unpack_d>
 4009018:	d8c00517 	ldw	r3,20(sp)
 400901c:	00800044 	movi	r2,1
 4009020:	10c0082e 	bgeu	r2,r3,4009044 <__gtdf2+0x5c>
 4009024:	d8c00017 	ldw	r3,0(sp)
 4009028:	10c0062e 	bgeu	r2,r3,4009044 <__gtdf2+0x5c>
 400902c:	d9000504 	addi	r4,sp,20
 4009030:	d80b883a 	mov	r5,sp
 4009034:	40099fc0 	call	40099fc <__fpcmp_parts_d>
 4009038:	dfc00e17 	ldw	ra,56(sp)
 400903c:	dec00f04 	addi	sp,sp,60
 4009040:	f800283a 	ret
 4009044:	00bfffc4 	movi	r2,-1
 4009048:	003ffb06 	br	4009038 <__alt_data_end+0xfe009038>

0400904c <__gedf2>:
 400904c:	defff104 	addi	sp,sp,-60
 4009050:	d9000c15 	stw	r4,48(sp)
 4009054:	d9400d15 	stw	r5,52(sp)
 4009058:	d9000c04 	addi	r4,sp,48
 400905c:	d9400504 	addi	r5,sp,20
 4009060:	dfc00e15 	stw	ra,56(sp)
 4009064:	d9800a15 	stw	r6,40(sp)
 4009068:	d9c00b15 	stw	r7,44(sp)
 400906c:	40098f80 	call	40098f8 <__unpack_d>
 4009070:	d9000a04 	addi	r4,sp,40
 4009074:	d80b883a 	mov	r5,sp
 4009078:	40098f80 	call	40098f8 <__unpack_d>
 400907c:	d8c00517 	ldw	r3,20(sp)
 4009080:	00800044 	movi	r2,1
 4009084:	10c0082e 	bgeu	r2,r3,40090a8 <__gedf2+0x5c>
 4009088:	d8c00017 	ldw	r3,0(sp)
 400908c:	10c0062e 	bgeu	r2,r3,40090a8 <__gedf2+0x5c>
 4009090:	d9000504 	addi	r4,sp,20
 4009094:	d80b883a 	mov	r5,sp
 4009098:	40099fc0 	call	40099fc <__fpcmp_parts_d>
 400909c:	dfc00e17 	ldw	ra,56(sp)
 40090a0:	dec00f04 	addi	sp,sp,60
 40090a4:	f800283a 	ret
 40090a8:	00bfffc4 	movi	r2,-1
 40090ac:	003ffb06 	br	400909c <__alt_data_end+0xfe00909c>

040090b0 <__ltdf2>:
 40090b0:	defff104 	addi	sp,sp,-60
 40090b4:	d9000c15 	stw	r4,48(sp)
 40090b8:	d9400d15 	stw	r5,52(sp)
 40090bc:	d9000c04 	addi	r4,sp,48
 40090c0:	d9400504 	addi	r5,sp,20
 40090c4:	dfc00e15 	stw	ra,56(sp)
 40090c8:	d9800a15 	stw	r6,40(sp)
 40090cc:	d9c00b15 	stw	r7,44(sp)
 40090d0:	40098f80 	call	40098f8 <__unpack_d>
 40090d4:	d9000a04 	addi	r4,sp,40
 40090d8:	d80b883a 	mov	r5,sp
 40090dc:	40098f80 	call	40098f8 <__unpack_d>
 40090e0:	d8c00517 	ldw	r3,20(sp)
 40090e4:	00800044 	movi	r2,1
 40090e8:	10c0052e 	bgeu	r2,r3,4009100 <__ltdf2+0x50>
 40090ec:	d8c00017 	ldw	r3,0(sp)
 40090f0:	10c0032e 	bgeu	r2,r3,4009100 <__ltdf2+0x50>
 40090f4:	d9000504 	addi	r4,sp,20
 40090f8:	d80b883a 	mov	r5,sp
 40090fc:	40099fc0 	call	40099fc <__fpcmp_parts_d>
 4009100:	dfc00e17 	ldw	ra,56(sp)
 4009104:	dec00f04 	addi	sp,sp,60
 4009108:	f800283a 	ret

0400910c <__floatsidf>:
 400910c:	2004d7fa 	srli	r2,r4,31
 4009110:	defff904 	addi	sp,sp,-28
 4009114:	00c000c4 	movi	r3,3
 4009118:	dfc00615 	stw	ra,24(sp)
 400911c:	dc000515 	stw	r16,20(sp)
 4009120:	d8c00015 	stw	r3,0(sp)
 4009124:	d8800115 	stw	r2,4(sp)
 4009128:	2000081e 	bne	r4,zero,400914c <__floatsidf+0x40>
 400912c:	00800084 	movi	r2,2
 4009130:	d8800015 	stw	r2,0(sp)
 4009134:	d809883a 	mov	r4,sp
 4009138:	40096d40 	call	40096d4 <__pack_d>
 400913c:	dfc00617 	ldw	ra,24(sp)
 4009140:	dc000517 	ldw	r16,20(sp)
 4009144:	dec00704 	addi	sp,sp,28
 4009148:	f800283a 	ret
 400914c:	00c00f04 	movi	r3,60
 4009150:	d8c00215 	stw	r3,8(sp)
 4009154:	10000f1e 	bne	r2,zero,4009194 <__floatsidf+0x88>
 4009158:	2021883a 	mov	r16,r4
 400915c:	8009883a 	mov	r4,r16
 4009160:	40096280 	call	4009628 <__clzsi2>
 4009164:	11000744 	addi	r4,r2,29
 4009168:	0100110e 	bge	zero,r4,40091b0 <__floatsidf+0xa4>
 400916c:	10ffff44 	addi	r3,r2,-3
 4009170:	18001216 	blt	r3,zero,40091bc <__floatsidf+0xb0>
 4009174:	80c6983a 	sll	r3,r16,r3
 4009178:	0009883a 	mov	r4,zero
 400917c:	014007c4 	movi	r5,31
 4009180:	2885c83a 	sub	r2,r5,r2
 4009184:	d9000315 	stw	r4,12(sp)
 4009188:	d8c00415 	stw	r3,16(sp)
 400918c:	d8800215 	stw	r2,8(sp)
 4009190:	003fe806 	br	4009134 <__alt_data_end+0xfe009134>
 4009194:	00a00034 	movhi	r2,32768
 4009198:	20800e26 	beq	r4,r2,40091d4 <__floatsidf+0xc8>
 400919c:	0121c83a 	sub	r16,zero,r4
 40091a0:	8009883a 	mov	r4,r16
 40091a4:	40096280 	call	4009628 <__clzsi2>
 40091a8:	11000744 	addi	r4,r2,29
 40091ac:	013fef16 	blt	zero,r4,400916c <__alt_data_end+0xfe00916c>
 40091b0:	dc000315 	stw	r16,12(sp)
 40091b4:	d8000415 	stw	zero,16(sp)
 40091b8:	003fde06 	br	4009134 <__alt_data_end+0xfe009134>
 40091bc:	800ad07a 	srli	r5,r16,1
 40091c0:	00c007c4 	movi	r3,31
 40091c4:	1907c83a 	sub	r3,r3,r4
 40091c8:	28c6d83a 	srl	r3,r5,r3
 40091cc:	8108983a 	sll	r4,r16,r4
 40091d0:	003fea06 	br	400917c <__alt_data_end+0xfe00917c>
 40091d4:	0005883a 	mov	r2,zero
 40091d8:	00f07834 	movhi	r3,49632
 40091dc:	003fd706 	br	400913c <__alt_data_end+0xfe00913c>

040091e0 <__fixdfsi>:
 40091e0:	defff804 	addi	sp,sp,-32
 40091e4:	d9000515 	stw	r4,20(sp)
 40091e8:	d9400615 	stw	r5,24(sp)
 40091ec:	d9000504 	addi	r4,sp,20
 40091f0:	d80b883a 	mov	r5,sp
 40091f4:	dfc00715 	stw	ra,28(sp)
 40091f8:	40098f80 	call	40098f8 <__unpack_d>
 40091fc:	d8800017 	ldw	r2,0(sp)
 4009200:	00c00084 	movi	r3,2
 4009204:	10c01c26 	beq	r2,r3,4009278 <__fixdfsi+0x98>
 4009208:	00c00044 	movi	r3,1
 400920c:	18801a2e 	bgeu	r3,r2,4009278 <__fixdfsi+0x98>
 4009210:	00c00104 	movi	r3,4
 4009214:	10c01126 	beq	r2,r3,400925c <__fixdfsi+0x7c>
 4009218:	d8800217 	ldw	r2,8(sp)
 400921c:	10001616 	blt	r2,zero,4009278 <__fixdfsi+0x98>
 4009220:	00c00784 	movi	r3,30
 4009224:	18800d16 	blt	r3,r2,400925c <__fixdfsi+0x7c>
 4009228:	00c00f04 	movi	r3,60
 400922c:	1885c83a 	sub	r2,r3,r2
 4009230:	10fff804 	addi	r3,r2,-32
 4009234:	d9400317 	ldw	r5,12(sp)
 4009238:	d9000417 	ldw	r4,16(sp)
 400923c:	18001216 	blt	r3,zero,4009288 <__fixdfsi+0xa8>
 4009240:	20c4d83a 	srl	r2,r4,r3
 4009244:	d8c00117 	ldw	r3,4(sp)
 4009248:	18000826 	beq	r3,zero,400926c <__fixdfsi+0x8c>
 400924c:	0085c83a 	sub	r2,zero,r2
 4009250:	dfc00717 	ldw	ra,28(sp)
 4009254:	dec00804 	addi	sp,sp,32
 4009258:	f800283a 	ret
 400925c:	d8800117 	ldw	r2,4(sp)
 4009260:	00e00034 	movhi	r3,32768
 4009264:	1005003a 	cmpeq	r2,r2,zero
 4009268:	1885c83a 	sub	r2,r3,r2
 400926c:	dfc00717 	ldw	ra,28(sp)
 4009270:	dec00804 	addi	sp,sp,32
 4009274:	f800283a 	ret
 4009278:	0005883a 	mov	r2,zero
 400927c:	dfc00717 	ldw	ra,28(sp)
 4009280:	dec00804 	addi	sp,sp,32
 4009284:	f800283a 	ret
 4009288:	2008907a 	slli	r4,r4,1
 400928c:	018007c4 	movi	r6,31
 4009290:	308dc83a 	sub	r6,r6,r2
 4009294:	2188983a 	sll	r4,r4,r6
 4009298:	2884d83a 	srl	r2,r5,r2
 400929c:	2084b03a 	or	r2,r4,r2
 40092a0:	003fe806 	br	4009244 <__alt_data_end+0xfe009244>

040092a4 <__floatunsidf>:
 40092a4:	defff904 	addi	sp,sp,-28
 40092a8:	dc000515 	stw	r16,20(sp)
 40092ac:	dfc00615 	stw	ra,24(sp)
 40092b0:	d8000115 	stw	zero,4(sp)
 40092b4:	2021883a 	mov	r16,r4
 40092b8:	20001726 	beq	r4,zero,4009318 <__floatunsidf+0x74>
 40092bc:	008000c4 	movi	r2,3
 40092c0:	d8800015 	stw	r2,0(sp)
 40092c4:	00800f04 	movi	r2,60
 40092c8:	d8800215 	stw	r2,8(sp)
 40092cc:	40096280 	call	4009628 <__clzsi2>
 40092d0:	10c00744 	addi	r3,r2,29
 40092d4:	18001816 	blt	r3,zero,4009338 <__floatunsidf+0x94>
 40092d8:	18002d26 	beq	r3,zero,4009390 <__floatunsidf+0xec>
 40092dc:	113fff44 	addi	r4,r2,-3
 40092e0:	20002e16 	blt	r4,zero,400939c <__floatunsidf+0xf8>
 40092e4:	8108983a 	sll	r4,r16,r4
 40092e8:	0021883a 	mov	r16,zero
 40092ec:	014007c4 	movi	r5,31
 40092f0:	2885c83a 	sub	r2,r5,r2
 40092f4:	dc000315 	stw	r16,12(sp)
 40092f8:	d9000415 	stw	r4,16(sp)
 40092fc:	d8800215 	stw	r2,8(sp)
 4009300:	d809883a 	mov	r4,sp
 4009304:	40096d40 	call	40096d4 <__pack_d>
 4009308:	dfc00617 	ldw	ra,24(sp)
 400930c:	dc000517 	ldw	r16,20(sp)
 4009310:	dec00704 	addi	sp,sp,28
 4009314:	f800283a 	ret
 4009318:	00800084 	movi	r2,2
 400931c:	d809883a 	mov	r4,sp
 4009320:	d8800015 	stw	r2,0(sp)
 4009324:	40096d40 	call	40096d4 <__pack_d>
 4009328:	dfc00617 	ldw	ra,24(sp)
 400932c:	dc000517 	ldw	r16,20(sp)
 4009330:	dec00704 	addi	sp,sp,28
 4009334:	f800283a 	ret
 4009338:	00c7c83a 	sub	r3,zero,r3
 400933c:	193ff804 	addi	r4,r3,-32
 4009340:	20001c16 	blt	r4,zero,40093b4 <__floatunsidf+0x110>
 4009344:	000b883a 	mov	r5,zero
 4009348:	2009d7fa 	srai	r4,r4,31
 400934c:	80c6d83a 	srl	r3,r16,r3
 4009350:	297fffc4 	addi	r5,r5,-1
 4009354:	2c20703a 	and	r16,r5,r16
 4009358:	8020c03a 	cmpne	r16,r16,zero
 400935c:	1906703a 	and	r3,r3,r4
 4009360:	010007c4 	movi	r4,31
 4009364:	80c6b03a 	or	r3,r16,r3
 4009368:	2085c83a 	sub	r2,r4,r2
 400936c:	d809883a 	mov	r4,sp
 4009370:	d8c00315 	stw	r3,12(sp)
 4009374:	d8000415 	stw	zero,16(sp)
 4009378:	d8800215 	stw	r2,8(sp)
 400937c:	40096d40 	call	40096d4 <__pack_d>
 4009380:	dfc00617 	ldw	ra,24(sp)
 4009384:	dc000517 	ldw	r16,20(sp)
 4009388:	dec00704 	addi	sp,sp,28
 400938c:	f800283a 	ret
 4009390:	dc000315 	stw	r16,12(sp)
 4009394:	d8000415 	stw	zero,16(sp)
 4009398:	003fd906 	br	4009300 <__alt_data_end+0xfe009300>
 400939c:	800ad07a 	srli	r5,r16,1
 40093a0:	010007c4 	movi	r4,31
 40093a4:	20c9c83a 	sub	r4,r4,r3
 40093a8:	2908d83a 	srl	r4,r5,r4
 40093ac:	80e0983a 	sll	r16,r16,r3
 40093b0:	003fce06 	br	40092ec <__alt_data_end+0xfe0092ec>
 40093b4:	01400044 	movi	r5,1
 40093b8:	28ca983a 	sll	r5,r5,r3
 40093bc:	003fe206 	br	4009348 <__alt_data_end+0xfe009348>

040093c0 <udivmodsi4>:
 40093c0:	2005883a 	mov	r2,r4
 40093c4:	2900182e 	bgeu	r5,r4,4009428 <udivmodsi4+0x68>
 40093c8:	28001716 	blt	r5,zero,4009428 <udivmodsi4+0x68>
 40093cc:	01000804 	movi	r4,32
 40093d0:	00c00044 	movi	r3,1
 40093d4:	00000206 	br	40093e0 <udivmodsi4+0x20>
 40093d8:	20001126 	beq	r4,zero,4009420 <udivmodsi4+0x60>
 40093dc:	28000516 	blt	r5,zero,40093f4 <udivmodsi4+0x34>
 40093e0:	294b883a 	add	r5,r5,r5
 40093e4:	213fffc4 	addi	r4,r4,-1
 40093e8:	18c7883a 	add	r3,r3,r3
 40093ec:	28bffa36 	bltu	r5,r2,40093d8 <__alt_data_end+0xfe0093d8>
 40093f0:	18000b26 	beq	r3,zero,4009420 <udivmodsi4+0x60>
 40093f4:	0009883a 	mov	r4,zero
 40093f8:	11400236 	bltu	r2,r5,4009404 <udivmodsi4+0x44>
 40093fc:	1145c83a 	sub	r2,r2,r5
 4009400:	20c8b03a 	or	r4,r4,r3
 4009404:	1806d07a 	srli	r3,r3,1
 4009408:	280ad07a 	srli	r5,r5,1
 400940c:	183ffa1e 	bne	r3,zero,40093f8 <__alt_data_end+0xfe0093f8>
 4009410:	3000021e 	bne	r6,zero,400941c <udivmodsi4+0x5c>
 4009414:	2005883a 	mov	r2,r4
 4009418:	f800283a 	ret
 400941c:	f800283a 	ret
 4009420:	0009883a 	mov	r4,zero
 4009424:	003ffa06 	br	4009410 <__alt_data_end+0xfe009410>
 4009428:	00c00044 	movi	r3,1
 400942c:	0009883a 	mov	r4,zero
 4009430:	003ff106 	br	40093f8 <__alt_data_end+0xfe0093f8>

04009434 <__divsi3>:
 4009434:	defffe04 	addi	sp,sp,-8
 4009438:	dfc00115 	stw	ra,4(sp)
 400943c:	dc000015 	stw	r16,0(sp)
 4009440:	20000a16 	blt	r4,zero,400946c <__divsi3+0x38>
 4009444:	0021883a 	mov	r16,zero
 4009448:	28000b16 	blt	r5,zero,4009478 <__divsi3+0x44>
 400944c:	000d883a 	mov	r6,zero
 4009450:	40093c00 	call	40093c0 <udivmodsi4>
 4009454:	80000126 	beq	r16,zero,400945c <__divsi3+0x28>
 4009458:	0085c83a 	sub	r2,zero,r2
 400945c:	dfc00117 	ldw	ra,4(sp)
 4009460:	dc000017 	ldw	r16,0(sp)
 4009464:	dec00204 	addi	sp,sp,8
 4009468:	f800283a 	ret
 400946c:	0109c83a 	sub	r4,zero,r4
 4009470:	04000044 	movi	r16,1
 4009474:	283ff50e 	bge	r5,zero,400944c <__alt_data_end+0xfe00944c>
 4009478:	014bc83a 	sub	r5,zero,r5
 400947c:	8400005c 	xori	r16,r16,1
 4009480:	003ff206 	br	400944c <__alt_data_end+0xfe00944c>

04009484 <__modsi3>:
 4009484:	deffff04 	addi	sp,sp,-4
 4009488:	dfc00015 	stw	ra,0(sp)
 400948c:	20000516 	blt	r4,zero,40094a4 <__modsi3+0x20>
 4009490:	28000c16 	blt	r5,zero,40094c4 <__modsi3+0x40>
 4009494:	01800044 	movi	r6,1
 4009498:	dfc00017 	ldw	ra,0(sp)
 400949c:	dec00104 	addi	sp,sp,4
 40094a0:	40093c01 	jmpi	40093c0 <udivmodsi4>
 40094a4:	0109c83a 	sub	r4,zero,r4
 40094a8:	28000b16 	blt	r5,zero,40094d8 <__modsi3+0x54>
 40094ac:	01800044 	movi	r6,1
 40094b0:	40093c00 	call	40093c0 <udivmodsi4>
 40094b4:	0085c83a 	sub	r2,zero,r2
 40094b8:	dfc00017 	ldw	ra,0(sp)
 40094bc:	dec00104 	addi	sp,sp,4
 40094c0:	f800283a 	ret
 40094c4:	014bc83a 	sub	r5,zero,r5
 40094c8:	01800044 	movi	r6,1
 40094cc:	dfc00017 	ldw	ra,0(sp)
 40094d0:	dec00104 	addi	sp,sp,4
 40094d4:	40093c01 	jmpi	40093c0 <udivmodsi4>
 40094d8:	014bc83a 	sub	r5,zero,r5
 40094dc:	003ff306 	br	40094ac <__alt_data_end+0xfe0094ac>

040094e0 <__udivsi3>:
 40094e0:	000d883a 	mov	r6,zero
 40094e4:	40093c01 	jmpi	40093c0 <udivmodsi4>

040094e8 <__umodsi3>:
 40094e8:	01800044 	movi	r6,1
 40094ec:	40093c01 	jmpi	40093c0 <udivmodsi4>

040094f0 <__mulsi3>:
 40094f0:	0005883a 	mov	r2,zero
 40094f4:	20000726 	beq	r4,zero,4009514 <__mulsi3+0x24>
 40094f8:	20c0004c 	andi	r3,r4,1
 40094fc:	2008d07a 	srli	r4,r4,1
 4009500:	18000126 	beq	r3,zero,4009508 <__mulsi3+0x18>
 4009504:	1145883a 	add	r2,r2,r5
 4009508:	294b883a 	add	r5,r5,r5
 400950c:	203ffa1e 	bne	r4,zero,40094f8 <__alt_data_end+0xfe0094f8>
 4009510:	f800283a 	ret
 4009514:	f800283a 	ret

04009518 <__muldi3>:
 4009518:	defff604 	addi	sp,sp,-40
 400951c:	dd400515 	stw	r21,20(sp)
 4009520:	dd000415 	stw	r20,16(sp)
 4009524:	257fffcc 	andi	r21,r4,65535
 4009528:	353fffcc 	andi	r20,r6,65535
 400952c:	dcc00315 	stw	r19,12(sp)
 4009530:	3026d43a 	srli	r19,r6,16
 4009534:	dd800615 	stw	r22,24(sp)
 4009538:	dc800215 	stw	r18,8(sp)
 400953c:	dc400115 	stw	r17,4(sp)
 4009540:	2024d43a 	srli	r18,r4,16
 4009544:	2023883a 	mov	r17,r4
 4009548:	282d883a 	mov	r22,r5
 400954c:	a009883a 	mov	r4,r20
 4009550:	a80b883a 	mov	r5,r21
 4009554:	dfc00915 	stw	ra,36(sp)
 4009558:	df000815 	stw	fp,32(sp)
 400955c:	ddc00715 	stw	r23,28(sp)
 4009560:	3839883a 	mov	fp,r7
 4009564:	dc000015 	stw	r16,0(sp)
 4009568:	3021883a 	mov	r16,r6
 400956c:	40094f00 	call	40094f0 <__mulsi3>
 4009570:	a80b883a 	mov	r5,r21
 4009574:	9809883a 	mov	r4,r19
 4009578:	102f883a 	mov	r23,r2
 400957c:	40094f00 	call	40094f0 <__mulsi3>
 4009580:	a009883a 	mov	r4,r20
 4009584:	900b883a 	mov	r5,r18
 4009588:	102b883a 	mov	r21,r2
 400958c:	40094f00 	call	40094f0 <__mulsi3>
 4009590:	9809883a 	mov	r4,r19
 4009594:	900b883a 	mov	r5,r18
 4009598:	1029883a 	mov	r20,r2
 400959c:	40094f00 	call	40094f0 <__mulsi3>
 40095a0:	1007883a 	mov	r3,r2
 40095a4:	b804d43a 	srli	r2,r23,16
 40095a8:	a549883a 	add	r4,r20,r21
 40095ac:	2089883a 	add	r4,r4,r2
 40095b0:	2500022e 	bgeu	r4,r20,40095bc <__muldi3+0xa4>
 40095b4:	00800074 	movhi	r2,1
 40095b8:	1887883a 	add	r3,r3,r2
 40095bc:	200cd43a 	srli	r6,r4,16
 40095c0:	2004943a 	slli	r2,r4,16
 40095c4:	e00b883a 	mov	r5,fp
 40095c8:	8809883a 	mov	r4,r17
 40095cc:	bdffffcc 	andi	r23,r23,65535
 40095d0:	19a3883a 	add	r17,r3,r6
 40095d4:	15ef883a 	add	r23,r2,r23
 40095d8:	40094f00 	call	40094f0 <__mulsi3>
 40095dc:	8009883a 	mov	r4,r16
 40095e0:	b00b883a 	mov	r5,r22
 40095e4:	1025883a 	mov	r18,r2
 40095e8:	40094f00 	call	40094f0 <__mulsi3>
 40095ec:	9085883a 	add	r2,r18,r2
 40095f0:	1447883a 	add	r3,r2,r17
 40095f4:	b805883a 	mov	r2,r23
 40095f8:	dfc00917 	ldw	ra,36(sp)
 40095fc:	df000817 	ldw	fp,32(sp)
 4009600:	ddc00717 	ldw	r23,28(sp)
 4009604:	dd800617 	ldw	r22,24(sp)
 4009608:	dd400517 	ldw	r21,20(sp)
 400960c:	dd000417 	ldw	r20,16(sp)
 4009610:	dcc00317 	ldw	r19,12(sp)
 4009614:	dc800217 	ldw	r18,8(sp)
 4009618:	dc400117 	ldw	r17,4(sp)
 400961c:	dc000017 	ldw	r16,0(sp)
 4009620:	dec00a04 	addi	sp,sp,40
 4009624:	f800283a 	ret

04009628 <__clzsi2>:
 4009628:	00bfffd4 	movui	r2,65535
 400962c:	11000b36 	bltu	r2,r4,400965c <__clzsi2+0x34>
 4009630:	00803fc4 	movi	r2,255
 4009634:	11001e2e 	bgeu	r2,r4,40096b0 <__clzsi2+0x88>
 4009638:	00c00204 	movi	r3,8
 400963c:	20c8d83a 	srl	r4,r4,r3
 4009640:	00c10074 	movhi	r3,1025
 4009644:	18f11a04 	addi	r3,r3,-15256
 4009648:	00800604 	movi	r2,24
 400964c:	1909883a 	add	r4,r3,r4
 4009650:	20c00003 	ldbu	r3,0(r4)
 4009654:	10c5c83a 	sub	r2,r2,r3
 4009658:	f800283a 	ret
 400965c:	00804034 	movhi	r2,256
 4009660:	10bfffc4 	addi	r2,r2,-1
 4009664:	11000936 	bltu	r2,r4,400968c <__clzsi2+0x64>
 4009668:	00800404 	movi	r2,16
 400966c:	1007883a 	mov	r3,r2
 4009670:	20c8d83a 	srl	r4,r4,r3
 4009674:	00c10074 	movhi	r3,1025
 4009678:	18f11a04 	addi	r3,r3,-15256
 400967c:	1909883a 	add	r4,r3,r4
 4009680:	20c00003 	ldbu	r3,0(r4)
 4009684:	10c5c83a 	sub	r2,r2,r3
 4009688:	f800283a 	ret
 400968c:	00c00604 	movi	r3,24
 4009690:	20c8d83a 	srl	r4,r4,r3
 4009694:	00c10074 	movhi	r3,1025
 4009698:	18f11a04 	addi	r3,r3,-15256
 400969c:	00800204 	movi	r2,8
 40096a0:	1909883a 	add	r4,r3,r4
 40096a4:	20c00003 	ldbu	r3,0(r4)
 40096a8:	10c5c83a 	sub	r2,r2,r3
 40096ac:	f800283a 	ret
 40096b0:	0007883a 	mov	r3,zero
 40096b4:	20c8d83a 	srl	r4,r4,r3
 40096b8:	00c10074 	movhi	r3,1025
 40096bc:	18f11a04 	addi	r3,r3,-15256
 40096c0:	00800804 	movi	r2,32
 40096c4:	1909883a 	add	r4,r3,r4
 40096c8:	20c00003 	ldbu	r3,0(r4)
 40096cc:	10c5c83a 	sub	r2,r2,r3
 40096d0:	f800283a 	ret

040096d4 <__pack_d>:
 40096d4:	20800017 	ldw	r2,0(r4)
 40096d8:	defff804 	addi	sp,sp,-32
 40096dc:	dcc00315 	stw	r19,12(sp)
 40096e0:	dc800215 	stw	r18,8(sp)
 40096e4:	dfc00715 	stw	ra,28(sp)
 40096e8:	dd800615 	stw	r22,24(sp)
 40096ec:	dd400515 	stw	r21,20(sp)
 40096f0:	dd000415 	stw	r20,16(sp)
 40096f4:	dc400115 	stw	r17,4(sp)
 40096f8:	dc000015 	stw	r16,0(sp)
 40096fc:	04800044 	movi	r18,1
 4009700:	24400317 	ldw	r17,12(r4)
 4009704:	24000417 	ldw	r16,16(r4)
 4009708:	24c00117 	ldw	r19,4(r4)
 400970c:	9080422e 	bgeu	r18,r2,4009818 <__pack_d+0x144>
 4009710:	00c00104 	movi	r3,4
 4009714:	10c03c26 	beq	r2,r3,4009808 <__pack_d+0x134>
 4009718:	00c00084 	movi	r3,2
 400971c:	10c01926 	beq	r2,r3,4009784 <__pack_d+0xb0>
 4009720:	8c04b03a 	or	r2,r17,r16
 4009724:	10001726 	beq	r2,zero,4009784 <__pack_d+0xb0>
 4009728:	21000217 	ldw	r4,8(r4)
 400972c:	00bf0084 	movi	r2,-1022
 4009730:	20804016 	blt	r4,r2,4009834 <__pack_d+0x160>
 4009734:	0080ffc4 	movi	r2,1023
 4009738:	11003316 	blt	r2,r4,4009808 <__pack_d+0x134>
 400973c:	88803fcc 	andi	r2,r17,255
 4009740:	00c02004 	movi	r3,128
 4009744:	10c02926 	beq	r2,r3,40097ec <__pack_d+0x118>
 4009748:	88801fc4 	addi	r2,r17,127
 400974c:	1463803a 	cmpltu	r17,r2,r17
 4009750:	8c21883a 	add	r16,r17,r16
 4009754:	1023883a 	mov	r17,r2
 4009758:	00880034 	movhi	r2,8192
 400975c:	10bfffc4 	addi	r2,r2,-1
 4009760:	14001c36 	bltu	r2,r16,40097d4 <__pack_d+0x100>
 4009764:	2100ffc4 	addi	r4,r4,1023
 4009768:	8006963a 	slli	r3,r16,24
 400976c:	8804d23a 	srli	r2,r17,8
 4009770:	8020913a 	slli	r16,r16,4
 4009774:	2101ffcc 	andi	r4,r4,2047
 4009778:	1884b03a 	or	r2,r3,r2
 400977c:	8020d33a 	srli	r16,r16,12
 4009780:	00000306 	br	4009790 <__pack_d+0xbc>
 4009784:	0009883a 	mov	r4,zero
 4009788:	0005883a 	mov	r2,zero
 400978c:	0021883a 	mov	r16,zero
 4009790:	2008953a 	slli	r4,r4,20
 4009794:	982697fa 	slli	r19,r19,31
 4009798:	00c00434 	movhi	r3,16
 400979c:	18ffffc4 	addi	r3,r3,-1
 40097a0:	80e0703a 	and	r16,r16,r3
 40097a4:	8106b03a 	or	r3,r16,r4
 40097a8:	1cc6b03a 	or	r3,r3,r19
 40097ac:	dfc00717 	ldw	ra,28(sp)
 40097b0:	dd800617 	ldw	r22,24(sp)
 40097b4:	dd400517 	ldw	r21,20(sp)
 40097b8:	dd000417 	ldw	r20,16(sp)
 40097bc:	dcc00317 	ldw	r19,12(sp)
 40097c0:	dc800217 	ldw	r18,8(sp)
 40097c4:	dc400117 	ldw	r17,4(sp)
 40097c8:	dc000017 	ldw	r16,0(sp)
 40097cc:	dec00804 	addi	sp,sp,32
 40097d0:	f800283a 	ret
 40097d4:	800697fa 	slli	r3,r16,31
 40097d8:	8804d07a 	srli	r2,r17,1
 40097dc:	21010004 	addi	r4,r4,1024
 40097e0:	8020d07a 	srli	r16,r16,1
 40097e4:	18a2b03a 	or	r17,r3,r2
 40097e8:	003fdf06 	br	4009768 <__alt_data_end+0xfe009768>
 40097ec:	88c0400c 	andi	r3,r17,256
 40097f0:	183fd926 	beq	r3,zero,4009758 <__alt_data_end+0xfe009758>
 40097f4:	8885883a 	add	r2,r17,r2
 40097f8:	1463803a 	cmpltu	r17,r2,r17
 40097fc:	8c21883a 	add	r16,r17,r16
 4009800:	1023883a 	mov	r17,r2
 4009804:	003fd406 	br	4009758 <__alt_data_end+0xfe009758>
 4009808:	0101ffc4 	movi	r4,2047
 400980c:	0005883a 	mov	r2,zero
 4009810:	0021883a 	mov	r16,zero
 4009814:	003fde06 	br	4009790 <__alt_data_end+0xfe009790>
 4009818:	84000234 	orhi	r16,r16,8
 400981c:	00c00434 	movhi	r3,16
 4009820:	18ffffc4 	addi	r3,r3,-1
 4009824:	8805883a 	mov	r2,r17
 4009828:	80e0703a 	and	r16,r16,r3
 400982c:	0101ffc4 	movi	r4,2047
 4009830:	003fd706 	br	4009790 <__alt_data_end+0xfe009790>
 4009834:	1129c83a 	sub	r20,r2,r4
 4009838:	00800e04 	movi	r2,56
 400983c:	15002716 	blt	r2,r20,40098dc <__pack_d+0x208>
 4009840:	800b883a 	mov	r5,r16
 4009844:	a00d883a 	mov	r6,r20
 4009848:	8809883a 	mov	r4,r17
 400984c:	4009acc0 	call	4009acc <__lshrdi3>
 4009850:	9009883a 	mov	r4,r18
 4009854:	000b883a 	mov	r5,zero
 4009858:	a00d883a 	mov	r6,r20
 400985c:	102d883a 	mov	r22,r2
 4009860:	182b883a 	mov	r21,r3
 4009864:	4009b100 	call	4009b10 <__ashldi3>
 4009868:	1009003a 	cmpeq	r4,r2,zero
 400986c:	1907c83a 	sub	r3,r3,r4
 4009870:	10bfffc4 	addi	r2,r2,-1
 4009874:	1c20703a 	and	r16,r3,r16
 4009878:	1444703a 	and	r2,r2,r17
 400987c:	1404b03a 	or	r2,r2,r16
 4009880:	1004c03a 	cmpne	r2,r2,zero
 4009884:	1584b03a 	or	r2,r2,r22
 4009888:	11003fcc 	andi	r4,r2,255
 400988c:	01402004 	movi	r5,128
 4009890:	a807883a 	mov	r3,r21
 4009894:	2140131e 	bne	r4,r5,40098e4 <__pack_d+0x210>
 4009898:	1140400c 	andi	r5,r2,256
 400989c:	28000426 	beq	r5,zero,40098b0 <__pack_d+0x1dc>
 40098a0:	1109883a 	add	r4,r2,r4
 40098a4:	2085803a 	cmpltu	r2,r4,r2
 40098a8:	1547883a 	add	r3,r2,r21
 40098ac:	2005883a 	mov	r2,r4
 40098b0:	1808963a 	slli	r4,r3,24
 40098b4:	1004d23a 	srli	r2,r2,8
 40098b8:	1820913a 	slli	r16,r3,4
 40098bc:	01440034 	movhi	r5,4096
 40098c0:	297fffc4 	addi	r5,r5,-1
 40098c4:	2084b03a 	or	r2,r4,r2
 40098c8:	8020d33a 	srli	r16,r16,12
 40098cc:	01000044 	movi	r4,1
 40098d0:	28ffaf36 	bltu	r5,r3,4009790 <__alt_data_end+0xfe009790>
 40098d4:	0009883a 	mov	r4,zero
 40098d8:	003fad06 	br	4009790 <__alt_data_end+0xfe009790>
 40098dc:	0005883a 	mov	r2,zero
 40098e0:	0007883a 	mov	r3,zero
 40098e4:	11001fc4 	addi	r4,r2,127
 40098e8:	2085803a 	cmpltu	r2,r4,r2
 40098ec:	10c7883a 	add	r3,r2,r3
 40098f0:	2005883a 	mov	r2,r4
 40098f4:	003fee06 	br	40098b0 <__alt_data_end+0xfe0098b0>

040098f8 <__unpack_d>:
 40098f8:	21800117 	ldw	r6,4(r4)
 40098fc:	20c00017 	ldw	r3,0(r4)
 4009900:	3004d7fa 	srli	r2,r6,31
 4009904:	3008d53a 	srli	r4,r6,20
 4009908:	28800115 	stw	r2,4(r5)
 400990c:	2101ffcc 	andi	r4,r4,2047
 4009910:	00800434 	movhi	r2,16
 4009914:	10bfffc4 	addi	r2,r2,-1
 4009918:	3084703a 	and	r2,r6,r2
 400991c:	20001a1e 	bne	r4,zero,4009988 <__unpack_d+0x90>
 4009920:	1888b03a 	or	r4,r3,r2
 4009924:	20002626 	beq	r4,zero,40099c0 <__unpack_d+0xc8>
 4009928:	1808d63a 	srli	r4,r3,24
 400992c:	1004923a 	slli	r2,r2,8
 4009930:	01bf0084 	movi	r6,-1022
 4009934:	29800215 	stw	r6,8(r5)
 4009938:	2084b03a 	or	r2,r4,r2
 400993c:	010000c4 	movi	r4,3
 4009940:	29000015 	stw	r4,0(r5)
 4009944:	02040034 	movhi	r8,4096
 4009948:	423fffc4 	addi	r8,r8,-1
 400994c:	1806923a 	slli	r3,r3,8
 4009950:	40801836 	bltu	r8,r2,40099b4 <__unpack_d+0xbc>
 4009954:	013f0044 	movi	r4,-1023
 4009958:	18cd883a 	add	r6,r3,r3
 400995c:	30c7803a 	cmpltu	r3,r6,r3
 4009960:	1085883a 	add	r2,r2,r2
 4009964:	1885883a 	add	r2,r3,r2
 4009968:	200f883a 	mov	r7,r4
 400996c:	3007883a 	mov	r3,r6
 4009970:	213fffc4 	addi	r4,r4,-1
 4009974:	40bff82e 	bgeu	r8,r2,4009958 <__alt_data_end+0xfe009958>
 4009978:	29c00215 	stw	r7,8(r5)
 400997c:	28c00315 	stw	r3,12(r5)
 4009980:	28800415 	stw	r2,16(r5)
 4009984:	f800283a 	ret
 4009988:	01c1ffc4 	movi	r7,2047
 400998c:	21c00f26 	beq	r4,r7,40099cc <__unpack_d+0xd4>
 4009990:	180cd63a 	srli	r6,r3,24
 4009994:	1004923a 	slli	r2,r2,8
 4009998:	213f0044 	addi	r4,r4,-1023
 400999c:	1806923a 	slli	r3,r3,8
 40099a0:	3084b03a 	or	r2,r6,r2
 40099a4:	29000215 	stw	r4,8(r5)
 40099a8:	010000c4 	movi	r4,3
 40099ac:	10840034 	orhi	r2,r2,4096
 40099b0:	29000015 	stw	r4,0(r5)
 40099b4:	28c00315 	stw	r3,12(r5)
 40099b8:	28800415 	stw	r2,16(r5)
 40099bc:	f800283a 	ret
 40099c0:	00800084 	movi	r2,2
 40099c4:	28800015 	stw	r2,0(r5)
 40099c8:	f800283a 	ret
 40099cc:	1888b03a 	or	r4,r3,r2
 40099d0:	20000526 	beq	r4,zero,40099e8 <__unpack_d+0xf0>
 40099d4:	3180022c 	andhi	r6,r6,8
 40099d8:	30000626 	beq	r6,zero,40099f4 <__unpack_d+0xfc>
 40099dc:	01000044 	movi	r4,1
 40099e0:	29000015 	stw	r4,0(r5)
 40099e4:	003ff306 	br	40099b4 <__alt_data_end+0xfe0099b4>
 40099e8:	00800104 	movi	r2,4
 40099ec:	28800015 	stw	r2,0(r5)
 40099f0:	f800283a 	ret
 40099f4:	28000015 	stw	zero,0(r5)
 40099f8:	003fee06 	br	40099b4 <__alt_data_end+0xfe0099b4>

040099fc <__fpcmp_parts_d>:
 40099fc:	20c00017 	ldw	r3,0(r4)
 4009a00:	00800044 	movi	r2,1
 4009a04:	10c0142e 	bgeu	r2,r3,4009a58 <__fpcmp_parts_d+0x5c>
 4009a08:	29800017 	ldw	r6,0(r5)
 4009a0c:	1180122e 	bgeu	r2,r6,4009a58 <__fpcmp_parts_d+0x5c>
 4009a10:	01c00104 	movi	r7,4
 4009a14:	19c02826 	beq	r3,r7,4009ab8 <__fpcmp_parts_d+0xbc>
 4009a18:	31c00926 	beq	r6,r7,4009a40 <__fpcmp_parts_d+0x44>
 4009a1c:	01c00084 	movi	r7,2
 4009a20:	19c00626 	beq	r3,r7,4009a3c <__fpcmp_parts_d+0x40>
 4009a24:	31c00a26 	beq	r6,r7,4009a50 <__fpcmp_parts_d+0x54>
 4009a28:	20c00117 	ldw	r3,4(r4)
 4009a2c:	29800117 	ldw	r6,4(r5)
 4009a30:	19800b26 	beq	r3,r6,4009a60 <__fpcmp_parts_d+0x64>
 4009a34:	1800041e 	bne	r3,zero,4009a48 <__fpcmp_parts_d+0x4c>
 4009a38:	f800283a 	ret
 4009a3c:	30c01a26 	beq	r6,r3,4009aa8 <__fpcmp_parts_d+0xac>
 4009a40:	28800117 	ldw	r2,4(r5)
 4009a44:	1000041e 	bne	r2,zero,4009a58 <__fpcmp_parts_d+0x5c>
 4009a48:	00bfffc4 	movi	r2,-1
 4009a4c:	f800283a 	ret
 4009a50:	20800117 	ldw	r2,4(r4)
 4009a54:	103ffc1e 	bne	r2,zero,4009a48 <__alt_data_end+0xfe009a48>
 4009a58:	00800044 	movi	r2,1
 4009a5c:	f800283a 	ret
 4009a60:	21c00217 	ldw	r7,8(r4)
 4009a64:	29800217 	ldw	r6,8(r5)
 4009a68:	31c0020e 	bge	r6,r7,4009a74 <__fpcmp_parts_d+0x78>
 4009a6c:	183ff61e 	bne	r3,zero,4009a48 <__alt_data_end+0xfe009a48>
 4009a70:	f800283a 	ret
 4009a74:	39800a16 	blt	r7,r6,4009aa0 <__fpcmp_parts_d+0xa4>
 4009a78:	20800417 	ldw	r2,16(r4)
 4009a7c:	29800417 	ldw	r6,16(r5)
 4009a80:	21c00317 	ldw	r7,12(r4)
 4009a84:	29000317 	ldw	r4,12(r5)
 4009a88:	30800936 	bltu	r6,r2,4009ab0 <__fpcmp_parts_d+0xb4>
 4009a8c:	1180011e 	bne	r2,r6,4009a94 <__fpcmp_parts_d+0x98>
 4009a90:	21c00736 	bltu	r4,r7,4009ab0 <__fpcmp_parts_d+0xb4>
 4009a94:	11800236 	bltu	r2,r6,4009aa0 <__fpcmp_parts_d+0xa4>
 4009a98:	3080031e 	bne	r6,r2,4009aa8 <__fpcmp_parts_d+0xac>
 4009a9c:	3900022e 	bgeu	r7,r4,4009aa8 <__fpcmp_parts_d+0xac>
 4009aa0:	183fe926 	beq	r3,zero,4009a48 <__alt_data_end+0xfe009a48>
 4009aa4:	003fec06 	br	4009a58 <__alt_data_end+0xfe009a58>
 4009aa8:	0005883a 	mov	r2,zero
 4009aac:	f800283a 	ret
 4009ab0:	183fe926 	beq	r3,zero,4009a58 <__alt_data_end+0xfe009a58>
 4009ab4:	003fe406 	br	4009a48 <__alt_data_end+0xfe009a48>
 4009ab8:	30ffe51e 	bne	r6,r3,4009a50 <__alt_data_end+0xfe009a50>
 4009abc:	28c00117 	ldw	r3,4(r5)
 4009ac0:	20800117 	ldw	r2,4(r4)
 4009ac4:	1885c83a 	sub	r2,r3,r2
 4009ac8:	f800283a 	ret

04009acc <__lshrdi3>:
 4009acc:	2005883a 	mov	r2,r4
 4009ad0:	2807883a 	mov	r3,r5
 4009ad4:	30000826 	beq	r6,zero,4009af8 <__lshrdi3+0x2c>
 4009ad8:	01000804 	movi	r4,32
 4009adc:	2189c83a 	sub	r4,r4,r6
 4009ae0:	0100060e 	bge	zero,r4,4009afc <__lshrdi3+0x30>
 4009ae4:	1184d83a 	srl	r2,r2,r6
 4009ae8:	2908983a 	sll	r4,r5,r4
 4009aec:	298cd83a 	srl	r6,r5,r6
 4009af0:	2084b03a 	or	r2,r4,r2
 4009af4:	3007883a 	mov	r3,r6
 4009af8:	f800283a 	ret
 4009afc:	0105c83a 	sub	r2,zero,r4
 4009b00:	000d883a 	mov	r6,zero
 4009b04:	2884d83a 	srl	r2,r5,r2
 4009b08:	3007883a 	mov	r3,r6
 4009b0c:	003ffa06 	br	4009af8 <__alt_data_end+0xfe009af8>

04009b10 <__ashldi3>:
 4009b10:	2005883a 	mov	r2,r4
 4009b14:	2807883a 	mov	r3,r5
 4009b18:	30000826 	beq	r6,zero,4009b3c <__ashldi3+0x2c>
 4009b1c:	01000804 	movi	r4,32
 4009b20:	2189c83a 	sub	r4,r4,r6
 4009b24:	0100060e 	bge	zero,r4,4009b40 <__ashldi3+0x30>
 4009b28:	1108d83a 	srl	r4,r2,r4
 4009b2c:	2986983a 	sll	r3,r5,r6
 4009b30:	118c983a 	sll	r6,r2,r6
 4009b34:	20c6b03a 	or	r3,r4,r3
 4009b38:	3005883a 	mov	r2,r6
 4009b3c:	f800283a 	ret
 4009b40:	0107c83a 	sub	r3,zero,r4
 4009b44:	000d883a 	mov	r6,zero
 4009b48:	10c6983a 	sll	r3,r2,r3
 4009b4c:	3005883a 	mov	r2,r6
 4009b50:	003ffa06 	br	4009b3c <__alt_data_end+0xfe009b3c>

04009b54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009b54:	defffe04 	addi	sp,sp,-8
 4009b58:	dfc00115 	stw	ra,4(sp)
 4009b5c:	df000015 	stw	fp,0(sp)
 4009b60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4009b64:	00810074 	movhi	r2,1025
 4009b68:	10b7f804 	addi	r2,r2,-8224
 4009b6c:	10800017 	ldw	r2,0(r2)
 4009b70:	10000526 	beq	r2,zero,4009b88 <alt_get_errno+0x34>
 4009b74:	00810074 	movhi	r2,1025
 4009b78:	10b7f804 	addi	r2,r2,-8224
 4009b7c:	10800017 	ldw	r2,0(r2)
 4009b80:	103ee83a 	callr	r2
 4009b84:	00000206 	br	4009b90 <alt_get_errno+0x3c>
 4009b88:	00810074 	movhi	r2,1025
 4009b8c:	10be9904 	addi	r2,r2,-1436
}
 4009b90:	e037883a 	mov	sp,fp
 4009b94:	dfc00117 	ldw	ra,4(sp)
 4009b98:	df000017 	ldw	fp,0(sp)
 4009b9c:	dec00204 	addi	sp,sp,8
 4009ba0:	f800283a 	ret

04009ba4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4009ba4:	defffb04 	addi	sp,sp,-20
 4009ba8:	dfc00415 	stw	ra,16(sp)
 4009bac:	df000315 	stw	fp,12(sp)
 4009bb0:	df000304 	addi	fp,sp,12
 4009bb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4009bb8:	e0bfff17 	ldw	r2,-4(fp)
 4009bbc:	10000716 	blt	r2,zero,4009bdc <close+0x38>
 4009bc0:	e13fff17 	ldw	r4,-4(fp)
 4009bc4:	01400304 	movi	r5,12
 4009bc8:	40094f00 	call	40094f0 <__mulsi3>
 4009bcc:	00c10074 	movhi	r3,1025
 4009bd0:	18f37604 	addi	r3,r3,-12840
 4009bd4:	10c5883a 	add	r2,r2,r3
 4009bd8:	00000106 	br	4009be0 <close+0x3c>
 4009bdc:	0005883a 	mov	r2,zero
 4009be0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4009be4:	e0bffd17 	ldw	r2,-12(fp)
 4009be8:	10001826 	beq	r2,zero,4009c4c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4009bec:	e0bffd17 	ldw	r2,-12(fp)
 4009bf0:	10800017 	ldw	r2,0(r2)
 4009bf4:	10800417 	ldw	r2,16(r2)
 4009bf8:	10000626 	beq	r2,zero,4009c14 <close+0x70>
 4009bfc:	e0bffd17 	ldw	r2,-12(fp)
 4009c00:	10800017 	ldw	r2,0(r2)
 4009c04:	10800417 	ldw	r2,16(r2)
 4009c08:	e13ffd17 	ldw	r4,-12(fp)
 4009c0c:	103ee83a 	callr	r2
 4009c10:	00000106 	br	4009c18 <close+0x74>
 4009c14:	0005883a 	mov	r2,zero
 4009c18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4009c1c:	e13fff17 	ldw	r4,-4(fp)
 4009c20:	400a29c0 	call	400a29c <alt_release_fd>
    if (rval < 0)
 4009c24:	e0bffe17 	ldw	r2,-8(fp)
 4009c28:	1000060e 	bge	r2,zero,4009c44 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4009c2c:	4009b540 	call	4009b54 <alt_get_errno>
 4009c30:	e0fffe17 	ldw	r3,-8(fp)
 4009c34:	00c7c83a 	sub	r3,zero,r3
 4009c38:	10c00015 	stw	r3,0(r2)
      return -1;
 4009c3c:	00bfffc4 	movi	r2,-1
 4009c40:	00000606 	br	4009c5c <close+0xb8>
    }
    return 0;
 4009c44:	0005883a 	mov	r2,zero
 4009c48:	00000406 	br	4009c5c <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009c4c:	4009b540 	call	4009b54 <alt_get_errno>
 4009c50:	00c01444 	movi	r3,81
 4009c54:	10c00015 	stw	r3,0(r2)
    return -1;
 4009c58:	00bfffc4 	movi	r2,-1
  }
}
 4009c5c:	e037883a 	mov	sp,fp
 4009c60:	dfc00117 	ldw	ra,4(sp)
 4009c64:	df000017 	ldw	fp,0(sp)
 4009c68:	dec00204 	addi	sp,sp,8
 4009c6c:	f800283a 	ret

04009c70 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4009c70:	defffc04 	addi	sp,sp,-16
 4009c74:	df000315 	stw	fp,12(sp)
 4009c78:	df000304 	addi	fp,sp,12
 4009c7c:	e13ffd15 	stw	r4,-12(fp)
 4009c80:	e17ffe15 	stw	r5,-8(fp)
 4009c84:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4009c88:	e0bfff17 	ldw	r2,-4(fp)
}
 4009c8c:	e037883a 	mov	sp,fp
 4009c90:	df000017 	ldw	fp,0(sp)
 4009c94:	dec00104 	addi	sp,sp,4
 4009c98:	f800283a 	ret

04009c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009c9c:	defffe04 	addi	sp,sp,-8
 4009ca0:	dfc00115 	stw	ra,4(sp)
 4009ca4:	df000015 	stw	fp,0(sp)
 4009ca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4009cac:	00810074 	movhi	r2,1025
 4009cb0:	10b7f804 	addi	r2,r2,-8224
 4009cb4:	10800017 	ldw	r2,0(r2)
 4009cb8:	10000526 	beq	r2,zero,4009cd0 <alt_get_errno+0x34>
 4009cbc:	00810074 	movhi	r2,1025
 4009cc0:	10b7f804 	addi	r2,r2,-8224
 4009cc4:	10800017 	ldw	r2,0(r2)
 4009cc8:	103ee83a 	callr	r2
 4009ccc:	00000206 	br	4009cd8 <alt_get_errno+0x3c>
 4009cd0:	00810074 	movhi	r2,1025
 4009cd4:	10be9904 	addi	r2,r2,-1436
}
 4009cd8:	e037883a 	mov	sp,fp
 4009cdc:	dfc00117 	ldw	ra,4(sp)
 4009ce0:	df000017 	ldw	fp,0(sp)
 4009ce4:	dec00204 	addi	sp,sp,8
 4009ce8:	f800283a 	ret

04009cec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4009cec:	defffb04 	addi	sp,sp,-20
 4009cf0:	dfc00415 	stw	ra,16(sp)
 4009cf4:	df000315 	stw	fp,12(sp)
 4009cf8:	df000304 	addi	fp,sp,12
 4009cfc:	e13ffe15 	stw	r4,-8(fp)
 4009d00:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4009d04:	e0bffe17 	ldw	r2,-8(fp)
 4009d08:	10000716 	blt	r2,zero,4009d28 <fstat+0x3c>
 4009d0c:	e13ffe17 	ldw	r4,-8(fp)
 4009d10:	01400304 	movi	r5,12
 4009d14:	40094f00 	call	40094f0 <__mulsi3>
 4009d18:	00c10074 	movhi	r3,1025
 4009d1c:	18f37604 	addi	r3,r3,-12840
 4009d20:	10c5883a 	add	r2,r2,r3
 4009d24:	00000106 	br	4009d2c <fstat+0x40>
 4009d28:	0005883a 	mov	r2,zero
 4009d2c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4009d30:	e0bffd17 	ldw	r2,-12(fp)
 4009d34:	10001026 	beq	r2,zero,4009d78 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4009d38:	e0bffd17 	ldw	r2,-12(fp)
 4009d3c:	10800017 	ldw	r2,0(r2)
 4009d40:	10800817 	ldw	r2,32(r2)
 4009d44:	10000726 	beq	r2,zero,4009d64 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 4009d48:	e0bffd17 	ldw	r2,-12(fp)
 4009d4c:	10800017 	ldw	r2,0(r2)
 4009d50:	10800817 	ldw	r2,32(r2)
 4009d54:	e13ffd17 	ldw	r4,-12(fp)
 4009d58:	e17fff17 	ldw	r5,-4(fp)
 4009d5c:	103ee83a 	callr	r2
 4009d60:	00000906 	br	4009d88 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4009d64:	e0bfff17 	ldw	r2,-4(fp)
 4009d68:	00c80004 	movi	r3,8192
 4009d6c:	10c00115 	stw	r3,4(r2)
      return 0;
 4009d70:	0005883a 	mov	r2,zero
 4009d74:	00000406 	br	4009d88 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009d78:	4009c9c0 	call	4009c9c <alt_get_errno>
 4009d7c:	00c01444 	movi	r3,81
 4009d80:	10c00015 	stw	r3,0(r2)
    return -1;
 4009d84:	00bfffc4 	movi	r2,-1
  }
}
 4009d88:	e037883a 	mov	sp,fp
 4009d8c:	dfc00117 	ldw	ra,4(sp)
 4009d90:	df000017 	ldw	fp,0(sp)
 4009d94:	dec00204 	addi	sp,sp,8
 4009d98:	f800283a 	ret

04009d9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009d9c:	defffe04 	addi	sp,sp,-8
 4009da0:	dfc00115 	stw	ra,4(sp)
 4009da4:	df000015 	stw	fp,0(sp)
 4009da8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4009dac:	00810074 	movhi	r2,1025
 4009db0:	10b7f804 	addi	r2,r2,-8224
 4009db4:	10800017 	ldw	r2,0(r2)
 4009db8:	10000526 	beq	r2,zero,4009dd0 <alt_get_errno+0x34>
 4009dbc:	00810074 	movhi	r2,1025
 4009dc0:	10b7f804 	addi	r2,r2,-8224
 4009dc4:	10800017 	ldw	r2,0(r2)
 4009dc8:	103ee83a 	callr	r2
 4009dcc:	00000206 	br	4009dd8 <alt_get_errno+0x3c>
 4009dd0:	00810074 	movhi	r2,1025
 4009dd4:	10be9904 	addi	r2,r2,-1436
}
 4009dd8:	e037883a 	mov	sp,fp
 4009ddc:	dfc00117 	ldw	ra,4(sp)
 4009de0:	df000017 	ldw	fp,0(sp)
 4009de4:	dec00204 	addi	sp,sp,8
 4009de8:	f800283a 	ret

04009dec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4009dec:	deffed04 	addi	sp,sp,-76
 4009df0:	dfc01215 	stw	ra,72(sp)
 4009df4:	df001115 	stw	fp,68(sp)
 4009df8:	df001104 	addi	fp,sp,68
 4009dfc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4009e00:	e0bfff17 	ldw	r2,-4(fp)
 4009e04:	10000716 	blt	r2,zero,4009e24 <isatty+0x38>
 4009e08:	e13fff17 	ldw	r4,-4(fp)
 4009e0c:	01400304 	movi	r5,12
 4009e10:	40094f00 	call	40094f0 <__mulsi3>
 4009e14:	00c10074 	movhi	r3,1025
 4009e18:	18f37604 	addi	r3,r3,-12840
 4009e1c:	10c5883a 	add	r2,r2,r3
 4009e20:	00000106 	br	4009e28 <isatty+0x3c>
 4009e24:	0005883a 	mov	r2,zero
 4009e28:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4009e2c:	e0bfef17 	ldw	r2,-68(fp)
 4009e30:	10000e26 	beq	r2,zero,4009e6c <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4009e34:	e0bfef17 	ldw	r2,-68(fp)
 4009e38:	10800017 	ldw	r2,0(r2)
 4009e3c:	10800817 	ldw	r2,32(r2)
 4009e40:	1000021e 	bne	r2,zero,4009e4c <isatty+0x60>
    {
      return 1;
 4009e44:	00800044 	movi	r2,1
 4009e48:	00000c06 	br	4009e7c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4009e4c:	e0bff004 	addi	r2,fp,-64
 4009e50:	e13fff17 	ldw	r4,-4(fp)
 4009e54:	100b883a 	mov	r5,r2
 4009e58:	4009cec0 	call	4009cec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4009e5c:	e0bff117 	ldw	r2,-60(fp)
 4009e60:	10880020 	cmpeqi	r2,r2,8192
 4009e64:	10803fcc 	andi	r2,r2,255
 4009e68:	00000406 	br	4009e7c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4009e6c:	4009d9c0 	call	4009d9c <alt_get_errno>
 4009e70:	00c01444 	movi	r3,81
 4009e74:	10c00015 	stw	r3,0(r2)
    return 0;
 4009e78:	0005883a 	mov	r2,zero
  }
}
 4009e7c:	e037883a 	mov	sp,fp
 4009e80:	dfc00117 	ldw	ra,4(sp)
 4009e84:	df000017 	ldw	fp,0(sp)
 4009e88:	dec00204 	addi	sp,sp,8
 4009e8c:	f800283a 	ret

04009e90 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4009e90:	defffc04 	addi	sp,sp,-16
 4009e94:	df000315 	stw	fp,12(sp)
 4009e98:	df000304 	addi	fp,sp,12
 4009e9c:	e13ffd15 	stw	r4,-12(fp)
 4009ea0:	e17ffe15 	stw	r5,-8(fp)
 4009ea4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4009ea8:	e0fffe17 	ldw	r3,-8(fp)
 4009eac:	e0bffd17 	ldw	r2,-12(fp)
 4009eb0:	18800e26 	beq	r3,r2,4009eec <alt_load_section+0x5c>
  {
    while( to != end )
 4009eb4:	00000a06 	br	4009ee0 <alt_load_section+0x50>
    {
      *to++ = *from++;
 4009eb8:	e0bffd17 	ldw	r2,-12(fp)
 4009ebc:	10c00017 	ldw	r3,0(r2)
 4009ec0:	e0bffe17 	ldw	r2,-8(fp)
 4009ec4:	10c00015 	stw	r3,0(r2)
 4009ec8:	e0bffe17 	ldw	r2,-8(fp)
 4009ecc:	10800104 	addi	r2,r2,4
 4009ed0:	e0bffe15 	stw	r2,-8(fp)
 4009ed4:	e0bffd17 	ldw	r2,-12(fp)
 4009ed8:	10800104 	addi	r2,r2,4
 4009edc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4009ee0:	e0fffe17 	ldw	r3,-8(fp)
 4009ee4:	e0bfff17 	ldw	r2,-4(fp)
 4009ee8:	18bff31e 	bne	r3,r2,4009eb8 <__alt_data_end+0xfe009eb8>
    {
      *to++ = *from++;
    }
  }
}
 4009eec:	e037883a 	mov	sp,fp
 4009ef0:	df000017 	ldw	fp,0(sp)
 4009ef4:	dec00104 	addi	sp,sp,4
 4009ef8:	f800283a 	ret

04009efc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4009efc:	defffe04 	addi	sp,sp,-8
 4009f00:	dfc00115 	stw	ra,4(sp)
 4009f04:	df000015 	stw	fp,0(sp)
 4009f08:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4009f0c:	01010074 	movhi	r4,1025
 4009f10:	2137fd04 	addi	r4,r4,-8204
 4009f14:	01410074 	movhi	r5,1025
 4009f18:	29716704 	addi	r5,r5,-14948
 4009f1c:	01810074 	movhi	r6,1025
 4009f20:	31b7fd04 	addi	r6,r6,-8204
 4009f24:	4009e900 	call	4009e90 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4009f28:	01010034 	movhi	r4,1024
 4009f2c:	21000804 	addi	r4,r4,32
 4009f30:	01410034 	movhi	r5,1024
 4009f34:	29400804 	addi	r5,r5,32
 4009f38:	01810034 	movhi	r6,1024
 4009f3c:	31806e04 	addi	r6,r6,440
 4009f40:	4009e900 	call	4009e90 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4009f44:	01010074 	movhi	r4,1025
 4009f48:	21308004 	addi	r4,r4,-15872
 4009f4c:	01410074 	movhi	r5,1025
 4009f50:	29708004 	addi	r5,r5,-15872
 4009f54:	01810074 	movhi	r6,1025
 4009f58:	31b16704 	addi	r6,r6,-14948
 4009f5c:	4009e900 	call	4009e90 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4009f60:	400b1600 	call	400b160 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4009f64:	400b3240 	call	400b324 <alt_icache_flush_all>
}
 4009f68:	e037883a 	mov	sp,fp
 4009f6c:	dfc00117 	ldw	ra,4(sp)
 4009f70:	df000017 	ldw	fp,0(sp)
 4009f74:	dec00204 	addi	sp,sp,8
 4009f78:	f800283a 	ret

04009f7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4009f7c:	defffe04 	addi	sp,sp,-8
 4009f80:	dfc00115 	stw	ra,4(sp)
 4009f84:	df000015 	stw	fp,0(sp)
 4009f88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4009f8c:	00810074 	movhi	r2,1025
 4009f90:	10b7f804 	addi	r2,r2,-8224
 4009f94:	10800017 	ldw	r2,0(r2)
 4009f98:	10000526 	beq	r2,zero,4009fb0 <alt_get_errno+0x34>
 4009f9c:	00810074 	movhi	r2,1025
 4009fa0:	10b7f804 	addi	r2,r2,-8224
 4009fa4:	10800017 	ldw	r2,0(r2)
 4009fa8:	103ee83a 	callr	r2
 4009fac:	00000206 	br	4009fb8 <alt_get_errno+0x3c>
 4009fb0:	00810074 	movhi	r2,1025
 4009fb4:	10be9904 	addi	r2,r2,-1436
}
 4009fb8:	e037883a 	mov	sp,fp
 4009fbc:	dfc00117 	ldw	ra,4(sp)
 4009fc0:	df000017 	ldw	fp,0(sp)
 4009fc4:	dec00204 	addi	sp,sp,8
 4009fc8:	f800283a 	ret

04009fcc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4009fcc:	defff904 	addi	sp,sp,-28
 4009fd0:	dfc00615 	stw	ra,24(sp)
 4009fd4:	df000515 	stw	fp,20(sp)
 4009fd8:	df000504 	addi	fp,sp,20
 4009fdc:	e13ffd15 	stw	r4,-12(fp)
 4009fe0:	e17ffe15 	stw	r5,-8(fp)
 4009fe4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4009fe8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4009fec:	e0bffd17 	ldw	r2,-12(fp)
 4009ff0:	10000716 	blt	r2,zero,400a010 <lseek+0x44>
 4009ff4:	e13ffd17 	ldw	r4,-12(fp)
 4009ff8:	01400304 	movi	r5,12
 4009ffc:	40094f00 	call	40094f0 <__mulsi3>
 400a000:	00c10074 	movhi	r3,1025
 400a004:	18f37604 	addi	r3,r3,-12840
 400a008:	10c5883a 	add	r2,r2,r3
 400a00c:	00000106 	br	400a014 <lseek+0x48>
 400a010:	0005883a 	mov	r2,zero
 400a014:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400a018:	e0bffc17 	ldw	r2,-16(fp)
 400a01c:	10001026 	beq	r2,zero,400a060 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400a020:	e0bffc17 	ldw	r2,-16(fp)
 400a024:	10800017 	ldw	r2,0(r2)
 400a028:	10800717 	ldw	r2,28(r2)
 400a02c:	10000926 	beq	r2,zero,400a054 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400a030:	e0bffc17 	ldw	r2,-16(fp)
 400a034:	10800017 	ldw	r2,0(r2)
 400a038:	10800717 	ldw	r2,28(r2)
 400a03c:	e13ffc17 	ldw	r4,-16(fp)
 400a040:	e17ffe17 	ldw	r5,-8(fp)
 400a044:	e1bfff17 	ldw	r6,-4(fp)
 400a048:	103ee83a 	callr	r2
 400a04c:	e0bffb15 	stw	r2,-20(fp)
 400a050:	00000506 	br	400a068 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400a054:	00bfde84 	movi	r2,-134
 400a058:	e0bffb15 	stw	r2,-20(fp)
 400a05c:	00000206 	br	400a068 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 400a060:	00bfebc4 	movi	r2,-81
 400a064:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400a068:	e0bffb17 	ldw	r2,-20(fp)
 400a06c:	1000060e 	bge	r2,zero,400a088 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400a070:	4009f7c0 	call	4009f7c <alt_get_errno>
 400a074:	e0fffb17 	ldw	r3,-20(fp)
 400a078:	00c7c83a 	sub	r3,zero,r3
 400a07c:	10c00015 	stw	r3,0(r2)
    rc = -1;
 400a080:	00bfffc4 	movi	r2,-1
 400a084:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400a088:	e0bffb17 	ldw	r2,-20(fp)
}
 400a08c:	e037883a 	mov	sp,fp
 400a090:	dfc00117 	ldw	ra,4(sp)
 400a094:	df000017 	ldw	fp,0(sp)
 400a098:	dec00204 	addi	sp,sp,8
 400a09c:	f800283a 	ret

0400a0a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400a0a0:	defffd04 	addi	sp,sp,-12
 400a0a4:	dfc00215 	stw	ra,8(sp)
 400a0a8:	df000115 	stw	fp,4(sp)
 400a0ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400a0b0:	0009883a 	mov	r4,zero
 400a0b4:	400a5440 	call	400a544 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400a0b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400a0bc:	400a5780 	call	400a578 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400a0c0:	01010074 	movhi	r4,1025
 400a0c4:	21315d04 	addi	r4,r4,-14988
 400a0c8:	01410074 	movhi	r5,1025
 400a0cc:	29715d04 	addi	r5,r5,-14988
 400a0d0:	01810074 	movhi	r6,1025
 400a0d4:	31b15d04 	addi	r6,r6,-14988
 400a0d8:	400b6e80 	call	400b6e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400a0dc:	400b26c0 	call	400b26c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400a0e0:	01010074 	movhi	r4,1025
 400a0e4:	212cb204 	addi	r4,r4,-19768
 400a0e8:	400be2c0 	call	400be2c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400a0ec:	d126ac17 	ldw	r4,-25936(gp)
 400a0f0:	d0e6ad17 	ldw	r3,-25932(gp)
 400a0f4:	d0a6ae17 	ldw	r2,-25928(gp)
 400a0f8:	180b883a 	mov	r5,r3
 400a0fc:	100d883a 	mov	r6,r2
 400a100:	40001f40 	call	40001f4 <main>
 400a104:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400a108:	01000044 	movi	r4,1
 400a10c:	4009ba40 	call	4009ba4 <close>
  exit (result);
 400a110:	e13fff17 	ldw	r4,-4(fp)
 400a114:	400be400 	call	400be40 <exit>

0400a118 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400a118:	defffe04 	addi	sp,sp,-8
 400a11c:	df000115 	stw	fp,4(sp)
 400a120:	df000104 	addi	fp,sp,4
 400a124:	e13fff15 	stw	r4,-4(fp)
}
 400a128:	e037883a 	mov	sp,fp
 400a12c:	df000017 	ldw	fp,0(sp)
 400a130:	dec00104 	addi	sp,sp,4
 400a134:	f800283a 	ret

0400a138 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400a138:	defffe04 	addi	sp,sp,-8
 400a13c:	df000115 	stw	fp,4(sp)
 400a140:	df000104 	addi	fp,sp,4
 400a144:	e13fff15 	stw	r4,-4(fp)
}
 400a148:	e037883a 	mov	sp,fp
 400a14c:	df000017 	ldw	fp,0(sp)
 400a150:	dec00104 	addi	sp,sp,4
 400a154:	f800283a 	ret

0400a158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a158:	defffe04 	addi	sp,sp,-8
 400a15c:	dfc00115 	stw	ra,4(sp)
 400a160:	df000015 	stw	fp,0(sp)
 400a164:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a168:	00810074 	movhi	r2,1025
 400a16c:	10b7f804 	addi	r2,r2,-8224
 400a170:	10800017 	ldw	r2,0(r2)
 400a174:	10000526 	beq	r2,zero,400a18c <alt_get_errno+0x34>
 400a178:	00810074 	movhi	r2,1025
 400a17c:	10b7f804 	addi	r2,r2,-8224
 400a180:	10800017 	ldw	r2,0(r2)
 400a184:	103ee83a 	callr	r2
 400a188:	00000206 	br	400a194 <alt_get_errno+0x3c>
 400a18c:	00810074 	movhi	r2,1025
 400a190:	10be9904 	addi	r2,r2,-1436
}
 400a194:	e037883a 	mov	sp,fp
 400a198:	dfc00117 	ldw	ra,4(sp)
 400a19c:	df000017 	ldw	fp,0(sp)
 400a1a0:	dec00204 	addi	sp,sp,8
 400a1a4:	f800283a 	ret

0400a1a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400a1a8:	defff904 	addi	sp,sp,-28
 400a1ac:	dfc00615 	stw	ra,24(sp)
 400a1b0:	df000515 	stw	fp,20(sp)
 400a1b4:	df000504 	addi	fp,sp,20
 400a1b8:	e13ffd15 	stw	r4,-12(fp)
 400a1bc:	e17ffe15 	stw	r5,-8(fp)
 400a1c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a1c4:	e0bffd17 	ldw	r2,-12(fp)
 400a1c8:	10000716 	blt	r2,zero,400a1e8 <read+0x40>
 400a1cc:	e13ffd17 	ldw	r4,-12(fp)
 400a1d0:	01400304 	movi	r5,12
 400a1d4:	40094f00 	call	40094f0 <__mulsi3>
 400a1d8:	00c10074 	movhi	r3,1025
 400a1dc:	18f37604 	addi	r3,r3,-12840
 400a1e0:	10c5883a 	add	r2,r2,r3
 400a1e4:	00000106 	br	400a1ec <read+0x44>
 400a1e8:	0005883a 	mov	r2,zero
 400a1ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400a1f0:	e0bffb17 	ldw	r2,-20(fp)
 400a1f4:	10002026 	beq	r2,zero,400a278 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400a1f8:	e0bffb17 	ldw	r2,-20(fp)
 400a1fc:	10800217 	ldw	r2,8(r2)
 400a200:	108000cc 	andi	r2,r2,3
 400a204:	10800060 	cmpeqi	r2,r2,1
 400a208:	1000171e 	bne	r2,zero,400a268 <read+0xc0>
        (fd->dev->read))
 400a20c:	e0bffb17 	ldw	r2,-20(fp)
 400a210:	10800017 	ldw	r2,0(r2)
 400a214:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400a218:	10001326 	beq	r2,zero,400a268 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400a21c:	e0bffb17 	ldw	r2,-20(fp)
 400a220:	10800017 	ldw	r2,0(r2)
 400a224:	10c00517 	ldw	r3,20(r2)
 400a228:	e0bfff17 	ldw	r2,-4(fp)
 400a22c:	e13ffb17 	ldw	r4,-20(fp)
 400a230:	e17ffe17 	ldw	r5,-8(fp)
 400a234:	100d883a 	mov	r6,r2
 400a238:	183ee83a 	callr	r3
 400a23c:	e0bffc15 	stw	r2,-16(fp)
 400a240:	e0bffc17 	ldw	r2,-16(fp)
 400a244:	1000060e 	bge	r2,zero,400a260 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400a248:	400a1580 	call	400a158 <alt_get_errno>
 400a24c:	e0fffc17 	ldw	r3,-16(fp)
 400a250:	00c7c83a 	sub	r3,zero,r3
 400a254:	10c00015 	stw	r3,0(r2)
          return -1;
 400a258:	00bfffc4 	movi	r2,-1
 400a25c:	00000a06 	br	400a288 <read+0xe0>
        }
        return rval;
 400a260:	e0bffc17 	ldw	r2,-16(fp)
 400a264:	00000806 	br	400a288 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400a268:	400a1580 	call	400a158 <alt_get_errno>
 400a26c:	00c00344 	movi	r3,13
 400a270:	10c00015 	stw	r3,0(r2)
 400a274:	00000306 	br	400a284 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400a278:	400a1580 	call	400a158 <alt_get_errno>
 400a27c:	00c01444 	movi	r3,81
 400a280:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 400a284:	00bfffc4 	movi	r2,-1
}
 400a288:	e037883a 	mov	sp,fp
 400a28c:	dfc00117 	ldw	ra,4(sp)
 400a290:	df000017 	ldw	fp,0(sp)
 400a294:	dec00204 	addi	sp,sp,8
 400a298:	f800283a 	ret

0400a29c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400a29c:	defffc04 	addi	sp,sp,-16
 400a2a0:	dfc00315 	stw	ra,12(sp)
 400a2a4:	df000215 	stw	fp,8(sp)
 400a2a8:	dc000115 	stw	r16,4(sp)
 400a2ac:	df000104 	addi	fp,sp,4
 400a2b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400a2b4:	e0bfff17 	ldw	r2,-4(fp)
 400a2b8:	108000d0 	cmplti	r2,r2,3
 400a2bc:	1000111e 	bne	r2,zero,400a304 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 400a2c0:	04010074 	movhi	r16,1025
 400a2c4:	84337604 	addi	r16,r16,-12840
 400a2c8:	e0bfff17 	ldw	r2,-4(fp)
 400a2cc:	1009883a 	mov	r4,r2
 400a2d0:	01400304 	movi	r5,12
 400a2d4:	40094f00 	call	40094f0 <__mulsi3>
 400a2d8:	8085883a 	add	r2,r16,r2
 400a2dc:	10800204 	addi	r2,r2,8
 400a2e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400a2e4:	04010074 	movhi	r16,1025
 400a2e8:	84337604 	addi	r16,r16,-12840
 400a2ec:	e0bfff17 	ldw	r2,-4(fp)
 400a2f0:	1009883a 	mov	r4,r2
 400a2f4:	01400304 	movi	r5,12
 400a2f8:	40094f00 	call	40094f0 <__mulsi3>
 400a2fc:	8085883a 	add	r2,r16,r2
 400a300:	10000015 	stw	zero,0(r2)
  }
}
 400a304:	e037883a 	mov	sp,fp
 400a308:	dfc00217 	ldw	ra,8(sp)
 400a30c:	df000117 	ldw	fp,4(sp)
 400a310:	dc000017 	ldw	r16,0(sp)
 400a314:	dec00304 	addi	sp,sp,12
 400a318:	f800283a 	ret

0400a31c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400a31c:	defff904 	addi	sp,sp,-28
 400a320:	df000615 	stw	fp,24(sp)
 400a324:	df000604 	addi	fp,sp,24
 400a328:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400a32c:	0005303a 	rdctl	r2,status
 400a330:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400a334:	e0fffc17 	ldw	r3,-16(fp)
 400a338:	00bfff84 	movi	r2,-2
 400a33c:	1884703a 	and	r2,r3,r2
 400a340:	1001703a 	wrctl	status,r2
  
  return context;
 400a344:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400a348:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400a34c:	d0a00b17 	ldw	r2,-32724(gp)
 400a350:	10c000c4 	addi	r3,r2,3
 400a354:	00bfff04 	movi	r2,-4
 400a358:	1884703a 	and	r2,r3,r2
 400a35c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400a360:	d0e00b17 	ldw	r3,-32724(gp)
 400a364:	e0bfff17 	ldw	r2,-4(fp)
 400a368:	1885883a 	add	r2,r3,r2
 400a36c:	00c18034 	movhi	r3,1536
 400a370:	18c00004 	addi	r3,r3,0
 400a374:	1880062e 	bgeu	r3,r2,400a390 <sbrk+0x74>
 400a378:	e0bffa17 	ldw	r2,-24(fp)
 400a37c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400a380:	e0bffd17 	ldw	r2,-12(fp)
 400a384:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400a388:	00bfffc4 	movi	r2,-1
 400a38c:	00000b06 	br	400a3bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400a390:	d0a00b17 	ldw	r2,-32724(gp)
 400a394:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 400a398:	d0e00b17 	ldw	r3,-32724(gp)
 400a39c:	e0bfff17 	ldw	r2,-4(fp)
 400a3a0:	1885883a 	add	r2,r3,r2
 400a3a4:	d0a00b15 	stw	r2,-32724(gp)
 400a3a8:	e0bffa17 	ldw	r2,-24(fp)
 400a3ac:	e0bffe15 	stw	r2,-8(fp)
 400a3b0:	e0bffe17 	ldw	r2,-8(fp)
 400a3b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400a3b8:	e0bffb17 	ldw	r2,-20(fp)
} 
 400a3bc:	e037883a 	mov	sp,fp
 400a3c0:	df000017 	ldw	fp,0(sp)
 400a3c4:	dec00104 	addi	sp,sp,4
 400a3c8:	f800283a 	ret

0400a3cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a3cc:	defffe04 	addi	sp,sp,-8
 400a3d0:	dfc00115 	stw	ra,4(sp)
 400a3d4:	df000015 	stw	fp,0(sp)
 400a3d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a3dc:	00810074 	movhi	r2,1025
 400a3e0:	10b7f804 	addi	r2,r2,-8224
 400a3e4:	10800017 	ldw	r2,0(r2)
 400a3e8:	10000526 	beq	r2,zero,400a400 <alt_get_errno+0x34>
 400a3ec:	00810074 	movhi	r2,1025
 400a3f0:	10b7f804 	addi	r2,r2,-8224
 400a3f4:	10800017 	ldw	r2,0(r2)
 400a3f8:	103ee83a 	callr	r2
 400a3fc:	00000206 	br	400a408 <alt_get_errno+0x3c>
 400a400:	00810074 	movhi	r2,1025
 400a404:	10be9904 	addi	r2,r2,-1436
}
 400a408:	e037883a 	mov	sp,fp
 400a40c:	dfc00117 	ldw	ra,4(sp)
 400a410:	df000017 	ldw	fp,0(sp)
 400a414:	dec00204 	addi	sp,sp,8
 400a418:	f800283a 	ret

0400a41c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400a41c:	defff904 	addi	sp,sp,-28
 400a420:	dfc00615 	stw	ra,24(sp)
 400a424:	df000515 	stw	fp,20(sp)
 400a428:	df000504 	addi	fp,sp,20
 400a42c:	e13ffd15 	stw	r4,-12(fp)
 400a430:	e17ffe15 	stw	r5,-8(fp)
 400a434:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a438:	e0bffd17 	ldw	r2,-12(fp)
 400a43c:	10000716 	blt	r2,zero,400a45c <write+0x40>
 400a440:	e13ffd17 	ldw	r4,-12(fp)
 400a444:	01400304 	movi	r5,12
 400a448:	40094f00 	call	40094f0 <__mulsi3>
 400a44c:	00c10074 	movhi	r3,1025
 400a450:	18f37604 	addi	r3,r3,-12840
 400a454:	10c5883a 	add	r2,r2,r3
 400a458:	00000106 	br	400a460 <write+0x44>
 400a45c:	0005883a 	mov	r2,zero
 400a460:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400a464:	e0bffb17 	ldw	r2,-20(fp)
 400a468:	10001f26 	beq	r2,zero,400a4e8 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400a46c:	e0bffb17 	ldw	r2,-20(fp)
 400a470:	10800217 	ldw	r2,8(r2)
 400a474:	108000cc 	andi	r2,r2,3
 400a478:	10001726 	beq	r2,zero,400a4d8 <write+0xbc>
 400a47c:	e0bffb17 	ldw	r2,-20(fp)
 400a480:	10800017 	ldw	r2,0(r2)
 400a484:	10800617 	ldw	r2,24(r2)
 400a488:	10001326 	beq	r2,zero,400a4d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400a48c:	e0bffb17 	ldw	r2,-20(fp)
 400a490:	10800017 	ldw	r2,0(r2)
 400a494:	10c00617 	ldw	r3,24(r2)
 400a498:	e0bfff17 	ldw	r2,-4(fp)
 400a49c:	e13ffb17 	ldw	r4,-20(fp)
 400a4a0:	e17ffe17 	ldw	r5,-8(fp)
 400a4a4:	100d883a 	mov	r6,r2
 400a4a8:	183ee83a 	callr	r3
 400a4ac:	e0bffc15 	stw	r2,-16(fp)
 400a4b0:	e0bffc17 	ldw	r2,-16(fp)
 400a4b4:	1000060e 	bge	r2,zero,400a4d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400a4b8:	400a3cc0 	call	400a3cc <alt_get_errno>
 400a4bc:	e0fffc17 	ldw	r3,-16(fp)
 400a4c0:	00c7c83a 	sub	r3,zero,r3
 400a4c4:	10c00015 	stw	r3,0(r2)
        return -1;
 400a4c8:	00bfffc4 	movi	r2,-1
 400a4cc:	00000a06 	br	400a4f8 <write+0xdc>
      }
      return rval;
 400a4d0:	e0bffc17 	ldw	r2,-16(fp)
 400a4d4:	00000806 	br	400a4f8 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400a4d8:	400a3cc0 	call	400a3cc <alt_get_errno>
 400a4dc:	00c00344 	movi	r3,13
 400a4e0:	10c00015 	stw	r3,0(r2)
 400a4e4:	00000306 	br	400a4f4 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400a4e8:	400a3cc0 	call	400a3cc <alt_get_errno>
 400a4ec:	00c01444 	movi	r3,81
 400a4f0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 400a4f4:	00bfffc4 	movi	r2,-1
}
 400a4f8:	e037883a 	mov	sp,fp
 400a4fc:	dfc00117 	ldw	ra,4(sp)
 400a500:	df000017 	ldw	fp,0(sp)
 400a504:	dec00204 	addi	sp,sp,8
 400a508:	f800283a 	ret

0400a50c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400a50c:	defffd04 	addi	sp,sp,-12
 400a510:	dfc00215 	stw	ra,8(sp)
 400a514:	df000115 	stw	fp,4(sp)
 400a518:	df000104 	addi	fp,sp,4
 400a51c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400a520:	e13fff17 	ldw	r4,-4(fp)
 400a524:	01410074 	movhi	r5,1025
 400a528:	2977f504 	addi	r5,r5,-8236
 400a52c:	400b1cc0 	call	400b1cc <alt_dev_llist_insert>
}
 400a530:	e037883a 	mov	sp,fp
 400a534:	dfc00117 	ldw	ra,4(sp)
 400a538:	df000017 	ldw	fp,0(sp)
 400a53c:	dec00204 	addi	sp,sp,8
 400a540:	f800283a 	ret

0400a544 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400a544:	defffd04 	addi	sp,sp,-12
 400a548:	dfc00215 	stw	ra,8(sp)
 400a54c:	df000115 	stw	fp,4(sp)
 400a550:	df000104 	addi	fp,sp,4
 400a554:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 400a558:	400bb940 	call	400bb94 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400a55c:	00800044 	movi	r2,1
 400a560:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400a564:	e037883a 	mov	sp,fp
 400a568:	dfc00117 	ldw	ra,4(sp)
 400a56c:	df000017 	ldw	fp,0(sp)
 400a570:	dec00204 	addi	sp,sp,8
 400a574:	f800283a 	ret

0400a578 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400a578:	defffe04 	addi	sp,sp,-8
 400a57c:	dfc00115 	stw	ra,4(sp)
 400a580:	df000015 	stw	fp,0(sp)
 400a584:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 400a588:	01010074 	movhi	r4,1025
 400a58c:	2133e004 	addi	r4,r4,-12416
 400a590:	000b883a 	mov	r5,zero
 400a594:	01800144 	movi	r6,5
 400a598:	400a7240 	call	400a724 <altera_avalon_jtag_uart_init>
 400a59c:	01010074 	movhi	r4,1025
 400a5a0:	2133d604 	addi	r4,r4,-12456
 400a5a4:	400a50c0 	call	400a50c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 400a5a8:	0001883a 	nop
}
 400a5ac:	e037883a 	mov	sp,fp
 400a5b0:	dfc00117 	ldw	ra,4(sp)
 400a5b4:	df000017 	ldw	fp,0(sp)
 400a5b8:	dec00204 	addi	sp,sp,8
 400a5bc:	f800283a 	ret

0400a5c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400a5c0:	defffa04 	addi	sp,sp,-24
 400a5c4:	dfc00515 	stw	ra,20(sp)
 400a5c8:	df000415 	stw	fp,16(sp)
 400a5cc:	df000404 	addi	fp,sp,16
 400a5d0:	e13ffd15 	stw	r4,-12(fp)
 400a5d4:	e17ffe15 	stw	r5,-8(fp)
 400a5d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400a5dc:	e0bffd17 	ldw	r2,-12(fp)
 400a5e0:	10800017 	ldw	r2,0(r2)
 400a5e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400a5e8:	e0bffc17 	ldw	r2,-16(fp)
 400a5ec:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 400a5f0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400a5f4:	10800217 	ldw	r2,8(r2)
 400a5f8:	1809883a 	mov	r4,r3
 400a5fc:	e17ffe17 	ldw	r5,-8(fp)
 400a600:	e1bfff17 	ldw	r6,-4(fp)
 400a604:	100f883a 	mov	r7,r2
 400a608:	400abe80 	call	400abe8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400a60c:	e037883a 	mov	sp,fp
 400a610:	dfc00117 	ldw	ra,4(sp)
 400a614:	df000017 	ldw	fp,0(sp)
 400a618:	dec00204 	addi	sp,sp,8
 400a61c:	f800283a 	ret

0400a620 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400a620:	defffa04 	addi	sp,sp,-24
 400a624:	dfc00515 	stw	ra,20(sp)
 400a628:	df000415 	stw	fp,16(sp)
 400a62c:	df000404 	addi	fp,sp,16
 400a630:	e13ffd15 	stw	r4,-12(fp)
 400a634:	e17ffe15 	stw	r5,-8(fp)
 400a638:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400a63c:	e0bffd17 	ldw	r2,-12(fp)
 400a640:	10800017 	ldw	r2,0(r2)
 400a644:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400a648:	e0bffc17 	ldw	r2,-16(fp)
 400a64c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 400a650:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400a654:	10800217 	ldw	r2,8(r2)
 400a658:	1809883a 	mov	r4,r3
 400a65c:	e17ffe17 	ldw	r5,-8(fp)
 400a660:	e1bfff17 	ldw	r6,-4(fp)
 400a664:	100f883a 	mov	r7,r2
 400a668:	400ae000 	call	400ae00 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400a66c:	e037883a 	mov	sp,fp
 400a670:	dfc00117 	ldw	ra,4(sp)
 400a674:	df000017 	ldw	fp,0(sp)
 400a678:	dec00204 	addi	sp,sp,8
 400a67c:	f800283a 	ret

0400a680 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400a680:	defffc04 	addi	sp,sp,-16
 400a684:	dfc00315 	stw	ra,12(sp)
 400a688:	df000215 	stw	fp,8(sp)
 400a68c:	df000204 	addi	fp,sp,8
 400a690:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400a694:	e0bfff17 	ldw	r2,-4(fp)
 400a698:	10800017 	ldw	r2,0(r2)
 400a69c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400a6a0:	e0bffe17 	ldw	r2,-8(fp)
 400a6a4:	10c00a04 	addi	r3,r2,40
 400a6a8:	e0bfff17 	ldw	r2,-4(fp)
 400a6ac:	10800217 	ldw	r2,8(r2)
 400a6b0:	1809883a 	mov	r4,r3
 400a6b4:	100b883a 	mov	r5,r2
 400a6b8:	400aa8c0 	call	400aa8c <altera_avalon_jtag_uart_close>
}
 400a6bc:	e037883a 	mov	sp,fp
 400a6c0:	dfc00117 	ldw	ra,4(sp)
 400a6c4:	df000017 	ldw	fp,0(sp)
 400a6c8:	dec00204 	addi	sp,sp,8
 400a6cc:	f800283a 	ret

0400a6d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400a6d0:	defffa04 	addi	sp,sp,-24
 400a6d4:	dfc00515 	stw	ra,20(sp)
 400a6d8:	df000415 	stw	fp,16(sp)
 400a6dc:	df000404 	addi	fp,sp,16
 400a6e0:	e13ffd15 	stw	r4,-12(fp)
 400a6e4:	e17ffe15 	stw	r5,-8(fp)
 400a6e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400a6ec:	e0bffd17 	ldw	r2,-12(fp)
 400a6f0:	10800017 	ldw	r2,0(r2)
 400a6f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400a6f8:	e0bffc17 	ldw	r2,-16(fp)
 400a6fc:	10800a04 	addi	r2,r2,40
 400a700:	1009883a 	mov	r4,r2
 400a704:	e17ffe17 	ldw	r5,-8(fp)
 400a708:	e1bfff17 	ldw	r6,-4(fp)
 400a70c:	400aaf40 	call	400aaf4 <altera_avalon_jtag_uart_ioctl>
}
 400a710:	e037883a 	mov	sp,fp
 400a714:	dfc00117 	ldw	ra,4(sp)
 400a718:	df000017 	ldw	fp,0(sp)
 400a71c:	dec00204 	addi	sp,sp,8
 400a720:	f800283a 	ret

0400a724 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400a724:	defffa04 	addi	sp,sp,-24
 400a728:	dfc00515 	stw	ra,20(sp)
 400a72c:	df000415 	stw	fp,16(sp)
 400a730:	df000404 	addi	fp,sp,16
 400a734:	e13ffd15 	stw	r4,-12(fp)
 400a738:	e17ffe15 	stw	r5,-8(fp)
 400a73c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400a740:	e0bffd17 	ldw	r2,-12(fp)
 400a744:	00c00044 	movi	r3,1
 400a748:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400a74c:	e0bffd17 	ldw	r2,-12(fp)
 400a750:	10800017 	ldw	r2,0(r2)
 400a754:	10800104 	addi	r2,r2,4
 400a758:	e0fffd17 	ldw	r3,-12(fp)
 400a75c:	18c00817 	ldw	r3,32(r3)
 400a760:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400a764:	e0fffe17 	ldw	r3,-8(fp)
 400a768:	e0bfff17 	ldw	r2,-4(fp)
 400a76c:	d8000015 	stw	zero,0(sp)
 400a770:	1809883a 	mov	r4,r3
 400a774:	100b883a 	mov	r5,r2
 400a778:	01810074 	movhi	r6,1025
 400a77c:	31a9f904 	addi	r6,r6,-22556
 400a780:	e1fffd17 	ldw	r7,-12(fp)
 400a784:	400b3400 	call	400b340 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400a788:	e0bffd17 	ldw	r2,-12(fp)
 400a78c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400a790:	e0bffd17 	ldw	r2,-12(fp)
 400a794:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400a798:	00810074 	movhi	r2,1025
 400a79c:	10be9e04 	addi	r2,r2,-1416
 400a7a0:	10800017 	ldw	r2,0(r2)
 400a7a4:	1809883a 	mov	r4,r3
 400a7a8:	100b883a 	mov	r5,r2
 400a7ac:	01810074 	movhi	r6,1025
 400a7b0:	31aa7a04 	addi	r6,r6,-22040
 400a7b4:	e1fffd17 	ldw	r7,-12(fp)
 400a7b8:	400b0200 	call	400b020 <alt_alarm_start>
 400a7bc:	1000040e 	bge	r2,zero,400a7d0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400a7c0:	e0bffd17 	ldw	r2,-12(fp)
 400a7c4:	00e00034 	movhi	r3,32768
 400a7c8:	18ffffc4 	addi	r3,r3,-1
 400a7cc:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400a7d0:	e037883a 	mov	sp,fp
 400a7d4:	dfc00117 	ldw	ra,4(sp)
 400a7d8:	df000017 	ldw	fp,0(sp)
 400a7dc:	dec00204 	addi	sp,sp,8
 400a7e0:	f800283a 	ret

0400a7e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400a7e4:	defff804 	addi	sp,sp,-32
 400a7e8:	df000715 	stw	fp,28(sp)
 400a7ec:	df000704 	addi	fp,sp,28
 400a7f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400a7f4:	e0bfff17 	ldw	r2,-4(fp)
 400a7f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400a7fc:	e0bffb17 	ldw	r2,-20(fp)
 400a800:	10800017 	ldw	r2,0(r2)
 400a804:	e0bffc15 	stw	r2,-16(fp)
 400a808:	00000106 	br	400a810 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 400a80c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400a810:	e0bffc17 	ldw	r2,-16(fp)
 400a814:	10800104 	addi	r2,r2,4
 400a818:	10800037 	ldwio	r2,0(r2)
 400a81c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400a820:	e0bffd17 	ldw	r2,-12(fp)
 400a824:	1080c00c 	andi	r2,r2,768
 400a828:	10006a26 	beq	r2,zero,400a9d4 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400a82c:	e0bffd17 	ldw	r2,-12(fp)
 400a830:	1080400c 	andi	r2,r2,256
 400a834:	10003326 	beq	r2,zero,400a904 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400a838:	00800074 	movhi	r2,1
 400a83c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400a840:	e0bffb17 	ldw	r2,-20(fp)
 400a844:	10800a17 	ldw	r2,40(r2)
 400a848:	10800044 	addi	r2,r2,1
 400a84c:	1081ffcc 	andi	r2,r2,2047
 400a850:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400a854:	e0bffb17 	ldw	r2,-20(fp)
 400a858:	10c00b17 	ldw	r3,44(r2)
 400a85c:	e0bffe17 	ldw	r2,-8(fp)
 400a860:	18801426 	beq	r3,r2,400a8b4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400a864:	e0bffc17 	ldw	r2,-16(fp)
 400a868:	10800037 	ldwio	r2,0(r2)
 400a86c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400a870:	e0bff917 	ldw	r2,-28(fp)
 400a874:	10a0000c 	andi	r2,r2,32768
 400a878:	10001026 	beq	r2,zero,400a8bc <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400a87c:	e0bffb17 	ldw	r2,-20(fp)
 400a880:	10800a17 	ldw	r2,40(r2)
 400a884:	e0fff917 	ldw	r3,-28(fp)
 400a888:	e13ffb17 	ldw	r4,-20(fp)
 400a88c:	2085883a 	add	r2,r4,r2
 400a890:	10800e04 	addi	r2,r2,56
 400a894:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400a898:	e0bffb17 	ldw	r2,-20(fp)
 400a89c:	10800a17 	ldw	r2,40(r2)
 400a8a0:	10800044 	addi	r2,r2,1
 400a8a4:	10c1ffcc 	andi	r3,r2,2047
 400a8a8:	e0bffb17 	ldw	r2,-20(fp)
 400a8ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400a8b0:	003fe306 	br	400a840 <__alt_data_end+0xfe00a840>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400a8b4:	0001883a 	nop
 400a8b8:	00000106 	br	400a8c0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400a8bc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400a8c0:	e0bff917 	ldw	r2,-28(fp)
 400a8c4:	10bfffec 	andhi	r2,r2,65535
 400a8c8:	10000e26 	beq	r2,zero,400a904 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400a8cc:	e0bffb17 	ldw	r2,-20(fp)
 400a8d0:	10c00817 	ldw	r3,32(r2)
 400a8d4:	00bfff84 	movi	r2,-2
 400a8d8:	1886703a 	and	r3,r3,r2
 400a8dc:	e0bffb17 	ldw	r2,-20(fp)
 400a8e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400a8e4:	e0bffc17 	ldw	r2,-16(fp)
 400a8e8:	10800104 	addi	r2,r2,4
 400a8ec:	e0fffb17 	ldw	r3,-20(fp)
 400a8f0:	18c00817 	ldw	r3,32(r3)
 400a8f4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400a8f8:	e0bffc17 	ldw	r2,-16(fp)
 400a8fc:	10800104 	addi	r2,r2,4
 400a900:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400a904:	e0bffd17 	ldw	r2,-12(fp)
 400a908:	1080800c 	andi	r2,r2,512
 400a90c:	103fbf26 	beq	r2,zero,400a80c <__alt_data_end+0xfe00a80c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400a910:	e0bffd17 	ldw	r2,-12(fp)
 400a914:	1004d43a 	srli	r2,r2,16
 400a918:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400a91c:	00001406 	br	400a970 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400a920:	e0bffc17 	ldw	r2,-16(fp)
 400a924:	e0fffb17 	ldw	r3,-20(fp)
 400a928:	18c00d17 	ldw	r3,52(r3)
 400a92c:	e13ffb17 	ldw	r4,-20(fp)
 400a930:	20c7883a 	add	r3,r4,r3
 400a934:	18c20e04 	addi	r3,r3,2104
 400a938:	18c00003 	ldbu	r3,0(r3)
 400a93c:	18c03fcc 	andi	r3,r3,255
 400a940:	18c0201c 	xori	r3,r3,128
 400a944:	18ffe004 	addi	r3,r3,-128
 400a948:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400a94c:	e0bffb17 	ldw	r2,-20(fp)
 400a950:	10800d17 	ldw	r2,52(r2)
 400a954:	10800044 	addi	r2,r2,1
 400a958:	10c1ffcc 	andi	r3,r2,2047
 400a95c:	e0bffb17 	ldw	r2,-20(fp)
 400a960:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400a964:	e0bffa17 	ldw	r2,-24(fp)
 400a968:	10bfffc4 	addi	r2,r2,-1
 400a96c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400a970:	e0bffa17 	ldw	r2,-24(fp)
 400a974:	10000526 	beq	r2,zero,400a98c <altera_avalon_jtag_uart_irq+0x1a8>
 400a978:	e0bffb17 	ldw	r2,-20(fp)
 400a97c:	10c00d17 	ldw	r3,52(r2)
 400a980:	e0bffb17 	ldw	r2,-20(fp)
 400a984:	10800c17 	ldw	r2,48(r2)
 400a988:	18bfe51e 	bne	r3,r2,400a920 <__alt_data_end+0xfe00a920>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400a98c:	e0bffa17 	ldw	r2,-24(fp)
 400a990:	103f9e26 	beq	r2,zero,400a80c <__alt_data_end+0xfe00a80c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400a994:	e0bffb17 	ldw	r2,-20(fp)
 400a998:	10c00817 	ldw	r3,32(r2)
 400a99c:	00bfff44 	movi	r2,-3
 400a9a0:	1886703a 	and	r3,r3,r2
 400a9a4:	e0bffb17 	ldw	r2,-20(fp)
 400a9a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400a9ac:	e0bffb17 	ldw	r2,-20(fp)
 400a9b0:	10800017 	ldw	r2,0(r2)
 400a9b4:	10800104 	addi	r2,r2,4
 400a9b8:	e0fffb17 	ldw	r3,-20(fp)
 400a9bc:	18c00817 	ldw	r3,32(r3)
 400a9c0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400a9c4:	e0bffc17 	ldw	r2,-16(fp)
 400a9c8:	10800104 	addi	r2,r2,4
 400a9cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400a9d0:	003f8e06 	br	400a80c <__alt_data_end+0xfe00a80c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400a9d4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400a9d8:	e037883a 	mov	sp,fp
 400a9dc:	df000017 	ldw	fp,0(sp)
 400a9e0:	dec00104 	addi	sp,sp,4
 400a9e4:	f800283a 	ret

0400a9e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400a9e8:	defffc04 	addi	sp,sp,-16
 400a9ec:	df000315 	stw	fp,12(sp)
 400a9f0:	df000304 	addi	fp,sp,12
 400a9f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400a9f8:	e0bfff17 	ldw	r2,-4(fp)
 400a9fc:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400aa00:	e0bffd17 	ldw	r2,-12(fp)
 400aa04:	10800017 	ldw	r2,0(r2)
 400aa08:	10800104 	addi	r2,r2,4
 400aa0c:	10800037 	ldwio	r2,0(r2)
 400aa10:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400aa14:	e0bffe17 	ldw	r2,-8(fp)
 400aa18:	1081000c 	andi	r2,r2,1024
 400aa1c:	10000a26 	beq	r2,zero,400aa48 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400aa20:	e0bffd17 	ldw	r2,-12(fp)
 400aa24:	10800017 	ldw	r2,0(r2)
 400aa28:	10800104 	addi	r2,r2,4
 400aa2c:	e0fffd17 	ldw	r3,-12(fp)
 400aa30:	18c00817 	ldw	r3,32(r3)
 400aa34:	18c10014 	ori	r3,r3,1024
 400aa38:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 400aa3c:	e0bffd17 	ldw	r2,-12(fp)
 400aa40:	10000915 	stw	zero,36(r2)
 400aa44:	00000a06 	br	400aa70 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400aa48:	e0bffd17 	ldw	r2,-12(fp)
 400aa4c:	10800917 	ldw	r2,36(r2)
 400aa50:	00e00034 	movhi	r3,32768
 400aa54:	18ffff04 	addi	r3,r3,-4
 400aa58:	18800536 	bltu	r3,r2,400aa70 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 400aa5c:	e0bffd17 	ldw	r2,-12(fp)
 400aa60:	10800917 	ldw	r2,36(r2)
 400aa64:	10c00044 	addi	r3,r2,1
 400aa68:	e0bffd17 	ldw	r2,-12(fp)
 400aa6c:	10c00915 	stw	r3,36(r2)
 400aa70:	00810074 	movhi	r2,1025
 400aa74:	10be9e04 	addi	r2,r2,-1416
 400aa78:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400aa7c:	e037883a 	mov	sp,fp
 400aa80:	df000017 	ldw	fp,0(sp)
 400aa84:	dec00104 	addi	sp,sp,4
 400aa88:	f800283a 	ret

0400aa8c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400aa8c:	defffd04 	addi	sp,sp,-12
 400aa90:	df000215 	stw	fp,8(sp)
 400aa94:	df000204 	addi	fp,sp,8
 400aa98:	e13ffe15 	stw	r4,-8(fp)
 400aa9c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400aaa0:	00000506 	br	400aab8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400aaa4:	e0bfff17 	ldw	r2,-4(fp)
 400aaa8:	1090000c 	andi	r2,r2,16384
 400aaac:	10000226 	beq	r2,zero,400aab8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400aab0:	00bffd44 	movi	r2,-11
 400aab4:	00000b06 	br	400aae4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400aab8:	e0bffe17 	ldw	r2,-8(fp)
 400aabc:	10c00d17 	ldw	r3,52(r2)
 400aac0:	e0bffe17 	ldw	r2,-8(fp)
 400aac4:	10800c17 	ldw	r2,48(r2)
 400aac8:	18800526 	beq	r3,r2,400aae0 <altera_avalon_jtag_uart_close+0x54>
 400aacc:	e0bffe17 	ldw	r2,-8(fp)
 400aad0:	10c00917 	ldw	r3,36(r2)
 400aad4:	e0bffe17 	ldw	r2,-8(fp)
 400aad8:	10800117 	ldw	r2,4(r2)
 400aadc:	18bff136 	bltu	r3,r2,400aaa4 <__alt_data_end+0xfe00aaa4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400aae0:	0005883a 	mov	r2,zero
}
 400aae4:	e037883a 	mov	sp,fp
 400aae8:	df000017 	ldw	fp,0(sp)
 400aaec:	dec00104 	addi	sp,sp,4
 400aaf0:	f800283a 	ret

0400aaf4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400aaf4:	defffa04 	addi	sp,sp,-24
 400aaf8:	df000515 	stw	fp,20(sp)
 400aafc:	df000504 	addi	fp,sp,20
 400ab00:	e13ffd15 	stw	r4,-12(fp)
 400ab04:	e17ffe15 	stw	r5,-8(fp)
 400ab08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400ab0c:	00bff9c4 	movi	r2,-25
 400ab10:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400ab14:	e0bffe17 	ldw	r2,-8(fp)
 400ab18:	10da8060 	cmpeqi	r3,r2,27137
 400ab1c:	1800031e 	bne	r3,zero,400ab2c <altera_avalon_jtag_uart_ioctl+0x38>
 400ab20:	109a80a0 	cmpeqi	r2,r2,27138
 400ab24:	1000181e 	bne	r2,zero,400ab88 <altera_avalon_jtag_uart_ioctl+0x94>
 400ab28:	00002606 	br	400abc4 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400ab2c:	e0bffd17 	ldw	r2,-12(fp)
 400ab30:	10c00117 	ldw	r3,4(r2)
 400ab34:	00a00034 	movhi	r2,32768
 400ab38:	10bfffc4 	addi	r2,r2,-1
 400ab3c:	18802226 	beq	r3,r2,400abc8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 400ab40:	e0bfff17 	ldw	r2,-4(fp)
 400ab44:	10800017 	ldw	r2,0(r2)
 400ab48:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400ab4c:	e0bffc17 	ldw	r2,-16(fp)
 400ab50:	10800090 	cmplti	r2,r2,2
 400ab54:	1000061e 	bne	r2,zero,400ab70 <altera_avalon_jtag_uart_ioctl+0x7c>
 400ab58:	e0fffc17 	ldw	r3,-16(fp)
 400ab5c:	00a00034 	movhi	r2,32768
 400ab60:	10bfffc4 	addi	r2,r2,-1
 400ab64:	18800226 	beq	r3,r2,400ab70 <altera_avalon_jtag_uart_ioctl+0x7c>
 400ab68:	e0bffc17 	ldw	r2,-16(fp)
 400ab6c:	00000206 	br	400ab78 <altera_avalon_jtag_uart_ioctl+0x84>
 400ab70:	00a00034 	movhi	r2,32768
 400ab74:	10bfff84 	addi	r2,r2,-2
 400ab78:	e0fffd17 	ldw	r3,-12(fp)
 400ab7c:	18800115 	stw	r2,4(r3)
      rc = 0;
 400ab80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400ab84:	00001006 	br	400abc8 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400ab88:	e0bffd17 	ldw	r2,-12(fp)
 400ab8c:	10c00117 	ldw	r3,4(r2)
 400ab90:	00a00034 	movhi	r2,32768
 400ab94:	10bfffc4 	addi	r2,r2,-1
 400ab98:	18800d26 	beq	r3,r2,400abd0 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400ab9c:	e0bffd17 	ldw	r2,-12(fp)
 400aba0:	10c00917 	ldw	r3,36(r2)
 400aba4:	e0bffd17 	ldw	r2,-12(fp)
 400aba8:	10800117 	ldw	r2,4(r2)
 400abac:	1885803a 	cmpltu	r2,r3,r2
 400abb0:	10c03fcc 	andi	r3,r2,255
 400abb4:	e0bfff17 	ldw	r2,-4(fp)
 400abb8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400abbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400abc0:	00000306 	br	400abd0 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 400abc4:	00000306 	br	400abd4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400abc8:	0001883a 	nop
 400abcc:	00000106 	br	400abd4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400abd0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400abd4:	e0bffb17 	ldw	r2,-20(fp)
}
 400abd8:	e037883a 	mov	sp,fp
 400abdc:	df000017 	ldw	fp,0(sp)
 400abe0:	dec00104 	addi	sp,sp,4
 400abe4:	f800283a 	ret

0400abe8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400abe8:	defff304 	addi	sp,sp,-52
 400abec:	dfc00c15 	stw	ra,48(sp)
 400abf0:	df000b15 	stw	fp,44(sp)
 400abf4:	df000b04 	addi	fp,sp,44
 400abf8:	e13ffc15 	stw	r4,-16(fp)
 400abfc:	e17ffd15 	stw	r5,-12(fp)
 400ac00:	e1bffe15 	stw	r6,-8(fp)
 400ac04:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400ac08:	e0bffd17 	ldw	r2,-12(fp)
 400ac0c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400ac10:	00004706 	br	400ad30 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400ac14:	e0bffc17 	ldw	r2,-16(fp)
 400ac18:	10800a17 	ldw	r2,40(r2)
 400ac1c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400ac20:	e0bffc17 	ldw	r2,-16(fp)
 400ac24:	10800b17 	ldw	r2,44(r2)
 400ac28:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400ac2c:	e0fff717 	ldw	r3,-36(fp)
 400ac30:	e0bff817 	ldw	r2,-32(fp)
 400ac34:	18800536 	bltu	r3,r2,400ac4c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400ac38:	e0fff717 	ldw	r3,-36(fp)
 400ac3c:	e0bff817 	ldw	r2,-32(fp)
 400ac40:	1885c83a 	sub	r2,r3,r2
 400ac44:	e0bff615 	stw	r2,-40(fp)
 400ac48:	00000406 	br	400ac5c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400ac4c:	00c20004 	movi	r3,2048
 400ac50:	e0bff817 	ldw	r2,-32(fp)
 400ac54:	1885c83a 	sub	r2,r3,r2
 400ac58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400ac5c:	e0bff617 	ldw	r2,-40(fp)
 400ac60:	10001e26 	beq	r2,zero,400acdc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400ac64:	e0fffe17 	ldw	r3,-8(fp)
 400ac68:	e0bff617 	ldw	r2,-40(fp)
 400ac6c:	1880022e 	bgeu	r3,r2,400ac78 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400ac70:	e0bffe17 	ldw	r2,-8(fp)
 400ac74:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400ac78:	e0bff817 	ldw	r2,-32(fp)
 400ac7c:	10800e04 	addi	r2,r2,56
 400ac80:	e0fffc17 	ldw	r3,-16(fp)
 400ac84:	1885883a 	add	r2,r3,r2
 400ac88:	e13ff517 	ldw	r4,-44(fp)
 400ac8c:	100b883a 	mov	r5,r2
 400ac90:	e1bff617 	ldw	r6,-40(fp)
 400ac94:	40058e80 	call	40058e8 <memcpy>
      ptr   += n;
 400ac98:	e0fff517 	ldw	r3,-44(fp)
 400ac9c:	e0bff617 	ldw	r2,-40(fp)
 400aca0:	1885883a 	add	r2,r3,r2
 400aca4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400aca8:	e0fffe17 	ldw	r3,-8(fp)
 400acac:	e0bff617 	ldw	r2,-40(fp)
 400acb0:	1885c83a 	sub	r2,r3,r2
 400acb4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400acb8:	e0fff817 	ldw	r3,-32(fp)
 400acbc:	e0bff617 	ldw	r2,-40(fp)
 400acc0:	1885883a 	add	r2,r3,r2
 400acc4:	10c1ffcc 	andi	r3,r2,2047
 400acc8:	e0bffc17 	ldw	r2,-16(fp)
 400accc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400acd0:	e0bffe17 	ldw	r2,-8(fp)
 400acd4:	00bfcf16 	blt	zero,r2,400ac14 <__alt_data_end+0xfe00ac14>
 400acd8:	00000106 	br	400ace0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400acdc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400ace0:	e0fff517 	ldw	r3,-44(fp)
 400ace4:	e0bffd17 	ldw	r2,-12(fp)
 400ace8:	1880141e 	bne	r3,r2,400ad3c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400acec:	e0bfff17 	ldw	r2,-4(fp)
 400acf0:	1090000c 	andi	r2,r2,16384
 400acf4:	1000131e 	bne	r2,zero,400ad44 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400acf8:	0001883a 	nop
 400acfc:	e0bffc17 	ldw	r2,-16(fp)
 400ad00:	10c00a17 	ldw	r3,40(r2)
 400ad04:	e0bff717 	ldw	r2,-36(fp)
 400ad08:	1880051e 	bne	r3,r2,400ad20 <altera_avalon_jtag_uart_read+0x138>
 400ad0c:	e0bffc17 	ldw	r2,-16(fp)
 400ad10:	10c00917 	ldw	r3,36(r2)
 400ad14:	e0bffc17 	ldw	r2,-16(fp)
 400ad18:	10800117 	ldw	r2,4(r2)
 400ad1c:	18bff736 	bltu	r3,r2,400acfc <__alt_data_end+0xfe00acfc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400ad20:	e0bffc17 	ldw	r2,-16(fp)
 400ad24:	10c00a17 	ldw	r3,40(r2)
 400ad28:	e0bff717 	ldw	r2,-36(fp)
 400ad2c:	18800726 	beq	r3,r2,400ad4c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400ad30:	e0bffe17 	ldw	r2,-8(fp)
 400ad34:	00bfb716 	blt	zero,r2,400ac14 <__alt_data_end+0xfe00ac14>
 400ad38:	00000506 	br	400ad50 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400ad3c:	0001883a 	nop
 400ad40:	00000306 	br	400ad50 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400ad44:	0001883a 	nop
 400ad48:	00000106 	br	400ad50 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400ad4c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400ad50:	e0fff517 	ldw	r3,-44(fp)
 400ad54:	e0bffd17 	ldw	r2,-12(fp)
 400ad58:	18801726 	beq	r3,r2,400adb8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ad5c:	0005303a 	rdctl	r2,status
 400ad60:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ad64:	e0fffa17 	ldw	r3,-24(fp)
 400ad68:	00bfff84 	movi	r2,-2
 400ad6c:	1884703a 	and	r2,r3,r2
 400ad70:	1001703a 	wrctl	status,r2
  
  return context;
 400ad74:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400ad78:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400ad7c:	e0bffc17 	ldw	r2,-16(fp)
 400ad80:	10800817 	ldw	r2,32(r2)
 400ad84:	10c00054 	ori	r3,r2,1
 400ad88:	e0bffc17 	ldw	r2,-16(fp)
 400ad8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400ad90:	e0bffc17 	ldw	r2,-16(fp)
 400ad94:	10800017 	ldw	r2,0(r2)
 400ad98:	10800104 	addi	r2,r2,4
 400ad9c:	e0fffc17 	ldw	r3,-16(fp)
 400ada0:	18c00817 	ldw	r3,32(r3)
 400ada4:	10c00035 	stwio	r3,0(r2)
 400ada8:	e0bff917 	ldw	r2,-28(fp)
 400adac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400adb0:	e0bffb17 	ldw	r2,-20(fp)
 400adb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400adb8:	e0fff517 	ldw	r3,-44(fp)
 400adbc:	e0bffd17 	ldw	r2,-12(fp)
 400adc0:	18800426 	beq	r3,r2,400add4 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 400adc4:	e0fff517 	ldw	r3,-44(fp)
 400adc8:	e0bffd17 	ldw	r2,-12(fp)
 400adcc:	1885c83a 	sub	r2,r3,r2
 400add0:	00000606 	br	400adec <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 400add4:	e0bfff17 	ldw	r2,-4(fp)
 400add8:	1090000c 	andi	r2,r2,16384
 400addc:	10000226 	beq	r2,zero,400ade8 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 400ade0:	00bffd44 	movi	r2,-11
 400ade4:	00000106 	br	400adec <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 400ade8:	00bffec4 	movi	r2,-5
}
 400adec:	e037883a 	mov	sp,fp
 400adf0:	dfc00117 	ldw	ra,4(sp)
 400adf4:	df000017 	ldw	fp,0(sp)
 400adf8:	dec00204 	addi	sp,sp,8
 400adfc:	f800283a 	ret

0400ae00 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400ae00:	defff304 	addi	sp,sp,-52
 400ae04:	dfc00c15 	stw	ra,48(sp)
 400ae08:	df000b15 	stw	fp,44(sp)
 400ae0c:	df000b04 	addi	fp,sp,44
 400ae10:	e13ffc15 	stw	r4,-16(fp)
 400ae14:	e17ffd15 	stw	r5,-12(fp)
 400ae18:	e1bffe15 	stw	r6,-8(fp)
 400ae1c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400ae20:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400ae24:	e0bffd17 	ldw	r2,-12(fp)
 400ae28:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400ae2c:	00003706 	br	400af0c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400ae30:	e0bffc17 	ldw	r2,-16(fp)
 400ae34:	10800c17 	ldw	r2,48(r2)
 400ae38:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 400ae3c:	e0bffc17 	ldw	r2,-16(fp)
 400ae40:	10800d17 	ldw	r2,52(r2)
 400ae44:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400ae48:	e0fff817 	ldw	r3,-32(fp)
 400ae4c:	e0bff517 	ldw	r2,-44(fp)
 400ae50:	1880062e 	bgeu	r3,r2,400ae6c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400ae54:	e0fff517 	ldw	r3,-44(fp)
 400ae58:	e0bff817 	ldw	r2,-32(fp)
 400ae5c:	1885c83a 	sub	r2,r3,r2
 400ae60:	10bfffc4 	addi	r2,r2,-1
 400ae64:	e0bff615 	stw	r2,-40(fp)
 400ae68:	00000b06 	br	400ae98 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400ae6c:	e0bff517 	ldw	r2,-44(fp)
 400ae70:	10000526 	beq	r2,zero,400ae88 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400ae74:	00c20004 	movi	r3,2048
 400ae78:	e0bff817 	ldw	r2,-32(fp)
 400ae7c:	1885c83a 	sub	r2,r3,r2
 400ae80:	e0bff615 	stw	r2,-40(fp)
 400ae84:	00000406 	br	400ae98 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400ae88:	00c1ffc4 	movi	r3,2047
 400ae8c:	e0bff817 	ldw	r2,-32(fp)
 400ae90:	1885c83a 	sub	r2,r3,r2
 400ae94:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400ae98:	e0bff617 	ldw	r2,-40(fp)
 400ae9c:	10001e26 	beq	r2,zero,400af18 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400aea0:	e0fffe17 	ldw	r3,-8(fp)
 400aea4:	e0bff617 	ldw	r2,-40(fp)
 400aea8:	1880022e 	bgeu	r3,r2,400aeb4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400aeac:	e0bffe17 	ldw	r2,-8(fp)
 400aeb0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400aeb4:	e0bff817 	ldw	r2,-32(fp)
 400aeb8:	10820e04 	addi	r2,r2,2104
 400aebc:	e0fffc17 	ldw	r3,-16(fp)
 400aec0:	1885883a 	add	r2,r3,r2
 400aec4:	1009883a 	mov	r4,r2
 400aec8:	e17ffd17 	ldw	r5,-12(fp)
 400aecc:	e1bff617 	ldw	r6,-40(fp)
 400aed0:	40058e80 	call	40058e8 <memcpy>
      ptr   += n;
 400aed4:	e0fffd17 	ldw	r3,-12(fp)
 400aed8:	e0bff617 	ldw	r2,-40(fp)
 400aedc:	1885883a 	add	r2,r3,r2
 400aee0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400aee4:	e0fffe17 	ldw	r3,-8(fp)
 400aee8:	e0bff617 	ldw	r2,-40(fp)
 400aeec:	1885c83a 	sub	r2,r3,r2
 400aef0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400aef4:	e0fff817 	ldw	r3,-32(fp)
 400aef8:	e0bff617 	ldw	r2,-40(fp)
 400aefc:	1885883a 	add	r2,r3,r2
 400af00:	10c1ffcc 	andi	r3,r2,2047
 400af04:	e0bffc17 	ldw	r2,-16(fp)
 400af08:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400af0c:	e0bffe17 	ldw	r2,-8(fp)
 400af10:	00bfc716 	blt	zero,r2,400ae30 <__alt_data_end+0xfe00ae30>
 400af14:	00000106 	br	400af1c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400af18:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400af1c:	0005303a 	rdctl	r2,status
 400af20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400af24:	e0fffa17 	ldw	r3,-24(fp)
 400af28:	00bfff84 	movi	r2,-2
 400af2c:	1884703a 	and	r2,r3,r2
 400af30:	1001703a 	wrctl	status,r2
  
  return context;
 400af34:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400af38:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400af3c:	e0bffc17 	ldw	r2,-16(fp)
 400af40:	10800817 	ldw	r2,32(r2)
 400af44:	10c00094 	ori	r3,r2,2
 400af48:	e0bffc17 	ldw	r2,-16(fp)
 400af4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400af50:	e0bffc17 	ldw	r2,-16(fp)
 400af54:	10800017 	ldw	r2,0(r2)
 400af58:	10800104 	addi	r2,r2,4
 400af5c:	e0fffc17 	ldw	r3,-16(fp)
 400af60:	18c00817 	ldw	r3,32(r3)
 400af64:	10c00035 	stwio	r3,0(r2)
 400af68:	e0bff917 	ldw	r2,-28(fp)
 400af6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400af70:	e0bffb17 	ldw	r2,-20(fp)
 400af74:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400af78:	e0bffe17 	ldw	r2,-8(fp)
 400af7c:	0080100e 	bge	zero,r2,400afc0 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
 400af80:	e0bfff17 	ldw	r2,-4(fp)
 400af84:	1090000c 	andi	r2,r2,16384
 400af88:	1000101e 	bne	r2,zero,400afcc <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400af8c:	0001883a 	nop
 400af90:	e0bffc17 	ldw	r2,-16(fp)
 400af94:	10c00d17 	ldw	r3,52(r2)
 400af98:	e0bff517 	ldw	r2,-44(fp)
 400af9c:	1880051e 	bne	r3,r2,400afb4 <altera_avalon_jtag_uart_write+0x1b4>
 400afa0:	e0bffc17 	ldw	r2,-16(fp)
 400afa4:	10c00917 	ldw	r3,36(r2)
 400afa8:	e0bffc17 	ldw	r2,-16(fp)
 400afac:	10800117 	ldw	r2,4(r2)
 400afb0:	18bff736 	bltu	r3,r2,400af90 <__alt_data_end+0xfe00af90>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400afb4:	e0bffc17 	ldw	r2,-16(fp)
 400afb8:	10800917 	ldw	r2,36(r2)
 400afbc:	1000051e 	bne	r2,zero,400afd4 <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
 400afc0:	e0bffe17 	ldw	r2,-8(fp)
 400afc4:	00bfd116 	blt	zero,r2,400af0c <__alt_data_end+0xfe00af0c>
 400afc8:	00000306 	br	400afd8 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400afcc:	0001883a 	nop
 400afd0:	00000106 	br	400afd8 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400afd4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400afd8:	e0fffd17 	ldw	r3,-12(fp)
 400afdc:	e0bff717 	ldw	r2,-36(fp)
 400afe0:	18800426 	beq	r3,r2,400aff4 <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
 400afe4:	e0fffd17 	ldw	r3,-12(fp)
 400afe8:	e0bff717 	ldw	r2,-36(fp)
 400afec:	1885c83a 	sub	r2,r3,r2
 400aff0:	00000606 	br	400b00c <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
 400aff4:	e0bfff17 	ldw	r2,-4(fp)
 400aff8:	1090000c 	andi	r2,r2,16384
 400affc:	10000226 	beq	r2,zero,400b008 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
 400b000:	00bffd44 	movi	r2,-11
 400b004:	00000106 	br	400b00c <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400b008:	00bffec4 	movi	r2,-5
}
 400b00c:	e037883a 	mov	sp,fp
 400b010:	dfc00117 	ldw	ra,4(sp)
 400b014:	df000017 	ldw	fp,0(sp)
 400b018:	dec00204 	addi	sp,sp,8
 400b01c:	f800283a 	ret

0400b020 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400b020:	defff504 	addi	sp,sp,-44
 400b024:	df000a15 	stw	fp,40(sp)
 400b028:	df000a04 	addi	fp,sp,40
 400b02c:	e13ffc15 	stw	r4,-16(fp)
 400b030:	e17ffd15 	stw	r5,-12(fp)
 400b034:	e1bffe15 	stw	r6,-8(fp)
 400b038:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400b03c:	e03ff615 	stw	zero,-40(fp)
 400b040:	00810074 	movhi	r2,1025
 400b044:	10be9e04 	addi	r2,r2,-1416
 400b048:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 400b04c:	10003f26 	beq	r2,zero,400b14c <alt_alarm_start+0x12c>
  {
    if (alarm)
 400b050:	e0bffc17 	ldw	r2,-16(fp)
 400b054:	10003b26 	beq	r2,zero,400b144 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 400b058:	e0bffc17 	ldw	r2,-16(fp)
 400b05c:	e0fffe17 	ldw	r3,-8(fp)
 400b060:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400b064:	e0bffc17 	ldw	r2,-16(fp)
 400b068:	e0ffff17 	ldw	r3,-4(fp)
 400b06c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b070:	0005303a 	rdctl	r2,status
 400b074:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b078:	e0fff817 	ldw	r3,-32(fp)
 400b07c:	00bfff84 	movi	r2,-2
 400b080:	1884703a 	and	r2,r3,r2
 400b084:	1001703a 	wrctl	status,r2
  
  return context;
 400b088:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 400b08c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400b090:	00810074 	movhi	r2,1025
 400b094:	10be9f04 	addi	r2,r2,-1412
 400b098:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 400b09c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400b0a0:	e0fffd17 	ldw	r3,-12(fp)
 400b0a4:	e0bff617 	ldw	r2,-40(fp)
 400b0a8:	1885883a 	add	r2,r3,r2
 400b0ac:	10c00044 	addi	r3,r2,1
 400b0b0:	e0bffc17 	ldw	r2,-16(fp)
 400b0b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400b0b8:	e0bffc17 	ldw	r2,-16(fp)
 400b0bc:	10c00217 	ldw	r3,8(r2)
 400b0c0:	e0bff617 	ldw	r2,-40(fp)
 400b0c4:	1880042e 	bgeu	r3,r2,400b0d8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 400b0c8:	e0bffc17 	ldw	r2,-16(fp)
 400b0cc:	00c00044 	movi	r3,1
 400b0d0:	10c00405 	stb	r3,16(r2)
 400b0d4:	00000206 	br	400b0e0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 400b0d8:	e0bffc17 	ldw	r2,-16(fp)
 400b0dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400b0e0:	e0bffc17 	ldw	r2,-16(fp)
 400b0e4:	00c10074 	movhi	r3,1025
 400b0e8:	18f7fb04 	addi	r3,r3,-8212
 400b0ec:	e0fff915 	stw	r3,-28(fp)
 400b0f0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400b0f4:	e0bffa17 	ldw	r2,-24(fp)
 400b0f8:	e0fff917 	ldw	r3,-28(fp)
 400b0fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400b100:	e0bff917 	ldw	r2,-28(fp)
 400b104:	10c00017 	ldw	r3,0(r2)
 400b108:	e0bffa17 	ldw	r2,-24(fp)
 400b10c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400b110:	e0bff917 	ldw	r2,-28(fp)
 400b114:	10800017 	ldw	r2,0(r2)
 400b118:	e0fffa17 	ldw	r3,-24(fp)
 400b11c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400b120:	e0bff917 	ldw	r2,-28(fp)
 400b124:	e0fffa17 	ldw	r3,-24(fp)
 400b128:	10c00015 	stw	r3,0(r2)
 400b12c:	e0bff717 	ldw	r2,-36(fp)
 400b130:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b134:	e0bffb17 	ldw	r2,-20(fp)
 400b138:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400b13c:	0005883a 	mov	r2,zero
 400b140:	00000306 	br	400b150 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 400b144:	00bffa84 	movi	r2,-22
 400b148:	00000106 	br	400b150 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 400b14c:	00bfde84 	movi	r2,-134
  }
}
 400b150:	e037883a 	mov	sp,fp
 400b154:	df000017 	ldw	fp,0(sp)
 400b158:	dec00104 	addi	sp,sp,4
 400b15c:	f800283a 	ret

0400b160 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400b160:	deffff04 	addi	sp,sp,-4
 400b164:	df000015 	stw	fp,0(sp)
 400b168:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400b16c:	e037883a 	mov	sp,fp
 400b170:	df000017 	ldw	fp,0(sp)
 400b174:	dec00104 	addi	sp,sp,4
 400b178:	f800283a 	ret

0400b17c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b17c:	defffe04 	addi	sp,sp,-8
 400b180:	dfc00115 	stw	ra,4(sp)
 400b184:	df000015 	stw	fp,0(sp)
 400b188:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b18c:	00810074 	movhi	r2,1025
 400b190:	10b7f804 	addi	r2,r2,-8224
 400b194:	10800017 	ldw	r2,0(r2)
 400b198:	10000526 	beq	r2,zero,400b1b0 <alt_get_errno+0x34>
 400b19c:	00810074 	movhi	r2,1025
 400b1a0:	10b7f804 	addi	r2,r2,-8224
 400b1a4:	10800017 	ldw	r2,0(r2)
 400b1a8:	103ee83a 	callr	r2
 400b1ac:	00000206 	br	400b1b8 <alt_get_errno+0x3c>
 400b1b0:	00810074 	movhi	r2,1025
 400b1b4:	10be9904 	addi	r2,r2,-1436
}
 400b1b8:	e037883a 	mov	sp,fp
 400b1bc:	dfc00117 	ldw	ra,4(sp)
 400b1c0:	df000017 	ldw	fp,0(sp)
 400b1c4:	dec00204 	addi	sp,sp,8
 400b1c8:	f800283a 	ret

0400b1cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400b1cc:	defffa04 	addi	sp,sp,-24
 400b1d0:	dfc00515 	stw	ra,20(sp)
 400b1d4:	df000415 	stw	fp,16(sp)
 400b1d8:	df000404 	addi	fp,sp,16
 400b1dc:	e13ffe15 	stw	r4,-8(fp)
 400b1e0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400b1e4:	e0bffe17 	ldw	r2,-8(fp)
 400b1e8:	10000326 	beq	r2,zero,400b1f8 <alt_dev_llist_insert+0x2c>
 400b1ec:	e0bffe17 	ldw	r2,-8(fp)
 400b1f0:	10800217 	ldw	r2,8(r2)
 400b1f4:	1000051e 	bne	r2,zero,400b20c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 400b1f8:	400b17c0 	call	400b17c <alt_get_errno>
 400b1fc:	00c00584 	movi	r3,22
 400b200:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 400b204:	00bffa84 	movi	r2,-22
 400b208:	00001306 	br	400b258 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400b20c:	e0bffe17 	ldw	r2,-8(fp)
 400b210:	e0ffff17 	ldw	r3,-4(fp)
 400b214:	e0fffc15 	stw	r3,-16(fp)
 400b218:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400b21c:	e0bffd17 	ldw	r2,-12(fp)
 400b220:	e0fffc17 	ldw	r3,-16(fp)
 400b224:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400b228:	e0bffc17 	ldw	r2,-16(fp)
 400b22c:	10c00017 	ldw	r3,0(r2)
 400b230:	e0bffd17 	ldw	r2,-12(fp)
 400b234:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400b238:	e0bffc17 	ldw	r2,-16(fp)
 400b23c:	10800017 	ldw	r2,0(r2)
 400b240:	e0fffd17 	ldw	r3,-12(fp)
 400b244:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400b248:	e0bffc17 	ldw	r2,-16(fp)
 400b24c:	e0fffd17 	ldw	r3,-12(fp)
 400b250:	10c00015 	stw	r3,0(r2)

  return 0;  
 400b254:	0005883a 	mov	r2,zero
}
 400b258:	e037883a 	mov	sp,fp
 400b25c:	dfc00117 	ldw	ra,4(sp)
 400b260:	df000017 	ldw	fp,0(sp)
 400b264:	dec00204 	addi	sp,sp,8
 400b268:	f800283a 	ret

0400b26c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400b26c:	defffd04 	addi	sp,sp,-12
 400b270:	dfc00215 	stw	ra,8(sp)
 400b274:	df000115 	stw	fp,4(sp)
 400b278:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400b27c:	00810074 	movhi	r2,1025
 400b280:	10b07f04 	addi	r2,r2,-15876
 400b284:	e0bfff15 	stw	r2,-4(fp)
 400b288:	00000606 	br	400b2a4 <_do_ctors+0x38>
        (*ctor) (); 
 400b28c:	e0bfff17 	ldw	r2,-4(fp)
 400b290:	10800017 	ldw	r2,0(r2)
 400b294:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400b298:	e0bfff17 	ldw	r2,-4(fp)
 400b29c:	10bfff04 	addi	r2,r2,-4
 400b2a0:	e0bfff15 	stw	r2,-4(fp)
 400b2a4:	e0ffff17 	ldw	r3,-4(fp)
 400b2a8:	00810074 	movhi	r2,1025
 400b2ac:	10b08004 	addi	r2,r2,-15872
 400b2b0:	18bff62e 	bgeu	r3,r2,400b28c <__alt_data_end+0xfe00b28c>
        (*ctor) (); 
}
 400b2b4:	e037883a 	mov	sp,fp
 400b2b8:	dfc00117 	ldw	ra,4(sp)
 400b2bc:	df000017 	ldw	fp,0(sp)
 400b2c0:	dec00204 	addi	sp,sp,8
 400b2c4:	f800283a 	ret

0400b2c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400b2c8:	defffd04 	addi	sp,sp,-12
 400b2cc:	dfc00215 	stw	ra,8(sp)
 400b2d0:	df000115 	stw	fp,4(sp)
 400b2d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400b2d8:	00810074 	movhi	r2,1025
 400b2dc:	10b07f04 	addi	r2,r2,-15876
 400b2e0:	e0bfff15 	stw	r2,-4(fp)
 400b2e4:	00000606 	br	400b300 <_do_dtors+0x38>
        (*dtor) (); 
 400b2e8:	e0bfff17 	ldw	r2,-4(fp)
 400b2ec:	10800017 	ldw	r2,0(r2)
 400b2f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400b2f4:	e0bfff17 	ldw	r2,-4(fp)
 400b2f8:	10bfff04 	addi	r2,r2,-4
 400b2fc:	e0bfff15 	stw	r2,-4(fp)
 400b300:	e0ffff17 	ldw	r3,-4(fp)
 400b304:	00810074 	movhi	r2,1025
 400b308:	10b08004 	addi	r2,r2,-15872
 400b30c:	18bff62e 	bgeu	r3,r2,400b2e8 <__alt_data_end+0xfe00b2e8>
        (*dtor) (); 
}
 400b310:	e037883a 	mov	sp,fp
 400b314:	dfc00117 	ldw	ra,4(sp)
 400b318:	df000017 	ldw	fp,0(sp)
 400b31c:	dec00204 	addi	sp,sp,8
 400b320:	f800283a 	ret

0400b324 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400b324:	deffff04 	addi	sp,sp,-4
 400b328:	df000015 	stw	fp,0(sp)
 400b32c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 400b330:	e037883a 	mov	sp,fp
 400b334:	df000017 	ldw	fp,0(sp)
 400b338:	dec00104 	addi	sp,sp,4
 400b33c:	f800283a 	ret

0400b340 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400b340:	defff904 	addi	sp,sp,-28
 400b344:	dfc00615 	stw	ra,24(sp)
 400b348:	df000515 	stw	fp,20(sp)
 400b34c:	df000504 	addi	fp,sp,20
 400b350:	e13ffc15 	stw	r4,-16(fp)
 400b354:	e17ffd15 	stw	r5,-12(fp)
 400b358:	e1bffe15 	stw	r6,-8(fp)
 400b35c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400b360:	e0800217 	ldw	r2,8(fp)
 400b364:	d8800015 	stw	r2,0(sp)
 400b368:	e13ffc17 	ldw	r4,-16(fp)
 400b36c:	e17ffd17 	ldw	r5,-12(fp)
 400b370:	e1bffe17 	ldw	r6,-8(fp)
 400b374:	e1ffff17 	ldw	r7,-4(fp)
 400b378:	400b5180 	call	400b518 <alt_iic_isr_register>
}  
 400b37c:	e037883a 	mov	sp,fp
 400b380:	dfc00117 	ldw	ra,4(sp)
 400b384:	df000017 	ldw	fp,0(sp)
 400b388:	dec00204 	addi	sp,sp,8
 400b38c:	f800283a 	ret

0400b390 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400b390:	defff904 	addi	sp,sp,-28
 400b394:	df000615 	stw	fp,24(sp)
 400b398:	df000604 	addi	fp,sp,24
 400b39c:	e13ffe15 	stw	r4,-8(fp)
 400b3a0:	e17fff15 	stw	r5,-4(fp)
 400b3a4:	e0bfff17 	ldw	r2,-4(fp)
 400b3a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b3ac:	0005303a 	rdctl	r2,status
 400b3b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b3b4:	e0fffb17 	ldw	r3,-20(fp)
 400b3b8:	00bfff84 	movi	r2,-2
 400b3bc:	1884703a 	and	r2,r3,r2
 400b3c0:	1001703a 	wrctl	status,r2
  
  return context;
 400b3c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400b3c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400b3cc:	e0bffa17 	ldw	r2,-24(fp)
 400b3d0:	00c00044 	movi	r3,1
 400b3d4:	1884983a 	sll	r2,r3,r2
 400b3d8:	1007883a 	mov	r3,r2
 400b3dc:	00810074 	movhi	r2,1025
 400b3e0:	10be9d04 	addi	r2,r2,-1420
 400b3e4:	10800017 	ldw	r2,0(r2)
 400b3e8:	1886b03a 	or	r3,r3,r2
 400b3ec:	00810074 	movhi	r2,1025
 400b3f0:	10be9d04 	addi	r2,r2,-1420
 400b3f4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400b3f8:	00810074 	movhi	r2,1025
 400b3fc:	10be9d04 	addi	r2,r2,-1420
 400b400:	10800017 	ldw	r2,0(r2)
 400b404:	100170fa 	wrctl	ienable,r2
 400b408:	e0bffc17 	ldw	r2,-16(fp)
 400b40c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b410:	e0bffd17 	ldw	r2,-12(fp)
 400b414:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400b418:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 400b41c:	e037883a 	mov	sp,fp
 400b420:	df000017 	ldw	fp,0(sp)
 400b424:	dec00104 	addi	sp,sp,4
 400b428:	f800283a 	ret

0400b42c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400b42c:	defff904 	addi	sp,sp,-28
 400b430:	df000615 	stw	fp,24(sp)
 400b434:	df000604 	addi	fp,sp,24
 400b438:	e13ffe15 	stw	r4,-8(fp)
 400b43c:	e17fff15 	stw	r5,-4(fp)
 400b440:	e0bfff17 	ldw	r2,-4(fp)
 400b444:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b448:	0005303a 	rdctl	r2,status
 400b44c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b450:	e0fffb17 	ldw	r3,-20(fp)
 400b454:	00bfff84 	movi	r2,-2
 400b458:	1884703a 	and	r2,r3,r2
 400b45c:	1001703a 	wrctl	status,r2
  
  return context;
 400b460:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400b464:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400b468:	e0bffa17 	ldw	r2,-24(fp)
 400b46c:	00c00044 	movi	r3,1
 400b470:	1884983a 	sll	r2,r3,r2
 400b474:	0084303a 	nor	r2,zero,r2
 400b478:	1007883a 	mov	r3,r2
 400b47c:	00810074 	movhi	r2,1025
 400b480:	10be9d04 	addi	r2,r2,-1420
 400b484:	10800017 	ldw	r2,0(r2)
 400b488:	1886703a 	and	r3,r3,r2
 400b48c:	00810074 	movhi	r2,1025
 400b490:	10be9d04 	addi	r2,r2,-1420
 400b494:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400b498:	00810074 	movhi	r2,1025
 400b49c:	10be9d04 	addi	r2,r2,-1420
 400b4a0:	10800017 	ldw	r2,0(r2)
 400b4a4:	100170fa 	wrctl	ienable,r2
 400b4a8:	e0bffc17 	ldw	r2,-16(fp)
 400b4ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b4b0:	e0bffd17 	ldw	r2,-12(fp)
 400b4b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400b4b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 400b4bc:	e037883a 	mov	sp,fp
 400b4c0:	df000017 	ldw	fp,0(sp)
 400b4c4:	dec00104 	addi	sp,sp,4
 400b4c8:	f800283a 	ret

0400b4cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400b4cc:	defffc04 	addi	sp,sp,-16
 400b4d0:	df000315 	stw	fp,12(sp)
 400b4d4:	df000304 	addi	fp,sp,12
 400b4d8:	e13ffe15 	stw	r4,-8(fp)
 400b4dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400b4e0:	000530fa 	rdctl	r2,ienable
 400b4e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400b4e8:	e0bfff17 	ldw	r2,-4(fp)
 400b4ec:	00c00044 	movi	r3,1
 400b4f0:	1884983a 	sll	r2,r3,r2
 400b4f4:	1007883a 	mov	r3,r2
 400b4f8:	e0bffd17 	ldw	r2,-12(fp)
 400b4fc:	1884703a 	and	r2,r3,r2
 400b500:	1004c03a 	cmpne	r2,r2,zero
 400b504:	10803fcc 	andi	r2,r2,255
}
 400b508:	e037883a 	mov	sp,fp
 400b50c:	df000017 	ldw	fp,0(sp)
 400b510:	dec00104 	addi	sp,sp,4
 400b514:	f800283a 	ret

0400b518 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400b518:	defff504 	addi	sp,sp,-44
 400b51c:	dfc00a15 	stw	ra,40(sp)
 400b520:	df000915 	stw	fp,36(sp)
 400b524:	df000904 	addi	fp,sp,36
 400b528:	e13ffc15 	stw	r4,-16(fp)
 400b52c:	e17ffd15 	stw	r5,-12(fp)
 400b530:	e1bffe15 	stw	r6,-8(fp)
 400b534:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400b538:	00bffa84 	movi	r2,-22
 400b53c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400b540:	e0bffd17 	ldw	r2,-12(fp)
 400b544:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400b548:	e0bff817 	ldw	r2,-32(fp)
 400b54c:	10800808 	cmpgei	r2,r2,32
 400b550:	1000271e 	bne	r2,zero,400b5f0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400b554:	0005303a 	rdctl	r2,status
 400b558:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400b55c:	e0fffa17 	ldw	r3,-24(fp)
 400b560:	00bfff84 	movi	r2,-2
 400b564:	1884703a 	and	r2,r3,r2
 400b568:	1001703a 	wrctl	status,r2
  
  return context;
 400b56c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400b570:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 400b574:	00c10074 	movhi	r3,1025
 400b578:	18feaa04 	addi	r3,r3,-1368
 400b57c:	e0bff817 	ldw	r2,-32(fp)
 400b580:	100490fa 	slli	r2,r2,3
 400b584:	1885883a 	add	r2,r3,r2
 400b588:	e0fffe17 	ldw	r3,-8(fp)
 400b58c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400b590:	00c10074 	movhi	r3,1025
 400b594:	18feaa04 	addi	r3,r3,-1368
 400b598:	e0bff817 	ldw	r2,-32(fp)
 400b59c:	100490fa 	slli	r2,r2,3
 400b5a0:	1885883a 	add	r2,r3,r2
 400b5a4:	10800104 	addi	r2,r2,4
 400b5a8:	e0ffff17 	ldw	r3,-4(fp)
 400b5ac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400b5b0:	e0bffe17 	ldw	r2,-8(fp)
 400b5b4:	10000526 	beq	r2,zero,400b5cc <alt_iic_isr_register+0xb4>
 400b5b8:	e0bff817 	ldw	r2,-32(fp)
 400b5bc:	e13ffc17 	ldw	r4,-16(fp)
 400b5c0:	100b883a 	mov	r5,r2
 400b5c4:	400b3900 	call	400b390 <alt_ic_irq_enable>
 400b5c8:	00000406 	br	400b5dc <alt_iic_isr_register+0xc4>
 400b5cc:	e0bff817 	ldw	r2,-32(fp)
 400b5d0:	e13ffc17 	ldw	r4,-16(fp)
 400b5d4:	100b883a 	mov	r5,r2
 400b5d8:	400b42c0 	call	400b42c <alt_ic_irq_disable>
 400b5dc:	e0bff715 	stw	r2,-36(fp)
 400b5e0:	e0bff917 	ldw	r2,-28(fp)
 400b5e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400b5e8:	e0bffb17 	ldw	r2,-20(fp)
 400b5ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400b5f0:	e0bff717 	ldw	r2,-36(fp)
}
 400b5f4:	e037883a 	mov	sp,fp
 400b5f8:	dfc00117 	ldw	ra,4(sp)
 400b5fc:	df000017 	ldw	fp,0(sp)
 400b600:	dec00204 	addi	sp,sp,8
 400b604:	f800283a 	ret

0400b608 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400b608:	defff804 	addi	sp,sp,-32
 400b60c:	dfc00715 	stw	ra,28(sp)
 400b610:	df000615 	stw	fp,24(sp)
 400b614:	dc000515 	stw	r16,20(sp)
 400b618:	df000504 	addi	fp,sp,20
 400b61c:	e13ffc15 	stw	r4,-16(fp)
 400b620:	e17ffd15 	stw	r5,-12(fp)
 400b624:	e1bffe15 	stw	r6,-8(fp)
 400b628:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400b62c:	e13ffd17 	ldw	r4,-12(fp)
 400b630:	e17ffe17 	ldw	r5,-8(fp)
 400b634:	e1bfff17 	ldw	r6,-4(fp)
 400b638:	400b8a00 	call	400b8a0 <open>
 400b63c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 400b640:	e0bffb17 	ldw	r2,-20(fp)
 400b644:	10002216 	blt	r2,zero,400b6d0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 400b648:	04010074 	movhi	r16,1025
 400b64c:	84337604 	addi	r16,r16,-12840
 400b650:	e0bffb17 	ldw	r2,-20(fp)
 400b654:	1009883a 	mov	r4,r2
 400b658:	01400304 	movi	r5,12
 400b65c:	40094f00 	call	40094f0 <__mulsi3>
 400b660:	8085883a 	add	r2,r16,r2
 400b664:	10c00017 	ldw	r3,0(r2)
 400b668:	e0bffc17 	ldw	r2,-16(fp)
 400b66c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400b670:	04010074 	movhi	r16,1025
 400b674:	84337604 	addi	r16,r16,-12840
 400b678:	e0bffb17 	ldw	r2,-20(fp)
 400b67c:	1009883a 	mov	r4,r2
 400b680:	01400304 	movi	r5,12
 400b684:	40094f00 	call	40094f0 <__mulsi3>
 400b688:	8085883a 	add	r2,r16,r2
 400b68c:	10800104 	addi	r2,r2,4
 400b690:	10c00017 	ldw	r3,0(r2)
 400b694:	e0bffc17 	ldw	r2,-16(fp)
 400b698:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400b69c:	04010074 	movhi	r16,1025
 400b6a0:	84337604 	addi	r16,r16,-12840
 400b6a4:	e0bffb17 	ldw	r2,-20(fp)
 400b6a8:	1009883a 	mov	r4,r2
 400b6ac:	01400304 	movi	r5,12
 400b6b0:	40094f00 	call	40094f0 <__mulsi3>
 400b6b4:	8085883a 	add	r2,r16,r2
 400b6b8:	10800204 	addi	r2,r2,8
 400b6bc:	10c00017 	ldw	r3,0(r2)
 400b6c0:	e0bffc17 	ldw	r2,-16(fp)
 400b6c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400b6c8:	e13ffb17 	ldw	r4,-20(fp)
 400b6cc:	400a29c0 	call	400a29c <alt_release_fd>
  }
} 
 400b6d0:	e037883a 	mov	sp,fp
 400b6d4:	dfc00217 	ldw	ra,8(sp)
 400b6d8:	df000117 	ldw	fp,4(sp)
 400b6dc:	dc000017 	ldw	r16,0(sp)
 400b6e0:	dec00304 	addi	sp,sp,12
 400b6e4:	f800283a 	ret

0400b6e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400b6e8:	defffb04 	addi	sp,sp,-20
 400b6ec:	dfc00415 	stw	ra,16(sp)
 400b6f0:	df000315 	stw	fp,12(sp)
 400b6f4:	df000304 	addi	fp,sp,12
 400b6f8:	e13ffd15 	stw	r4,-12(fp)
 400b6fc:	e17ffe15 	stw	r5,-8(fp)
 400b700:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400b704:	01010074 	movhi	r4,1025
 400b708:	21337904 	addi	r4,r4,-12828
 400b70c:	e17ffd17 	ldw	r5,-12(fp)
 400b710:	01800044 	movi	r6,1
 400b714:	01c07fc4 	movi	r7,511
 400b718:	400b6080 	call	400b608 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400b71c:	01010074 	movhi	r4,1025
 400b720:	21337604 	addi	r4,r4,-12840
 400b724:	e17ffe17 	ldw	r5,-8(fp)
 400b728:	000d883a 	mov	r6,zero
 400b72c:	01c07fc4 	movi	r7,511
 400b730:	400b6080 	call	400b608 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400b734:	01010074 	movhi	r4,1025
 400b738:	21337c04 	addi	r4,r4,-12816
 400b73c:	e17fff17 	ldw	r5,-4(fp)
 400b740:	01800044 	movi	r6,1
 400b744:	01c07fc4 	movi	r7,511
 400b748:	400b6080 	call	400b608 <alt_open_fd>
}  
 400b74c:	e037883a 	mov	sp,fp
 400b750:	dfc00117 	ldw	ra,4(sp)
 400b754:	df000017 	ldw	fp,0(sp)
 400b758:	dec00204 	addi	sp,sp,8
 400b75c:	f800283a 	ret

0400b760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400b760:	defffe04 	addi	sp,sp,-8
 400b764:	dfc00115 	stw	ra,4(sp)
 400b768:	df000015 	stw	fp,0(sp)
 400b76c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400b770:	00810074 	movhi	r2,1025
 400b774:	10b7f804 	addi	r2,r2,-8224
 400b778:	10800017 	ldw	r2,0(r2)
 400b77c:	10000526 	beq	r2,zero,400b794 <alt_get_errno+0x34>
 400b780:	00810074 	movhi	r2,1025
 400b784:	10b7f804 	addi	r2,r2,-8224
 400b788:	10800017 	ldw	r2,0(r2)
 400b78c:	103ee83a 	callr	r2
 400b790:	00000206 	br	400b79c <alt_get_errno+0x3c>
 400b794:	00810074 	movhi	r2,1025
 400b798:	10be9904 	addi	r2,r2,-1436
}
 400b79c:	e037883a 	mov	sp,fp
 400b7a0:	dfc00117 	ldw	ra,4(sp)
 400b7a4:	df000017 	ldw	fp,0(sp)
 400b7a8:	dec00204 	addi	sp,sp,8
 400b7ac:	f800283a 	ret

0400b7b0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400b7b0:	defffb04 	addi	sp,sp,-20
 400b7b4:	dfc00415 	stw	ra,16(sp)
 400b7b8:	df000315 	stw	fp,12(sp)
 400b7bc:	dc000215 	stw	r16,8(sp)
 400b7c0:	df000204 	addi	fp,sp,8
 400b7c4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400b7c8:	e0bfff17 	ldw	r2,-4(fp)
 400b7cc:	10800217 	ldw	r2,8(r2)
 400b7d0:	10d00034 	orhi	r3,r2,16384
 400b7d4:	e0bfff17 	ldw	r2,-4(fp)
 400b7d8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400b7dc:	e03ffe15 	stw	zero,-8(fp)
 400b7e0:	00002206 	br	400b86c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400b7e4:	04010074 	movhi	r16,1025
 400b7e8:	84337604 	addi	r16,r16,-12840
 400b7ec:	e0bffe17 	ldw	r2,-8(fp)
 400b7f0:	1009883a 	mov	r4,r2
 400b7f4:	01400304 	movi	r5,12
 400b7f8:	40094f00 	call	40094f0 <__mulsi3>
 400b7fc:	8085883a 	add	r2,r16,r2
 400b800:	10c00017 	ldw	r3,0(r2)
 400b804:	e0bfff17 	ldw	r2,-4(fp)
 400b808:	10800017 	ldw	r2,0(r2)
 400b80c:	1880141e 	bne	r3,r2,400b860 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400b810:	04010074 	movhi	r16,1025
 400b814:	84337604 	addi	r16,r16,-12840
 400b818:	e0bffe17 	ldw	r2,-8(fp)
 400b81c:	1009883a 	mov	r4,r2
 400b820:	01400304 	movi	r5,12
 400b824:	40094f00 	call	40094f0 <__mulsi3>
 400b828:	8085883a 	add	r2,r16,r2
 400b82c:	10800204 	addi	r2,r2,8
 400b830:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400b834:	10000a0e 	bge	r2,zero,400b860 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400b838:	e13ffe17 	ldw	r4,-8(fp)
 400b83c:	01400304 	movi	r5,12
 400b840:	40094f00 	call	40094f0 <__mulsi3>
 400b844:	00c10074 	movhi	r3,1025
 400b848:	18f37604 	addi	r3,r3,-12840
 400b84c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400b850:	e0bfff17 	ldw	r2,-4(fp)
 400b854:	18800226 	beq	r3,r2,400b860 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400b858:	00bffcc4 	movi	r2,-13
 400b85c:	00000a06 	br	400b888 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400b860:	e0bffe17 	ldw	r2,-8(fp)
 400b864:	10800044 	addi	r2,r2,1
 400b868:	e0bffe15 	stw	r2,-8(fp)
 400b86c:	00810074 	movhi	r2,1025
 400b870:	10b7f704 	addi	r2,r2,-8228
 400b874:	10800017 	ldw	r2,0(r2)
 400b878:	1007883a 	mov	r3,r2
 400b87c:	e0bffe17 	ldw	r2,-8(fp)
 400b880:	18bfd82e 	bgeu	r3,r2,400b7e4 <__alt_data_end+0xfe00b7e4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400b884:	0005883a 	mov	r2,zero
}
 400b888:	e037883a 	mov	sp,fp
 400b88c:	dfc00217 	ldw	ra,8(sp)
 400b890:	df000117 	ldw	fp,4(sp)
 400b894:	dc000017 	ldw	r16,0(sp)
 400b898:	dec00304 	addi	sp,sp,12
 400b89c:	f800283a 	ret

0400b8a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400b8a0:	defff604 	addi	sp,sp,-40
 400b8a4:	dfc00915 	stw	ra,36(sp)
 400b8a8:	df000815 	stw	fp,32(sp)
 400b8ac:	df000804 	addi	fp,sp,32
 400b8b0:	e13ffd15 	stw	r4,-12(fp)
 400b8b4:	e17ffe15 	stw	r5,-8(fp)
 400b8b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400b8bc:	00bfffc4 	movi	r2,-1
 400b8c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400b8c4:	00bffb44 	movi	r2,-19
 400b8c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400b8cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400b8d0:	e13ffd17 	ldw	r4,-12(fp)
 400b8d4:	01410074 	movhi	r5,1025
 400b8d8:	2977f504 	addi	r5,r5,-8236
 400b8dc:	400bbb40 	call	400bbb4 <alt_find_dev>
 400b8e0:	e0bff815 	stw	r2,-32(fp)
 400b8e4:	e0bff817 	ldw	r2,-32(fp)
 400b8e8:	1000051e 	bne	r2,zero,400b900 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400b8ec:	e13ffd17 	ldw	r4,-12(fp)
 400b8f0:	400bc440 	call	400bc44 <alt_find_file>
 400b8f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400b8f8:	00800044 	movi	r2,1
 400b8fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400b900:	e0bff817 	ldw	r2,-32(fp)
 400b904:	10002a26 	beq	r2,zero,400b9b0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400b908:	e13ff817 	ldw	r4,-32(fp)
 400b90c:	400bd580 	call	400bd58 <alt_get_fd>
 400b910:	e0bff915 	stw	r2,-28(fp)
 400b914:	e0bff917 	ldw	r2,-28(fp)
 400b918:	1000030e 	bge	r2,zero,400b928 <open+0x88>
    {
      status = index;
 400b91c:	e0bff917 	ldw	r2,-28(fp)
 400b920:	e0bffa15 	stw	r2,-24(fp)
 400b924:	00002406 	br	400b9b8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 400b928:	e13ff917 	ldw	r4,-28(fp)
 400b92c:	01400304 	movi	r5,12
 400b930:	40094f00 	call	40094f0 <__mulsi3>
 400b934:	00c10074 	movhi	r3,1025
 400b938:	18f37604 	addi	r3,r3,-12840
 400b93c:	10c5883a 	add	r2,r2,r3
 400b940:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400b944:	e0fffe17 	ldw	r3,-8(fp)
 400b948:	00900034 	movhi	r2,16384
 400b94c:	10bfffc4 	addi	r2,r2,-1
 400b950:	1886703a 	and	r3,r3,r2
 400b954:	e0bffc17 	ldw	r2,-16(fp)
 400b958:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400b95c:	e0bffb17 	ldw	r2,-20(fp)
 400b960:	1000051e 	bne	r2,zero,400b978 <open+0xd8>
 400b964:	e13ffc17 	ldw	r4,-16(fp)
 400b968:	400b7b00 	call	400b7b0 <alt_file_locked>
 400b96c:	e0bffa15 	stw	r2,-24(fp)
 400b970:	e0bffa17 	ldw	r2,-24(fp)
 400b974:	10001016 	blt	r2,zero,400b9b8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400b978:	e0bff817 	ldw	r2,-32(fp)
 400b97c:	10800317 	ldw	r2,12(r2)
 400b980:	10000826 	beq	r2,zero,400b9a4 <open+0x104>
 400b984:	e0bff817 	ldw	r2,-32(fp)
 400b988:	10800317 	ldw	r2,12(r2)
 400b98c:	e13ffc17 	ldw	r4,-16(fp)
 400b990:	e17ffd17 	ldw	r5,-12(fp)
 400b994:	e1bffe17 	ldw	r6,-8(fp)
 400b998:	e1ffff17 	ldw	r7,-4(fp)
 400b99c:	103ee83a 	callr	r2
 400b9a0:	00000106 	br	400b9a8 <open+0x108>
 400b9a4:	0005883a 	mov	r2,zero
 400b9a8:	e0bffa15 	stw	r2,-24(fp)
 400b9ac:	00000206 	br	400b9b8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400b9b0:	00bffb44 	movi	r2,-19
 400b9b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400b9b8:	e0bffa17 	ldw	r2,-24(fp)
 400b9bc:	1000080e 	bge	r2,zero,400b9e0 <open+0x140>
  {
    alt_release_fd (index);  
 400b9c0:	e13ff917 	ldw	r4,-28(fp)
 400b9c4:	400a29c0 	call	400a29c <alt_release_fd>
    ALT_ERRNO = -status;
 400b9c8:	400b7600 	call	400b760 <alt_get_errno>
 400b9cc:	e0fffa17 	ldw	r3,-24(fp)
 400b9d0:	00c7c83a 	sub	r3,zero,r3
 400b9d4:	10c00015 	stw	r3,0(r2)
    return -1;
 400b9d8:	00bfffc4 	movi	r2,-1
 400b9dc:	00000106 	br	400b9e4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 400b9e0:	e0bff917 	ldw	r2,-28(fp)
}
 400b9e4:	e037883a 	mov	sp,fp
 400b9e8:	dfc00117 	ldw	ra,4(sp)
 400b9ec:	df000017 	ldw	fp,0(sp)
 400b9f0:	dec00204 	addi	sp,sp,8
 400b9f4:	f800283a 	ret

0400b9f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400b9f8:	defffa04 	addi	sp,sp,-24
 400b9fc:	df000515 	stw	fp,20(sp)
 400ba00:	df000504 	addi	fp,sp,20
 400ba04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ba08:	0005303a 	rdctl	r2,status
 400ba0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ba10:	e0fffc17 	ldw	r3,-16(fp)
 400ba14:	00bfff84 	movi	r2,-2
 400ba18:	1884703a 	and	r2,r3,r2
 400ba1c:	1001703a 	wrctl	status,r2
  
  return context;
 400ba20:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400ba24:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400ba28:	e0bfff17 	ldw	r2,-4(fp)
 400ba2c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400ba30:	e0bffd17 	ldw	r2,-12(fp)
 400ba34:	10800017 	ldw	r2,0(r2)
 400ba38:	e0fffd17 	ldw	r3,-12(fp)
 400ba3c:	18c00117 	ldw	r3,4(r3)
 400ba40:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400ba44:	e0bffd17 	ldw	r2,-12(fp)
 400ba48:	10800117 	ldw	r2,4(r2)
 400ba4c:	e0fffd17 	ldw	r3,-12(fp)
 400ba50:	18c00017 	ldw	r3,0(r3)
 400ba54:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400ba58:	e0bffd17 	ldw	r2,-12(fp)
 400ba5c:	e0fffd17 	ldw	r3,-12(fp)
 400ba60:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400ba64:	e0bffd17 	ldw	r2,-12(fp)
 400ba68:	e0fffd17 	ldw	r3,-12(fp)
 400ba6c:	10c00015 	stw	r3,0(r2)
 400ba70:	e0bffb17 	ldw	r2,-20(fp)
 400ba74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ba78:	e0bffe17 	ldw	r2,-8(fp)
 400ba7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400ba80:	e037883a 	mov	sp,fp
 400ba84:	df000017 	ldw	fp,0(sp)
 400ba88:	dec00104 	addi	sp,sp,4
 400ba8c:	f800283a 	ret

0400ba90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400ba90:	defffb04 	addi	sp,sp,-20
 400ba94:	dfc00415 	stw	ra,16(sp)
 400ba98:	df000315 	stw	fp,12(sp)
 400ba9c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400baa0:	d0a00d17 	ldw	r2,-32716(gp)
 400baa4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400baa8:	d0a6b117 	ldw	r2,-25916(gp)
 400baac:	10800044 	addi	r2,r2,1
 400bab0:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400bab4:	00002e06 	br	400bb70 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400bab8:	e0bffd17 	ldw	r2,-12(fp)
 400babc:	10800017 	ldw	r2,0(r2)
 400bac0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400bac4:	e0bffd17 	ldw	r2,-12(fp)
 400bac8:	10800403 	ldbu	r2,16(r2)
 400bacc:	10803fcc 	andi	r2,r2,255
 400bad0:	10000426 	beq	r2,zero,400bae4 <alt_tick+0x54>
 400bad4:	d0a6b117 	ldw	r2,-25916(gp)
 400bad8:	1000021e 	bne	r2,zero,400bae4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400badc:	e0bffd17 	ldw	r2,-12(fp)
 400bae0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400bae4:	e0bffd17 	ldw	r2,-12(fp)
 400bae8:	10800217 	ldw	r2,8(r2)
 400baec:	d0e6b117 	ldw	r3,-25916(gp)
 400baf0:	18801d36 	bltu	r3,r2,400bb68 <alt_tick+0xd8>
 400baf4:	e0bffd17 	ldw	r2,-12(fp)
 400baf8:	10800403 	ldbu	r2,16(r2)
 400bafc:	10803fcc 	andi	r2,r2,255
 400bb00:	1000191e 	bne	r2,zero,400bb68 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400bb04:	e0bffd17 	ldw	r2,-12(fp)
 400bb08:	10c00317 	ldw	r3,12(r2)
 400bb0c:	e0bffd17 	ldw	r2,-12(fp)
 400bb10:	10800517 	ldw	r2,20(r2)
 400bb14:	1009883a 	mov	r4,r2
 400bb18:	183ee83a 	callr	r3
 400bb1c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400bb20:	e0bfff17 	ldw	r2,-4(fp)
 400bb24:	1000031e 	bne	r2,zero,400bb34 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400bb28:	e13ffd17 	ldw	r4,-12(fp)
 400bb2c:	400b9f80 	call	400b9f8 <alt_alarm_stop>
 400bb30:	00000d06 	br	400bb68 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400bb34:	e0bffd17 	ldw	r2,-12(fp)
 400bb38:	10c00217 	ldw	r3,8(r2)
 400bb3c:	e0bfff17 	ldw	r2,-4(fp)
 400bb40:	1887883a 	add	r3,r3,r2
 400bb44:	e0bffd17 	ldw	r2,-12(fp)
 400bb48:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400bb4c:	e0bffd17 	ldw	r2,-12(fp)
 400bb50:	10c00217 	ldw	r3,8(r2)
 400bb54:	d0a6b117 	ldw	r2,-25916(gp)
 400bb58:	1880032e 	bgeu	r3,r2,400bb68 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400bb5c:	e0bffd17 	ldw	r2,-12(fp)
 400bb60:	00c00044 	movi	r3,1
 400bb64:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400bb68:	e0bffe17 	ldw	r2,-8(fp)
 400bb6c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400bb70:	e0fffd17 	ldw	r3,-12(fp)
 400bb74:	d0a00d04 	addi	r2,gp,-32716
 400bb78:	18bfcf1e 	bne	r3,r2,400bab8 <__alt_data_end+0xfe00bab8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400bb7c:	0001883a 	nop
}
 400bb80:	e037883a 	mov	sp,fp
 400bb84:	dfc00117 	ldw	ra,4(sp)
 400bb88:	df000017 	ldw	fp,0(sp)
 400bb8c:	dec00204 	addi	sp,sp,8
 400bb90:	f800283a 	ret

0400bb94 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 400bb94:	deffff04 	addi	sp,sp,-4
 400bb98:	df000015 	stw	fp,0(sp)
 400bb9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400bba0:	000170fa 	wrctl	ienable,zero
}
 400bba4:	e037883a 	mov	sp,fp
 400bba8:	df000017 	ldw	fp,0(sp)
 400bbac:	dec00104 	addi	sp,sp,4
 400bbb0:	f800283a 	ret

0400bbb4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400bbb4:	defffa04 	addi	sp,sp,-24
 400bbb8:	dfc00515 	stw	ra,20(sp)
 400bbbc:	df000415 	stw	fp,16(sp)
 400bbc0:	df000404 	addi	fp,sp,16
 400bbc4:	e13ffe15 	stw	r4,-8(fp)
 400bbc8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400bbcc:	e0bfff17 	ldw	r2,-4(fp)
 400bbd0:	10800017 	ldw	r2,0(r2)
 400bbd4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400bbd8:	e13ffe17 	ldw	r4,-8(fp)
 400bbdc:	40005680 	call	4000568 <strlen>
 400bbe0:	10800044 	addi	r2,r2,1
 400bbe4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400bbe8:	00000d06 	br	400bc20 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400bbec:	e0bffc17 	ldw	r2,-16(fp)
 400bbf0:	10c00217 	ldw	r3,8(r2)
 400bbf4:	e0bffd17 	ldw	r2,-12(fp)
 400bbf8:	1809883a 	mov	r4,r3
 400bbfc:	e17ffe17 	ldw	r5,-8(fp)
 400bc00:	100d883a 	mov	r6,r2
 400bc04:	400be780 	call	400be78 <memcmp>
 400bc08:	1000021e 	bne	r2,zero,400bc14 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400bc0c:	e0bffc17 	ldw	r2,-16(fp)
 400bc10:	00000706 	br	400bc30 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400bc14:	e0bffc17 	ldw	r2,-16(fp)
 400bc18:	10800017 	ldw	r2,0(r2)
 400bc1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400bc20:	e0fffc17 	ldw	r3,-16(fp)
 400bc24:	e0bfff17 	ldw	r2,-4(fp)
 400bc28:	18bff01e 	bne	r3,r2,400bbec <__alt_data_end+0xfe00bbec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400bc2c:	0005883a 	mov	r2,zero
}
 400bc30:	e037883a 	mov	sp,fp
 400bc34:	dfc00117 	ldw	ra,4(sp)
 400bc38:	df000017 	ldw	fp,0(sp)
 400bc3c:	dec00204 	addi	sp,sp,8
 400bc40:	f800283a 	ret

0400bc44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400bc44:	defffb04 	addi	sp,sp,-20
 400bc48:	dfc00415 	stw	ra,16(sp)
 400bc4c:	df000315 	stw	fp,12(sp)
 400bc50:	df000304 	addi	fp,sp,12
 400bc54:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400bc58:	00810074 	movhi	r2,1025
 400bc5c:	10b7f304 	addi	r2,r2,-8244
 400bc60:	10800017 	ldw	r2,0(r2)
 400bc64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400bc68:	00003106 	br	400bd30 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 400bc6c:	e0bffd17 	ldw	r2,-12(fp)
 400bc70:	10800217 	ldw	r2,8(r2)
 400bc74:	1009883a 	mov	r4,r2
 400bc78:	40005680 	call	4000568 <strlen>
 400bc7c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400bc80:	e0bffd17 	ldw	r2,-12(fp)
 400bc84:	10c00217 	ldw	r3,8(r2)
 400bc88:	e0bffe17 	ldw	r2,-8(fp)
 400bc8c:	10bfffc4 	addi	r2,r2,-1
 400bc90:	1885883a 	add	r2,r3,r2
 400bc94:	10800003 	ldbu	r2,0(r2)
 400bc98:	10803fcc 	andi	r2,r2,255
 400bc9c:	1080201c 	xori	r2,r2,128
 400bca0:	10bfe004 	addi	r2,r2,-128
 400bca4:	10800bd8 	cmpnei	r2,r2,47
 400bca8:	1000031e 	bne	r2,zero,400bcb8 <alt_find_file+0x74>
    {
      len -= 1;
 400bcac:	e0bffe17 	ldw	r2,-8(fp)
 400bcb0:	10bfffc4 	addi	r2,r2,-1
 400bcb4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400bcb8:	e0bffe17 	ldw	r2,-8(fp)
 400bcbc:	e0ffff17 	ldw	r3,-4(fp)
 400bcc0:	1885883a 	add	r2,r3,r2
 400bcc4:	10800003 	ldbu	r2,0(r2)
 400bcc8:	10803fcc 	andi	r2,r2,255
 400bccc:	1080201c 	xori	r2,r2,128
 400bcd0:	10bfe004 	addi	r2,r2,-128
 400bcd4:	10800be0 	cmpeqi	r2,r2,47
 400bcd8:	1000081e 	bne	r2,zero,400bcfc <alt_find_file+0xb8>
 400bcdc:	e0bffe17 	ldw	r2,-8(fp)
 400bce0:	e0ffff17 	ldw	r3,-4(fp)
 400bce4:	1885883a 	add	r2,r3,r2
 400bce8:	10800003 	ldbu	r2,0(r2)
 400bcec:	10803fcc 	andi	r2,r2,255
 400bcf0:	1080201c 	xori	r2,r2,128
 400bcf4:	10bfe004 	addi	r2,r2,-128
 400bcf8:	10000a1e 	bne	r2,zero,400bd24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 400bcfc:	e0bffd17 	ldw	r2,-12(fp)
 400bd00:	10c00217 	ldw	r3,8(r2)
 400bd04:	e0bffe17 	ldw	r2,-8(fp)
 400bd08:	1809883a 	mov	r4,r3
 400bd0c:	e17fff17 	ldw	r5,-4(fp)
 400bd10:	100d883a 	mov	r6,r2
 400bd14:	400be780 	call	400be78 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400bd18:	1000021e 	bne	r2,zero,400bd24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400bd1c:	e0bffd17 	ldw	r2,-12(fp)
 400bd20:	00000806 	br	400bd44 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 400bd24:	e0bffd17 	ldw	r2,-12(fp)
 400bd28:	10800017 	ldw	r2,0(r2)
 400bd2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400bd30:	e0fffd17 	ldw	r3,-12(fp)
 400bd34:	00810074 	movhi	r2,1025
 400bd38:	10b7f304 	addi	r2,r2,-8244
 400bd3c:	18bfcb1e 	bne	r3,r2,400bc6c <__alt_data_end+0xfe00bc6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400bd40:	0005883a 	mov	r2,zero
}
 400bd44:	e037883a 	mov	sp,fp
 400bd48:	dfc00117 	ldw	ra,4(sp)
 400bd4c:	df000017 	ldw	fp,0(sp)
 400bd50:	dec00204 	addi	sp,sp,8
 400bd54:	f800283a 	ret

0400bd58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400bd58:	defffa04 	addi	sp,sp,-24
 400bd5c:	dfc00515 	stw	ra,20(sp)
 400bd60:	df000415 	stw	fp,16(sp)
 400bd64:	dc000315 	stw	r16,12(sp)
 400bd68:	df000304 	addi	fp,sp,12
 400bd6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 400bd70:	00bffa04 	movi	r2,-24
 400bd74:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400bd78:	e03ffd15 	stw	zero,-12(fp)
 400bd7c:	00002106 	br	400be04 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 400bd80:	04010074 	movhi	r16,1025
 400bd84:	84337604 	addi	r16,r16,-12840
 400bd88:	e0bffd17 	ldw	r2,-12(fp)
 400bd8c:	1009883a 	mov	r4,r2
 400bd90:	01400304 	movi	r5,12
 400bd94:	40094f00 	call	40094f0 <__mulsi3>
 400bd98:	8085883a 	add	r2,r16,r2
 400bd9c:	10800017 	ldw	r2,0(r2)
 400bda0:	1000151e 	bne	r2,zero,400bdf8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 400bda4:	04010074 	movhi	r16,1025
 400bda8:	84337604 	addi	r16,r16,-12840
 400bdac:	e0bffd17 	ldw	r2,-12(fp)
 400bdb0:	1009883a 	mov	r4,r2
 400bdb4:	01400304 	movi	r5,12
 400bdb8:	40094f00 	call	40094f0 <__mulsi3>
 400bdbc:	8085883a 	add	r2,r16,r2
 400bdc0:	e0ffff17 	ldw	r3,-4(fp)
 400bdc4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400bdc8:	00810074 	movhi	r2,1025
 400bdcc:	10b7f704 	addi	r2,r2,-8228
 400bdd0:	10c00017 	ldw	r3,0(r2)
 400bdd4:	e0bffd17 	ldw	r2,-12(fp)
 400bdd8:	1880040e 	bge	r3,r2,400bdec <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 400bddc:	00810074 	movhi	r2,1025
 400bde0:	10b7f704 	addi	r2,r2,-8228
 400bde4:	e0fffd17 	ldw	r3,-12(fp)
 400bde8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 400bdec:	e0bffd17 	ldw	r2,-12(fp)
 400bdf0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400bdf4:	00000606 	br	400be10 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400bdf8:	e0bffd17 	ldw	r2,-12(fp)
 400bdfc:	10800044 	addi	r2,r2,1
 400be00:	e0bffd15 	stw	r2,-12(fp)
 400be04:	e0bffd17 	ldw	r2,-12(fp)
 400be08:	10800810 	cmplti	r2,r2,32
 400be0c:	103fdc1e 	bne	r2,zero,400bd80 <__alt_data_end+0xfe00bd80>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400be10:	e0bffe17 	ldw	r2,-8(fp)
}
 400be14:	e037883a 	mov	sp,fp
 400be18:	dfc00217 	ldw	ra,8(sp)
 400be1c:	df000117 	ldw	fp,4(sp)
 400be20:	dc000017 	ldw	r16,0(sp)
 400be24:	dec00304 	addi	sp,sp,12
 400be28:	f800283a 	ret

0400be2c <atexit>:
 400be2c:	200b883a 	mov	r5,r4
 400be30:	000d883a 	mov	r6,zero
 400be34:	0009883a 	mov	r4,zero
 400be38:	000f883a 	mov	r7,zero
 400be3c:	400bef41 	jmpi	400bef4 <__register_exitproc>

0400be40 <exit>:
 400be40:	defffe04 	addi	sp,sp,-8
 400be44:	000b883a 	mov	r5,zero
 400be48:	dc000015 	stw	r16,0(sp)
 400be4c:	dfc00115 	stw	ra,4(sp)
 400be50:	2021883a 	mov	r16,r4
 400be54:	400c0240 	call	400c024 <__call_exitprocs>
 400be58:	00810074 	movhi	r2,1025
 400be5c:	10b7ee04 	addi	r2,r2,-8264
 400be60:	11000017 	ldw	r4,0(r2)
 400be64:	20800f17 	ldw	r2,60(r4)
 400be68:	10000126 	beq	r2,zero,400be70 <exit+0x30>
 400be6c:	103ee83a 	callr	r2
 400be70:	8009883a 	mov	r4,r16
 400be74:	400c1c40 	call	400c1c4 <_exit>

0400be78 <memcmp>:
 400be78:	01c000c4 	movi	r7,3
 400be7c:	3980192e 	bgeu	r7,r6,400bee4 <memcmp+0x6c>
 400be80:	2904b03a 	or	r2,r5,r4
 400be84:	11c4703a 	and	r2,r2,r7
 400be88:	10000f26 	beq	r2,zero,400bec8 <memcmp+0x50>
 400be8c:	20c00003 	ldbu	r3,0(r4)
 400be90:	28800003 	ldbu	r2,0(r5)
 400be94:	1880151e 	bne	r3,r2,400beec <memcmp+0x74>
 400be98:	31bfff84 	addi	r6,r6,-2
 400be9c:	01ffffc4 	movi	r7,-1
 400bea0:	00000406 	br	400beb4 <memcmp+0x3c>
 400bea4:	20c00003 	ldbu	r3,0(r4)
 400bea8:	28800003 	ldbu	r2,0(r5)
 400beac:	31bfffc4 	addi	r6,r6,-1
 400beb0:	18800e1e 	bne	r3,r2,400beec <memcmp+0x74>
 400beb4:	21000044 	addi	r4,r4,1
 400beb8:	29400044 	addi	r5,r5,1
 400bebc:	31fff91e 	bne	r6,r7,400bea4 <__alt_data_end+0xfe00bea4>
 400bec0:	0005883a 	mov	r2,zero
 400bec4:	f800283a 	ret
 400bec8:	20c00017 	ldw	r3,0(r4)
 400becc:	28800017 	ldw	r2,0(r5)
 400bed0:	1880041e 	bne	r3,r2,400bee4 <memcmp+0x6c>
 400bed4:	31bfff04 	addi	r6,r6,-4
 400bed8:	21000104 	addi	r4,r4,4
 400bedc:	29400104 	addi	r5,r5,4
 400bee0:	39bff936 	bltu	r7,r6,400bec8 <__alt_data_end+0xfe00bec8>
 400bee4:	303fe91e 	bne	r6,zero,400be8c <__alt_data_end+0xfe00be8c>
 400bee8:	003ff506 	br	400bec0 <__alt_data_end+0xfe00bec0>
 400beec:	1885c83a 	sub	r2,r3,r2
 400bef0:	f800283a 	ret

0400bef4 <__register_exitproc>:
 400bef4:	defffa04 	addi	sp,sp,-24
 400bef8:	00810074 	movhi	r2,1025
 400befc:	10b7ee04 	addi	r2,r2,-8264
 400bf00:	dc000315 	stw	r16,12(sp)
 400bf04:	14000017 	ldw	r16,0(r2)
 400bf08:	dc400415 	stw	r17,16(sp)
 400bf0c:	dfc00515 	stw	ra,20(sp)
 400bf10:	80805217 	ldw	r2,328(r16)
 400bf14:	2023883a 	mov	r17,r4
 400bf18:	10003e26 	beq	r2,zero,400c014 <__register_exitproc+0x120>
 400bf1c:	10c00117 	ldw	r3,4(r2)
 400bf20:	020007c4 	movi	r8,31
 400bf24:	40c0180e 	bge	r8,r3,400bf88 <__register_exitproc+0x94>
 400bf28:	00800034 	movhi	r2,0
 400bf2c:	10800004 	addi	r2,r2,0
 400bf30:	1000061e 	bne	r2,zero,400bf4c <__register_exitproc+0x58>
 400bf34:	00bfffc4 	movi	r2,-1
 400bf38:	dfc00517 	ldw	ra,20(sp)
 400bf3c:	dc400417 	ldw	r17,16(sp)
 400bf40:	dc000317 	ldw	r16,12(sp)
 400bf44:	dec00604 	addi	sp,sp,24
 400bf48:	f800283a 	ret
 400bf4c:	01006404 	movi	r4,400
 400bf50:	d9400015 	stw	r5,0(sp)
 400bf54:	d9800115 	stw	r6,4(sp)
 400bf58:	d9c00215 	stw	r7,8(sp)
 400bf5c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 400bf60:	d9400017 	ldw	r5,0(sp)
 400bf64:	d9800117 	ldw	r6,4(sp)
 400bf68:	d9c00217 	ldw	r7,8(sp)
 400bf6c:	103ff126 	beq	r2,zero,400bf34 <__alt_data_end+0xfe00bf34>
 400bf70:	80c05217 	ldw	r3,328(r16)
 400bf74:	10000115 	stw	zero,4(r2)
 400bf78:	10c00015 	stw	r3,0(r2)
 400bf7c:	80805215 	stw	r2,328(r16)
 400bf80:	10006215 	stw	zero,392(r2)
 400bf84:	10006315 	stw	zero,396(r2)
 400bf88:	10c00117 	ldw	r3,4(r2)
 400bf8c:	88000d1e 	bne	r17,zero,400bfc4 <__register_exitproc+0xd0>
 400bf90:	19000084 	addi	r4,r3,2
 400bf94:	2109883a 	add	r4,r4,r4
 400bf98:	18c00044 	addi	r3,r3,1
 400bf9c:	2109883a 	add	r4,r4,r4
 400bfa0:	1109883a 	add	r4,r2,r4
 400bfa4:	10c00115 	stw	r3,4(r2)
 400bfa8:	0005883a 	mov	r2,zero
 400bfac:	21400015 	stw	r5,0(r4)
 400bfb0:	dfc00517 	ldw	ra,20(sp)
 400bfb4:	dc400417 	ldw	r17,16(sp)
 400bfb8:	dc000317 	ldw	r16,12(sp)
 400bfbc:	dec00604 	addi	sp,sp,24
 400bfc0:	f800283a 	ret
 400bfc4:	02400044 	movi	r9,1
 400bfc8:	12806217 	ldw	r10,392(r2)
 400bfcc:	48d2983a 	sll	r9,r9,r3
 400bfd0:	19000804 	addi	r4,r3,32
 400bfd4:	18d1883a 	add	r8,r3,r3
 400bfd8:	2109883a 	add	r4,r4,r4
 400bfdc:	4211883a 	add	r8,r8,r8
 400bfe0:	2109883a 	add	r4,r4,r4
 400bfe4:	1109883a 	add	r4,r2,r4
 400bfe8:	1211883a 	add	r8,r2,r8
 400bfec:	5254b03a 	or	r10,r10,r9
 400bff0:	21c02215 	stw	r7,136(r4)
 400bff4:	41802215 	stw	r6,136(r8)
 400bff8:	12806215 	stw	r10,392(r2)
 400bffc:	01000084 	movi	r4,2
 400c000:	893fe31e 	bne	r17,r4,400bf90 <__alt_data_end+0xfe00bf90>
 400c004:	11006317 	ldw	r4,396(r2)
 400c008:	2252b03a 	or	r9,r4,r9
 400c00c:	12406315 	stw	r9,396(r2)
 400c010:	003fdf06 	br	400bf90 <__alt_data_end+0xfe00bf90>
 400c014:	00810074 	movhi	r2,1025
 400c018:	10beea04 	addi	r2,r2,-1112
 400c01c:	80805215 	stw	r2,328(r16)
 400c020:	003fbe06 	br	400bf1c <__alt_data_end+0xfe00bf1c>

0400c024 <__call_exitprocs>:
 400c024:	00810074 	movhi	r2,1025
 400c028:	10b7ee04 	addi	r2,r2,-8264
 400c02c:	10800017 	ldw	r2,0(r2)
 400c030:	defff304 	addi	sp,sp,-52
 400c034:	df000b15 	stw	fp,44(sp)
 400c038:	d8800015 	stw	r2,0(sp)
 400c03c:	10805204 	addi	r2,r2,328
 400c040:	dd400815 	stw	r21,32(sp)
 400c044:	dfc00c15 	stw	ra,48(sp)
 400c048:	ddc00a15 	stw	r23,40(sp)
 400c04c:	dd800915 	stw	r22,36(sp)
 400c050:	dd000715 	stw	r20,28(sp)
 400c054:	dcc00615 	stw	r19,24(sp)
 400c058:	dc800515 	stw	r18,20(sp)
 400c05c:	dc400415 	stw	r17,16(sp)
 400c060:	dc000315 	stw	r16,12(sp)
 400c064:	d9000115 	stw	r4,4(sp)
 400c068:	2839883a 	mov	fp,r5
 400c06c:	d8800215 	stw	r2,8(sp)
 400c070:	057fffc4 	movi	r21,-1
 400c074:	d8800017 	ldw	r2,0(sp)
 400c078:	ddc00217 	ldw	r23,8(sp)
 400c07c:	14805217 	ldw	r18,328(r2)
 400c080:	90001726 	beq	r18,zero,400c0e0 <__call_exitprocs+0xbc>
 400c084:	94400117 	ldw	r17,4(r18)
 400c088:	8c3fffc4 	addi	r16,r17,-1
 400c08c:	80001116 	blt	r16,zero,400c0d4 <__call_exitprocs+0xb0>
 400c090:	8c400044 	addi	r17,r17,1
 400c094:	8427883a 	add	r19,r16,r16
 400c098:	8c63883a 	add	r17,r17,r17
 400c09c:	95802204 	addi	r22,r18,136
 400c0a0:	9ce7883a 	add	r19,r19,r19
 400c0a4:	8c63883a 	add	r17,r17,r17
 400c0a8:	b4e7883a 	add	r19,r22,r19
 400c0ac:	9463883a 	add	r17,r18,r17
 400c0b0:	e0001726 	beq	fp,zero,400c110 <__call_exitprocs+0xec>
 400c0b4:	8c87c83a 	sub	r3,r17,r18
 400c0b8:	b0c7883a 	add	r3,r22,r3
 400c0bc:	18c01e17 	ldw	r3,120(r3)
 400c0c0:	1f001326 	beq	r3,fp,400c110 <__call_exitprocs+0xec>
 400c0c4:	843fffc4 	addi	r16,r16,-1
 400c0c8:	9cffff04 	addi	r19,r19,-4
 400c0cc:	8c7fff04 	addi	r17,r17,-4
 400c0d0:	857ff71e 	bne	r16,r21,400c0b0 <__alt_data_end+0xfe00c0b0>
 400c0d4:	00800034 	movhi	r2,0
 400c0d8:	10800004 	addi	r2,r2,0
 400c0dc:	10002a1e 	bne	r2,zero,400c188 <__call_exitprocs+0x164>
 400c0e0:	dfc00c17 	ldw	ra,48(sp)
 400c0e4:	df000b17 	ldw	fp,44(sp)
 400c0e8:	ddc00a17 	ldw	r23,40(sp)
 400c0ec:	dd800917 	ldw	r22,36(sp)
 400c0f0:	dd400817 	ldw	r21,32(sp)
 400c0f4:	dd000717 	ldw	r20,28(sp)
 400c0f8:	dcc00617 	ldw	r19,24(sp)
 400c0fc:	dc800517 	ldw	r18,20(sp)
 400c100:	dc400417 	ldw	r17,16(sp)
 400c104:	dc000317 	ldw	r16,12(sp)
 400c108:	dec00d04 	addi	sp,sp,52
 400c10c:	f800283a 	ret
 400c110:	91000117 	ldw	r4,4(r18)
 400c114:	88c00017 	ldw	r3,0(r17)
 400c118:	213fffc4 	addi	r4,r4,-1
 400c11c:	24001526 	beq	r4,r16,400c174 <__call_exitprocs+0x150>
 400c120:	88000015 	stw	zero,0(r17)
 400c124:	183fe726 	beq	r3,zero,400c0c4 <__alt_data_end+0xfe00c0c4>
 400c128:	00800044 	movi	r2,1
 400c12c:	1408983a 	sll	r4,r2,r16
 400c130:	91406217 	ldw	r5,392(r18)
 400c134:	95000117 	ldw	r20,4(r18)
 400c138:	214a703a 	and	r5,r4,r5
 400c13c:	28000b26 	beq	r5,zero,400c16c <__call_exitprocs+0x148>
 400c140:	91406317 	ldw	r5,396(r18)
 400c144:	2148703a 	and	r4,r4,r5
 400c148:	20000c1e 	bne	r4,zero,400c17c <__call_exitprocs+0x158>
 400c14c:	99400017 	ldw	r5,0(r19)
 400c150:	d9000117 	ldw	r4,4(sp)
 400c154:	183ee83a 	callr	r3
 400c158:	90c00117 	ldw	r3,4(r18)
 400c15c:	1d3fc51e 	bne	r3,r20,400c074 <__alt_data_end+0xfe00c074>
 400c160:	b8c00017 	ldw	r3,0(r23)
 400c164:	1cbfd726 	beq	r3,r18,400c0c4 <__alt_data_end+0xfe00c0c4>
 400c168:	003fc206 	br	400c074 <__alt_data_end+0xfe00c074>
 400c16c:	183ee83a 	callr	r3
 400c170:	003ff906 	br	400c158 <__alt_data_end+0xfe00c158>
 400c174:	94000115 	stw	r16,4(r18)
 400c178:	003fea06 	br	400c124 <__alt_data_end+0xfe00c124>
 400c17c:	99000017 	ldw	r4,0(r19)
 400c180:	183ee83a 	callr	r3
 400c184:	003ff406 	br	400c158 <__alt_data_end+0xfe00c158>
 400c188:	90c00117 	ldw	r3,4(r18)
 400c18c:	1800071e 	bne	r3,zero,400c1ac <__call_exitprocs+0x188>
 400c190:	90c00017 	ldw	r3,0(r18)
 400c194:	18000926 	beq	r3,zero,400c1bc <__call_exitprocs+0x198>
 400c198:	9009883a 	mov	r4,r18
 400c19c:	b8c00015 	stw	r3,0(r23)
 400c1a0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 400c1a4:	bc800017 	ldw	r18,0(r23)
 400c1a8:	003fb506 	br	400c080 <__alt_data_end+0xfe00c080>
 400c1ac:	90c00017 	ldw	r3,0(r18)
 400c1b0:	902f883a 	mov	r23,r18
 400c1b4:	1825883a 	mov	r18,r3
 400c1b8:	003fb106 	br	400c080 <__alt_data_end+0xfe00c080>
 400c1bc:	0007883a 	mov	r3,zero
 400c1c0:	003ffb06 	br	400c1b0 <__alt_data_end+0xfe00c1b0>

0400c1c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400c1c4:	defffc04 	addi	sp,sp,-16
 400c1c8:	df000315 	stw	fp,12(sp)
 400c1cc:	df000304 	addi	fp,sp,12
 400c1d0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400c1d4:	0001883a 	nop
 400c1d8:	e0bfff17 	ldw	r2,-4(fp)
 400c1dc:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 400c1e0:	e0bffd17 	ldw	r2,-12(fp)
 400c1e4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400c1e8:	e0bffe17 	ldw	r2,-8(fp)
 400c1ec:	10000226 	beq	r2,zero,400c1f8 <_exit+0x34>
    ALT_SIM_FAIL();
 400c1f0:	002af070 	cmpltui	zero,zero,43969
 400c1f4:	00000106 	br	400c1fc <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 400c1f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400c1fc:	003fff06 	br	400c1fc <__alt_data_end+0xfe00c1fc>
